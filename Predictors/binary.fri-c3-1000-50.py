#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f NN -target binaryClass fri-c3-1000-50.csv -o fri-c3-1000-50_NN.py -nsamples 0 --yes -nsamples 0 -e 20
# Total compiler execution time: 0:24:41.00. Finished on: Sep-03-2020 17:18:02.
# This source code requires Python 3.
#
"""
Classifier Type:                     Neural Network
System Type:                         Binary classifier
Training/Validation Split:           50:50%
Best-guess accuracy:                 55.50%
Training accuracy:                   86.20% (431/500 correct)
Validation accuracy:                 86.60% (433/500 correct)
Overall Model accuracy:              86.40% (864/1000 correct)
Overall Improvement over best guess: 30.90% (of possible 44.5%)
Model capacity (MEC):                151 bits
Generalization ratio:                5.72 bits/bit
Model efficiency:                    0.20%/parameter
System behavior
True Negatives:                      49.60% (496/1000)
True Positives:                      36.80% (368/1000)
False Negatives:                     7.70% (77/1000)
False Positives:                     5.90% (59/1000)
True Pos. Rate/Sensitivity/Recall:   0.83
True Neg. Rate/Specificity:          0.89
Precision:                           0.86
F-1 Measure:                         0.84
False Negative Rate/Miss Rate:       0.17
Critical Success Index:              0.73
Confusion Matrix:
 [49.60% 5.90%]
 [7.70% 36.80%]
Overfitting:                         No
Note: Labels have been remapped to 'N'=0, 'P'=1.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "fri-c3-1000-50.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 50
n_classes = 2

mappings = []
list_of_cols_to_normalize = []

transform_true = True

def column_norm(column,mappings):
    listy = []
    for i,val in enumerate(column.reshape(-1)):
        if not (val in mappings):
            mappings[val] = int(max(mappings.values())) + 1
        listy.append(mappings[val])
    return np.array(listy)

def Normalize(data_arr):
    if list_of_cols_to_normalize:
        for i,mapping in zip(list_of_cols_to_normalize, mappings):
            if i >= data_arr.shape[1]:
                break
            col = data_arr[:, i]
            normcol = column_norm(col,mapping)
            data_arr[:, i] = normcol
        return data_arr
    else:
        return data_arr

def transform(X):
    mean = None
    components = None
    whiten = None
    explained_variance = None
    if (transform_true):
        mean = np.array([-0.013802064285714292, -0.014452285714285713, -0.011375144285714303, 0.017512582857142866, -0.015077964285714306, 0.020569708571428542, 0.03620218714285711, -0.01507735142857139, 0.011067245714285703, 0.013889302857142849, 0.0024570557142857114, -0.001780648571428558, 0.04574977571428586, 0.009233298571428575, -0.0014362214285714215, -0.03068494285714288, 0.02872892428571427, 0.015875061428571417, 0.01504562000000003, 0.013042390000000017, 0.004924888571428574, 0.0032026199999999725, -0.0008477371428571791, 0.010976328571428553, 0.01102183142857142, -0.03106211285714287, -0.05913029571428571, -0.00018389142857144007, 0.02229582857142855, 0.011803389999999983, -0.029401362857142864, -0.003495884285714317, -0.010875131428571466, 0.019911827142857136, 0.009302650000000016, 0.020393255714285723, -0.009300738571428572, 0.01923045, -0.03598835, -0.010972348571428578, -0.03108089571428572, -0.013294974285714295, 0.01712473, 0.030977224285714314, -0.05736724285714282, -0.026071015714285738, 0.011261309999999932, 0.008667417142857157, -0.006503158571428574, -0.029703281428571406])
        components = np.array([array([ 4.36140267e-01,  4.56299371e-01,  4.93050687e-01,  2.20314771e-01,
        5.14969914e-01, -4.54020000e-02, -1.50689791e-02, -3.36304846e-02,
       -1.24514698e-03, -5.47663763e-02,  4.66344307e-04,  1.97307998e-02,
        1.94759712e-03,  7.60419236e-03, -4.05598895e-02,  2.46992441e-02,
        1.25475693e-02,  2.33504695e-02,  4.35567835e-02, -3.30540457e-02,
       -1.42178162e-02,  2.72234934e-02, -2.10332188e-02, -6.29213107e-03,
        1.75631549e-02,  3.25992412e-02,  3.05391159e-02, -3.33407499e-02,
       -1.24671753e-02, -3.25740846e-02,  4.49142785e-02,  1.46776455e-02,
       -5.17275891e-02, -2.85695813e-02,  3.54496102e-02,  1.69318362e-02,
       -1.56782846e-02,  4.38032728e-02, -1.21433543e-02,  5.54516005e-02,
       -5.93561605e-02,  3.89936444e-02, -6.48665522e-02,  9.42436160e-03,
        2.22853333e-02,  5.08529174e-02,  1.35676807e-02, -1.47558482e-02,
        1.11096644e-03, -1.95941507e-02]), array([ 0.33737606,  0.31445728, -0.18985009, -0.54936958, -0.1057396 ,
        0.10358076,  0.00841857,  0.18993429,  0.00080795, -0.04832773,
        0.01431966, -0.09873944, -0.10178521, -0.00728059,  0.02677502,
        0.13000954, -0.01188741,  0.0480128 ,  0.03151162,  0.06128718,
        0.0016993 , -0.14092515,  0.17242352,  0.25412934,  0.11095615,
        0.06132467, -0.03892719,  0.06494612,  0.05549194, -0.19670045,
        0.00703039,  0.16838372,  0.08561862,  0.14823122, -0.10135426,
        0.16140311, -0.05740152, -0.07787467,  0.08118511, -0.02750756,
        0.04856235,  0.09131173,  0.02133162,  0.05608695,  0.09806286,
       -0.06281465,  0.11037373, -0.11689578, -0.02074192,  0.03530923]), array([-0.02944816, -0.01571249,  0.04650523,  0.0559967 ,  0.01803454,
       -0.14283291,  0.13852003, -0.03149972, -0.44257584,  0.03500183,
        0.01207095, -0.18799431, -0.17392528,  0.10395479,  0.0913047 ,
       -0.25318484, -0.1059977 ,  0.25826126, -0.27399592, -0.02069545,
        0.26371269, -0.07432876,  0.08643281,  0.05776941, -0.20028031,
        0.05783428,  0.08217278,  0.14787903,  0.07784677,  0.12363937,
        0.0456449 ,  0.11009082,  0.01395313,  0.12922338,  0.09188533,
       -0.01455236, -0.06374069, -0.07656654,  0.1558792 , -0.01304478,
        0.09406382,  0.09516018, -0.12888566, -0.23158289, -0.12079404,
        0.13087463,  0.21474697, -0.08029859,  0.14107143,  0.08594041]), array([ 0.09811665,  0.09845344, -0.02306819, -0.11226187, -0.00129868,
       -0.10226311,  0.09144109,  0.00971191,  0.00503683,  0.07126303,
        0.00470173, -0.16415606, -0.32978674,  0.12956136,  0.17149799,
        0.10657561, -0.03796905, -0.14696031,  0.0934739 ,  0.09540387,
       -0.31305886,  0.27350971, -0.20107359, -0.15783649, -0.0703574 ,
       -0.00040559,  0.19914066,  0.00371499,  0.09221854,  0.0649246 ,
       -0.36712415, -0.06156414,  0.11834137,  0.03940615, -0.03478881,
       -0.15165688,  0.01035235, -0.06564171,  0.01802392, -0.18953873,
        0.12787039,  0.04804434, -0.06024677, -0.14435921, -0.13218788,
       -0.14245707, -0.06179895,  0.24086482,  0.21699119, -0.0710384 ]), array([ 1.22873048e-01,  1.01884284e-01, -8.36987200e-02, -2.21213594e-01,
       -3.57284639e-02, -4.88672509e-02, -8.49810347e-02,  2.17060173e-01,
       -1.62475216e-01,  3.65815997e-02, -1.38547970e-01,  4.23287045e-03,
        1.00911437e-01, -5.89237780e-02,  1.61737141e-01, -1.44106647e-01,
        2.13967032e-03,  1.42441036e-01, -1.06997691e-01,  8.18142606e-02,
       -5.11656468e-02,  1.20218841e-01,  6.70894636e-02, -2.34543419e-01,
       -2.63687907e-01, -1.57544872e-01,  1.05484964e-01, -2.00899878e-01,
        1.33309654e-01,  1.25414323e-01,  7.40784628e-02, -4.31358639e-02,
        5.05992501e-02, -1.29357557e-01,  4.05836313e-01,  2.31802150e-01,
        4.90487500e-02, -1.62523810e-02, -2.33197080e-01,  9.06780149e-02,
       -1.01907026e-01, -2.15157383e-01,  3.68459190e-04,  1.00374097e-01,
        4.26790560e-02,  2.40979813e-02, -1.11856261e-01,  9.54545612e-02,
       -1.48666156e-01, -1.88308670e-01]), array([ 0.01644269,  0.03232181, -0.03532591, -0.08511657, -0.02882606,
       -0.2575773 ,  0.12419081, -0.18226533, -0.11931415,  0.06477899,
       -0.12067398,  0.06957974, -0.02092373,  0.14915077, -0.20695008,
       -0.05900174, -0.11297075, -0.02867321, -0.0340927 , -0.06016706,
        0.02125755, -0.08344812, -0.01425245,  0.01146536, -0.1640084 ,
        0.16099083,  0.0358933 ,  0.11483664, -0.07947566, -0.2788995 ,
       -0.08429955,  0.05213197,  0.22479348, -0.24767254, -0.01563884,
       -0.12633905,  0.298232  ,  0.0650578 , -0.21454839, -0.21458312,
       -0.29777831,  0.08291347, -0.07647269,  0.34206212, -0.15602248,
       -0.07798365,  0.03116891, -0.09983391, -0.07730972,  0.03368549]), array([ 0.04008983,  0.02174897, -0.03039615, -0.05588225, -0.00583795,
       -0.05610396, -0.14148853, -0.10087425,  0.10448936, -0.20556983,
        0.19828395, -0.03305171, -0.03360279, -0.0249395 ,  0.01390546,
       -0.11116081, -0.25705485, -0.13328692,  0.10579925, -0.10573383,
        0.0812993 , -0.33672861,  0.19458707, -0.04925114, -0.22938041,
        0.17520471,  0.00349382, -0.18101564,  0.12423167,  0.14829755,
       -0.19280802,  0.12928741, -0.17169722, -0.25545541,  0.11899724,
       -0.0448419 , -0.04565094,  0.15864916,  0.26902281, -0.06202347,
       -0.04586138,  0.15238821,  0.27500849, -0.02408125,  0.04732212,
       -0.0481204 , -0.09386359,  0.22163266, -0.01257868, -0.01181695]), array([ 0.01835068,  0.04148914, -0.02051546, -0.06995835, -0.0260037 ,
        0.24924042,  0.11007257, -0.07329597, -0.16699315,  0.02610995,
       -0.09885849,  0.06823415, -0.02041558, -0.00853929, -0.03978544,
       -0.20414849, -0.30490135, -0.13541745,  0.17569614,  0.09906272,
        0.02173164,  0.15840875,  0.06657933, -0.07785957,  0.01783484,
        0.28188727,  0.0821438 ,  0.21184215, -0.24253312,  0.06366574,
        0.12405674, -0.02122078, -0.04981293, -0.00237088, -0.23379723,
        0.16720354, -0.03937636,  0.17066469, -0.01324906, -0.14617199,
       -0.04654897, -0.13332584, -0.00339319, -0.1291806 ,  0.15045915,
        0.26217804, -0.22156168, -0.01264064,  0.06176482, -0.33018921]), array([ 0.01812224,  0.02577163, -0.00406148, -0.01797061,  0.00708951,
        0.20655393,  0.34827435, -0.10575896,  0.02079399, -0.01151594,
        0.08199129, -0.30485179,  0.21568051, -0.17727443,  0.03925423,
       -0.14772669,  0.15818567,  0.18295935, -0.11276713,  0.22214109,
       -0.05742389, -0.04867479, -0.03338325,  0.08043857, -0.02333091,
        0.04401726, -0.22861427, -0.21626761,  0.06292944, -0.03447987,
       -0.07646054, -0.13495861, -0.10790097,  0.04095997, -0.06862992,
       -0.13178799, -0.23652089,  0.16994723,  0.03950702, -0.23149865,
       -0.21448337, -0.08455411, -0.13020439,  0.23327308, -0.08492935,
       -0.01297845,  0.04786279,  0.15715289,  0.12055956, -0.0927529 ]), array([-0.02222837,  0.00254836,  0.05673454,  0.08019459,  0.02776576,
       -0.15633143, -0.08293005,  0.19307316,  0.00259932,  0.16747994,
       -0.2428653 , -0.24943024,  0.09761504, -0.15247542,  0.16717348,
       -0.1974482 ,  0.07835344, -0.23026754, -0.01467998, -0.14634451,
       -0.08428048, -0.01680478,  0.14467453,  0.12418318, -0.08332258,
        0.12182866,  0.03650718, -0.07996082, -0.04950013,  0.08012766,
       -0.08291213, -0.25208163,  0.25023042,  0.02302041, -0.12079225,
       -0.14406145, -0.0405195 ,  0.20899223,  0.10453333, -0.09562244,
        0.24896251,  0.06353004, -0.03055032,  0.04371242,  0.22722591,
       -0.04239929,  0.0824754 , -0.20077997, -0.32334838, -0.01854423]), array([-0.06595112, -0.04042069,  0.06716637,  0.09523029,  0.05344242,
        0.10949963,  0.2654013 ,  0.06847356,  0.00327899, -0.05785026,
        0.02901621,  0.14666792,  0.156243  ,  0.2476419 , -0.07950539,
       -0.11840942,  0.05761384, -0.09457011, -0.0941431 , -0.09291328,
       -0.09829432,  0.16444478,  0.0404378 ,  0.00594538, -0.00836918,
       -0.11505755, -0.12067775, -0.12325683, -0.01080872,  0.15536057,
       -0.20366563,  0.27634777,  0.15747217, -0.0892059 ,  0.05435947,
        0.29909032,  0.02348477, -0.1926853 ,  0.29870141, -0.13237772,
        0.09806041,  0.05567243,  0.04187442,  0.19071772,  0.12029854,
       -0.16259016, -0.01414314, -0.2971021 ,  0.15390821, -0.17854129]), array([ 0.01547529,  0.01010453, -0.03280662, -0.11297141, -0.01434361,
        0.07377926,  0.12296019, -0.05082507,  0.10587126,  0.00327368,
       -0.05381169,  0.09150529,  0.01249965,  0.22043682,  0.24301493,
       -0.09786825,  0.07784544,  0.07007108, -0.06062563, -0.25180725,
       -0.23863042, -0.23100177, -0.03092314, -0.3624124 ,  0.05648559,
       -0.13051456,  0.1028015 ,  0.18224602, -0.35700165, -0.13895777,
        0.02753739, -0.09362725, -0.22794469,  0.09320815,  0.177609  ,
       -0.08469018, -0.18506909, -0.00653884,  0.08083626, -0.02478879,
       -0.05128553,  0.26481071, -0.01542248,  0.06287657,  0.0537032 ,
        0.07957576,  0.16657462, -0.00415668, -0.12511205, -0.10612573]), array([ 6.46991193e-03,  1.47921086e-02,  1.18969686e-03, -8.18916019e-03,
        3.19786266e-04,  1.06762919e-01, -8.29776473e-03,  3.84669736e-02,
        3.55974623e-02,  4.96654383e-02,  2.19046062e-01,  1.04348494e-01,
       -2.89708484e-01, -7.50127977e-02,  8.92811939e-02,  9.18041597e-05,
       -6.83664513e-02, -1.20524643e-01, -1.58392988e-01, -1.68469273e-01,
       -1.82315924e-02,  2.19466072e-01,  1.85149531e-01, -7.78921640e-02,
       -1.22189988e-01, -9.90968529e-02,  1.11066879e-01, -2.97618191e-01,
       -1.68162930e-01, -2.02154144e-01,  2.73669702e-01,  6.52427681e-02,
        8.24404143e-02, -8.51318857e-02, -1.47701004e-01, -1.45250554e-01,
       -9.54913409e-02, -1.09471566e-01,  3.03162049e-01, -1.03488697e-01,
       -1.12479187e-01, -3.25964532e-01, -8.00925993e-02,  7.90184542e-02,
       -1.23757755e-01,  8.73940205e-02,  7.93684373e-04,  2.33387384e-03,
       -1.16196284e-01,  2.05947151e-01]), array([ 0.04743083,  0.05960554, -0.04703079, -0.09662544, -0.05624377,
       -0.17563415, -0.12978134, -0.07485422,  0.14938702,  0.19248343,
        0.26137217,  0.08470703, -0.00792247, -0.33161766, -0.17456815,
       -0.19595362,  0.19764554, -0.11865673,  0.02778762, -0.0280973 ,
       -0.0025766 ,  0.05044584,  0.19068116,  0.06877208,  0.14246964,
       -0.17431291,  0.11160288,  0.01775476, -0.0596949 ,  0.19715964,
        0.08613692,  0.03241109, -0.01211091, -0.06277187,  0.0801644 ,
        0.02257006, -0.03283423,  0.01039128, -0.06963116, -0.16933767,
       -0.10470375,  0.25388905, -0.18549635, -0.18908942, -0.29992206,
       -0.02326132,  0.04339114, -0.15201601,  0.08667393, -0.29224888]), array([ 0.01339583,  0.02870462, -0.04656005, -0.11889793, -0.02431022,
       -0.19963167,  0.1503881 ,  0.03393541, -0.13794082, -0.26028936,
        0.10602179,  0.31872977,  0.05729127, -0.03665105, -0.24637692,
        0.09086408, -0.01721128,  0.04023987,  0.08159015, -0.24217995,
       -0.01006362,  0.12722   , -0.07810048, -0.10433479, -0.1792229 ,
        0.05595729, -0.1661999 ,  0.03729199,  0.20779567,  0.17466413,
        0.08998946, -0.04387909,  0.07221991,  0.27917345, -0.07281507,
       -0.18964581, -0.32772768,  0.00046187, -0.04510931, -0.0655877 ,
       -0.02420709,  0.0829979 , -0.21760877, -0.02371851,  0.15576029,
       -0.09995552, -0.14519729,  0.05037641, -0.21305402, -0.00034138]), array([ 1.08826664e-02,  3.39225514e-03,  5.09079546e-03, -1.77637807e-02,
        6.03864443e-03,  1.29421522e-01, -5.26389693e-02,  9.96355994e-02,
       -1.27997021e-01,  4.04028692e-01,  7.62571733e-02,  4.06935880e-02,
        1.02379823e-01,  3.16524012e-01,  1.38412039e-01,  1.06125017e-01,
        1.72280051e-02,  1.87942719e-01,  2.86279228e-01, -5.97918209e-02,
       -6.99609260e-02,  1.42885517e-01,  2.05579825e-01,  2.34099741e-01,
       -2.49941708e-01, -9.74779281e-02, -2.50976314e-01, -6.78453821e-02,
       -6.63961282e-02,  8.76423722e-02, -3.59109170e-02, -1.56117314e-02,
       -1.50520478e-01, -8.56035094e-02, -1.13633998e-01, -1.12719195e-01,
        1.03677771e-02,  1.46438361e-02, -4.22864226e-02,  7.96701727e-02,
       -2.63743537e-02,  2.64021369e-01, -1.85815979e-02, -1.93432216e-04,
       -1.67726465e-01,  1.26347001e-01, -2.36985031e-01,  2.91555700e-04,
       -6.40114686e-02,  7.73499910e-02]), array([ 0.08061292,  0.07492633, -0.03957156, -0.10207706, -0.02372931,
        0.14634559, -0.19863495,  0.14285133,  0.05335924,  0.13420595,
        0.12425076,  0.11023497, -0.01430787,  0.08947982, -0.22597863,
       -0.04687375,  0.14586134,  0.07672526, -0.16222904,  0.01703373,
       -0.0574036 , -0.04408376, -0.40320366, -0.14495559, -0.29908692,
       -0.02442073, -0.10227996,  0.00714937, -0.01974677,  0.15515453,
        0.1286413 ,  0.04210452,  0.03038705,  0.02582044, -0.23079829,
        0.00893858,  0.23843064,  0.39203511,  0.1323138 , -0.0137592 ,
        0.0849458 , -0.01962434,  0.11301544, -0.03100162, -0.02046577,
        0.02132829,  0.29616176,  0.01843323,  0.04916839, -0.04841106]), array([-0.08949944, -0.06598028,  0.04254817,  0.12168949,  0.02460483,
       -0.25662318,  0.03548497,  0.32461049,  0.02481312,  0.06391828,
        0.06605977, -0.10298115,  0.0080145 , -0.00244707, -0.19392762,
        0.03795507,  0.10843951,  0.10165624,  0.15916107,  0.00902591,
        0.031828  ,  0.03917913,  0.11381262, -0.06774665, -0.23411556,
        0.17230192, -0.0061908 , -0.04346507, -0.18773639, -0.32903029,
       -0.01481706, -0.12357102,  0.04792733,  0.13993047, -0.07334189,
        0.14172905, -0.16578009, -0.15708264,  0.04496675,  0.11460746,
       -0.22639483, -0.01786605,  0.32565528, -0.1572629 , -0.01796088,
       -0.14934769,  0.13502153,  0.07788573,  0.12637311, -0.25730977]), array([-0.06746906, -0.05353059,  0.00133947,  0.04469867, -0.01947908,
        0.1435563 , -0.24261708,  0.22918774,  0.02158324, -0.06178083,
       -0.00127772,  0.0779716 , -0.09891618,  0.04826419,  0.09699462,
       -0.26229337, -0.12607397, -0.0309167 ,  0.31144916, -0.10287112,
       -0.03264247,  0.10306167, -0.05195743,  0.05828377,  0.01804229,
        0.03809005,  0.02409933,  0.08388918,  0.18734019, -0.01022076,
        0.00041951, -0.07242932, -0.01375451, -0.19400898,  0.02451475,
        0.01134959, -0.22312   ,  0.04333317, -0.10074467,  0.08058557,
       -0.22029602,  0.01644994, -0.27952558,  0.17251788,  0.15016186,
       -0.08507473,  0.36553128, -0.05934136,  0.33564416,  0.14941325]), array([ 0.06175631,  0.06199566, -0.00179332, -0.01228485,  0.02427759,
        0.09437717, -0.07270491,  0.22150508, -0.07372789,  0.13271675,
       -0.08985158,  0.02655818,  0.19279443,  0.05546159, -0.25723836,
        0.03671372, -0.19445737, -0.30140859, -0.19856339, -0.10137971,
        0.16342962, -0.04104177,  0.07250036, -0.02441582,  0.10584312,
       -0.24820193, -0.24134314,  0.16430621,  0.10920795, -0.12469173,
       -0.07771523, -0.2253074 ,  0.08101999, -0.08633865,  0.10287986,
       -0.12697423, -0.05654319, -0.18856682,  0.05542146, -0.1683867 ,
        0.10552675, -0.00338518,  0.02984427, -0.0013436 , -0.05769631,
        0.25852764,  0.09663639,  0.33820527,  0.10607255, -0.07566415]), array([ 0.02279346,  0.05604305, -0.05109344, -0.06739959, -0.01653546,
       -0.07451512, -0.08293171, -0.0718045 , -0.27746931, -0.21050655,
        0.2394256 , -0.30771641,  0.20802685, -0.02690742, -0.12724825,
       -0.03748593,  0.06030583,  0.0358341 ,  0.27044509, -0.0945272 ,
       -0.08435245,  0.21294088, -0.00568936, -0.05803728,  0.05290658,
       -0.03431032, -0.05924165,  0.18002364, -0.20946738,  0.02728159,
        0.099599  , -0.22123294, -0.20365739, -0.10387818,  0.10431183,
        0.14426147,  0.25325403, -0.09022561,  0.18641672, -0.15982846,
        0.1384959 , -0.11240877, -0.03250846,  0.03858862, -0.01230837,
       -0.18314185,  0.07888073,  0.05775866, -0.09207002,  0.21806899]), array([ 2.13243141e-02,  3.83379497e-02, -4.58755546e-02, -9.75803668e-02,
       -1.84966251e-02, -5.90361862e-03,  9.26221902e-02, -2.04121692e-02,
        1.00707215e-02, -4.71523191e-02,  3.74858963e-02, -6.57109006e-02,
        1.00231743e-01,  1.52379881e-01,  7.02689985e-02,  5.15244340e-02,
        3.25961844e-01, -2.63131850e-01, -7.99823776e-02, -9.69387781e-02,
       -3.01478888e-04, -1.91448834e-01, -3.22185027e-02,  8.29750250e-02,
       -1.46370575e-01,  1.95955349e-01, -1.02722632e-01,  1.28726247e-01,
       -5.42061318e-02, -4.23483359e-02,  3.70203971e-02,  5.40875054e-02,
       -7.03348982e-03, -3.34692918e-01, -7.15837946e-03, -9.61824093e-02,
       -3.52330500e-04, -7.69442157e-02,  5.82914858e-02,  3.62923889e-01,
        2.56955961e-02, -2.60329211e-01, -3.87889336e-01, -2.40755726e-01,
        5.28399915e-03, -8.62216798e-02, -9.07482440e-02,  5.30400782e-02,
        6.92904488e-02, -1.83765268e-01]), array([-0.01628361, -0.02529152, -0.01754931, -0.03832306, -0.0071618 ,
       -0.08259341,  0.08319292,  0.15042337, -0.01096939, -0.07827646,
        0.26595494, -0.05287191,  0.3104504 ,  0.13613919, -0.207005  ,
       -0.10209111, -0.15636403, -0.05051825, -0.09395942,  0.04805082,
       -0.27134716, -0.01665287, -0.11020103,  0.21410654,  0.02805569,
        0.07456558,  0.40464867, -0.225784  , -0.11173055,  0.04131509,
       -0.11251353,  0.13582128, -0.09554957, -0.02996742, -0.11142598,
       -0.04573941, -0.08487558, -0.12907409, -0.25865476,  0.10485884,
        0.10552536, -0.00133955, -0.02561644, -0.0224816 ,  0.01592878,
        0.30002231,  0.15337156,  0.0543792 , -0.11019151,  0.09515689]), array([ 0.01939954,  0.02775991, -0.02113714,  0.00843587, -0.02510319,
       -0.07677898,  0.07133566, -0.30125775,  0.09602156,  0.17882444,
        0.36644972, -0.07844667,  0.00366747,  0.35875754,  0.08495767,
       -0.10567805, -0.03135281,  0.0365579 ,  0.10401858,  0.03820242,
        0.14491114, -0.04443384,  0.08117145, -0.08646418,  0.18331799,
       -0.12592764, -0.01788831, -0.15135831,  0.17693926, -0.02062818,
        0.11041162, -0.18544796,  0.3231417 ,  0.05960981, -0.0803826 ,
        0.09173793,  0.13342549, -0.00252276, -0.0484459 ,  0.03916599,
       -0.10710457, -0.0056712 , -0.04505085, -0.12911449,  0.36608935,
        0.01427394,  0.12513905,  0.14331982, -0.10545595, -0.0910262 ]), array([ 0.04728593,  0.04616268, -0.06442774, -0.15125086, -0.03722565,
       -0.26620358, -0.13503132, -0.14766118, -0.01709722,  0.0879495 ,
        0.02146246, -0.06498383,  0.25936281,  0.02656993,  0.10478864,
        0.06466683, -0.07086683, -0.19638133, -0.00420641,  0.04213203,
        0.31503304,  0.13512141, -0.33022659, -0.0940854 , -0.07492156,
       -0.16086124,  0.017185  , -0.12940175, -0.07966368, -0.22850943,
       -0.18196513, -0.02701958, -0.08741934,  0.04939084,  0.01228246,
        0.1387401 , -0.25209621,  0.18455175,  0.13591215,  0.04424225,
       -0.07687281,  0.01707966, -0.05219637, -0.04995232,  0.02713626,
        0.13397534, -0.16138145, -0.29601663,  0.15581291,  0.15222686]), array([-0.05384541, -0.02128317, -0.024682  ,  0.02580994, -0.02952861,
       -0.0739193 , -0.05660373,  0.06764287, -0.02563149, -0.1070534 ,
       -0.14566441, -0.22480966, -0.0822562 , -0.00724388, -0.14679265,
       -0.07915248, -0.09324928,  0.04052226, -0.05025175,  0.19481759,
       -0.23437837,  0.12575974, -0.05553008, -0.12210995,  0.05287971,
       -0.10090239, -0.22714006, -0.17566867,  0.1368525 , -0.27795796,
        0.26455576,  0.21082309, -0.16674218, -0.20747804,  0.01763481,
       -0.24982033,  0.10686812, -0.05233533,  0.03898305, -0.04836086,
       -0.01603837,  0.27201703, -0.0590706 , -0.25498347,  0.28238695,
        0.05364967, -0.07379295, -0.16106447, -0.00768268, -0.09445946]), array([ 7.16848271e-03,  4.04326751e-02,  1.11412146e-02, -5.29186675e-02,
        2.02515135e-02, -1.92977123e-02, -1.46187270e-01, -9.60454456e-02,
        4.24344777e-02, -5.22944337e-02, -6.04155952e-02, -2.24041971e-01,
        8.42575782e-02, -3.87612926e-02,  9.01746518e-02, -3.53568811e-01,
        3.64393328e-02, -3.30523886e-02, -7.68261700e-02, -4.47625530e-01,
       -1.25133265e-01,  1.17199781e-01, -3.31421355e-02,  9.90464461e-02,
        3.75832826e-02, -1.68800170e-01, -1.34346680e-01,  1.53250234e-01,
        5.15473839e-02, -1.36788243e-02, -1.06561883e-01,  3.13573344e-01,
        1.51376161e-02,  2.77973790e-01, -1.64673071e-01, -7.36290979e-02,
        1.16000051e-01, -2.95377154e-02, -1.26743900e-01,  1.00730824e-01,
       -2.63102816e-01, -1.65473673e-01,  2.07036162e-01, -5.59162809e-02,
        3.70095896e-04,  1.19762284e-02, -1.40945062e-01,  1.19535647e-01,
        5.82832868e-02,  7.62924535e-03]), array([-0.04140628, -0.00487521,  0.05331858, -0.01250639,  0.04932074,
        0.13713471,  0.16224972,  0.02959844, -0.14920959, -0.25508255,
        0.18875699,  0.2815945 ,  0.13486956, -0.18966963,  0.20453109,
       -0.13145905, -0.0557749 , -0.06670905, -0.02979522,  0.18556042,
       -0.09609618,  0.03995909,  0.03779123,  0.22986152, -0.15766717,
       -0.28260061,  0.06076029,  0.1357949 , -0.11630227, -0.26499015,
       -0.00635204, -0.1049076 ,  0.27057601, -0.00713267,  0.09526607,
       -0.11356513,  0.12068655,  0.23393168,  0.00053776,  0.14222078,
        0.03622096,  0.1685737 ,  0.1198192 , -0.17935362,  0.0351019 ,
       -0.13674091, -0.05467377,  0.06822767,  0.09562576,  0.06278834])])
        whiten = False
        explained_variance = np.array([3.185470830800136, 1.5597112332255731, 1.488006970109199, 1.43859441149521, 1.4056786370718277, 1.350057592860151, 1.3441094077423128, 1.3073536158045809, 1.2884313467240784, 1.2645183100261197, 1.2589025337994086, 1.2404907466090966, 1.2166818547443847, 1.1827886166129633, 1.1613400453255716, 1.1400986233344057, 1.1067902847699436, 1.0884386233542058, 1.0655094682478554, 1.0565174771758674, 1.03469945124879, 1.0044513689934218, 0.980125983544237, 0.9763784763807462, 0.9551479345298196, 0.9432511256123035, 0.913388035084486, 0.8981850285753973])
        X = X - mean

    X_transformed = np.dot(X, components.T)
    if whiten:
        X_transformed /= np.sqrt(explained_variance)
    return X_transformed

# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="binaryClass"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="binaryClass"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'N': 0, 'P': 1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def single_classify(row):
    #inits
    x = row
    o = [0] * num_output_logits


    #Nueron Equations
    h_0 = max((((20.276093 * float(x[0]))+ (13.959371 * float(x[1]))+ (-1.2106415 * float(x[2]))+ (0.8343916 * float(x[3]))+ (4.338856 * float(x[4]))+ (3.7875285 * float(x[5]))+ (2.4440234 * float(x[6]))+ (0.9716717 * float(x[7]))+ (1.9410188 * float(x[8]))+ (-3.2211707 * float(x[9]))+ (0.6384143 * float(x[10]))+ (1.9229581 * float(x[11]))+ (0.7709507 * float(x[12]))+ (2.333143 * float(x[13]))+ (0.22838102 * float(x[14]))+ (-3.097694 * float(x[15]))+ (3.887224 * float(x[16]))+ (-2.614735 * float(x[17]))+ (-0.65393513 * float(x[18]))+ (0.30465662 * float(x[19]))+ (3.2299814 * float(x[20]))+ (4.8326116 * float(x[21]))+ (-0.26283297 * float(x[22]))+ (0.2582372 * float(x[23]))+ (2.7180736 * float(x[24]))+ (-1.9283923 * float(x[25]))+ (-0.648248 * float(x[26]))+ (-0.09125245 * float(x[27]))) + 2.5955188), 0)
    h_1 = max((((-6.928742 * float(x[0]))+ (-1.5669788 * float(x[1]))+ (3.557342 * float(x[2]))+ (-6.3815885 * float(x[3]))+ (0.025490696 * float(x[4]))+ (1.3435698 * float(x[5]))+ (1.0451046 * float(x[6]))+ (-2.257037 * float(x[7]))+ (-2.5511262 * float(x[8]))+ (-5.051444 * float(x[9]))+ (1.2136006 * float(x[10]))+ (3.5183015 * float(x[11]))+ (0.6166876 * float(x[12]))+ (3.1359425 * float(x[13]))+ (1.7484759 * float(x[14]))+ (-2.2693627 * float(x[15]))+ (-0.70716363 * float(x[16]))+ (1.5688758 * float(x[17]))+ (-0.46540385 * float(x[18]))+ (-4.4311156 * float(x[19]))+ (-1.3279308 * float(x[20]))+ (0.9094762 * float(x[21]))+ (3.355334 * float(x[22]))+ (0.45421925 * float(x[23]))+ (0.84105194 * float(x[24]))+ (-2.8236847 * float(x[25]))+ (1.7518127 * float(x[26]))+ (-0.055887893 * float(x[27]))) + -1.0768006), 0)
    h_2 = max((((1.5748913 * float(x[0]))+ (-1.0452414 * float(x[1]))+ (-2.4162283 * float(x[2]))+ (-3.1094282 * float(x[3]))+ (0.65137845 * float(x[4]))+ (-0.24079265 * float(x[5]))+ (2.7314804 * float(x[6]))+ (-1.1229851 * float(x[7]))+ (-2.875658 * float(x[8]))+ (-4.168726 * float(x[9]))+ (-0.28047782 * float(x[10]))+ (5.0269322 * float(x[11]))+ (-2.2107031 * float(x[12]))+ (2.6642768 * float(x[13]))+ (-0.19132549 * float(x[14]))+ (2.1323137 * float(x[15]))+ (-2.5372074 * float(x[16]))+ (1.6648128 * float(x[17]))+ (0.9021709 * float(x[18]))+ (1.0551033 * float(x[19]))+ (-0.4941082 * float(x[20]))+ (3.5323594 * float(x[21]))+ (-1.1197587 * float(x[22]))+ (1.5360637 * float(x[23]))+ (-1.811372 * float(x[24]))+ (1.4893955 * float(x[25]))+ (-0.33574775 * float(x[26]))+ (-3.8312814 * float(x[27]))) + -2.8538938), 0)
    h_3 = max((((2.0782087 * float(x[0]))+ (-1.1468881 * float(x[1]))+ (0.87715584 * float(x[2]))+ (-3.3126752 * float(x[3]))+ (-1.609391 * float(x[4]))+ (1.4751556 * float(x[5]))+ (-0.1876245 * float(x[6]))+ (-0.7843022 * float(x[7]))+ (1.1032684 * float(x[8]))+ (-1.6917098 * float(x[9]))+ (2.640149 * float(x[10]))+ (-1.5724556 * float(x[11]))+ (1.0126075 * float(x[12]))+ (-0.0837338 * float(x[13]))+ (0.29579175 * float(x[14]))+ (-3.2883232 * float(x[15]))+ (1.0981611 * float(x[16]))+ (1.8675101 * float(x[17]))+ (-0.59714156 * float(x[18]))+ (-2.0164185 * float(x[19]))+ (1.4476209 * float(x[20]))+ (1.0054362 * float(x[21]))+ (0.7355201 * float(x[22]))+ (-0.17629722 * float(x[23]))+ (0.01656583 * float(x[24]))+ (-0.72237664 * float(x[25]))+ (-0.07031117 * float(x[26]))+ (0.5798588 * float(x[27]))) + 0.21375023), 0)
    h_4 = max((((2.9690673 * float(x[0]))+ (2.1898167 * float(x[1]))+ (-0.02545337 * float(x[2]))+ (0.6279081 * float(x[3]))+ (0.85960644 * float(x[4]))+ (0.35369858 * float(x[5]))+ (0.17465343 * float(x[6]))+ (0.07165469 * float(x[7]))+ (0.28644788 * float(x[8]))+ (-0.06128907 * float(x[9]))+ (-0.21207571 * float(x[10]))+ (0.08535556 * float(x[11]))+ (0.16595134 * float(x[12]))+ (0.16642714 * float(x[13]))+ (-0.1602036 * float(x[14]))+ (0.10728794 * float(x[15]))+ (0.5699609 * float(x[16]))+ (-0.53227377 * float(x[17]))+ (-0.31441876 * float(x[18]))+ (0.33304784 * float(x[19]))+ (0.16450626 * float(x[20]))+ (0.28088722 * float(x[21]))+ (-0.17987393 * float(x[22]))+ (-0.025653532 * float(x[23]))+ (0.5695526 * float(x[24]))+ (-0.4331094 * float(x[25]))+ (0.14486521 * float(x[26]))+ (0.011537757 * float(x[27]))) + -4.68055), 0)
    o[0] = (0.47024608 * h_0)+ (0.21944688 * h_1)+ (-0.4091702 * h_2)+ (-0.7349042 * h_3)+ (-5.2575645 * h_4) + -1.9863855

    

    #Output Decision Rule
    if num_output_logits==1:
        return o[0]>=0
    else:
        return argmax(o)


def classify(arr, transform=False):
    #apply transformation if necessary
    if transform:
        arr[:,:-1] = transform(arr[:,:-1])
    #init
    w_h = np.array([[20.276092529296875, 13.959370613098145, -1.2106415033340454, 0.8343915939331055, 4.338856220245361, 3.7875285148620605, 2.444023370742798, 0.9716717004776001, 1.94101881980896, -3.221170663833618, 0.6384143233299255, 1.9229581356048584, 0.7709506750106812, 2.3331429958343506, 0.22838102281093597, -3.097693920135498, 3.887223958969116, -2.6147348880767822, -0.6539351344108582, 0.30465662479400635, 3.2299814224243164, 4.832611560821533, -0.26283296942710876, 0.25823721289634705, 2.718073606491089, -1.9283922910690308, -0.648248016834259, -0.09125245362520218], [-6.928741931915283, -1.5669788122177124, 3.557342052459717, -6.381588459014893, 0.025490695610642433, 1.3435697555541992, 1.0451046228408813, -2.2570369243621826, -2.55112624168396, -5.051444053649902, 1.2136006355285645, 3.518301486968994, 0.6166875958442688, 3.1359424591064453, 1.7484759092330933, -2.269362688064575, -0.7071636319160461, 1.568875789642334, -0.46540385484695435, -4.431115627288818, -1.3279308080673218, 0.9094762206077576, 3.3553340435028076, 0.454219251871109, 0.8410519361495972, -2.8236846923828125, 1.7518126964569092, -0.055887892842292786], [1.5748913288116455, -1.045241355895996, -2.4162282943725586, -3.1094281673431396, 0.6513784527778625, -0.2407926470041275, 2.731480360031128, -1.1229851245880127, -2.8756580352783203, -4.168725967407227, -0.2804778218269348, 5.026932239532471, -2.210703134536743, 2.6642768383026123, -0.19132548570632935, 2.1323137283325195, -2.5372073650360107, 1.6648128032684326, 0.9021708965301514, 1.0551033020019531, -0.4941082000732422, 3.5323593616485596, -1.1197587251663208, 1.5360636711120605, -1.8113720417022705, 1.4893954992294312, -0.33574774861335754, -3.8312814235687256], [2.0782086849212646, -1.1468881368637085, 0.8771558403968811, -3.3126752376556396, -1.6093909740447998, 1.4751555919647217, -0.1876244992017746, -0.7843021750450134, 1.1032683849334717, -1.6917097568511963, 2.6401491165161133, -1.572455644607544, 1.012607455253601, -0.08373379707336426, 0.29579174518585205, -3.288323163986206, 1.0981611013412476, 1.8675100803375244, -0.5971415638923645, -2.01641845703125, 1.4476208686828613, 1.0054361820220947, 0.7355201244354248, -0.17629721760749817, 0.016565829515457153, -0.7223766446113586, -0.07031116634607315, 0.5798587799072266], [2.969067335128784, 2.18981671333313, -0.025453370064496994, 0.6279081106185913, 0.8596064448356628, 0.35369858145713806, 0.17465342581272125, 0.07165469229221344, 0.2864478826522827, -0.061289068311452866, -0.21207571029663086, 0.08535555750131607, 0.16595134139060974, 0.1664271354675293, -0.16020360589027405, 0.1072879433631897, 0.56996089220047, -0.5322737693786621, -0.314418762922287, 0.3330478370189667, 0.16450625658035278, 0.2808872163295746, -0.17987392842769623, -0.025653531774878502, 0.5695526003837585, -0.4331094026565552, 0.1448652148246765, 0.011537756770849228]])
    b_h = np.array([2.5955188274383545, -1.0768005847930908, -2.853893756866455, 0.2137502282857895, -4.6805500984191895])
    w_o = np.array([[0.4702460765838623, 0.21944688260555267, -0.4091702103614807, -0.7349042296409607, -5.257564544677734]])
    b_o = np.array(-1.986385464668274)

    #Hidden Layer
    h = np.dot(arr, w_h.T) + b_h
    
    relu = np.maximum(h, np.zeros_like(h))


    #Output
    out = np.dot(relu, w_o.T) + b_o
    if num_output_logits == 1:
        return (out >= 0).astype('int').reshape(-1)
    else:
        return (np.argmax(out, axis=1)).reshape(-1)



def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(reader, None) + ["Prediction"]))
        
        
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(single_classify(arr[i])), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            print(','.join(row))


def Validate(cleanarr):
    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs
    


# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()


    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')


    #Normalize
    cleanarr = Normalize(cleanarr)


    #Transform
    if transform_true:
        if args.validate:
            trans = transform(cleanarr[:, :-1])
            cleanarr = np.concatenate((trans, cleanarr[:, -1].reshape(-1, 1)), axis = 1)
        else:
            cleanarr = transform(cleanarr)


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile, get_key, classmapping)


    #Validate
    else:
        classifier_type = 'NN'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds = Validate(cleanarr)
        else:
            count, correct_count, numeachclass, preds = Validate(cleanarr)
        #Correct Labels
        true_labels = cleanarr[:, -1]


        #Report Metrics
        model_cap = 151
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


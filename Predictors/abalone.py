#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is
# licensed under GNU GPL v2.0 or higher. For details, please see:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.96 Table Compiler v0.96.
# Invocation: btc https://www.openml.org/data/get_csv/3620/dataset_187_abalone.arff -o Predictors/abalone_QC.py -target Class_number_of_rings -stopat 26.19 -f QC -e 100 --yes --runlocalonly
# Total compiler execution time: 0:00:03.29. Finished on: May-27-2020 22:17:06.
# This source code requires Python 3.
#
"""
Classifier Type: Quick Clustering
System Type:                        28-way classifier
Best-guess accuracy:                16.58%
Model accuracy:                     92.86% (3879/4177 correct)
Improvement over best guess:        76.28% (of possible 83.42%)
Model capacity (MEC):               3473 bits
Generalization ratio:               1.11 bits/bit
Confusion Matrix:
 [2.25% 0.00% 0.05% 0.02% 0.02% 0.00% 0.00% 0.00% 0.05% 0.02% 0.02% 0.02%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.02% 8.69% 0.05% 0.02% 0.19% 0.00% 0.00% 0.00% 0.02% 0.02% 0.05% 0.00%
  0.05% 0.02% 0.00% 0.22% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.07% 0.22% 15.11% 0.22% 0.22% 0.02% 0.02% 0.00% 0.07% 0.26% 0.10%
  0.05% 0.07% 0.00% 0.00% 0.05% 0.00% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00%]
 [0.02% 0.02% 0.43% 14.10% 0.14% 0.00% 0.00% 0.00% 0.02% 0.19% 0.10%
  0.00% 0.07% 0.00% 0.00% 0.02% 0.00% 0.05% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.14% 0.14% 0.24% 12.66% 0.00% 0.00% 0.00% 0.05% 0.05% 0.05%
  0.00% 0.07% 0.02% 0.00% 0.10% 0.00% 0.05% 0.02% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.62% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.02% 0.02% 0.00% 0.00% 1.56% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.72% 0.00% 0.00% 0.02% 0.02%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.02% 0.02% 0.05% 0.02% 0.02% 0.00% 0.00% 2.85% 0.02% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.02% 0.02% 0.22% 0.19% 0.12% 0.00% 0.02% 0.02% 0.10% 10.65% 0.10%
  0.05% 0.14% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00%]
 [0.02% 0.02% 0.07% 0.00% 0.07% 0.00% 0.05% 0.00% 0.05% 0.02% 5.96% 0.02%
  0.10% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.05% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.93%
  0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.02% 0.00% 0.07% 0.02% 0.07% 0.00% 0.00% 0.00% 0.00% 0.05% 0.02% 0.00%
  4.57% 0.00% 0.00% 0.00% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.07% 0.02% 0.00% 0.05% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 2.56% 0.02% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 1.34% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.14% 0.02% 0.02% 0.17% 0.00% 0.00% 0.00% 0.00% 0.00% 0.05% 0.00%
  0.02% 0.05% 0.02% 5.70% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.34% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.02% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 1.34% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.14% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.02% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.02% 0.00% 0.00% 0.00% 0.00% 0.00% 0.34% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.02% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.22% 0.00%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.02%
  0.00% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.02% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.05% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.02% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00% 0.00%
  0.00% 0.00% 0.00% 0.05%]

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "dataset_187_abalone.csv"


#Number of attributes
num_attr = 8
n_classes = 28


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="Class_number_of_rings"


    if (testfile):
        target = ''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if (target != ''): 
                        hc = header.index(target)
                    else:
                        hc = len(header) - 1
                        target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                for i in range(0, len(header)):      
                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i] + ",", end='', file=outputfile)
                print(header[hc], file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"' + row[name] + '"' + ",", end='', file=outputfile)
                        else:
                            print (row[name] + ",", end='', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc =- 1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc == -1):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if (',' in row[i]):
                            print ('"' + row[i] + '"'+",", end='', file=outputfile)
                        else:
                            print(row[i]+",", end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'15': 0, '7': 1, '9': 2, '10': 3, '8': 4, '20': 5, '16': 6, '19': 7, '14': 8, '11': 9, '12': 10, '18': 11, '13': 12, '5': 13, '4': 14, '6': 15, '21': 16, '17': 17, '22': 18, '1': 19, '3': 20, '26': 21, '23': 22, '29': 23, '2': 24, '27': 25, '25': 26, '24': 27}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([1304234792.86525, 1304234792.93925, 1304234793.0035, 1304234793.0507498, 1304234793.05225, 1304234793.059, 1304234793.066, 1304234793.07275, 1304234793.0795, 1304234793.0829997, 1304234793.0862498, 1304234793.093, 1304234793.1079998, 1304234793.12725, 1304234793.1522498, 1304234793.1877499, 1304234793.20225, 1304234793.2675, 1304234793.2869997, 1304234793.2937498, 1304234793.302, 1304234793.3075001, 1304234793.3145, 1304234793.3235002, 1304234793.3282502, 1304234793.3475, 1304234793.36625, 1304234793.379, 1304234793.3972502, 1304234793.407, 1304234793.41325, 1304234793.42025, 1304234793.43, 1304234793.4365, 1304234793.4397502, 1304234793.4455001, 1304234793.45175, 1304234793.46775, 1304234793.48225, 1304234793.488, 1304234793.492, 1304234793.4995, 1304234793.5127501, 1304234793.5235, 1304234793.52575, 1304234793.5265, 1304234793.527, 1304234793.5435, 1304234793.5645, 1304234793.5755, 1304234793.58225, 1304234793.589, 1304234793.5955, 1304234793.6015, 1304234793.61375, 1304234793.6205, 1304234793.62375, 1304234793.629, 1304234793.633, 1304234793.634, 1304234793.641, 1304234793.65175, 1304234793.6587498, 1304234793.6615, 1304234793.662, 1304234793.6672502, 1304234793.6725001, 1304234793.67925, 1304234793.689, 1304234793.6955, 1304234793.70725, 1304234793.7275, 1304234793.7297502, 1304234793.7322497, 1304234793.7335, 1304234793.73425, 1304234793.73475, 1304234793.7354999, 1304234793.7372499, 1304234793.7384999, 1304234793.7389998, 1304234793.74125, 1304234793.7452502, 1304234793.7512503, 1304234793.756, 1304234793.762, 1304234793.7697499, 1304234793.77575, 1304234793.78, 1304234793.7814999, 1304234793.782, 1304234793.78375, 1304234793.7865, 1304234793.788, 1304234793.79, 1304234793.792, 1304234793.795, 1304234793.7975, 1304234793.802, 1304234793.8077497, 1304234793.8105, 1304234793.813, 1304234793.8162498, 1304234793.82125, 1304234793.8279998, 1304234793.8315, 1304234793.833, 1304234793.84375, 1304234793.8475, 1304234793.8515, 1304234793.85325, 1304234793.855, 1304234793.862, 1304234793.87, 1304234793.8752499, 1304234793.8790002, 1304234793.886, 1304234793.8865, 1304234793.8892498, 1304234793.8915, 1304234793.8925, 1304234793.89475, 1304234793.8969998, 1304234793.8987498, 1304234793.9009998, 1304234793.9034998, 1304234793.90625, 1304234793.91575, 1304234793.9242501, 1304234793.92675, 1304234793.9295, 1304234793.93075, 1304234793.9385, 1304234793.9464998, 1304234793.94725, 1304234793.9545, 1304234793.96175, 1304234793.9645, 1304234793.9742498, 1304234793.97675, 1304234793.9857502, 1304234793.98775, 1304234793.9892497, 1304234793.9987497, 1304234794.0105, 1304234794.01375, 1304234794.01575, 1304234794.01925, 1304234794.02425, 1304234794.02825, 1304234794.0349998, 1304234794.04125, 1304234794.04275, 1304234794.04675, 1304234794.05125, 1304234794.053, 1304234794.06075, 1304234794.06675, 1304234794.0705, 1304234794.0732498, 1304234794.0787501, 1304234794.084, 1304234794.088, 1304234794.09225, 1304234794.0955, 1304234794.0985, 1304234794.1007502, 1304234794.1069999, 1304234794.1075, 1304234794.10775, 1304234794.1107502, 1304234794.1175, 1304234794.1220002, 1304234794.1230001, 1304234794.12475, 1304234794.1262498, 1304234794.1272497, 1304234794.1287498, 1304234794.132, 1304234794.13475, 1304234794.13625, 1304234794.13775, 1304234794.1412501, 1304234794.14825, 1304234794.1505, 1304234794.1535, 1304234794.1552498, 1304234794.1557498, 1304234794.15625, 1304234794.15975, 1304234794.164, 1304234794.167, 1304234794.175, 1304234794.1807501, 1304234794.1815002, 1304234794.1827502, 1304234794.1859999, 1304234794.1890001, 1304234794.19025, 1304234794.191, 1304234794.19475, 1304234794.2, 1304234794.2024999, 1304234794.2075, 1304234794.216, 1304234794.21725, 1304234794.21875, 1304234794.2205, 1304234794.2397501, 1304234794.2445002, 1304234794.2485003, 1304234794.2515001, 1304234794.259, 1304234794.2592502, 1304234794.262, 1304234794.27, 1304234794.2785, 1304234794.28125, 1304234794.28475, 1304234794.2875, 1304234794.29025, 1304234794.2920003, 1304234794.3050003, 1304234794.3052502, 1304234794.30575, 1304234794.3065, 1304234794.30875, 1304234794.3115, 1304234794.3155, 1304234794.31875, 1304234794.321, 1304234794.3235002, 1304234794.32625, 1304234794.327, 1304234794.3274999, 1304234794.3320003, 1304234794.3347502, 1304234794.342, 1304234794.35, 1304234794.35225, 1304234794.354, 1304234794.356, 1304234794.3600001, 1304234794.3635, 1304234794.36475, 1304234794.3685002, 1304234794.3700001, 1304234794.3765001, 1304234794.383, 1304234794.3842502, 1304234794.3845, 1304234794.388, 1304234794.3927498, 1304234794.39475, 1304234794.4015002, 1304234794.409, 1304234794.4125001, 1304234794.4152503, 1304234794.417, 1304234794.4190001, 1304234794.42275, 1304234794.42625, 1304234794.427, 1304234794.4272501, 1304234794.43, 1304234794.4335, 1304234794.4362502, 1304234794.4415002, 1304234794.44575, 1304234794.44875, 1304234794.45125, 1304234794.454, 1304234794.45775, 1304234794.4605, 1304234794.4629998, 1304234794.464, 1304234794.46425, 1304234794.46575, 1304234794.4675, 1304234794.4692502, 1304234794.4710002, 1304234794.4720001, 1304234794.47425, 1304234794.476, 1304234794.47725, 1304234794.48025, 1304234794.4825, 1304234794.48875, 1304234794.495, 1304234794.4975002, 1304234794.50025, 1304234794.50275, 1304234794.507, 1304234794.515, 1304234794.5177503, 1304234794.5195, 1304234794.52125, 1304234794.5219998, 1304234794.5305, 1304234794.5395, 1304234794.54325, 1304234794.5487502, 1304234794.55225, 1304234794.55525, 1304234794.563, 1304234794.566, 1304234794.56725, 1304234794.56925, 1304234794.5715, 1304234794.57475, 1304234794.57725, 1304234794.5794997, 1304234794.5805001, 1304234794.58225, 1304234794.5835, 1304234794.584, 1304234794.585, 1304234794.59125, 1304234794.593, 1304234794.6012502, 1304234794.6030002, 1304234794.60425, 1304234794.6055, 1304234794.611, 1304234794.6165, 1304234794.6217499, 1304234794.626, 1304234794.63175, 1304234794.6382499, 1304234794.6420002, 1304234794.64225, 1304234794.6445003, 1304234794.647, 1304234794.652, 1304234794.6599998, 1304234794.66425, 1304234794.665, 1304234794.66625, 1304234794.6675, 1304234794.66825, 1304234794.6714997, 1304234794.67425, 1304234794.6767502, 1304234794.6785, 1304234794.6795, 1304234794.6802502, 1304234794.6837502, 1304234794.68575, 1304234794.68675, 1304234794.6912498, 1304234794.69575, 1304234794.6975002, 1304234794.7, 1304234794.7017498, 1304234794.705, 1304234794.7115, 1304234794.7154999, 1304234794.716, 1304234794.71625, 1304234794.7164998, 1304234794.7165, 1304234794.72325, 1304234794.726, 1304234794.7305002, 1304234794.7325, 1304234794.737, 1304234794.74275, 1304234794.7467499, 1304234794.74825, 1304234794.7502499, 1304234794.75175, 1304234794.75275, 1304234794.7615, 1304234794.76475, 1304234794.7655, 1304234794.7684999, 1304234794.7715, 1304234794.77375, 1304234794.7745001, 1304234794.775, 1304234794.7827501, 1304234794.784, 1304234794.7859998, 1304234794.78775, 1304234794.789, 1304234794.78975, 1304234794.7949998, 1304234794.8005, 1304234794.8042502, 1304234794.808, 1304234794.8092499, 1304234794.8115, 1304234794.8147497, 1304234794.8174996, 1304234794.81875, 1304234794.81925, 1304234794.8197498, 1304234794.8205, 1304234794.8215, 1304234794.8255, 1304234794.8277497, 1304234794.8312497, 1304234794.8335, 1304234794.835, 1304234794.83775, 1304234794.8392498, 1304234794.84075, 1304234794.845, 1304234794.84825, 1304234794.8497498, 1304234794.8552501, 1304234794.85775, 1304234794.8617501, 1304234794.8645, 1304234794.86675, 1304234794.8705, 1304234794.8725, 1304234794.8745, 1304234794.87725, 1304234794.8825, 1304234794.883, 1304234794.8839998, 1304234794.8855, 1304234794.8869998, 1304234794.88775, 1304234794.8934999, 1304234794.8964999, 1304234794.8987498, 1304234794.9012501, 1304234794.9045, 1304234794.9085, 1304234794.9112499, 1304234794.915, 1304234794.9197497, 1304234794.9225, 1304234794.9239998, 1304234794.9247499, 1304234794.92725, 1304234794.9299998, 1304234794.9317498, 1304234794.933, 1304234794.934, 1304234794.9355001, 1304234794.9370003, 1304234794.93825, 1304234794.9394999, 1304234794.94225, 1304234794.9447498, 1304234794.9455, 1304234794.946, 1304234794.9464998, 1304234794.94725, 1304234794.9482498, 1304234794.949, 1304234794.94975, 1304234794.9505, 1304234794.95325, 1304234794.9565, 1304234794.9585, 1304234794.9667501, 1304234794.9755, 1304234794.9819999, 1304234794.9837499, 1304234794.9850001, 1304234794.98525, 1304234794.9867501, 1304234794.987, 1304234794.987, 1304234794.98725, 1304234794.9882498, 1304234794.9902499, 1304234794.99325, 1304234794.9945, 1304234794.99925, 1304234795.00625, 1304234795.00875, 1304234795.0110002, 1304234795.0125, 1304234795.017, 1304234795.0202498, 1304234795.02275, 1304234795.0235, 1304234795.0247498, 1304234795.026, 1304234795.02775, 1304234795.0305, 1304234795.0345001, 1304234795.03775, 1304234795.039, 1304234795.04, 1304234795.0430002, 1304234795.0505, 1304234795.0575, 1304234795.0612497, 1304234795.06325, 1304234795.0635, 1304234795.0665002, 1304234795.0695, 1304234795.0697498, 1304234795.07025, 1304234795.072, 1304234795.0765, 1304234795.079, 1304234795.0835, 1304234795.08675, 1304234795.0882502, 1304234795.091, 1304234795.0932498, 1304234795.1, 1304234795.1005, 1304234795.1015, 1304234795.1025, 1304234795.105, 1304234795.1075, 1304234795.10875, 1304234795.1097503, 1304234795.111, 1304234795.1119998, 1304234795.112, 1304234795.1122499, 1304234795.113, 1304234795.1144998, 1304234795.1167498, 1304234795.118, 1304234795.119, 1304234795.1202497, 1304234795.1215, 1304234795.1234999, 1304234795.125, 1304234795.12575, 1304234795.12775, 1304234795.1295002, 1304234795.1332498, 1304234795.1342497, 1304234795.1345, 1304234795.13575, 1304234795.15, 1304234795.15525, 1304234795.15975, 1304234795.1637497, 1304234795.164, 1304234795.1745, 1304234795.1757498, 1304234795.17675, 1304234795.17825, 1304234795.1795, 1304234795.1804998, 1304234795.1827497, 1304234795.1855, 1304234795.1872501, 1304234795.18925, 1304234795.191, 1304234795.1925, 1304234795.19375, 1304234795.1999998, 1304234795.20825, 1304234795.209, 1304234795.20975, 1304234795.2104998, 1304234795.21125, 1304234795.2137501, 1304234795.216, 1304234795.21625, 1304234795.2185001, 1304234795.2245002, 1304234795.2287502, 1304234795.2292502, 1304234795.2312503, 1304234795.2335, 1304234795.2354999, 1304234795.2372499, 1304234795.2375, 1304234795.23775, 1304234795.2395, 1304234795.241, 1304234795.2435, 1304234795.24725, 1304234795.2505, 1304234795.25275, 1304234795.2535002, 1304234795.2575002, 1304234795.26, 1304234795.2619998, 1304234795.2642498, 1304234795.2654998, 1304234795.26625, 1304234795.26725, 1304234795.2687502, 1304234795.271, 1304234795.2732499, 1304234795.27475, 1304234795.27575, 1304234795.2784998, 1304234795.2807498, 1304234795.2810001, 1304234795.28125, 1304234795.28225, 1304234795.28375, 1304234795.2875, 1304234795.29475, 1304234795.29675, 1304234795.2992501, 1304234795.30125, 1304234795.3075, 1304234795.3095, 1304234795.31, 1304234795.3102503, 1304234795.3112502, 1304234795.3122501, 1304234795.3127499, 1304234795.3157501, 1304234795.3195, 1304234795.323, 1304234795.32375, 1304234795.3242502, 1304234795.3245, 1304234795.3250003, 1304234795.32925, 1304234795.33425, 1304234795.33625, 1304234795.33775, 1304234795.34025, 1304234795.3465, 1304234795.34775, 1304234795.3495002, 1304234795.355, 1304234795.3560002, 1304234795.3575, 1304234795.359, 1304234795.3607502, 1304234795.3622503, 1304234795.36375, 1304234795.3655, 1304234795.36575, 1304234795.36675, 1304234795.36825, 1304234795.37025, 1304234795.3720002, 1304234795.37525, 1304234795.3769999, 1304234795.379, 1304234795.38, 1304234795.3804998, 1304234795.38075, 1304234795.3809998, 1304234795.3817499, 1304234795.3835, 1304234795.3855, 1304234795.38725, 1304234795.3930001, 1304234795.3955, 1304234795.3964999, 1304234795.3969998, 1304234795.40375, 1304234795.4045, 1304234795.4047499, 1304234795.40725, 1304234795.4099998, 1304234795.4105, 1304234795.4115, 1304234795.41225, 1304234795.4125, 1304234795.4125, 1304234795.41425, 1304234795.41775, 1304234795.4207501, 1304234795.42325, 1304234795.42525, 1304234795.42625, 1304234795.42875, 1304234795.43225, 1304234795.43575, 1304234795.4385, 1304234795.44075, 1304234795.4424999, 1304234795.4442499, 1304234795.4497502, 1304234795.4559999, 1304234795.458, 1304234795.4604998, 1304234795.46175, 1304234795.46375, 1304234795.4655, 1304234795.4665003, 1304234795.468, 1304234795.46975, 1304234795.4709997, 1304234795.471, 1304234795.47125, 1304234795.473, 1304234795.4765, 1304234795.479, 1304234795.48275, 1304234795.4830003, 1304234795.48525, 1304234795.48825, 1304234795.49225, 1304234795.49475, 1304234795.50025, 1304234795.5045002, 1304234795.5065002, 1304234795.5090003, 1304234795.51025, 1304234795.511, 1304234795.51175, 1304234795.51225, 1304234795.5134997, 1304234795.51475, 1304234795.5152497, 1304234795.5159998, 1304234795.5165, 1304234795.51675, 1304234795.5219998, 1304234795.525, 1304234795.53, 1304234795.5327501, 1304234795.53325, 1304234795.5345001, 1304234795.53625, 1304234795.53725, 1304234795.53775, 1304234795.54, 1304234795.5414999, 1304234795.5444999, 1304234795.54725, 1304234795.5482502, 1304234795.54875, 1304234795.5515, 1304234795.555, 1304234795.558, 1304234795.5600002, 1304234795.5609999, 1304234795.56325, 1304234795.5637498, 1304234795.5644999, 1304234795.566, 1304234795.57, 1304234795.5785, 1304234795.58225, 1304234795.5830002, 1304234795.5855002, 1304234795.5897498, 1304234795.5925, 1304234795.5975, 1304234795.6020002, 1304234795.6030002, 1304234795.6055002, 1304234795.6087499, 1304234795.61025, 1304234795.61425, 1304234795.617, 1304234795.6182501, 1304234795.62075, 1304234795.6234999, 1304234795.62625, 1304234795.6285, 1304234795.63025, 1304234795.63575, 1304234795.6375, 1304234795.6385, 1304234795.64025, 1304234795.6425, 1304234795.64425, 1304234795.6455002, 1304234795.6490002, 1304234795.65825, 1304234795.665, 1304234795.66675, 1304234795.67025, 1304234795.6765, 1304234795.6810002, 1304234795.6832502, 1304234795.68475, 1304234795.6855001, 1304234795.687, 1304234795.6887498, 1304234795.6894999, 1304234795.6894999, 1304234795.6905, 1304234795.6915, 1304234795.6915002, 1304234795.6935, 1304234795.696, 1304234795.69825, 1304234795.7015, 1304234795.70525, 1304234795.712, 1304234795.7189999, 1304234795.7220001, 1304234795.72425, 1304234795.7265, 1304234795.727, 1304234795.7280002, 1304234795.73, 1304234795.7345, 1304234795.7350001, 1304234795.7375, 1304234795.7407498, 1304234795.74175, 1304234795.7419999, 1304234795.74225, 1304234795.74475, 1304234795.7472498, 1304234795.7479997, 1304234795.7505, 1304234795.7525, 1304234795.756, 1304234795.76075, 1304234795.76225, 1304234795.76325, 1304234795.7662501, 1304234795.769, 1304234795.77175, 1304234795.7740002, 1304234795.7810001, 1304234795.7825, 1304234795.7835, 1304234795.7849998, 1304234795.7884998, 1304234795.7917502, 1304234795.7937503, 1304234795.80025, 1304234795.805, 1304234795.8055, 1304234795.809, 1304234795.8125, 1304234795.8137498, 1304234795.8149998, 1304234795.817, 1304234795.819, 1304234795.82, 1304234795.82175, 1304234795.82475, 1304234795.8265, 1304234795.8295, 1304234795.8335, 1304234795.83525, 1304234795.838, 1304234795.839, 1304234795.83975, 1304234795.842, 1304234795.8452501, 1304234795.8470001, 1304234795.8519998, 1304234795.8569999, 1304234795.86025, 1304234795.8639998, 1304234795.8645, 1304234795.8655, 1304234795.86725, 1304234795.87, 1304234795.87225, 1304234795.874, 1304234795.8765001, 1304234795.87675, 1304234795.878, 1304234795.87925, 1304234795.8795, 1304234795.8842502, 1304234795.88925, 1304234795.8895001, 1304234795.88975, 1304234795.8920002, 1304234795.8952498, 1304234795.8965, 1304234795.898, 1304234795.9015, 1304234795.9050002, 1304234795.9075, 1304234795.9115, 1304234795.91775, 1304234795.9204998, 1304234795.92125, 1304234795.92175, 1304234795.927, 1304234795.933, 1304234795.9397502, 1304234795.9467502, 1304234795.9482503, 1304234795.9505, 1304234795.95225, 1304234795.9537501, 1304234795.9545, 1304234795.955, 1304234795.9567502, 1304234795.959, 1304234795.96025, 1304234795.9605002, 1304234795.96175, 1304234795.9629998, 1304234795.9635, 1304234795.9695, 1304234795.97225, 1304234795.97275, 1304234795.974, 1304234795.9755, 1304234795.97675, 1304234795.9795, 1304234795.9822502, 1304234795.9872499, 1304234795.9917498, 1304234795.99375, 1304234795.996, 1304234795.9975, 1304234796.00075, 1304234796.00525, 1304234796.0075002, 1304234796.0105, 1304234796.0135, 1304234796.01625, 1304234796.01775, 1304234796.0185, 1304234796.021, 1304234796.0237498, 1304234796.0267498, 1304234796.0377498, 1304234796.04425, 1304234796.048, 1304234796.05125, 1304234796.0595002, 1304234796.0612502, 1304234796.0657501, 1304234796.072, 1304234796.0752501, 1304234796.0765, 1304234796.0787501, 1304234796.08, 1304234796.08025, 1304234796.08625, 1304234796.0945, 1304234796.10175, 1304234796.1079998, 1304234796.11075, 1304234796.11475, 1304234796.11825, 1304234796.1195002, 1304234796.12275, 1304234796.1269999, 1304234796.13025, 1304234796.1365, 1304234796.1405, 1304234796.1445, 1304234796.148, 1304234796.15, 1304234796.15275, 1304234796.1557503, 1304234796.1595001, 1304234796.1625, 1304234796.1665, 1304234796.171, 1304234796.1757498, 1304234796.18025, 1304234796.1852498, 1304234796.1894999, 1304234796.1947498, 1304234796.2005, 1304234796.2052503, 1304234796.2095, 1304234796.21175, 1304234796.216, 1304234796.21925, 1304234796.2209997, 1304234796.2220001, 1304234796.2224998, 1304234796.225, 1304234796.23525, 1304234796.2484999, 1304234796.2545, 1304234796.2565, 1304234796.2575, 1304234796.2575, 1304234796.25775, 1304234796.26075, 1304234796.2649999, 1304234796.2667499, 1304234796.2714999, 1304234796.2767498, 1304234796.2789998, 1304234796.287, 1304234796.29375, 1304234796.2965002, 1304234796.30075, 1304234796.303, 1304234796.3045, 1304234796.3075, 1304234796.30975, 1304234796.31075, 1304234796.3115, 1304234796.3122501, 1304234796.3157501, 1304234796.32225, 1304234796.33075, 1304234796.3407502, 1304234796.348, 1304234796.3505, 1304234796.3515, 1304234796.3555, 1304234796.36475, 1304234796.366, 1304234796.36875, 1304234796.3737502, 1304234796.3772502, 1304234796.37975, 1304234796.383, 1304234796.387, 1304234796.3995, 1304234796.4015, 1304234796.4057498, 1304234796.412, 1304234796.4152498, 1304234796.4250002, 1304234796.4365, 1304234796.446, 1304234796.4515, 1304234796.4555001, 1304234796.4565, 1304234796.4575, 1304234796.4629998, 1304234796.4699998, 1304234796.474, 1304234796.4760003, 1304234796.48975, 1304234796.49575, 1304234796.4980001, 1304234796.5019999, 1304234796.51125, 1304234796.51975, 1304234796.5222502, 1304234796.5245, 1304234796.5255, 1304234796.52775, 1304234796.5300002, 1304234796.53025, 1304234796.5370002, 1304234796.54625, 1304234796.5505, 1304234796.55575, 1304234796.5595, 1304234796.5827498, 1304234796.5924997, 1304234796.61025, 1304234796.61275, 1304234796.6225, 1304234796.62425, 1304234796.6269999, 1304234796.6285, 1304234796.62925, 1304234796.6312501, 1304234796.63925, 1304234796.6475, 1304234796.6514997, 1304234796.6545, 1304234796.6555, 1304234796.6575003, 1304234796.66175, 1304234796.66525, 1304234796.6665, 1304234796.68325, 1304234796.6877499, 1304234796.6947498, 1304234796.699, 1304234796.70175, 1304234796.70475, 1304234796.7085, 1304234796.712, 1304234796.737, 1304234796.7385, 1304234796.74175, 1304234796.7515001, 1304234796.769, 1304234796.78925, 1304234796.7989998, 1304234796.80175, 1304234796.8065, 1304234796.809, 1304234796.8095, 1304234796.8267498, 1304234796.8285, 1304234796.8360002, 1304234796.8425002, 1304234796.84375, 1304234796.85075, 1304234796.8555, 1304234796.856, 1304234796.861, 1304234796.868, 1304234796.87325, 1304234796.88025, 1304234796.88475, 1304234796.88625, 1304234796.8995, 1304234796.9119997, 1304234796.91475, 1304234796.92375, 1304234796.94425, 1304234796.94875, 1304234796.9575, 1304234796.97175, 1304234796.983, 1304234796.99275, 1304234797.0155, 1304234797.0655, 1304234797.0774999, 1304234797.08175, 1304234797.10425, 1304234797.132, 1304234797.152, 1304234797.18675, 1304234797.218, 1304234797.2385, 1304234797.27525, 1304234797.3292499, 1304234797.35625, 1304234797.3785, 1304234797.3997498, 1304234797.4117498, 1304234797.43925, 1304234797.47825, 1304234797.52575, 1304234797.54425, 1304234797.5565, 1304234797.5785003, 1304234797.62425, 1304234797.64925, 1304234797.6595001, 1304234797.664, 1304234797.67375, 1304234797.6855, 1304234797.7415, 1304234797.79875, 1304234797.8715, 1304234797.94, 1304234797.9537501, 1304234798.0225, 1304234798.18075, 1304234798.2887497, 1304234798.38025, 1304234798.47475, 2484498151.5947504, 3664761504.3377504, 3664761504.3585, 3664761504.39325, 3664761504.4055004, 3664761504.4305, 3664761504.45725, 3664761504.4725, 3664761504.484, 3664761504.5600004, 3664761504.63175, 3664761504.66175, 3664761504.6800003, 3664761504.70125, 3664761504.726, 3664761504.7317505, 3664761504.7345004, 3664761504.7387505, 3664761504.74325, 3664761504.76275, 3664761504.7805, 3664761504.78275, 3664761504.7985, 3664761504.8132496, 3664761504.81725, 3664761504.8365, 3664761504.84025, 3664761504.8447504, 3664761504.84875, 3664761504.85575, 3664761504.87, 3664761504.8849998, 3664761504.898, 3664761504.9172497, 3664761504.9327497, 3664761504.9362497, 3664761504.9395, 3664761504.9467506, 3664761504.96175, 3664761504.9725, 3664761504.979, 3664761504.98475, 3664761504.9892497, 3664761504.9919996, 3664761504.9995003, 3664761505.025, 3664761505.0325003, 3664761505.0345, 3664761505.0410004, 3664761505.048, 3664761505.05175, 3664761505.05575, 3664761505.05975, 3664761505.0682497, 3664761505.0754995, 3664761505.0845, 3664761505.0872498, 3664761505.08825, 3664761505.0909996, 3664761505.09525, 3664761505.09725, 3664761505.099, 3664761505.10575, 3664761505.123, 3664761505.1417503, 3664761505.1525, 3664761505.15775, 3664761505.1657495, 3664761505.1714997, 3664761505.1785, 3664761505.188, 3664761505.196, 3664761505.2035, 3664761505.21025, 3664761505.2127504, 3664761505.214, 3664761505.2252502, 3664761505.2355003, 3664761505.24725, 3664761505.255, 3664761505.26175, 3664761505.2720003, 3664761505.2795, 3664761505.28675, 3664761505.2955, 3664761505.302, 3664761505.305, 3664761505.30725, 3664761505.3085003, 3664761505.31625, 3664761505.342, 3664761505.3442497, 3664761505.3500004, 3664761505.35775, 3664761505.36325, 3664761505.3715, 3664761505.38175, 3664761505.38975, 3664761505.411, 3664761505.4115, 3664761505.415, 3664761505.41875, 3664761505.4240003, 3664761505.4350004, 3664761505.44175, 3664761505.4500003, 3664761505.458, 3664761505.46025, 3664761505.46525, 3664761505.4820004, 3664761505.497, 3664761505.5060005, 3664761505.5155, 3664761505.5205, 3664761505.5247498, 3664761505.5317497, 3664761505.5435, 3664761505.5532503, 3664761505.5655003, 3664761505.584, 3664761505.5959997, 3664761505.59875, 3664761505.6000004, 3664761505.6012497, 3664761505.60275, 3664761505.613, 3664761505.6210003, 3664761505.62925, 3664761505.632, 3664761505.63325, 3664761505.63375, 3664761505.63425, 3664761505.6349998, 3664761505.6359997, 3664761505.66225, 3664761505.6707497, 3664761505.6745005, 3664761505.68, 3664761505.6835, 3664761505.6925, 3664761505.69775, 3664761505.7002497, 3664761505.7077503, 3664761505.7182503, 3664761505.7275, 3664761505.7297497, 3664761505.73425, 3664761505.7384996, 3664761505.7475, 3664761505.7615004, 3664761505.769, 3664761505.77275, 3664761505.7749996, 3664761505.77625, 3664761505.77725, 3664761505.7782497, 3664761505.7795, 3664761505.78325, 3664761505.7865, 3664761505.794, 3664761505.80375, 3664761505.80725, 3664761505.809, 3664761505.81, 3664761505.8120003, 3664761505.81425, 3664761505.81475, 3664761505.8182507, 3664761505.8295, 3664761505.8399997, 3664761505.8504996, 3664761505.85225, 3664761505.8572497, 3664761505.8615, 3664761505.8652496, 3664761505.86675, 3664761505.8689995, 3664761505.8805003, 3664761505.88725, 3664761505.89575, 3664761505.899, 3664761505.90075, 3664761505.9035, 3664761505.90425, 3664761505.907, 3664761505.9105, 3664761505.9119997, 3664761505.91425, 3664761505.9185, 3664761505.9212503, 3664761505.9224997, 3664761505.92525, 3664761505.9364996, 3664761505.94075, 3664761505.9425, 3664761505.9467497, 3664761505.95175, 3664761505.95375, 3664761505.9560003, 3664761505.9655, 3664761505.9744997, 3664761505.978, 3664761505.9837503, 3664761505.988, 3664761505.9902496, 3664761505.9915, 3664761505.996, 3664761506.0012503, 3664761506.00325, 3664761506.00675, 3664761506.01225, 3664761506.013, 3664761506.0155, 3664761506.01875, 3664761506.02125, 3664761506.023, 3664761506.024, 3664761506.0247498, 3664761506.027, 3664761506.0325003, 3664761506.0354996, 3664761506.0422497, 3664761506.0477495, 3664761506.0547495, 3664761506.06225, 3664761506.06425, 3664761506.0655, 3664761506.0695, 3664761506.0727496, 3664761506.0734997, 3664761506.074, 3664761506.0752497, 3664761506.0769997, 3664761506.0807495, 3664761506.08575, 3664761506.0912495, 3664761506.09325, 3664761506.0967503, 3664761506.10075, 3664761506.1029997, 3664761506.10425, 3664761506.107, 3664761506.11325, 3664761506.12, 3664761506.125, 3664761506.12825, 3664761506.1289997, 3664761506.1324997, 3664761506.1342497, 3664761506.135, 3664761506.13725, 3664761506.1394997, 3664761506.14075, 3664761506.154, 3664761506.15975, 3664761506.1654997, 3664761506.1724997, 3664761506.1747503, 3664761506.1755, 3664761506.1782503, 3664761506.18225, 3664761506.185, 3664761506.1875, 3664761506.18925, 3664761506.19425, 3664761506.1992497, 3664761506.1994996, 3664761506.1995, 3664761506.20225, 3664761506.20625, 3664761506.2077503, 3664761506.20975, 3664761506.21375, 3664761506.21675, 3664761506.223, 3664761506.224, 3664761506.2267504, 3664761506.2295, 3664761506.23, 3664761506.231, 3664761506.23575, 3664761506.2407503, 3664761506.2415, 3664761506.2419996, 3664761506.24275, 3664761506.2437496, 3664761506.2452497, 3664761506.2475, 3664761506.25325, 3664761506.2594995, 3664761506.2612495, 3664761506.2627497, 3664761506.2634997, 3664761506.26425, 3664761506.267, 3664761506.27425, 3664761506.27625, 3664761506.28025, 3664761506.285, 3664761506.286, 3664761506.28825, 3664761506.29375, 3664761506.2955, 3664761506.29675, 3664761506.2977505, 3664761506.3032503, 3664761506.3047504, 3664761506.30875, 3664761506.31, 3664761506.311, 3664761506.3114996, 3664761506.3137503, 3664761506.316, 3664761506.3225, 3664761506.3265, 3664761506.3285003, 3664761506.33125, 3664761506.33375, 3664761506.33525, 3664761506.337, 3664761506.3407497, 3664761506.3477497, 3664761506.361, 3664761506.3645, 3664761506.37, 3664761506.3765, 3664761506.381, 3664761506.38175, 3664761506.38375, 3664761506.389, 3664761506.39375, 3664761506.3952503, 3664761506.4, 3664761506.40475, 3664761506.41125, 3664761506.41775, 3664761506.4230003, 3664761506.4285, 3664761506.4335, 3664761506.4352503, 3664761506.43725, 3664761506.441, 3664761506.4440002, 3664761506.4440002, 3664761506.4472504, 3664761506.4545, 3664761506.45475, 3664761506.4554996, 3664761506.4560003, 3664761506.4577503, 3664761506.461, 3664761506.4630003, 3664761506.465, 3664761506.46925, 3664761506.4717503, 3664761506.47225, 3664761506.473, 3664761506.476, 3664761506.48475, 3664761506.48775, 3664761506.488, 3664761506.49, 3664761506.49275, 3664761506.49425, 3664761506.4960003, 3664761506.498, 3664761506.5007496, 3664761506.50325, 3664761506.5045004, 3664761506.50625, 3664761506.50775, 3664761506.5097504, 3664761506.5130005, 3664761506.5165005, 3664761506.5175004, 3664761506.51925, 3664761506.5237503, 3664761506.5287504, 3664761506.5342503, 3664761506.5360003, 3664761506.5372505, 3664761506.538, 3664761506.54025, 3664761506.5427504, 3664761506.54375, 3664761506.545, 3664761506.54625, 3664761506.54775, 3664761506.55025, 3664761506.5552497, 3664761506.55925, 3664761506.5617504, 3664761506.5637503, 3664761506.5650005, 3664761506.5670004, 3664761506.56975, 3664761506.5717497, 3664761506.5734997, 3664761506.5757504, 3664761506.5769997, 3664761506.5785, 3664761506.5810003, 3664761506.583, 3664761506.5835, 3664761506.58525, 3664761506.59075, 3664761506.5960007, 3664761506.59825, 3664761506.59925, 3664761506.5997496, 3664761506.60075, 3664761506.604, 3664761506.6067505, 3664761506.60975, 3664761506.613, 3664761506.6165, 3664761506.6195, 3664761506.6202497, 3664761506.6227503, 3664761506.6240005, 3664761506.62575, 3664761506.627, 3664761506.62825, 3664761506.631, 3664761506.63325, 3664761506.63475, 3664761506.6355, 3664761506.6359997, 3664761506.63725, 3664761506.638, 3664761506.6400003, 3664761506.64725, 3664761506.649, 3664761506.6512504, 3664761506.6522503, 3664761506.6525, 3664761506.6535006, 3664761506.6552505, 3664761506.658, 3664761506.66, 3664761506.6602497, 3664761506.6605, 3664761506.663, 3664761506.6685, 3664761506.6727505, 3664761506.6747503, 3664761506.6765, 3664761506.6775, 3664761506.678, 3664761506.6835, 3664761506.68425, 3664761506.685, 3664761506.68575, 3664761506.69, 3664761506.6935, 3664761506.69825, 3664761506.7, 3664761506.7005, 3664761506.70825, 3664761506.7115, 3664761506.71525, 3664761506.7182503, 3664761506.7205, 3664761506.7215004, 3664761506.7244997, 3664761506.72725, 3664761506.72875, 3664761506.7314997, 3664761506.736, 3664761506.7390003, 3664761506.7395, 3664761506.7405, 3664761506.743, 3664761506.746, 3664761506.7475004, 3664761506.7485, 3664761506.75, 3664761506.7555, 3664761506.76175, 3664761506.76525, 3664761506.76875, 3664761506.7715, 3664761506.7735, 3664761506.77425, 3664761506.77625, 3664761506.7785, 3664761506.7817497, 3664761506.7834997, 3664761506.78475, 3664761506.7887497, 3664761506.79275, 3664761506.7939997, 3664761506.79525, 3664761506.7964997, 3664761506.80075, 3664761506.8042502, 3664761506.80475, 3664761506.8059998, 3664761506.80625, 3664761506.80725, 3664761506.8082504, 3664761506.809, 3664761506.8105, 3664761506.8117504, 3664761506.813, 3664761506.8164997, 3664761506.8202496, 3664761506.82125, 3664761506.822, 3664761506.82275, 3664761506.82325, 3664761506.8234997, 3664761506.8237495, 3664761506.82425, 3664761506.8265, 3664761506.8295, 3664761506.8305, 3664761506.8305, 3664761506.83275, 3664761506.8345003, 3664761506.83575, 3664761506.837, 3664761506.83975, 3664761506.843, 3664761506.84525, 3664761506.8464994, 3664761506.848, 3664761506.85075, 3664761506.8525, 3664761506.856, 3664761506.856, 3664761506.85625, 3664761506.86325, 3664761506.867, 3664761506.8684998, 3664761506.8710003, 3664761506.8727503, 3664761506.87575, 3664761506.878, 3664761506.8785, 3664761506.8825, 3664761506.88375, 3664761506.88525, 3664761506.88675, 3664761506.887, 3664761506.887, 3664761506.8877497, 3664761506.88875, 3664761506.89025, 3664761506.89275, 3664761506.8945, 3664761506.89575, 3664761506.89675, 3664761506.89875, 3664761506.8995, 3664761506.9005003, 3664761506.9022503, 3664761506.9084997, 3664761506.9102497, 3664761506.91075, 3664761506.911, 3664761506.9125, 3664761506.9142504, 3664761506.91475, 3664761506.91625, 3664761506.9177504, 3664761506.91825, 3664761506.9187503, 3664761506.9192495, 3664761506.9197493, 3664761506.92025, 3664761506.9207497, 3664761506.9209995, 3664761506.9212494, 3664761506.9215, 3664761506.92175, 3664761506.92275, 3664761506.924, 3664761506.92525, 3664761506.92875, 3664761506.932, 3664761506.9344997, 3664761506.936, 3664761506.9375, 3664761506.9387503, 3664761506.9417496, 3664761506.9449997, 3664761506.94875, 3664761506.94975, 3664761506.9525, 3664761506.95275, 3664761506.95325, 3664761506.9545, 3664761506.9560003, 3664761506.95675, 3664761506.95875, 3664761506.9605, 3664761506.96475, 3664761506.9677496, 3664761506.9685, 3664761506.9692497, 3664761506.9745, 3664761506.9752502, 3664761506.9762506, 3664761506.9767504, 3664761506.9782505, 3664761506.9800005, 3664761506.9852505, 3664761506.99275, 3664761506.9957495, 3664761506.9975, 3664761506.999, 3664761507.0, 3664761507.0009995, 3664761507.00575, 3664761507.0062504, 3664761507.0065002, 3664761507.0065002, 3664761507.0085, 3664761507.0092497, 3664761507.01125, 3664761507.0130005, 3664761507.01575, 3664761507.0185, 3664761507.021, 3664761507.0215, 3664761507.02175, 3664761507.022, 3664761507.02275, 3664761507.0235, 3664761507.0237503, 3664761507.02475, 3664761507.02575, 3664761507.02625, 3664761507.0274997, 3664761507.0295, 3664761507.03125, 3664761507.03325, 3664761507.035, 3664761507.0422497, 3664761507.0439997, 3664761507.0445, 3664761507.045, 3664761507.0465, 3664761507.049, 3664761507.05, 3664761507.051, 3664761507.0559998, 3664761507.05725, 3664761507.0597496, 3664761507.0604997, 3664761507.0604997, 3664761507.0605, 3664761507.0617504, 3664761507.06325, 3664761507.067, 3664761507.07125, 3664761507.0727496, 3664761507.08375, 3664761507.0855, 3664761507.08875, 3664761507.09475, 3664761507.0955, 3664761507.1025, 3664761507.10425, 3664761507.10475, 3664761507.1055, 3664761507.1070004, 3664761507.1087503, 3664761507.10975, 3664761507.11125, 3664761507.11275, 3664761507.11725, 3664761507.12175, 3664761507.1239996, 3664761507.1262503, 3664761507.13, 3664761507.1305, 3664761507.135, 3664761507.14, 3664761507.1417494, 3664761507.1425, 3664761507.1464996, 3664761507.1505003, 3664761507.151, 3664761507.153, 3664761507.15525, 3664761507.1570005, 3664761507.1582503, 3664761507.16025, 3664761507.16325, 3664761507.1654997, 3664761507.168, 3664761507.16975, 3664761507.1715, 3664761507.17325, 3664761507.17425, 3664761507.1765003, 3664761507.178, 3664761507.178, 3664761507.1805, 3664761507.18375, 3664761507.18675, 3664761507.20025, 3664761507.20475, 3664761507.205, 3664761507.20525, 3664761507.2059994, 3664761507.2075, 3664761507.21025, 3664761507.21275, 3664761507.21325, 3664761507.2135, 3664761507.2142496, 3664761507.2165, 3664761507.21875, 3664761507.21975, 3664761507.2205, 3664761507.2225, 3664761507.226, 3664761507.227, 3664761507.22775, 3664761507.22825, 3664761507.22925, 3664761507.2302504, 3664761507.2312503, 3664761507.23225, 3664761507.2345, 3664761507.23675, 3664761507.23725, 3664761507.23875, 3664761507.2465, 3664761507.2522497, 3664761507.253, 3664761507.2539997, 3664761507.2545, 3664761507.25475, 3664761507.255, 3664761507.2555, 3664761507.257, 3664761507.259, 3664761507.26025, 3664761507.26275, 3664761507.267, 3664761507.26925, 3664761507.2697496, 3664761507.2712502, 3664761507.2732506, 3664761507.275, 3664761507.2764997, 3664761507.279, 3664761507.2817497, 3664761507.285, 3664761507.29175, 3664761507.293, 3664761507.29425, 3664761507.2955, 3664761507.297, 3664761507.29875, 3664761507.30275, 3664761507.3047504, 3664761507.30625, 3664761507.3077497, 3664761507.3114996, 3664761507.3137503, 3664761507.3199997, 3664761507.325, 3664761507.32725, 3664761507.332, 3664761507.3374996, 3664761507.341, 3664761507.3425, 3664761507.34375, 3664761507.345, 3664761507.3462496, 3664761507.3475, 3664761507.3497496, 3664761507.35175, 3664761507.35675, 3664761507.3595, 3664761507.36325, 3664761507.3665, 3664761507.3675003, 3664761507.369, 3664761507.3704996, 3664761507.371, 3664761507.3735, 3664761507.3762503, 3664761507.3789997, 3664761507.38225, 3664761507.38375, 3664761507.384, 3664761507.3915, 3664761507.3929996, 3664761507.3947496, 3664761507.3955, 3664761507.39575, 3664761507.39625, 3664761507.3975, 3664761507.399, 3664761507.4005003, 3664761507.4034996, 3664761507.40575, 3664761507.4065, 3664761507.4072504, 3664761507.40875, 3664761507.4105, 3664761507.41125, 3664761507.41325, 3664761507.41475, 3664761507.4160004, 3664761507.4232497, 3664761507.4242506, 3664761507.425, 3664761507.427, 3664761507.427, 3664761507.42725, 3664761507.42975, 3664761507.432, 3664761507.4332504, 3664761507.4355, 3664761507.4367504, 3664761507.4375, 3664761507.4397497, 3664761507.44425, 3664761507.4454994, 3664761507.44775, 3664761507.45, 3664761507.45175, 3664761507.45275, 3664761507.4537497, 3664761507.45525, 3664761507.4577503, 3664761507.45975, 3664761507.4615, 3664761507.4615, 3664761507.462, 3664761507.4639997, 3664761507.467, 3664761507.4694996, 3664761507.4709997, 3664761507.473, 3664761507.47575, 3664761507.47925, 3664761507.47975, 3664761507.4820004, 3664761507.486, 3664761507.4882503, 3664761507.4905005, 3664761507.491, 3664761507.4915, 3664761507.4915, 3664761507.492, 3664761507.496, 3664761507.4995, 3664761507.50075, 3664761507.5037503, 3664761507.5102496, 3664761507.5132504, 3664761507.51575, 3664761507.5185, 3664761507.5202503, 3664761507.5212502, 3664761507.52275, 3664761507.5245, 3664761507.5250006, 3664761507.5252504, 3664761507.52675, 3664761507.528, 3664761507.5282497, 3664761507.5290003, 3664761507.5299997, 3664761507.5305004, 3664761507.5315, 3664761507.53475, 3664761507.53925, 3664761507.5422497, 3664761507.54675, 3664761507.55125, 3664761507.553, 3664761507.55425, 3664761507.5602503, 3664761507.5615, 3664761507.56425, 3664761507.56625, 3664761507.5699997, 3664761507.57275, 3664761507.573, 3664761507.5734997, 3664761507.57625, 3664761507.57675, 3664761507.57825, 3664761507.57975, 3664761507.58025, 3664761507.58125, 3664761507.5825, 3664761507.584, 3664761507.58525, 3664761507.586, 3664761507.5885, 3664761507.5905004, 3664761507.5912504, 3664761507.5930004, 3664761507.5955, 3664761507.597, 3664761507.59825, 3664761507.6002502, 3664761507.6032495, 3664761507.604, 3664761507.60425, 3664761507.6075, 3664761507.609, 3664761507.61075, 3664761507.61475, 3664761507.618, 3664761507.62175, 3664761507.6260004, 3664761507.6280003, 3664761507.6292505, 3664761507.634, 3664761507.63875, 3664761507.63975, 3664761507.6419997, 3664761507.64425, 3664761507.6475, 3664761507.6515, 3664761507.6525, 3664761507.65475, 3664761507.658, 3664761507.6595, 3664761507.66175, 3664761507.664, 3664761507.66425, 3664761507.66575, 3664761507.6675005, 3664761507.6707497, 3664761507.674, 3664761507.67625, 3664761507.67825, 3664761507.679, 3664761507.68075, 3664761507.682, 3664761507.6825004, 3664761507.6832504, 3664761507.686, 3664761507.6905003, 3664761507.69325, 3664761507.69425, 3664761507.6955, 3664761507.6955004, 3664761507.69775, 3664761507.7002497, 3664761507.7005, 3664761507.70125, 3664761507.70275, 3664761507.704, 3664761507.70475, 3664761507.706, 3664761507.70975, 3664761507.71125, 3664761507.7122498, 3664761507.71325, 3664761507.7142496, 3664761507.7155, 3664761507.718, 3664761507.7244997, 3664761507.7295, 3664761507.73125, 3664761507.73325, 3664761507.7345, 3664761507.735, 3664761507.7355003, 3664761507.73875, 3664761507.74675, 3664761507.752, 3664761507.75625, 3664761507.7585, 3664761507.7597504, 3664761507.76075, 3664761507.76425, 3664761507.7685, 3664761507.76975, 3664761507.77225, 3664761507.775, 3664761507.7770004, 3664761507.77775, 3664761507.7785, 3664761507.7805004, 3664761507.7840004, 3664761507.78625, 3664761507.7865, 3664761507.78725, 3664761507.7892504, 3664761507.79075, 3664761507.7915, 3664761507.7935, 3664761507.79525, 3664761507.7962503, 3664761507.7992496, 3664761507.802, 3664761507.8035, 3664761507.8065004, 3664761507.8167505, 3664761507.82825, 3664761507.8337502, 3664761507.83775, 3664761507.8385, 3664761507.8415003, 3664761507.84375, 3664761507.8450003, 3664761507.8467503, 3664761507.84925, 3664761507.8512497, 3664761507.85275, 3664761507.8532495, 3664761507.85575, 3664761507.8599997, 3664761507.862, 3664761507.864, 3664761507.8645, 3664761507.8645, 3664761507.86475, 3664761507.8652506, 3664761507.8672504, 3664761507.8715, 3664761507.87425, 3664761507.87475, 3664761507.8754997, 3664761507.8765, 3664761507.8777504, 3664761507.8807497, 3664761507.8829994, 3664761507.88525, 3664761507.8877497, 3664761507.89125, 3664761507.8915, 3664761507.8999996, 3664761507.90275, 3664761507.9075003, 3664761507.9092503, 3664761507.916, 3664761507.9277496, 3664761507.93425, 3664761507.936, 3664761507.9384995, 3664761507.9395, 3664761507.94425, 3664761507.95, 3664761507.952, 3664761507.9525003, 3664761507.9545, 3664761507.9575, 3664761507.96, 3664761507.9622498, 3664761507.964, 3664761507.967, 3664761507.972, 3664761507.9752502, 3664761507.9765005, 3664761507.98075, 3664761507.98575, 3664761507.9875, 3664761507.9915, 3664761507.9945, 3664761507.9960003, 3664761507.9975, 3664761507.9985, 3664761508.002, 3664761508.00525, 3664761508.007, 3664761508.0082498, 3664761508.00975, 3664761508.01225, 3664761508.0160003, 3664761508.0195, 3664761508.0222497, 3664761508.0255003, 3664761508.03025, 3664761508.03675, 3664761508.0422497, 3664761508.0427504, 3664761508.0435, 3664761508.0442495, 3664761508.0445004, 3664761508.045, 3664761508.0495, 3664761508.0555, 3664761508.05875, 3664761508.06075, 3664761508.0635004, 3664761508.06575, 3664761508.0725, 3664761508.075, 3664761508.076, 3664761508.077, 3664761508.0775003, 3664761508.0775003, 3664761508.078, 3664761508.0785, 3664761508.08, 3664761508.0909996, 3664761508.0927496, 3664761508.1017504, 3664761508.11225, 3664761508.11575, 3664761508.1175003, 3664761508.12925, 3664761508.14225, 3664761508.1445003, 3664761508.1460004, 3664761508.1485004, 3664761508.152, 3664761508.1592503, 3664761508.164, 3664761508.16875, 3664761508.1705, 3664761508.1742496, 3664761508.17825, 3664761508.18075, 3664761508.185, 3664761508.18925, 3664761508.1915, 3664761508.19375, 3664761508.196, 3664761508.1967497, 3664761508.1995, 3664761508.2157497, 3664761508.2215004, 3664761508.2250004, 3664761508.2282505, 3664761508.22875, 3664761508.234, 3664761508.2415, 3664761508.24475, 3664761508.2475, 3664761508.2504997, 3664761508.2542496, 3664761508.25875, 3664761508.262, 3664761508.26625, 3664761508.2705, 3664761508.2749996, 3664761508.2790003, 3664761508.28025, 3664761508.28075, 3664761508.28375, 3664761508.2964997, 3664761508.29775, 3664761508.2997503, 3664761508.309, 3664761508.3175, 3664761508.32125, 3664761508.3245, 3664761508.3255, 3664761508.32975, 3664761508.335, 3664761508.33975, 3664761508.3445, 3664761508.3525, 3664761508.3552504, 3664761508.35625, 3664761508.361, 3664761508.3655, 3664761508.36975, 3664761508.376, 3664761508.3795, 3664761508.385, 3664761508.3894997, 3664761508.3935003, 3664761508.3955, 3664761508.396, 3664761508.3964996, 3664761508.39775, 3664761508.40125, 3664761508.4045, 3664761508.4072495, 3664761508.40975, 3664761508.41075, 3664761508.41425, 3664761508.4207497, 3664761508.429, 3664761508.43425, 3664761508.4414997, 3664761508.44375, 3664761508.44525, 3664761508.458, 3664761508.4727497, 3664761508.47775, 3664761508.484, 3664761508.4905, 3664761508.4937496, 3664761508.49475, 3664761508.5005, 3664761508.5200005, 3664761508.52475, 3664761508.5345, 3664761508.54425, 3664761508.54975, 3664761508.552, 3664761508.5535, 3664761508.5544996, 3664761508.5715, 3664761508.5822496, 3664761508.5897503, 3664761508.59075, 3664761508.5925, 3664761508.6224995, 3664761508.6305, 3664761508.6324997, 3664761508.64025, 3664761508.6495, 3664761508.668, 3664761508.6809998, 3664761508.6835003, 3664761508.6917496, 3664761508.70475, 3664761508.71275, 3664761508.7212496, 3664761508.72725, 3664761508.736, 3664761508.75725, 3664761508.7822504, 3664761508.7895, 3664761508.792, 3664761508.793, 3664761508.7939997, 3664761508.79775, 3664761508.84025, 3664761508.8555, 3664761508.864, 3664761508.8684998, 3664761508.87325, 3664761508.8775, 3664761508.89775, 3664761508.8995, 3664761508.9025, 3664761508.90575, 3664761508.908, 3664761508.91375, 3664761508.94675, 3664761508.9890003, 3664761509.00375, 3664761509.0042496, 3664761509.011, 3664761509.0205, 3664761509.0325003, 3664761509.04925, 3664761509.05875, 3664761509.0675, 3664761509.1219997, 3664761509.1452503, 3664761509.14625, 3664761509.152, 3664761509.16925, 3664761509.1815004, 3664761509.184, 3664761509.18775, 3664761509.19425, 3664761509.2139997, 3664761509.24275, 3664761509.27075, 3664761509.2885, 3664761509.30275, 3664761509.317, 3664761509.33775, 3664761509.35575, 3664761509.366, 3664761509.3964996, 3664761509.42125, 3664761509.4242496, 3664761509.4365, 3664761509.4562497, 3664761509.46525, 3664761509.51525, 3664761509.578, 3664761509.60375, 3664761509.6280003, 3664761509.635, 3664761509.65625, 3664761509.6767497, 3664761509.68525, 3664761509.70875, 3664761509.72675, 3664761509.73825, 3664761509.7507496, 3664761509.78475, 3664761509.8219995, 3664761509.8617496, 3664761509.8929996, 3664761509.90075, 3664761509.91, 3664761509.95525, 3664761510.00475, 3664761510.015, 3664761510.0195, 3664761510.08375, 3664761510.1012497, 3664761510.1154995, 3664761510.1359997, 3664761510.212, 3664761510.2974997, 3664761510.4065, 3664761510.5405, 3664761510.7122498, 3664761510.9820004, 3686331568.1330004, 3707901625.19525, 3707901625.285, 3707901625.2945004, 3707901625.30475, 3707901625.3069997, 3707901625.329, 3707901625.3315, 3707901625.347, 3707901625.35325, 3707901625.35725, 3707901625.37575, 3707901625.3859997, 3707901625.3915005, 3707901625.39375, 3707901625.3952503, 3707901625.4040003, 3707901625.413, 3707901625.4142504, 3707901625.41625, 3707901625.4187503, 3707901625.41975, 3707901625.4205, 3707901625.42275, 3707901625.4317503, 3707901625.4420004, 3707901625.45775, 3707901625.4612503, 3707901625.4625006, 3707901625.4662504, 3707901625.48, 3707901625.49, 3707901625.4972496, 3707901625.4987497, 3707901625.5015, 3707901625.5035, 3707901625.50425, 3707901625.5205, 3707901625.533, 3707901625.53975, 3707901625.5462494, 3707901625.55325, 3707901625.55675, 3707901625.56025, 3707901625.5704994, 3707901625.5775, 3707901625.582, 3707901625.5862503, 3707901625.58825, 3707901625.58925, 3707901625.59025, 3707901625.59125, 3707901625.5982494, 3707901625.6004996, 3707901625.60225, 3707901625.6045, 3707901625.6064997, 3707901625.6115, 3707901625.6202497, 3707901625.6257496, 3707901625.635, 3707901625.63725, 3707901625.6415, 3707901625.64725, 3707901625.64925, 3707901625.6559997, 3707901625.659, 3707901625.663, 3707901625.66575, 3707901625.6759996, 3707901625.6777496, 3707901625.679, 3707901625.6865, 3707901625.68825, 3707901625.693, 3707901625.6990004, 3707901625.70825, 3707901625.70925, 3707901625.71, 3707901625.7130003, 3707901625.7200003, 3707901625.722, 3707901625.7245, 3707901625.72775, 3707901625.73, 3707901625.7320004, 3707901625.73625, 3707901625.741, 3707901625.74175, 3707901625.743, 3707901625.7465, 3707901625.7510004, 3707901625.752, 3707901625.75475, 3707901625.75725, 3707901625.7585, 3707901625.76, 3707901625.76075, 3707901625.7612505, 3707901625.7650003, 3707901625.76725, 3707901625.77075, 3707901625.77525, 3707901625.777, 3707901625.77775, 3707901625.7782497, 3707901625.77925, 3707901625.78, 3707901625.78, 3707901625.78, 3707901625.78025, 3707901625.78125, 3707901625.78525, 3707901625.78875, 3707901625.7925, 3707901625.7935, 3707901625.7945004, 3707901625.7955, 3707901625.79725, 3707901625.801, 3707901625.8055, 3707901625.80725, 3707901625.8125, 3707901625.821, 3707901625.82475, 3707901625.825, 3707901625.825, 3707901625.8282504, 3707901625.8380003, 3707901625.84175, 3707901625.8430004, 3707901625.844, 3707901625.8450003, 3707901625.8457503, 3707901625.8467503, 3707901625.8475, 3707901625.8480005, 3707901625.8500004, 3707901625.8570004, 3707901625.8635006, 3707901625.8645005, 3707901625.8657503, 3707901625.8695, 3707901625.87675, 3707901625.88175, 3707901625.88425, 3707901625.88675, 3707901625.8875, 3707901625.888, 3707901625.8885, 3707901625.89275, 3707901625.9022503, 3707901625.903, 3707901625.90575, 3707901625.90775, 3707901625.909, 3707901625.9105, 3707901625.91575, 3707901625.918, 3707901625.92, 3707901625.92175, 3707901625.923, 3707901625.92725, 3707901625.92975, 3707901625.932, 3707901625.9327497, 3707901625.93775, 3707901625.9405003, 3707901625.9422503, 3707901625.9445, 3707901625.94675, 3707901625.94825, 3707901625.9535, 3707901625.9575, 3707901625.9585, 3707901625.9657497, 3707901625.969, 3707901625.9700003, 3707901625.9712496, 3707901625.9817505, 3707901625.98225, 3707901625.98925, 3707901625.9915, 3707901625.9942503, 3707901625.9955, 3707901625.9960003, 3707901625.99625, 3707901625.997, 3707901625.9975, 3707901625.9989996, 3707901626.001, 3707901626.002, 3707901626.0030003, 3707901626.0035, 3707901626.0074997, 3707901626.017, 3707901626.0195, 3707901626.0214996, 3707901626.0237503, 3707901626.02575, 3707901626.02775, 3707901626.0295, 3707901626.033, 3707901626.0342503, 3707901626.035, 3707901626.0377502, 3707901626.0404997, 3707901626.0412498, 3707901626.04175, 3707901626.042, 3707901626.0435, 3707901626.0455003, 3707901626.04875, 3707901626.05025, 3707901626.0535, 3707901626.06275, 3707901626.06325, 3707901626.064, 3707901626.0647497, 3707901626.0667496, 3707901626.0754995, 3707901626.0772495, 3707901626.0775, 3707901626.078, 3707901626.07875, 3707901626.08075, 3707901626.087, 3707901626.08775, 3707901626.0885, 3707901626.0897503, 3707901626.09175, 3707901626.0935, 3707901626.0950003, 3707901626.0959997, 3707901626.0965, 3707901626.09725, 3707901626.1005, 3707901626.1067505, 3707901626.1115, 3707901626.11275, 3707901626.1137495, 3707901626.1145, 3707901626.1152496, 3707901626.116, 3707901626.11925, 3707901626.1227503, 3707901626.125, 3707901626.1262503, 3707901626.1289997, 3707901626.13225, 3707901626.1335, 3707901626.1344995, 3707901626.1355, 3707901626.1367497, 3707901626.138, 3707901626.13875, 3707901626.139, 3707901626.1395, 3707901626.1432505, 3707901626.1549997, 3707901626.158, 3707901626.1584997, 3707901626.1604996, 3707901626.16525, 3707901626.16625, 3707901626.1665, 3707901626.16675, 3707901626.1679997, 3707901626.1692495, 3707901626.17025, 3707901626.1712503, 3707901626.1715, 3707901626.17175, 3707901626.1729994, 3707901626.17375, 3707901626.1742496, 3707901626.1765, 3707901626.1775, 3707901626.17775, 3707901626.179, 3707901626.1827497, 3707901626.184, 3707901626.1862497, 3707901626.18875, 3707901626.1897497, 3707901626.19175, 3707901626.1930003, 3707901626.1937504, 3707901626.1945, 3707901626.1967497, 3707901626.19975, 3707901626.20075, 3707901626.201, 3707901626.2015, 3707901626.20225, 3707901626.2042503, 3707901626.20675, 3707901626.208, 3707901626.2089996, 3707901626.21075, 3707901626.2115, 3707901626.212, 3707901626.21225, 3707901626.2125, 3707901626.21375, 3707901626.21875, 3707901626.22075, 3707901626.226, 3707901626.2285, 3707901626.22925, 3707901626.2300005, 3707901626.2317505, 3707901626.23325, 3707901626.2337503, 3707901626.23475, 3707901626.2367496, 3707901626.2372503, 3707901626.2387505, 3707901626.2439995, 3707901626.2474995, 3707901626.24825, 3707901626.2495003, 3707901626.2535, 3707901626.2575, 3707901626.2590003, 3707901626.2595, 3707901626.26, 3707901626.26175, 3707901626.26375, 3707901626.26725, 3707901626.2705, 3707901626.2714996, 3707901626.2717505, 3707901626.27225, 3707901626.2730002, 3707901626.27475, 3707901626.2799997, 3707901626.2939997, 3707901626.296, 3707901626.2997503, 3707901626.3035, 3707901626.3042507, 3707901626.306, 3707901626.30875, 3707901626.3105, 3707901626.3120003, 3707901626.3134995, 3707901626.314, 3707901626.3145, 3707901626.31675, 3707901626.3185, 3707901626.3195, 3707901626.3222504, 3707901626.3225, 3707901626.3265, 3707901626.3432503, 3707901626.3462496, 3707901626.34875, 3707901626.3500004, 3707901626.35225, 3707901626.3552504, 3707901626.356, 3707901626.3567495, 3707901626.358, 3707901626.36025, 3707901626.36175, 3707901626.36725, 3707901626.3685, 3707901626.3687506, 3707901626.36975, 3707901626.37125, 3707901626.37475, 3707901626.3795004, 3707901626.3825, 3707901626.3835, 3707901626.387, 3707901626.39075, 3707901626.39175, 3707901626.39225, 3707901626.394, 3707901626.39625, 3707901626.39775, 3707901626.3987503, 3707901626.39925, 3707901626.3997498, 3707901626.4015007, 3707901626.403, 3707901626.4052496, 3707901626.407, 3707901626.41, 3707901626.41075, 3707901626.4115, 3707901626.4135, 3707901626.418, 3707901626.421, 3707901626.42275, 3707901626.4285, 3707901626.44, 3707901626.44075, 3707901626.4420004, 3707901626.4449997, 3707901626.4455004, 3707901626.448, 3707901626.4505005, 3707901626.45275, 3707901626.455, 3707901626.45875, 3707901626.4607496, 3707901626.46475, 3707901626.4665, 3707901626.4682503, 3707901626.4712505, 3707901626.474, 3707901626.47725, 3707901626.47875, 3707901626.4795, 3707901626.4800005, 3707901626.48075, 3707901626.481, 3707901626.481, 3707901626.48175, 3707901626.483, 3707901626.484, 3707901626.4845, 3707901626.4905, 3707901626.49275, 3707901626.4957504, 3707901626.49725, 3707901626.49825, 3707901626.502, 3707901626.5055, 3707901626.507, 3707901626.50825, 3707901626.50925, 3707901626.5105, 3707901626.5112505, 3707901626.514, 3707901626.51625, 3707901626.51675, 3707901626.5225, 3707901626.5237503, 3707901626.5245, 3707901626.5252504, 3707901626.52575, 3707901626.52775, 3707901626.52975, 3707901626.5304995, 3707901626.531, 3707901626.5360003, 3707901626.54, 3707901626.5445004, 3707901626.546, 3707901626.54725, 3707901626.55, 3707901626.5512505, 3707901626.5530005, 3707901626.55475, 3707901626.5557504, 3707901626.55725, 3707901626.5582504, 3707901626.5610003, 3707901626.5637503, 3707901626.566, 3707901626.57125, 3707901626.5752497, 3707901626.5777497, 3707901626.5795, 3707901626.58125, 3707901626.5815, 3707901626.5815, 3707901626.583, 3707901626.585, 3707901626.587, 3707901626.5885, 3707901626.5907497, 3707901626.593, 3707901626.5944996, 3707901626.59575, 3707901626.5967503, 3707901626.599, 3707901626.60075, 3707901626.6019998, 3707901626.602, 3707901626.60325, 3707901626.6049995, 3707901626.60575, 3707901626.6064997, 3707901626.6070004, 3707901626.609, 3707901626.6125, 3707901626.6140003, 3707901626.61675, 3707901626.61725, 3707901626.619, 3707901626.62, 3707901626.6215, 3707901626.6227503, 3707901626.62475, 3707901626.63, 3707901626.632, 3707901626.63275, 3707901626.63325, 3707901626.63375, 3707901626.6342497, 3707901626.635, 3707901626.6359997, 3707901626.639, 3707901626.6425, 3707901626.64275, 3707901626.6467505, 3707901626.6540003, 3707901626.66325, 3707901626.66475, 3707901626.667, 3707901626.6685, 3707901626.6702495, 3707901626.67175, 3707901626.6742496, 3707901626.6762495, 3707901626.68075, 3707901626.68575, 3707901626.6870003, 3707901626.6885004, 3707901626.6895, 3707901626.6922503, 3707901626.69475, 3707901626.695, 3707901626.696, 3707901626.69825, 3707901626.7007504, 3707901626.702, 3707901626.70525, 3707901626.7085, 3707901626.70875, 3707901626.71125, 3707901626.7139997, 3707901626.715, 3707901626.7155, 3707901626.7182503, 3707901626.7235003, 3707901626.72725, 3707901626.7302504, 3707901626.73325, 3707901626.736, 3707901626.7365, 3707901626.73925, 3707901626.7419996, 3707901626.7442503, 3707901626.745, 3707901626.7477503, 3707901626.74825, 3707901626.749, 3707901626.74975, 3707901626.75275, 3707901626.75575, 3707901626.76075, 3707901626.7629995, 3707901626.763, 3707901626.76875, 3707901626.7749996, 3707901626.77575, 3707901626.7764997, 3707901626.77775, 3707901626.7785, 3707901626.77925, 3707901626.78125, 3707901626.7845, 3707901626.78825, 3707901626.79025, 3707901626.79125, 3707901626.79525, 3707901626.79925, 3707901626.8, 3707901626.8015, 3707901626.8027496, 3707901626.80425, 3707901626.8065, 3707901626.8075, 3707901626.8077497, 3707901626.80925, 3707901626.8105, 3707901626.8135, 3707901626.8152504, 3707901626.81625, 3707901626.818, 3707901626.819, 3707901626.8204994, 3707901626.82425, 3707901626.8255, 3707901626.8269997, 3707901626.8277493, 3707901626.83, 3707901626.8329997, 3707901626.83325, 3707901626.836, 3707901626.8424997, 3707901626.8435, 3707901626.84475, 3707901626.8462496, 3707901626.848, 3707901626.85125, 3707901626.85375, 3707901626.85425, 3707901626.855, 3707901626.8555, 3707901626.856, 3707901626.8565, 3707901626.85675, 3707901626.8592496, 3707901626.86125, 3707901626.8622503, 3707901626.8635, 3707901626.86775, 3707901626.87125, 3707901626.87175, 3707901626.8724995, 3707901626.8729997, 3707901626.873, 3707901626.87375, 3707901626.875, 3707901626.8757496, 3707901626.87875, 3707901626.88225, 3707901626.8827496, 3707901626.88375, 3707901626.8875, 3707901626.8912497, 3707901626.8925, 3707901626.894, 3707901626.8965, 3707901626.901, 3707901626.90625, 3707901626.9072495, 3707901626.908, 3707901626.9084997, 3707901626.9090004, 3707901626.90975, 3707901626.9115, 3707901626.91225, 3707901626.9125, 3707901626.9142504, 3707901626.91575, 3707901626.9172497, 3707901626.91775, 3707901626.91875, 3707901626.9207497, 3707901626.923, 3707901626.92475, 3707901626.92725, 3707901626.9285, 3707901626.9295, 3707901626.9325, 3707901626.935, 3707901626.9362497, 3707901626.9379997, 3707901626.9414997, 3707901626.9449997, 3707901626.951, 3707901626.9537497, 3707901626.9555, 3707901626.95975, 3707901626.96575, 3707901626.9695, 3707901626.9729996, 3707901626.977, 3707901626.978, 3707901626.97925, 3707901626.9839997, 3707901626.986, 3707901626.98825, 3707901626.9915, 3707901626.9945, 3707901626.99725, 3707901626.9992504, 3707901627.00175, 3707901627.0082498, 3707901627.01, 3707901627.0115004, 3707901627.012, 3707901627.01225, 3707901627.0130005, 3707901627.01425, 3707901627.01475, 3707901627.0167503, 3707901627.01925, 3707901627.02, 3707901627.0205, 3707901627.026, 3707901627.0290003, 3707901627.0299997, 3707901627.03075, 3707901627.0322495, 3707901627.03475, 3707901627.037, 3707901627.04, 3707901627.0422497, 3707901627.0425, 3707901627.05175, 3707901627.054, 3707901627.0565, 3707901627.0579996, 3707901627.07775, 3707901627.078, 3707901627.08075, 3707901627.083, 3707901627.0837502, 3707901627.0855, 3707901627.0865, 3707901627.0907497, 3707901627.0935, 3707901627.0950003, 3707901627.0975, 3707901627.1002502, 3707901627.109, 3707901627.1125, 3707901627.117, 3707901627.1200004, 3707901627.12525, 3707901627.1262503, 3707901627.1280003, 3707901627.1292505, 3707901627.1335, 3707901627.1382504, 3707901627.14025, 3707901627.14225, 3707901627.147, 3707901627.14725, 3707901627.1487503, 3707901627.1497498, 3707901627.1502495, 3707901627.15175, 3707901627.1545, 3707901627.1552496, 3707901627.15825, 3707901627.164, 3707901627.1644998, 3707901627.1657495, 3707901627.167, 3707901627.1727505, 3707901627.1747503, 3707901627.1762505, 3707901627.1780005, 3707901627.18075, 3707901627.182, 3707901627.1825, 3707901627.18375, 3707901627.18425, 3707901627.19075, 3707901627.1952505, 3707901627.2037497, 3707901627.2054996, 3707901627.21025, 3707901627.2200003, 3707901627.22125, 3707901627.22275, 3707901627.22375, 3707901627.2255, 3707901627.2285, 3707901627.23075, 3707901627.232, 3707901627.2352495, 3707901627.2384996, 3707901627.2400002, 3707901627.24025, 3707901627.2407503, 3707901627.24175, 3707901627.2454996, 3707901627.2485, 3707901627.24875, 3707901627.2495, 3707901627.2545004, 3707901627.258, 3707901627.2662497, 3707901627.2702503, 3707901627.27075, 3707901627.27225, 3707901627.2737503, 3707901627.27425, 3707901627.2834997, 3707901627.2860003, 3707901627.2867503, 3707901627.29, 3707901627.29325, 3707901627.2995, 3707901627.3015003, 3707901627.3077497, 3707901627.3132496, 3707901627.3185, 3707901627.32025, 3707901627.321, 3707901627.3217497, 3707901627.32325, 3707901627.32475, 3707901627.3254995, 3707901627.3272495, 3707901627.3285, 3707901627.32875, 3707901627.3290005, 3707901627.32975, 3707901627.34225, 3707901627.34275, 3707901627.34625, 3707901627.3500004, 3707901627.3517504, 3707901627.3547506, 3707901627.359, 3707901627.36425, 3707901627.37, 3707901627.379, 3707901627.38025, 3707901627.3825, 3707901627.384, 3707901627.38475, 3707901627.3895, 3707901627.39375, 3707901627.396, 3707901627.4032497, 3707901627.40575, 3707901627.409, 3707901627.4127502, 3707901627.4145, 3707901627.4155006, 3707901627.4160004, 3707901627.4222503, 3707901627.42725, 3707901627.4292502, 3707901627.4312506, 3707901627.4347506, 3707901627.4377503, 3707901627.43825, 3707901627.439, 3707901627.4420004, 3707901627.4487495, 3707901627.44975, 3707901627.4560003, 3707901627.4592495, 3707901627.4632497, 3707901627.46725, 3707901627.47275, 3707901627.4745, 3707901627.48425, 3707901627.4915, 3707901627.493, 3707901627.4945, 3707901627.496, 3707901627.4969997, 3707901627.5025, 3707901627.5045, 3707901627.51725, 3707901627.51925, 3707901627.52175, 3707901627.52425, 3707901627.5290003, 3707901627.53275, 3707901627.533, 3707901627.539, 3707901627.54025, 3707901627.541, 3707901627.542, 3707901627.5435, 3707901627.54575, 3707901627.5492506, 3707901627.55225, 3707901627.55475, 3707901627.55675, 3707901627.5575, 3707901627.5594997, 3707901627.56225, 3707901627.57225, 3707901627.5815, 3707901627.58375, 3707901627.5855, 3707901627.5855, 3707901627.5864997, 3707901627.5912495, 3707901627.5985003, 3707901627.6099997, 3707901627.61075, 3707901627.6165, 3707901627.6169996, 3707901627.6254997, 3707901627.6275, 3707901627.6305, 3707901627.63375, 3707901627.6345005, 3707901627.63725, 3707901627.6405, 3707901627.6417503, 3707901627.64225, 3707901627.644, 3707901627.647, 3707901627.6487503, 3707901627.6502504, 3707901627.65625, 3707901627.661, 3707901627.6635, 3707901627.672, 3707901627.6730003, 3707901627.6762505, 3707901627.6794996, 3707901627.68175, 3707901627.68425, 3707901627.6875, 3707901627.69, 3707901627.69125, 3707901627.6922503, 3707901627.69575, 3707901627.70175, 3707901627.7057505, 3707901627.71075, 3707901627.7157497, 3707901627.71875, 3707901627.722, 3707901627.72325, 3707901627.72425, 3707901627.72775, 3707901627.73125, 3707901627.7325, 3707901627.737499, 3707901627.7434998, 3707901627.74925, 3707901627.75275, 3707901627.7557497, 3707901627.757, 3707901627.75775, 3707901627.7582498, 3707901627.7695, 3707901627.77125, 3707901627.781, 3707901627.79075, 3707901627.79825, 3707901627.802, 3707901627.80475, 3707901627.8164997, 3707901627.8205, 3707901627.83025, 3707901627.83825, 3707901627.841, 3707901627.8435, 3707901627.84525, 3707901627.84725, 3707901627.84875, 3707901627.8505, 3707901627.8547497, 3707901627.858, 3707901627.85925, 3707901627.8615, 3707901627.86325, 3707901627.866, 3707901627.8684998, 3707901627.8695, 3707901627.875, 3707901627.8897495, 3707901627.89325, 3707901627.8975, 3707901627.90075, 3707901627.901, 3707901627.9074993, 3707901627.913, 3707901627.924, 3707901627.93075, 3707901627.93475, 3707901627.9565, 3707901627.9667497, 3707901627.97775, 3707901627.981, 3707901627.9837503, 3707901627.993, 3707901628.0022497, 3707901628.005, 3707901628.0080004, 3707901628.0092497, 3707901628.01175, 3707901628.0275, 3707901628.05075, 3707901628.06875, 3707901628.085, 3707901628.0907497, 3707901628.1, 3707901628.10975, 3707901628.1142497, 3707901628.11675, 3707901628.12075, 3707901628.12875, 3707901628.1552496, 3707901628.15625, 3707901628.1590004, 3707901628.174, 3707901628.1914997, 3707901628.20775, 3707901628.21375, 3707901628.223, 3707901628.24225, 3707901628.26075, 3707901628.2685, 3707901628.26925, 3707901628.28375, 3707901628.2980003, 3707901628.3022504, 3707901628.3135004, 3707901628.3234997, 3707901628.32975, 3707901628.34575, 3707901628.3655, 3707901628.3842497, 3707901628.45, 3707901628.4884996, 3707901628.513, 3707901628.5220003, 3707901628.52975, 3707901628.5445004, 3707901628.56775, 3707901628.5835, 3707901628.59225, 3707901628.60325, 3707901628.637, 3707901628.6765003, 3707901628.6885, 3707901628.71175, 3707901628.755, 3707901628.7877502, 3707901628.8147497, 3707901628.89575, 3707901628.9170003, 3707901628.94675, 3707901629.1002502, 3707901629.33125, 3707901629.467, 3707901629.554, 3707901630.0199995])
labels = array([1.0, 15.0, 1.0, 15.0, 2.0, 15.0, 1.0, 2.0, 15.0, 3.0, 13.0, 3.0, 4.0, 3.0, 4.0, 13.0, 3.0, 2.0, 1.0, 3.0, 15.0, 12.0, 1.0, 10.0, 4.0, 3.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 12.0, 1.0, 3.0, 4.0, 10.0, 4.0, 3.0, 2.0, 6.0, 3.0, 4.0, 10.0, 2.0, 9.0, 2.0, 3.0, 9.0, 1.0, 10.0, 4.0, 9.0, 3.0, 4.0, 9.0, 2.0, 10.0, 2.0, 1.0, 12.0, 4.0, 12.0, 4.0, 2.0, 1.0, 3.0, 2.0, 4.0, 9.0, 2.0, 3.0, 4.0, 2.0, 1.0, 3.0, 1.0, 3.0, 12.0, 2.0, 4.0, 1.0, 10.0, 2.0, 15.0, 2.0, 6.0, 3.0, 2.0, 4.0, 10.0, 9.0, 4.0, 9.0, 4.0, 3.0, 10.0, 2.0, 8.0, 9.0, 2.0, 15.0, 1.0, 2.0, 12.0, 2.0, 3.0, 1.0, 4.0, 1.0, 10.0, 2.0, 15.0, 1.0, 3.0, 4.0, 3.0, 2.0, 12.0, 11.0, 3.0, 9.0, 2.0, 4.0, 10.0, 1.0, 12.0, 17.0, 1.0, 3.0, 15.0, 4.0, 3.0, 17.0, 1.0, 2.0, 12.0, 9.0, 12.0, 10.0, 3.0, 1.0, 9.0, 12.0, 8.0, 3.0, 0.0, 3.0, 2.0, 12.0, 8.0, 9.0, 3.0, 9.0, 1.0, 2.0, 4.0, 10.0, 3.0, 4.0, 1.0, 0.0, 4.0, 15.0, 8.0, 3.0, 1.0, 2.0, 9.0, 15.0, 2.0, 4.0, 2.0, 4.0, 0.0, 3.0, 1.0, 10.0, 2.0, 3.0, 12.0, 3.0, 2.0, 12.0, 3.0, 4.0, 0.0, 2.0, 6.0, 12.0, 1.0, 16.0, 10.0, 9.0, 0.0, 4.0, 15.0, 9.0, 8.0, 9.0, 10.0, 4.0, 8.0, 10.0, 3.0, 6.0, 10.0, 9.0, 4.0, 18.0, 9.0, 4.0, 9.0, 10.0, 0.0, 17.0, 2.0, 3.0, 10.0, 12.0, 17.0, 3.0, 4.0, 2.0, 10.0, 4.0, 8.0, 2.0, 10.0, 0.0, 2.0, 0.0, 9.0, 1.0, 3.0, 10.0, 2.0, 9.0, 10.0, 4.0, 10.0, 11.0, 10.0, 2.0, 3.0, 4.0, 2.0, 3.0, 2.0, 9.0, 3.0, 4.0, 10.0, 0.0, 9.0, 12.0, 2.0, 5.0, 3.0, 2.0, 3.0, 9.0, 3.0, 12.0, 22.0, 12.0, 3.0, 9.0, 4.0, 2.0, 8.0, 4.0, 9.0, 3.0, 2.0, 9.0, 3.0, 8.0, 10.0, 3.0, 2.0, 1.0, 2.0, 3.0, 4.0, 12.0, 3.0, 10.0, 3.0, 4.0, 2.0, 9.0, 3.0, 4.0, 22.0, 8.0, 10.0, 9.0, 12.0, 4.0, 12.0, 10.0, 4.0, 2.0, 7.0, 6.0, 10.0, 4.0, 2.0, 1.0, 8.0, 10.0, 5.0, 2.0, 1.0, 0.0, 3.0, 2.0, 6.0, 3.0, 4.0, 17.0, 2.0, 22.0, 2.0, 0.0, 2.0, 9.0, 17.0, 4.0, 7.0, 12.0, 4.0, 9.0, 2.0, 4.0, 12.0, 4.0, 2.0, 9.0, 2.0, 3.0, 0.0, 12.0, 6.0, 12.0, 9.0, 4.0, 9.0, 2.0, 12.0, 9.0, 2.0, 4.0, 2.0, 3.0, 10.0, 4.0, 15.0, 4.0, 2.0, 3.0, 2.0, 4.0, 2.0, 6.0, 2.0, 4.0, 0.0, 1.0, 3.0, 2.0, 10.0, 3.0, 12.0, 8.0, 3.0, 11.0, 2.0, 3.0, 4.0, 3.0, 4.0, 3.0, 8.0, 2.0, 11.0, 1.0, 3.0, 4.0, 10.0, 8.0, 3.0, 8.0, 2.0, 4.0, 7.0, 15.0, 4.0, 12.0, 10.0, 17.0, 4.0, 12.0, 3.0, 18.0, 4.0, 12.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 9.0, 2.0, 12.0, 10.0, 3.0, 9.0, 4.0, 3.0, 4.0, 9.0, 4.0, 9.0, 8.0, 2.0, 10.0, 3.0, 8.0, 17.0, 2.0, 6.0, 3.0, 17.0, 9.0, 7.0, 16.0, 4.0, 2.0, 10.0, 2.0, 10.0, 9.0, 17.0, 10.0, 2.0, 8.0, 9.0, 4.0, 10.0, 3.0, 2.0, 11.0, 2.0, 12.0, 2.0, 4.0, 1.0, 2.0, 3.0, 12.0, 10.0, 4.0, 2.0, 3.0, 1.0, 17.0, 8.0, 11.0, 10.0, 2.0, 3.0, 4.0, 2.0, 10.0, 9.0, 1.0, 2.0, 3.0, 9.0, 3.0, 2.0, 8.0, 2.0, 10.0, 2.0, 6.0, 2.0, 6.0, 11.0, 2.0, 10.0, 2.0, 3.0, 2.0, 3.0, 4.0, 3.0, 2.0, 9.0, 2.0, 7.0, 10.0, 12.0, 10.0, 2.0, 9.0, 0.0, 3.0, 2.0, 7.0, 3.0, 9.0, 2.0, 9.0, 2.0, 3.0, 10.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 10.0, 1.0, 9.0, 2.0, 9.0, 3.0, 4.0, 9.0, 1.0, 2.0, 0.0, 2.0, 9.0, 4.0, 9.0, 11.0, 0.0, 9.0, 3.0, 10.0, 3.0, 4.0, 0.0, 2.0, 3.0, 6.0, 12.0, 8.0, 0.0, 4.0, 7.0, 4.0, 9.0, 3.0, 2.0, 6.0, 4.0, 3.0, 10.0, 4.0, 3.0, 6.0, 12.0, 8.0, 16.0, 12.0, 7.0, 3.0, 12.0, 3.0, 8.0, 2.0, 9.0, 2.0, 4.0, 3.0, 4.0, 10.0, 9.0, 3.0, 10.0, 2.0, 9.0, 2.0, 9.0, 10.0, 3.0, 12.0, 9.0, 0.0, 4.0, 2.0, 5.0, 10.0, 2.0, 8.0, 2.0, 3.0, 9.0, 4.0, 2.0, 5.0, 10.0, 8.0, 11.0, 3.0, 12.0, 8.0, 0.0, 2.0, 10.0, 4.0, 2.0, 9.0, 2.0, 3.0, 4.0, 2.0, 12.0, 10.0, 4.0, 8.0, 0.0, 4.0, 9.0, 2.0, 4.0, 9.0, 2.0, 12.0, 2.0, 4.0, 2.0, 1.0, 10.0, 4.0, 9.0, 3.0, 2.0, 0.0, 9.0, 12.0, 3.0, 4.0, 2.0, 8.0, 3.0, 12.0, 3.0, 9.0, 2.0, 9.0, 3.0, 9.0, 8.0, 10.0, 3.0, 2.0, 15.0, 4.0, 2.0, 9.0, 8.0, 2.0, 12.0, 3.0, 2.0, 3.0, 9.0, 3.0, 2.0, 3.0, 2.0, 4.0, 25.0, 8.0, 2.0, 3.0, 9.0, 8.0, 9.0, 2.0, 3.0, 9.0, 12.0, 3.0, 2.0, 3.0, 6.0, 3.0, 10.0, 2.0, 9.0, 3.0, 9.0, 10.0, 3.0, 10.0, 12.0, 2.0, 4.0, 6.0, 11.0, 3.0, 9.0, 2.0, 3.0, 10.0, 3.0, 9.0, 17.0, 2.0, 3.0, 2.0, 12.0, 3.0, 7.0, 0.0, 2.0, 4.0, 10.0, 12.0, 2.0, 9.0, 2.0, 9.0, 17.0, 9.0, 6.0, 2.0, 3.0, 9.0, 3.0, 4.0, 2.0, 22.0, 9.0, 22.0, 8.0, 3.0, 10.0, 12.0, 4.0, 5.0, 2.0, 3.0, 12.0, 4.0, 3.0, 12.0, 10.0, 9.0, 2.0, 3.0, 10.0, 0.0, 8.0, 9.0, 4.0, 3.0, 10.0, 9.0, 8.0, 3.0, 4.0, 3.0, 12.0, 9.0, 10.0, 12.0, 3.0, 8.0, 9.0, 10.0, 3.0, 2.0, 9.0, 3.0, 9.0, 16.0, 3.0, 0.0, 2.0, 3.0, 9.0, 8.0, 2.0, 3.0, 8.0, 0.0, 3.0, 2.0, 4.0, 3.0, 9.0, 10.0, 2.0, 10.0, 3.0, 8.0, 9.0, 3.0, 2.0, 9.0, 1.0, 2.0, 4.0, 2.0, 12.0, 2.0, 10.0, 8.0, 3.0, 2.0, 9.0, 3.0, 2.0, 3.0, 11.0, 2.0, 9.0, 8.0, 2.0, 9.0, 2.0, 10.0, 2.0, 3.0, 12.0, 17.0, 9.0, 8.0, 9.0, 5.0, 4.0, 9.0, 10.0, 3.0, 2.0, 3.0, 4.0, 9.0, 8.0, 3.0, 0.0, 3.0, 9.0, 2.0, 3.0, 2.0, 10.0, 3.0, 9.0, 11.0, 9.0, 2.0, 3.0, 8.0, 2.0, 9.0, 10.0, 2.0, 12.0, 2.0, 5.0, 26.0, 3.0, 12.0, 9.0, 12.0, 3.0, 8.0, 3.0, 10.0, 9.0, 15.0, 2.0, 3.0, 11.0, 2.0, 12.0, 9.0, 3.0, 10.0, 3.0, 2.0, 17.0, 3.0, 2.0, 3.0, 2.0, 3.0, 12.0, 10.0, 0.0, 9.0, 2.0, 8.0, 3.0, 10.0, 2.0, 3.0, 9.0, 11.0, 2.0, 10.0, 3.0, 9.0, 3.0, 0.0, 10.0, 2.0, 3.0, 9.0, 3.0, 10.0, 9.0, 4.0, 9.0, 3.0, 12.0, 3.0, 10.0, 2.0, 12.0, 6.0, 10.0, 7.0, 2.0, 3.0, 9.0, 5.0, 2.0, 17.0, 3.0, 9.0, 17.0, 9.0, 2.0, 9.0, 10.0, 2.0, 12.0, 10.0, 11.0, 12.0, 3.0, 6.0, 9.0, 3.0, 2.0, 9.0, 4.0, 9.0, 17.0, 9.0, 2.0, 3.0, 9.0, 7.0, 10.0, 9.0, 8.0, 9.0, 1.0, 2.0, 7.0, 0.0, 10.0, 2.0, 3.0, 10.0, 9.0, 2.0, 11.0, 9.0, 10.0, 3.0, 6.0, 9.0, 8.0, 9.0, 3.0, 2.0, 10.0, 9.0, 12.0, 10.0, 6.0, 9.0, 3.0, 9.0, 3.0, 10.0, 3.0, 6.0, 3.0, 6.0, 0.0, 9.0, 2.0, 12.0, 3.0, 2.0, 16.0, 9.0, 18.0, 10.0, 2.0, 12.0, 9.0, 0.0, 9.0, 12.0, 9.0, 3.0, 2.0, 3.0, 9.0, 3.0, 9.0, 10.0, 6.0, 10.0, 8.0, 10.0, 3.0, 16.0, 9.0, 0.0, 3.0, 9.0, 3.0, 9.0, 10.0, 2.0, 10.0, 0.0, 12.0, 3.0, 10.0, 17.0, 8.0, 3.0, 9.0, 11.0, 2.0, 17.0, 3.0, 10.0, 9.0, 17.0, 9.0, 12.0, 6.0, 16.0, 9.0, 3.0, 17.0, 9.0, 10.0, 2.0, 12.0, 23.0, 3.0, 10.0, 6.0, 5.0, 10.0, 9.0, 3.0, 9.0, 6.0, 12.0, 9.0, 10.0, 0.0, 9.0, 7.0, 9.0, 3.0, 12.0, 7.0, 8.0, 2.0, 9.0, 12.0, 9.0, 3.0, 10.0, 9.0, 5.0, 2.0, 7.0, 9.0, 10.0, 3.0, 12.0, 27.0, 9.0, 10.0, 12.0, 6.0, 8.0, 9.0, 11.0, 3.0, 6.0, 3.0, 10.0, 3.0, 12.0, 2.0, 10.0, 9.0, 10.0, 3.0, 12.0, 8.0, 5.0, 3.0, 11.0, 17.0, 10.0, 9.0, 2.0, 3.0, 8.0, 9.0, 22.0, 8.0, 9.0, 20.0, 13.0, 14.0, 20.0, 13.0, 14.0, 13.0, 20.0, 1.0, 14.0, 13.0, 4.0, 1.0, 15.0, 13.0, 15.0, 13.0, 1.0, 13.0, 1.0, 13.0, 15.0, 1.0, 13.0, 1.0, 9.0, 15.0, 4.0, 3.0, 2.0, 1.0, 2.0, 15.0, 14.0, 1.0, 2.0, 9.0, 15.0, 3.0, 1.0, 4.0, 9.0, 1.0, 15.0, 3.0, 4.0, 1.0, 9.0, 1.0, 10.0, 3.0, 2.0, 3.0, 15.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 4.0, 15.0, 12.0, 15.0, 1.0, 15.0, 2.0, 15.0, 1.0, 3.0, 4.0, 3.0, 9.0, 1.0, 2.0, 3.0, 1.0, 4.0, 2.0, 9.0, 4.0, 10.0, 9.0, 4.0, 2.0, 4.0, 1.0, 3.0, 4.0, 2.0, 10.0, 2.0, 4.0, 9.0, 3.0, 2.0, 13.0, 2.0, 1.0, 10.0, 9.0, 0.0, 9.0, 1.0, 15.0, 1.0, 4.0, 9.0, 1.0, 15.0, 1.0, 2.0, 11.0, 8.0, 10.0, 1.0, 9.0, 2.0, 1.0, 10.0, 3.0, 2.0, 4.0, 3.0, 2.0, 4.0, 12.0, 2.0, 1.0, 4.0, 3.0, 4.0, 3.0, 2.0, 1.0, 2.0, 3.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 1.0, 9.0, 4.0, 1.0, 9.0, 10.0, 1.0, 4.0, 10.0, 2.0, 8.0, 2.0, 4.0, 3.0, 4.0, 2.0, 6.0, 9.0, 4.0, 15.0, 1.0, 4.0, 2.0, 0.0, 2.0, 4.0, 3.0, 2.0, 3.0, 9.0, 4.0, 12.0, 3.0, 4.0, 9.0, 3.0, 4.0, 1.0, 10.0, 0.0, 2.0, 4.0, 3.0, 4.0, 10.0, 1.0, 4.0, 3.0, 2.0, 3.0, 4.0, 2.0, 12.0, 3.0, 9.0, 2.0, 3.0, 4.0, 2.0, 4.0, 1.0, 3.0, 2.0, 4.0, 9.0, 4.0, 2.0, 4.0, 1.0, 15.0, 8.0, 3.0, 2.0, 4.0, 3.0, 15.0, 12.0, 10.0, 9.0, 10.0, 1.0, 10.0, 2.0, 0.0, 9.0, 1.0, 4.0, 8.0, 4.0, 2.0, 3.0, 4.0, 8.0, 4.0, 8.0, 2.0, 4.0, 1.0, 9.0, 16.0, 12.0, 0.0, 2.0, 6.0, 10.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 4.0, 3.0, 4.0, 9.0, 8.0, 4.0, 2.0, 4.0, 15.0, 4.0, 1.0, 2.0, 4.0, 10.0, 2.0, 12.0, 9.0, 12.0, 4.0, 1.0, 10.0, 8.0, 1.0, 8.0, 10.0, 15.0, 4.0, 3.0, 2.0, 15.0, 4.0, 8.0, 3.0, 2.0, 10.0, 4.0, 10.0, 4.0, 1.0, 2.0, 9.0, 1.0, 2.0, 9.0, 0.0, 2.0, 10.0, 12.0, 1.0, 3.0, 10.0, 2.0, 15.0, 11.0, 9.0, 7.0, 4.0, 2.0, 10.0, 0.0, 1.0, 3.0, 10.0, 1.0, 12.0, 3.0, 9.0, 2.0, 3.0, 0.0, 3.0, 2.0, 10.0, 4.0, 3.0, 1.0, 15.0, 2.0, 12.0, 1.0, 2.0, 8.0, 3.0, 1.0, 8.0, 4.0, 0.0, 2.0, 1.0, 2.0, 8.0, 10.0, 6.0, 10.0, 9.0, 1.0, 2.0, 1.0, 3.0, 10.0, 4.0, 9.0, 4.0, 12.0, 18.0, 4.0, 3.0, 1.0, 9.0, 12.0, 0.0, 2.0, 10.0, 9.0, 12.0, 9.0, 3.0, 10.0, 1.0, 4.0, 2.0, 17.0, 4.0, 3.0, 4.0, 2.0, 12.0, 4.0, 2.0, 3.0, 9.0, 4.0, 17.0, 2.0, 15.0, 3.0, 2.0, 3.0, 4.0, 2.0, 9.0, 10.0, 9.0, 10.0, 7.0, 3.0, 9.0, 12.0, 9.0, 4.0, 8.0, 3.0, 4.0, 3.0, 22.0, 4.0, 0.0, 3.0, 12.0, 1.0, 12.0, 10.0, 1.0, 12.0, 4.0, 10.0, 4.0, 1.0, 2.0, 12.0, 0.0, 10.0, 6.0, 10.0, 2.0, 3.0, 12.0, 10.0, 5.0, 8.0, 2.0, 1.0, 4.0, 3.0, 2.0, 1.0, 2.0, 9.0, 3.0, 9.0, 8.0, 9.0, 2.0, 4.0, 17.0, 3.0, 11.0, 2.0, 17.0, 10.0, 8.0, 0.0, 3.0, 2.0, 1.0, 2.0, 10.0, 3.0, 4.0, 2.0, 4.0, 3.0, 4.0, 3.0, 6.0, 9.0, 3.0, 12.0, 0.0, 12.0, 9.0, 8.0, 3.0, 2.0, 3.0, 2.0, 4.0, 3.0, 4.0, 2.0, 3.0, 11.0, 9.0, 12.0, 8.0, 3.0, 2.0, 4.0, 8.0, 0.0, 8.0, 4.0, 3.0, 6.0, 12.0, 0.0, 2.0, 3.0, 9.0, 4.0, 8.0, 3.0, 9.0, 3.0, 0.0, 9.0, 2.0, 9.0, 4.0, 6.0, 2.0, 3.0, 2.0, 6.0, 4.0, 2.0, 3.0, 2.0, 4.0, 2.0, 3.0, 12.0, 3.0, 9.0, 2.0, 12.0, 2.0, 3.0, 2.0, 4.0, 3.0, 4.0, 7.0, 9.0, 2.0, 3.0, 6.0, 10.0, 4.0, 12.0, 2.0, 3.0, 10.0, 4.0, 1.0, 2.0, 12.0, 4.0, 2.0, 4.0, 9.0, 12.0, 2.0, 8.0, 2.0, 9.0, 3.0, 11.0, 12.0, 7.0, 4.0, 1.0, 12.0, 3.0, 10.0, 4.0, 2.0, 10.0, 0.0, 3.0, 1.0, 17.0, 8.0, 2.0, 0.0, 7.0, 17.0, 3.0, 9.0, 3.0, 4.0, 9.0, 4.0, 9.0, 12.0, 4.0, 2.0, 8.0, 9.0, 3.0, 4.0, 0.0, 17.0, 6.0, 4.0, 2.0, 9.0, 10.0, 4.0, 9.0, 0.0, 3.0, 11.0, 4.0, 9.0, 3.0, 4.0, 2.0, 4.0, 7.0, 2.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 6.0, 2.0, 10.0, 12.0, 1.0, 2.0, 3.0, 8.0, 10.0, 4.0, 9.0, 8.0, 4.0, 3.0, 5.0, 0.0, 9.0, 3.0, 2.0, 17.0, 3.0, 10.0, 3.0, 4.0, 2.0, 7.0, 3.0, 2.0, 3.0, 12.0, 3.0, 12.0, 8.0, 4.0, 3.0, 4.0, 5.0, 17.0, 2.0, 6.0, 2.0, 9.0, 0.0, 10.0, 3.0, 4.0, 9.0, 2.0, 4.0, 2.0, 9.0, 3.0, 1.0, 9.0, 2.0, 3.0, 8.0, 12.0, 3.0, 0.0, 2.0, 3.0, 4.0, 9.0, 0.0, 2.0, 4.0, 3.0, 9.0, 2.0, 3.0, 9.0, 4.0, 3.0, 2.0, 10.0, 3.0, 7.0, 2.0, 4.0, 3.0, 4.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 8.0, 2.0, 9.0, 3.0, 9.0, 5.0, 3.0, 12.0, 4.0, 3.0, 17.0, 3.0, 11.0, 4.0, 7.0, 10.0, 3.0, 1.0, 2.0, 8.0, 2.0, 3.0, 2.0, 3.0, 8.0, 4.0, 2.0, 3.0, 4.0, 3.0, 12.0, 2.0, 8.0, 2.0, 9.0, 5.0, 10.0, 3.0, 2.0, 9.0, 10.0, 9.0, 0.0, 9.0, 3.0, 2.0, 21.0, 0.0, 12.0, 2.0, 0.0, 10.0, 2.0, 3.0, 2.0, 9.0, 3.0, 0.0, 17.0, 22.0, 7.0, 10.0, 9.0, 8.0, 3.0, 9.0, 4.0, 10.0, 0.0, 3.0, 2.0, 17.0, 6.0, 4.0, 3.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0, 3.0, 12.0, 3.0, 12.0, 9.0, 3.0, 2.0, 0.0, 3.0, 2.0, 5.0, 3.0, 9.0, 10.0, 2.0, 10.0, 2.0, 3.0, 6.0, 3.0, 2.0, 12.0, 3.0, 2.0, 9.0, 2.0, 3.0, 2.0, 3.0, 0.0, 17.0, 9.0, 2.0, 3.0, 9.0, 8.0, 0.0, 3.0, 2.0, 9.0, 4.0, 2.0, 12.0, 4.0, 10.0, 12.0, 3.0, 10.0, 3.0, 1.0, 4.0, 2.0, 10.0, 9.0, 3.0, 11.0, 2.0, 3.0, 10.0, 9.0, 4.0, 3.0, 2.0, 3.0, 10.0, 2.0, 12.0, 4.0, 6.0, 10.0, 3.0, 0.0, 9.0, 3.0, 9.0, 8.0, 4.0, 2.0, 4.0, 6.0, 9.0, 3.0, 9.0, 6.0, 3.0, 9.0, 3.0, 8.0, 2.0, 3.0, 4.0, 2.0, 3.0, 9.0, 2.0, 4.0, 10.0, 3.0, 12.0, 2.0, 3.0, 1.0, 2.0, 3.0, 2.0, 12.0, 3.0, 2.0, 3.0, 2.0, 4.0, 9.0, 12.0, 2.0, 12.0, 9.0, 0.0, 9.0, 2.0, 9.0, 3.0, 9.0, 2.0, 11.0, 9.0, 3.0, 9.0, 3.0, 9.0, 10.0, 2.0, 3.0, 1.0, 9.0, 3.0, 9.0, 2.0, 3.0, 4.0, 2.0, 9.0, 2.0, 9.0, 2.0, 9.0, 2.0, 10.0, 17.0, 9.0, 3.0, 6.0, 9.0, 3.0, 12.0, 2.0, 8.0, 10.0, 4.0, 8.0, 4.0, 10.0, 3.0, 12.0, 7.0, 3.0, 2.0, 3.0, 10.0, 4.0, 10.0, 2.0, 12.0, 3.0, 2.0, 9.0, 6.0, 2.0, 9.0, 2.0, 3.0, 10.0, 9.0, 10.0, 16.0, 3.0, 9.0, 3.0, 17.0, 2.0, 16.0, 4.0, 9.0, 2.0, 5.0, 22.0, 2.0, 3.0, 4.0, 9.0, 3.0, 0.0, 3.0, 9.0, 12.0, 9.0, 3.0, 2.0, 6.0, 9.0, 10.0, 2.0, 3.0, 9.0, 3.0, 10.0, 2.0, 9.0, 10.0, 12.0, 10.0, 9.0, 3.0, 9.0, 12.0, 9.0, 0.0, 2.0, 12.0, 10.0, 9.0, 17.0, 2.0, 3.0, 2.0, 3.0, 2.0, 8.0, 4.0, 3.0, 9.0, 11.0, 9.0, 3.0, 17.0, 3.0, 2.0, 9.0, 3.0, 10.0, 2.0, 9.0, 3.0, 2.0, 11.0, 9.0, 5.0, 3.0, 11.0, 3.0, 2.0, 6.0, 4.0, 9.0, 2.0, 9.0, 3.0, 6.0, 3.0, 2.0, 9.0, 3.0, 10.0, 12.0, 3.0, 4.0, 2.0, 9.0, 0.0, 3.0, 18.0, 9.0, 6.0, 12.0, 3.0, 10.0, 9.0, 2.0, 4.0, 9.0, 3.0, 16.0, 9.0, 12.0, 6.0, 10.0, 11.0, 9.0, 11.0, 12.0, 9.0, 3.0, 8.0, 2.0, 11.0, 0.0, 10.0, 2.0, 0.0, 3.0, 17.0, 6.0, 3.0, 7.0, 9.0, 2.0, 5.0, 2.0, 16.0, 5.0, 10.0, 3.0, 10.0, 3.0, 2.0, 9.0, 3.0, 9.0, 2.0, 3.0, 9.0, 3.0, 10.0, 3.0, 10.0, 9.0, 3.0, 8.0, 9.0, 0.0, 2.0, 12.0, 3.0, 12.0, 2.0, 9.0, 10.0, 9.0, 3.0, 0.0, 12.0, 9.0, 0.0, 9.0, 3.0, 8.0, 10.0, 3.0, 6.0, 12.0, 2.0, 17.0, 3.0, 9.0, 10.0, 9.0, 3.0, 9.0, 0.0, 2.0, 3.0, 9.0, 4.0, 3.0, 0.0, 3.0, 11.0, 8.0, 9.0, 3.0, 9.0, 12.0, 10.0, 3.0, 8.0, 2.0, 3.0, 12.0, 3.0, 17.0, 2.0, 9.0, 3.0, 8.0, 3.0, 0.0, 27.0, 3.0, 8.0, 9.0, 3.0, 12.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 9.0, 7.0, 9.0, 10.0, 12.0, 2.0, 10.0, 9.0, 12.0, 3.0, 9.0, 0.0, 12.0, 9.0, 4.0, 9.0, 3.0, 9.0, 4.0, 10.0, 9.0, 3.0, 0.0, 8.0, 9.0, 17.0, 2.0, 9.0, 12.0, 3.0, 16.0, 3.0, 2.0, 3.0, 9.0, 12.0, 2.0, 9.0, 10.0, 18.0, 2.0, 9.0, 8.0, 3.0, 9.0, 12.0, 9.0, 3.0, 12.0, 7.0, 3.0, 9.0, 6.0, 3.0, 9.0, 11.0, 7.0, 12.0, 10.0, 3.0, 10.0, 8.0, 9.0, 10.0, 9.0, 3.0, 8.0, 0.0, 3.0, 10.0, 17.0, 5.0, 9.0, 10.0, 17.0, 9.0, 12.0, 10.0, 9.0, 25.0, 3.0, 10.0, 12.0, 3.0, 10.0, 6.0, 9.0, 10.0, 9.0, 10.0, 3.0, 10.0, 3.0, 8.0, 9.0, 12.0, 10.0, 3.0, 10.0, 2.0, 17.0, 12.0, 8.0, 10.0, 9.0, 17.0, 10.0, 19.0, 20.0, 14.0, 24.0, 20.0, 14.0, 20.0, 14.0, 13.0, 20.0, 14.0, 20.0, 14.0, 13.0, 14.0, 15.0, 13.0, 20.0, 13.0, 14.0, 20.0, 15.0, 13.0, 14.0, 13.0, 14.0, 13.0, 14.0, 20.0, 14.0, 15.0, 14.0, 20.0, 14.0, 20.0, 14.0, 13.0, 14.0, 13.0, 14.0, 13.0, 15.0, 14.0, 13.0, 14.0, 13.0, 14.0, 15.0, 13.0, 15.0, 13.0, 15.0, 14.0, 13.0, 14.0, 13.0, 20.0, 13.0, 14.0, 13.0, 15.0, 13.0, 14.0, 15.0, 14.0, 15.0, 14.0, 15.0, 13.0, 15.0, 1.0, 13.0, 15.0, 14.0, 15.0, 14.0, 15.0, 14.0, 13.0, 1.0, 13.0, 14.0, 13.0, 4.0, 15.0, 13.0, 15.0, 1.0, 13.0, 15.0, 13.0, 15.0, 4.0, 13.0, 15.0, 1.0, 13.0, 1.0, 13.0, 15.0, 13.0, 15.0, 1.0, 13.0, 15.0, 13.0, 4.0, 13.0, 14.0, 13.0, 4.0, 13.0, 14.0, 15.0, 1.0, 15.0, 13.0, 14.0, 4.0, 15.0, 13.0, 4.0, 1.0, 15.0, 13.0, 15.0, 2.0, 13.0, 15.0, 13.0, 15.0, 2.0, 13.0, 15.0, 1.0, 4.0, 15.0, 13.0, 1.0, 13.0, 14.0, 13.0, 14.0, 15.0, 4.0, 1.0, 15.0, 4.0, 15.0, 13.0, 15.0, 13.0, 15.0, 1.0, 15.0, 1.0, 15.0, 2.0, 1.0, 13.0, 1.0, 15.0, 4.0, 1.0, 15.0, 13.0, 4.0, 13.0, 15.0, 13.0, 15.0, 12.0, 2.0, 13.0, 15.0, 13.0, 15.0, 1.0, 15.0, 13.0, 1.0, 15.0, 1.0, 13.0, 2.0, 15.0, 4.0, 15.0, 4.0, 13.0, 1.0, 13.0, 1.0, 15.0, 1.0, 15.0, 2.0, 1.0, 15.0, 1.0, 15.0, 1.0, 3.0, 13.0, 9.0, 1.0, 15.0, 1.0, 15.0, 4.0, 13.0, 15.0, 4.0, 15.0, 1.0, 15.0, 1.0, 13.0, 1.0, 15.0, 1.0, 13.0, 4.0, 15.0, 13.0, 1.0, 4.0, 15.0, 1.0, 13.0, 1.0, 4.0, 15.0, 1.0, 15.0, 14.0, 2.0, 15.0, 1.0, 15.0, 1.0, 4.0, 15.0, 13.0, 1.0, 15.0, 1.0, 15.0, 1.0, 4.0, 2.0, 1.0, 3.0, 4.0, 2.0, 4.0, 1.0, 15.0, 1.0, 15.0, 1.0, 15.0, 1.0, 2.0, 15.0, 1.0, 15.0, 1.0, 4.0, 13.0, 4.0, 15.0, 4.0, 1.0, 4.0, 1.0, 15.0, 1.0, 15.0, 1.0, 15.0, 1.0, 9.0, 15.0, 1.0, 13.0, 1.0, 15.0, 3.0, 1.0, 13.0, 1.0, 13.0, 15.0, 1.0, 15.0, 1.0, 4.0, 15.0, 3.0, 15.0, 1.0, 15.0, 4.0, 1.0, 15.0, 1.0, 4.0, 15.0, 4.0, 15.0, 4.0, 15.0, 1.0, 15.0, 4.0, 15.0, 1.0, 2.0, 3.0, 1.0, 15.0, 13.0, 10.0, 15.0, 1.0, 15.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 8.0, 15.0, 1.0, 13.0, 15.0, 4.0, 1.0, 4.0, 2.0, 1.0, 15.0, 3.0, 1.0, 15.0, 13.0, 15.0, 1.0, 4.0, 1.0, 4.0, 1.0, 15.0, 13.0, 1.0, 13.0, 4.0, 1.0, 4.0, 15.0, 1.0, 15.0, 1.0, 15.0, 13.0, 1.0, 3.0, 15.0, 4.0, 1.0, 2.0, 1.0, 4.0, 1.0, 15.0, 13.0, 15.0, 9.0, 4.0, 1.0, 4.0, 15.0, 4.0, 1.0, 4.0, 1.0, 4.0, 3.0, 15.0, 4.0, 2.0, 4.0, 1.0, 15.0, 1.0, 4.0, 1.0, 15.0, 2.0, 4.0, 1.0, 15.0, 1.0, 15.0, 1.0, 15.0, 4.0, 15.0, 1.0, 4.0, 1.0, 4.0, 3.0, 4.0, 10.0, 1.0, 15.0, 1.0, 15.0, 2.0, 1.0, 4.0, 1.0, 15.0, 1.0, 4.0, 15.0, 1.0, 15.0, 1.0, 4.0, 2.0, 1.0, 4.0, 1.0, 4.0, 1.0, 15.0, 1.0, 15.0, 1.0, 3.0, 1.0, 4.0, 15.0, 4.0, 3.0, 4.0, 15.0, 1.0, 9.0, 15.0, 2.0, 1.0, 9.0, 4.0, 15.0, 9.0, 1.0, 2.0, 1.0, 4.0, 1.0, 4.0, 12.0, 15.0, 1.0, 12.0, 1.0, 4.0, 9.0, 13.0, 1.0, 15.0, 4.0, 1.0, 13.0, 4.0, 1.0, 2.0, 15.0, 4.0, 1.0, 4.0, 15.0, 1.0, 4.0, 1.0, 15.0, 4.0, 1.0, 10.0, 2.0, 8.0, 1.0, 4.0, 1.0, 4.0, 1.0, 2.0, 4.0, 15.0, 2.0, 15.0, 4.0, 1.0, 4.0, 15.0, 3.0, 10.0, 4.0, 1.0, 4.0, 1.0, 4.0, 7.0, 15.0, 4.0, 1.0, 4.0, 1.0, 2.0, 4.0, 1.0, 15.0, 1.0, 4.0, 15.0, 4.0, 9.0, 4.0, 12.0, 1.0, 2.0, 4.0, 12.0, 4.0, 1.0, 15.0, 1.0, 15.0, 2.0, 4.0, 15.0, 2.0, 1.0, 2.0, 4.0, 10.0, 2.0, 1.0, 4.0, 9.0, 1.0, 2.0, 4.0, 8.0, 1.0, 2.0, 4.0, 1.0, 4.0, 2.0, 1.0, 3.0, 15.0, 1.0, 6.0, 1.0, 15.0, 4.0, 2.0, 1.0, 4.0, 10.0, 2.0, 1.0, 4.0, 2.0, 1.0, 4.0, 2.0, 4.0, 1.0, 4.0, 15.0, 4.0, 3.0, 4.0, 15.0, 4.0, 1.0, 4.0, 9.0, 4.0, 2.0, 1.0, 9.0, 4.0, 1.0, 2.0, 12.0, 8.0, 4.0, 2.0, 6.0, 2.0, 3.0, 2.0, 15.0, 9.0, 2.0, 1.0, 4.0, 3.0, 4.0, 10.0, 1.0, 4.0, 6.0, 4.0, 1.0, 4.0, 11.0, 9.0, 2.0, 0.0, 1.0, 2.0, 4.0, 3.0, 15.0, 2.0, 4.0, 2.0, 12.0, 4.0, 1.0, 2.0, 15.0, 4.0, 15.0, 4.0, 1.0, 2.0, 4.0, 1.0, 3.0, 4.0, 2.0, 4.0, 1.0, 0.0, 4.0, 2.0, 3.0, 15.0, 1.0, 4.0, 8.0, 4.0, 12.0, 4.0, 1.0, 4.0, 1.0, 15.0, 4.0, 1.0, 0.0, 3.0, 4.0, 2.0, 4.0, 1.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 12.0, 4.0, 2.0, 9.0, 4.0, 2.0, 4.0, 1.0, 2.0, 4.0, 9.0, 4.0, 9.0, 2.0, 9.0, 4.0, 3.0, 4.0, 1.0, 2.0, 4.0, 2.0, 4.0, 1.0, 4.0, 10.0, 1.0, 4.0, 1.0, 2.0, 1.0, 4.0, 2.0, 4.0, 1.0, 4.0, 10.0, 2.0, 4.0, 1.0, 2.0, 4.0, 2.0, 4.0, 1.0, 4.0, 2.0, 3.0, 2.0, 4.0, 2.0, 9.0, 4.0, 1.0, 2.0, 1.0, 4.0, 3.0, 1.0, 2.0, 15.0, 4.0, 2.0, 4.0, 0.0, 9.0, 4.0, 11.0, 4.0, 1.0, 4.0, 2.0, 4.0, 9.0, 4.0, 2.0, 1.0, 9.0, 2.0, 4.0, 12.0, 3.0, 1.0, 2.0, 4.0, 1.0, 2.0, 4.0, 2.0, 4.0, 1.0, 9.0, 4.0, 2.0, 3.0, 9.0, 3.0, 2.0, 9.0, 0.0, 10.0, 12.0, 4.0, 1.0, 9.0, 2.0, 3.0, 2.0, 12.0, 4.0, 2.0, 10.0, 3.0, 2.0, 1.0, 2.0, 4.0, 2.0, 1.0, 4.0, 9.0, 2.0, 4.0, 0.0, 3.0, 4.0, 2.0, 4.0, 9.0, 3.0, 4.0, 2.0, 3.0, 4.0, 3.0, 2.0, 3.0, 2.0, 9.0, 7.0, 2.0, 3.0, 2.0, 4.0, 3.0, 4.0, 3.0, 4.0, 2.0, 4.0, 3.0, 12.0, 2.0, 4.0, 2.0, 3.0, 9.0, 12.0, 4.0, 2.0, 4.0, 2.0, 3.0, 4.0, 2.0, 1.0, 4.0, 8.0, 9.0, 2.0, 9.0, 8.0, 3.0, 2.0, 4.0, 5.0, 4.0, 9.0, 2.0, 4.0, 3.0, 10.0, 2.0, 4.0, 2.0, 4.0, 3.0, 1.0, 4.0, 3.0, 2.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 2.0, 3.0, 4.0, 15.0, 8.0, 4.0, 3.0, 9.0, 2.0, 9.0, 8.0, 2.0, 3.0, 2.0, 3.0, 2.0, 9.0, 2.0, 10.0, 3.0, 9.0, 2.0, 10.0, 3.0, 9.0, 3.0, 4.0, 3.0, 8.0, 10.0, 2.0, 3.0, 4.0, 2.0, 3.0, 9.0, 3.0, 11.0, 9.0, 3.0, 9.0, 3.0, 2.0, 9.0, 4.0, 17.0, 2.0, 3.0, 2.0, 6.0, 0.0, 3.0, 2.0, 4.0, 3.0, 12.0, 2.0, 3.0, 2.0, 4.0, 2.0, 9.0, 3.0, 15.0, 3.0, 16.0, 17.0, 9.0, 3.0, 4.0, 3.0, 4.0, 2.0, 9.0, 2.0, 4.0, 8.0, 9.0, 12.0, 3.0, 9.0, 2.0, 10.0, 2.0, 17.0, 9.0, 2.0, 3.0, 12.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 9.0, 2.0, 3.0, 12.0, 3.0, 8.0, 4.0, 3.0, 9.0, 12.0, 4.0, 9.0, 6.0, 10.0, 9.0, 17.0, 3.0, 5.0, 8.0, 2.0, 12.0, 3.0, 9.0, 3.0, 12.0, 3.0, 2.0, 10.0, 17.0, 3.0, 9.0, 17.0, 9.0, 12.0, 0.0, 10.0, 9.0, 8.0, 0.0, 3.0, 11.0, 9.0, 2.0, 10.0, 17.0, 6.0, 12.0, 11.0, 0.0, 9.0, 3.0])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)

    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = labels[numers[indys]]
        outputs[defaultindys] = 13.0
        return outputs
    return thresh_search(energys)

numthresholds = 3473



# Main method
model_cap = numthresholds


def Validate(file):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 0
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in ([i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        print("Classifier Type: Quick Clustering")
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            try:
                import numpy as np # For numpy see: http://numpy.org
                from numpy import array
            except:
                print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                except:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])



    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)



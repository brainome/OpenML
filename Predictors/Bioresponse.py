#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is 
# licensed under GNU GPL v2.0 or higher. For details, please see: 
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.93 Table Compiler v0.94.
# Invocation: btc https://www.openml.org/data/get_csv/1681097/phpSSK7iA -o Predictors/Bioresponse_NN.py -target target -stopat 81.60 -f NN -e 20 --yes
# Total compiler execution time: 0:08:51.94. Finished on: Apr-22-2020 06:34:41.
# This source code requires Python 3.
#
"""
System Type:                        Binary classifier
Best-guess accuracy:                54.22%
Model accuracy:                     83.25% (3123/3751 correct)
Improvement over best guess:        29.03% (of possible 45.78%)
Model capacity (MEC):               3557 bits
Generalization ratio:               0.87 bits/bit
Model efficiency:                   0.00%/parameter
System behavior
True Negatives:                     34.71% (1302/3751)
True Positives:                     48.55% (1821/3751)
False Negatives:                    5.68% (213/3751)
False Positives:                    11.06% (415/3751)
True Pos. Rate/Sensitivity/Recall:  0.90
True Neg. Rate/Specificity:         0.76
Precision:                          0.81
F-1 Measure:                        0.85
False Negative Rate/Miss Rate:      0.10
Critical Success Index:             0.74

Warning: The prediction model overfits the training data.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "phpSSK7iA.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 1776
n_classes = 2


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="target"


    if (testfile):
        target=''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless==False):
                header=next(reader, None)
                try:
                    if (target!=''): 
                        hc=header.index(target)
                    else:
                        hc=len(header)-1
                        target=header[hc]
                except:
                    raise NameError("Target '"+target+"' not found! Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=header.index(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute '"+ignorecolumns[i]+"' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '"+ignorecolumns[i]+"' not found in header. Header must be same as in file passed to btc.")
                for i in range(0,len(header)):      
                    if (i==hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i]+",", end = '', file=outputfile)
                print(header[hc],file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"'+row[name]+'"'+",",end = '', file=outputfile)
                        else:
                            print (row[name]+",",end = '', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target!=""): 
                        hc=int(target)
                    else:
                        hc=-1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=int(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute "+str(col)+" is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc==-1):
                        hc=len(row)-1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0,len(row)):
                        if (i in il):
                            continue
                        if (i==hc):
                            continue
                        if (',' in row[i]):
                            print ('"'+row[i]+'"'+",",end = '', file=outputfile)
                        else:
                            print(row[i]+",",end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def classify(row):
    x = row
    o = [0] * num_output_logits
    h_0 = max((((-0.05021663 * float(x[0]))+ (0.1789627 * float(x[1]))+ (-0.0895201 * float(x[2]))+ (-1.0951239 * float(x[3]))+ (0.3358089 * float(x[4]))+ (0.3496401 * float(x[5]))+ (-0.2628842 * float(x[6]))+ (0.579476 * float(x[7]))+ (0.38245445 * float(x[8]))+ (-1.4046259 * float(x[9]))+ (0.66076976 * float(x[10]))+ (0.60328454 * float(x[11]))+ (9.933718 * float(x[12]))+ (-0.55823475 * float(x[13]))+ (-0.82724565 * float(x[14]))+ (-1.6495731 * float(x[15]))+ (1.1095686 * float(x[16]))+ (0.36421403 * float(x[17]))+ (0.87236166 * float(x[18]))+ (4.1774006 * float(x[19]))+ (5.6920567 * float(x[20]))+ (-1.5612338 * float(x[21]))+ (0.88752335 * float(x[22]))+ (0.91795087 * float(x[23]))+ (0.32916978 * float(x[24]))+ (-0.71690726 * float(x[25]))+ (-0.9297851 * float(x[26]))+ (-0.28180635 * float(x[27]))+ (0.4226662 * float(x[28]))+ (-0.2033719 * float(x[29]))+ (-0.29133403 * float(x[30]))+ (1.0676924 * float(x[31]))+ (2.0539403 * float(x[32]))+ (-2.0654073 * float(x[33]))+ (1.7410717 * float(x[34]))+ (-2.0327713 * float(x[35]))+ (0.0073956335 * float(x[36]))+ (-0.7214547 * float(x[37]))+ (-0.16920307 * float(x[38]))+ (0.45113572 * float(x[39]))+ (4.3154798 * float(x[40]))+ (-3.8171365 * float(x[41]))+ (0.7503705 * float(x[42]))+ (-1.0706826 * float(x[43]))+ (-0.104778215 * float(x[44]))+ (-0.07902162 * float(x[45]))+ (-1.0551385 * float(x[46]))+ (-0.54718614 * float(x[47]))+ (-0.57427436 * float(x[48]))+ (0.55112374 * float(x[49])))+ ((-0.112548284 * float(x[50]))+ (-0.00056269043 * float(x[51]))+ (-1.6323638 * float(x[52]))+ (-1.9567937 * float(x[53]))+ (-2.5670035 * float(x[54]))+ (0.9115158 * float(x[55]))+ (-0.13378516 * float(x[56]))+ (-0.9112743 * float(x[57]))+ (-0.24113072 * float(x[58]))+ (3.696974 * float(x[59]))+ (0.4197442 * float(x[60]))+ (-0.08200966 * float(x[61]))+ (-0.44944805 * float(x[62]))+ (-1.2278062 * float(x[63]))+ (-1.7781236 * float(x[64]))+ (-0.5697998 * float(x[65]))+ (-0.680476 * float(x[66]))+ (-0.37695637 * float(x[67]))+ (-1.1783528 * float(x[68]))+ (1.2818621 * float(x[69]))+ (-0.14143738 * float(x[70]))+ (5.2515783 * float(x[71]))+ (-0.85974956 * float(x[72]))+ (0.15057397 * float(x[73]))+ (1.1722252 * float(x[74]))+ (-1.3406619 * float(x[75]))+ (-2.2578566 * float(x[76]))+ (0.17066395 * float(x[77]))+ (-0.7692333 * float(x[78]))+ (0.30502662 * float(x[79]))+ (-4.4230556 * float(x[80]))+ (2.3345897 * float(x[81]))+ (-2.069372 * float(x[82]))+ (-2.281236 * float(x[83]))+ (-2.793737 * float(x[84]))+ (0.6855429 * float(x[85]))+ (-0.7000498 * float(x[86]))+ (0.70130724 * float(x[87]))+ (0.80964136 * float(x[88]))+ (-0.61718357 * float(x[89]))+ (0.3851858 * float(x[90]))+ (-0.4665354 * float(x[91]))+ (2.6379013 * float(x[92]))+ (0.3694612 * float(x[93]))+ (3.5897179 * float(x[94]))+ (0.024203045 * float(x[95]))+ (0.7567573 * float(x[96]))+ (0.57400316 * float(x[97]))+ (-0.26633337 * float(x[98]))+ (-0.034929186 * float(x[99])))+ ((4.887371 * float(x[100]))+ (0.6319137 * float(x[101]))+ (0.55823225 * float(x[102]))+ (-0.901416 * float(x[103]))+ (0.6660054 * float(x[104]))+ (-1.129545 * float(x[105]))+ (0.03993842 * float(x[106]))+ (3.1329622 * float(x[107]))+ (-0.31370276 * float(x[108]))+ (-2.3935463 * float(x[109]))+ (-1.3766216 * float(x[110]))+ (-0.8287094 * float(x[111]))+ (2.3184514 * float(x[112]))+ (-1.4586067 * float(x[113]))+ (-3.581629 * float(x[114]))+ (4.1297703 * float(x[115]))+ (1.7400827 * float(x[116]))+ (-0.7197154 * float(x[117]))+ (2.6068373 * float(x[118]))+ (-1.3633769 * float(x[119]))+ (-0.3441859 * float(x[120]))+ (4.8710375 * float(x[121]))+ (-2.5559626 * float(x[122]))+ (-2.670175 * float(x[123]))+ (3.042278 * float(x[124]))+ (-0.99827594 * float(x[125]))+ (0.9911828 * float(x[126]))+ (-1.2556708 * float(x[127]))+ (4.2424974 * float(x[128]))+ (0.4493247 * float(x[129]))+ (-0.7587147 * float(x[130]))+ (-1.7910115 * float(x[131]))+ (0.63927776 * float(x[132]))+ (-0.65074813 * float(x[133]))+ (-0.37261406 * float(x[134]))+ (3.7270453 * float(x[135]))+ (-1.5137684 * float(x[136]))+ (6.4013944 * float(x[137]))+ (1.2883912 * float(x[138]))+ (-0.25486282 * float(x[139]))+ (3.0992336 * float(x[140]))+ (-0.3892571 * float(x[141]))+ (3.606577 * float(x[142]))+ (-2.3557818 * float(x[143]))+ (-0.2135074 * float(x[144]))+ (-3.5615988 * float(x[145]))+ (-3.490641 * float(x[146]))+ (-3.6589715 * float(x[147]))+ (5.428641 * float(x[148]))+ (-0.9788868 * float(x[149])))+ ((1.0867177 * float(x[150]))+ (0.5734452 * float(x[151]))+ (1.2796074 * float(x[152]))+ (-1.4917662 * float(x[153]))+ (0.5128932 * float(x[154]))+ (-1.5360581 * float(x[155]))+ (1.708894 * float(x[156]))+ (2.0896854 * float(x[157]))+ (-0.79504746 * float(x[158]))+ (-1.957032 * float(x[159]))+ (1.1933283 * float(x[160]))+ (0.35958493 * float(x[161]))+ (2.3784912 * float(x[162]))+ (1.863546 * float(x[163]))+ (1.2650932 * float(x[164]))+ (-0.32116744 * float(x[165]))+ (-1.0305775 * float(x[166]))+ (-1.3422914 * float(x[167]))+ (0.40035126 * float(x[168]))+ (-0.24345602 * float(x[169]))+ (4.602134 * float(x[170]))+ (-0.22169682 * float(x[171]))+ (-1.0125582 * float(x[172]))+ (4.4334955 * float(x[173]))+ (1.3848342 * float(x[174]))+ (-4.397198 * float(x[175]))+ (-0.21473776 * float(x[176]))+ (0.45476496 * float(x[177]))+ (-2.5136724 * float(x[178]))+ (-0.6163781 * float(x[179]))+ (0.33695668 * float(x[180]))+ (-1.9502348 * float(x[181]))+ (-0.26220688 * float(x[182]))+ (-4.3513713 * float(x[183]))+ (0.2115168 * float(x[184]))+ (-2.484164 * float(x[185]))+ (0.31421605 * float(x[186]))+ (1.1781437 * float(x[187]))+ (-1.4384792 * float(x[188]))+ (-0.22468972 * float(x[189]))+ (-1.1508611 * float(x[190]))+ (0.13623366 * float(x[191]))+ (0.6702295 * float(x[192]))+ (1.1852019 * float(x[193]))+ (0.6819466 * float(x[194]))+ (0.6852522 * float(x[195]))+ (-0.15810259 * float(x[196]))+ (-3.0093076 * float(x[197]))+ (-0.27235687 * float(x[198]))+ (0.36044025 * float(x[199])))+ ((1.3178293 * float(x[200]))+ (0.9065888 * float(x[201]))+ (-0.36966348 * float(x[202]))+ (-0.12769446 * float(x[203]))+ (-0.79528093 * float(x[204]))+ (4.2432466 * float(x[205]))+ (0.48410687 * float(x[206]))+ (0.9158264 * float(x[207]))+ (0.7183651 * float(x[208]))+ (0.9397445 * float(x[209]))+ (-0.25606745 * float(x[210]))+ (0.5693739 * float(x[211]))+ (3.7032943 * float(x[212]))+ (-0.27802107 * float(x[213]))+ (1.1196066 * float(x[214]))+ (0.9023696 * float(x[215]))+ (-0.65470004 * float(x[216]))+ (0.767549 * float(x[217]))+ (-1.1443747 * float(x[218]))+ (-1.5581213 * float(x[219]))+ (2.0998814 * float(x[220]))+ (-0.22515568 * float(x[221]))+ (0.28305653 * float(x[222]))+ (-2.7879038 * float(x[223]))+ (0.1661837 * float(x[224]))+ (-0.49180853 * float(x[225]))+ (0.39024693 * float(x[226]))+ (1.178397 * float(x[227]))+ (1.7122201 * float(x[228]))+ (1.3213276 * float(x[229]))+ (6.549604 * float(x[230]))+ (6.3135223 * float(x[231]))+ (2.3511357 * float(x[232]))+ (5.9269676 * float(x[233]))+ (-0.858373 * float(x[234]))+ (-6.6201377 * float(x[235]))+ (-4.9787474 * float(x[236]))+ (-2.9054625 * float(x[237]))+ (-4.236378 * float(x[238]))+ (4.7933125 * float(x[239]))+ (5.501571 * float(x[240]))+ (4.0020456 * float(x[241]))+ (-6.828023 * float(x[242]))+ (-1.7153141 * float(x[243]))+ (1.6421367 * float(x[244]))+ (3.8553667 * float(x[245]))+ (6.0323224 * float(x[246]))+ (-0.6687762 * float(x[247]))+ (-0.19677842 * float(x[248]))+ (6.7222366 * float(x[249])))+ ((-2.5658357 * float(x[250]))+ (5.836768 * float(x[251]))+ (-0.8770105 * float(x[252]))+ (-4.050627 * float(x[253]))+ (-1.5703013 * float(x[254]))+ (-2.192443 * float(x[255]))+ (-1.779869 * float(x[256]))+ (0.84127307 * float(x[257]))+ (2.4685228 * float(x[258]))+ (-1.590609 * float(x[259]))+ (-4.7668843 * float(x[260]))+ (-2.5287883 * float(x[261]))+ (-0.2964065 * float(x[262]))+ (1.2361921 * float(x[263]))+ (4.0516496 * float(x[264]))+ (1.8598101 * float(x[265]))+ (1.373346 * float(x[266]))+ (-4.3606467 * float(x[267]))+ (2.2353246 * float(x[268]))+ (4.7656226 * float(x[269]))+ (-0.28889608 * float(x[270]))+ (2.5220678 * float(x[271]))+ (4.040878 * float(x[272]))+ (1.717213 * float(x[273]))+ (3.7878144 * float(x[274]))+ (9.730389 * float(x[275]))+ (1.2271248 * float(x[276]))+ (0.8682732 * float(x[277]))+ (-0.96477836 * float(x[278]))+ (2.5557685 * float(x[279]))+ (-0.010289373 * float(x[280]))+ (2.5707598 * float(x[281]))+ (-0.98514605 * float(x[282]))+ (-0.6578178 * float(x[283]))+ (-2.194253 * float(x[284]))+ (0.95430803 * float(x[285]))+ (1.9788982 * float(x[286]))+ (3.133826 * float(x[287]))+ (-1.0473539 * float(x[288]))+ (1.1364673 * float(x[289]))+ (1.1376435 * float(x[290]))+ (-0.7318059 * float(x[291]))+ (0.2170569 * float(x[292]))+ (5.4080524 * float(x[293]))+ (1.3947232 * float(x[294]))+ (1.2794182 * float(x[295]))+ (0.53478044 * float(x[296]))+ (-2.2820983 * float(x[297]))+ (-1.4200591 * float(x[298]))+ (-1.9377807 * float(x[299])))+ ((-1.2678211 * float(x[300]))+ (-4.1944923 * float(x[301]))+ (0.33144808 * float(x[302]))+ (3.3732991 * float(x[303]))+ (-3.0984414 * float(x[304]))+ (0.9639763 * float(x[305]))+ (-0.6220277 * float(x[306]))+ (-0.26007217 * float(x[307]))+ (-0.36739057 * float(x[308]))+ (2.0347905 * float(x[309]))+ (-1.5730159 * float(x[310]))+ (1.8720332 * float(x[311]))+ (-1.1129354 * float(x[312]))+ (2.924496 * float(x[313]))+ (5.0094776 * float(x[314]))+ (1.8788284 * float(x[315]))+ (0.115911976 * float(x[316]))+ (1.2360264 * float(x[317]))+ (-3.444087 * float(x[318]))+ (1.7552415 * float(x[319]))+ (-7.221309 * float(x[320]))+ (3.6889374 * float(x[321]))+ (2.3727298 * float(x[322]))+ (3.1955557 * float(x[323]))+ (3.85931 * float(x[324]))+ (-1.1513151 * float(x[325]))+ (-3.5895936 * float(x[326]))+ (2.7617922 * float(x[327]))+ (-5.4611006 * float(x[328]))+ (3.461656 * float(x[329]))+ (-1.9925985 * float(x[330]))+ (-3.1404684 * float(x[331]))+ (-0.68106496 * float(x[332]))+ (-3.7586312 * float(x[333]))+ (1.1498215 * float(x[334]))+ (-4.6922917 * float(x[335]))+ (0.59828264 * float(x[336]))+ (-4.056063 * float(x[337]))+ (0.19637112 * float(x[338]))+ (-2.6031737 * float(x[339]))+ (0.44339445 * float(x[340]))+ (0.4372201 * float(x[341]))+ (-2.027497 * float(x[342]))+ (-1.4471445 * float(x[343]))+ (-2.1155164 * float(x[344]))+ (1.6136621 * float(x[345]))+ (6.1700883 * float(x[346]))+ (-0.5465599 * float(x[347]))+ (4.385889 * float(x[348]))+ (-0.94233257 * float(x[349])))+ ((-3.7580104 * float(x[350]))+ (-0.12317384 * float(x[351]))+ (-3.0485117 * float(x[352]))+ (0.11100174 * float(x[353]))+ (-3.342791 * float(x[354]))+ (-3.16967 * float(x[355]))+ (-0.17921051 * float(x[356]))+ (-2.3156753 * float(x[357]))+ (2.0984778 * float(x[358]))+ (-3.5381832 * float(x[359]))+ (-0.56897867 * float(x[360]))+ (2.160896 * float(x[361]))+ (1.134598 * float(x[362]))+ (-3.6330042 * float(x[363]))+ (1.8720236 * float(x[364]))+ (-4.137517 * float(x[365]))+ (0.7530042 * float(x[366]))+ (3.343624 * float(x[367]))+ (1.0835079 * float(x[368]))+ (-1.6927516 * float(x[369]))+ (-2.5657554 * float(x[370]))+ (-0.2512168 * float(x[371]))+ (1.7740805 * float(x[372]))+ (2.8849888 * float(x[373]))+ (1.4847252 * float(x[374]))+ (-1.5484048 * float(x[375]))+ (-0.58944756 * float(x[376]))+ (-0.32494235 * float(x[377]))+ (3.286953 * float(x[378]))+ (-0.035937607 * float(x[379]))+ (2.9754083 * float(x[380]))+ (-1.0946227 * float(x[381]))+ (0.5993739 * float(x[382]))+ (1.549788 * float(x[383]))+ (0.68300396 * float(x[384]))+ (-1.3913474 * float(x[385]))+ (0.8732883 * float(x[386]))+ (2.389753 * float(x[387]))+ (-4.8669844 * float(x[388]))+ (-0.63560665 * float(x[389]))+ (-1.8060241 * float(x[390]))+ (-0.6548832 * float(x[391]))+ (0.11725783 * float(x[392]))+ (0.6298225 * float(x[393]))+ (3.9879246 * float(x[394]))+ (-3.5550978 * float(x[395]))+ (-0.09596966 * float(x[396]))+ (-2.6074424 * float(x[397]))+ (1.9840889 * float(x[398]))+ (-0.95175296 * float(x[399])))+ ((-0.22192848 * float(x[400]))+ (0.04754417 * float(x[401]))+ (-2.047972 * float(x[402]))+ (-2.5931377 * float(x[403]))+ (1.2811816 * float(x[404]))+ (-2.3876455 * float(x[405]))+ (-1.1276973 * float(x[406]))+ (-0.76006234 * float(x[407]))+ (-2.8700533 * float(x[408]))+ (-0.8557754 * float(x[409]))+ (8.596103 * float(x[410]))+ (-3.8993182 * float(x[411]))+ (4.1334014 * float(x[412]))+ (0.027954806 * float(x[413]))+ (2.130102 * float(x[414]))+ (-3.2005692 * float(x[415]))+ (2.624321 * float(x[416]))+ (-0.6012326 * float(x[417]))+ (-4.0683045 * float(x[418]))+ (-1.9210056 * float(x[419]))+ (-1.8954408 * float(x[420]))+ (-1.2798864 * float(x[421]))+ (1.0540513 * float(x[422]))+ (0.33063877 * float(x[423]))+ (-1.9289663 * float(x[424]))+ (0.37721726 * float(x[425]))+ (-3.1352959 * float(x[426]))+ (-0.1367293 * float(x[427]))+ (4.43731 * float(x[428]))+ (-2.5076444 * float(x[429]))+ (5.4207726 * float(x[430]))+ (3.6335347 * float(x[431]))+ (-1.1001471 * float(x[432]))+ (3.5427146 * float(x[433]))+ (-0.9018063 * float(x[434]))+ (-3.7883763 * float(x[435]))+ (-4.179014 * float(x[436]))+ (0.92628664 * float(x[437]))+ (-1.014295 * float(x[438]))+ (-2.9727707 * float(x[439]))+ (0.9021362 * float(x[440]))+ (2.3396373 * float(x[441]))+ (-1.4869341 * float(x[442]))+ (0.919001 * float(x[443]))+ (1.6609067 * float(x[444]))+ (-0.33815673 * float(x[445]))+ (2.4099574 * float(x[446]))+ (0.22088026 * float(x[447]))+ (1.1033204 * float(x[448]))+ (3.2661214 * float(x[449])))+ ((-1.017391 * float(x[450]))+ (2.1381516 * float(x[451]))+ (1.0756826 * float(x[452]))+ (-3.379939 * float(x[453]))+ (-1.862012 * float(x[454]))+ (-1.3254651 * float(x[455]))+ (-3.1139371 * float(x[456]))+ (0.39446524 * float(x[457]))+ (1.2380581 * float(x[458]))+ (-3.0360367 * float(x[459]))+ (1.8491794 * float(x[460]))+ (-0.323079 * float(x[461]))+ (1.672586 * float(x[462]))+ (4.557518 * float(x[463]))+ (-3.2958777 * float(x[464]))+ (2.207665 * float(x[465]))+ (2.1247532 * float(x[466]))+ (2.0832753 * float(x[467]))+ (-2.955627 * float(x[468]))+ (2.9705367 * float(x[469]))+ (1.9256883 * float(x[470]))+ (1.1735975 * float(x[471]))+ (0.25967354 * float(x[472]))+ (-1.6165149 * float(x[473]))+ (-1.4518682 * float(x[474]))+ (3.3641129 * float(x[475]))+ (-2.6472805 * float(x[476]))+ (-1.4767932 * float(x[477]))+ (-1.0792774 * float(x[478]))+ (-2.1632977 * float(x[479]))+ (-0.038129922 * float(x[480]))+ (-1.4310062 * float(x[481]))+ (4.718043 * float(x[482]))+ (-1.3198068 * float(x[483]))+ (0.22531708 * float(x[484]))+ (2.1755004 * float(x[485]))+ (-1.152408 * float(x[486]))+ (-0.081210926 * float(x[487]))+ (2.462509 * float(x[488]))+ (1.9024606 * float(x[489]))+ (4.958436 * float(x[490]))+ (3.146793 * float(x[491]))+ (-1.6032453 * float(x[492]))+ (-2.0728827 * float(x[493]))+ (-1.1038431 * float(x[494]))+ (2.2232897 * float(x[495]))+ (1.5246642 * float(x[496]))+ (1.9522842 * float(x[497]))+ (5.667726 * float(x[498]))+ (0.1561248 * float(x[499])))+ ((-2.5128725 * float(x[500]))+ (2.9662075 * float(x[501]))+ (2.1045377 * float(x[502]))+ (0.010713224 * float(x[503]))+ (0.14241812 * float(x[504]))+ (-4.777689 * float(x[505]))+ (-4.514455 * float(x[506]))+ (2.578878 * float(x[507]))+ (2.792543 * float(x[508]))+ (-5.6859446 * float(x[509]))+ (-1.3313447 * float(x[510]))+ (-0.2113988 * float(x[511]))+ (0.51986915 * float(x[512]))+ (0.060366407 * float(x[513]))+ (0.11825634 * float(x[514]))+ (0.2790384 * float(x[515]))+ (-1.4007387 * float(x[516]))+ (-2.2512434 * float(x[517]))+ (-1.5105042 * float(x[518]))+ (0.743974 * float(x[519]))+ (2.334 * float(x[520]))+ (1.0356797 * float(x[521]))+ (-0.36586642 * float(x[522]))+ (-0.4890758 * float(x[523]))+ (-0.8103751 * float(x[524]))+ (4.5577507 * float(x[525]))+ (0.12296757 * float(x[526]))+ (-3.6983774 * float(x[527]))+ (-3.223334 * float(x[528]))+ (-2.1260684 * float(x[529]))+ (-2.0894349 * float(x[530]))+ (0.10228423 * float(x[531]))+ (-0.5387562 * float(x[532]))+ (-3.0686946 * float(x[533]))+ (-1.8901405 * float(x[534]))+ (3.0226796 * float(x[535]))+ (2.2481828 * float(x[536]))+ (3.8456206 * float(x[537]))+ (-0.18171452 * float(x[538]))+ (0.07701073 * float(x[539]))+ (-2.9145179 * float(x[540]))+ (3.3636754 * float(x[541]))+ (0.95022905 * float(x[542]))+ (3.9695473 * float(x[543]))+ (3.0478044 * float(x[544]))+ (-2.6753988 * float(x[545]))+ (4.890236 * float(x[546]))+ (3.1918259 * float(x[547]))+ (1.4654845 * float(x[548]))+ (0.9464665 * float(x[549])))+ ((-2.2862756 * float(x[550]))+ (-2.5809 * float(x[551]))+ (-3.8206463 * float(x[552]))+ (-1.8017201 * float(x[553]))+ (5.530985 * float(x[554]))+ (-3.4244297 * float(x[555]))+ (3.7184865 * float(x[556]))+ (4.4459953 * float(x[557]))+ (-0.36283895 * float(x[558]))+ (0.3280228 * float(x[559]))+ (2.6625907 * float(x[560]))+ (-1.1867512 * float(x[561]))+ (-1.7101092 * float(x[562]))+ (1.5918539 * float(x[563]))+ (2.1246467 * float(x[564]))+ (-1.3413005 * float(x[565]))+ (2.2220614 * float(x[566]))+ (0.18203542 * float(x[567]))+ (-0.8581506 * float(x[568]))+ (2.6044858 * float(x[569]))+ (1.4346884 * float(x[570]))+ (0.7823674 * float(x[571]))+ (2.081054 * float(x[572]))+ (-0.4303199 * float(x[573]))+ (-0.8873121 * float(x[574]))+ (1.0174422 * float(x[575]))+ (2.8012087 * float(x[576]))+ (1.3834456 * float(x[577]))+ (-1.8078427 * float(x[578]))+ (-5.1270833 * float(x[579]))+ (-4.2179937 * float(x[580]))+ (1.5631323 * float(x[581]))+ (-0.33772114 * float(x[582]))+ (1.2817657 * float(x[583]))+ (1.4902905 * float(x[584]))+ (-1.5866781 * float(x[585]))+ (-6.7249227 * float(x[586]))+ (-0.009682016 * float(x[587]))+ (-2.5996206 * float(x[588]))+ (-5.649601 * float(x[589]))+ (0.6927927 * float(x[590]))+ (1.3727881 * float(x[591]))+ (0.18735151 * float(x[592]))+ (3.3298414 * float(x[593]))+ (-0.86721176 * float(x[594]))+ (-1.5881579 * float(x[595]))+ (-4.0068083 * float(x[596]))+ (0.64133805 * float(x[597]))+ (2.6776052 * float(x[598]))+ (-1.0089123 * float(x[599])))+ ((-4.5649567 * float(x[600]))+ (4.8964324 * float(x[601]))+ (4.048485 * float(x[602]))+ (4.5781164 * float(x[603]))+ (-2.0881948 * float(x[604]))+ (-1.1174049 * float(x[605]))+ (-1.391506 * float(x[606]))+ (-0.8795028 * float(x[607]))+ (-0.0032324647 * float(x[608]))+ (-2.050336 * float(x[609]))+ (-1.0652229 * float(x[610]))+ (-5.036248 * float(x[611]))+ (-6.85618 * float(x[612]))+ (-0.6992349 * float(x[613]))+ (2.007265 * float(x[614]))+ (-0.9667719 * float(x[615]))+ (3.0931983 * float(x[616]))+ (-2.287941 * float(x[617]))+ (3.0703409 * float(x[618]))+ (6.7001877 * float(x[619]))+ (0.27890444 * float(x[620]))+ (0.033522315 * float(x[621]))+ (1.7031385 * float(x[622]))+ (-2.7653673 * float(x[623]))+ (2.8279166 * float(x[624]))+ (2.43993 * float(x[625]))+ (1.255565 * float(x[626]))+ (0.4361145 * float(x[627]))+ (1.1877521 * float(x[628]))+ (-4.384479 * float(x[629]))+ (2.2195995 * float(x[630]))+ (5.7149353 * float(x[631]))+ (5.830325 * float(x[632]))+ (-0.8617066 * float(x[633]))+ (3.508798 * float(x[634]))+ (0.7797707 * float(x[635]))+ (-0.29814807 * float(x[636]))+ (0.216045 * float(x[637]))+ (-1.0671033 * float(x[638]))+ (2.1858783 * float(x[639]))+ (2.2949207 * float(x[640]))+ (1.5728029 * float(x[641]))+ (-6.718347 * float(x[642]))+ (-2.579922 * float(x[643]))+ (-1.9910656 * float(x[644]))+ (-2.0203767 * float(x[645]))+ (0.5275775 * float(x[646]))+ (1.6764492 * float(x[647]))+ (0.2853816 * float(x[648]))+ (-6.9307194 * float(x[649])))+ ((0.0626266 * float(x[650]))+ (-6.183565 * float(x[651]))+ (4.982129 * float(x[652]))+ (5.11095 * float(x[653]))+ (-2.5602336 * float(x[654]))+ (8.599145 * float(x[655]))+ (-2.327256 * float(x[656]))+ (0.7044688 * float(x[657]))+ (-0.96156967 * float(x[658]))+ (0.42262107 * float(x[659]))+ (4.7589846 * float(x[660]))+ (1.4098083 * float(x[661]))+ (1.5263612 * float(x[662]))+ (-0.2014675 * float(x[663]))+ (0.86585695 * float(x[664]))+ (0.3310515 * float(x[665]))+ (4.047372 * float(x[666]))+ (4.7140183 * float(x[667]))+ (3.7984667 * float(x[668]))+ (-1.7885679 * float(x[669]))+ (4.6451635 * float(x[670]))+ (1.9339249 * float(x[671]))+ (1.5640734 * float(x[672]))+ (-0.6223318 * float(x[673]))+ (-6.5378118 * float(x[674]))+ (-4.9772663 * float(x[675]))+ (-0.29110083 * float(x[676]))+ (-1.4045134 * float(x[677]))+ (1.7699858 * float(x[678]))+ (-4.2781963 * float(x[679]))+ (2.0795224 * float(x[680]))+ (0.1046542 * float(x[681]))+ (0.59870183 * float(x[682]))+ (-0.44522914 * float(x[683]))+ (-3.484035 * float(x[684]))+ (-0.85151386 * float(x[685]))+ (-2.4100542 * float(x[686]))+ (-3.3285365 * float(x[687]))+ (-3.207859 * float(x[688]))+ (3.3821313 * float(x[689]))+ (-3.3373396 * float(x[690]))+ (2.177313 * float(x[691]))+ (-7.9619136 * float(x[692]))+ (-1.490867 * float(x[693]))+ (1.49875 * float(x[694]))+ (-1.748166 * float(x[695]))+ (2.2945688 * float(x[696]))+ (-1.208136 * float(x[697]))+ (4.2454553 * float(x[698]))+ (-0.9293877 * float(x[699])))+ ((-4.1916747 * float(x[700]))+ (-4.204317 * float(x[701]))+ (3.1626115 * float(x[702]))+ (-4.4723477 * float(x[703]))+ (4.019589 * float(x[704]))+ (-1.2619398 * float(x[705]))+ (-4.4647756 * float(x[706]))+ (0.39086735 * float(x[707]))+ (3.4539006 * float(x[708]))+ (-2.9728453 * float(x[709]))+ (-0.4318773 * float(x[710]))+ (-0.89247453 * float(x[711]))+ (-0.10228388 * float(x[712]))+ (-2.7365801 * float(x[713]))+ (1.7458698 * float(x[714]))+ (-5.5124583 * float(x[715]))+ (1.0540254 * float(x[716]))+ (4.1110888 * float(x[717]))+ (1.1106374 * float(x[718]))+ (-1.6831568 * float(x[719]))+ (-1.2267628 * float(x[720]))+ (-0.22689939 * float(x[721]))+ (-0.39069703 * float(x[722]))+ (0.95336425 * float(x[723]))+ (-1.2312838 * float(x[724]))+ (2.1130393 * float(x[725]))+ (-0.7386053 * float(x[726]))+ (0.44725442 * float(x[727]))+ (-0.91236115 * float(x[728]))+ (-2.3274066 * float(x[729]))+ (2.0321896 * float(x[730]))+ (-2.2755773 * float(x[731]))+ (1.0732663 * float(x[732]))+ (4.102763 * float(x[733]))+ (-0.18781033 * float(x[734]))+ (-2.7492235 * float(x[735]))+ (1.0099258 * float(x[736]))+ (-4.566924 * float(x[737]))+ (-1.2415559 * float(x[738]))+ (-0.636065 * float(x[739]))+ (0.2771881 * float(x[740]))+ (-5.787675 * float(x[741]))+ (2.1293445 * float(x[742]))+ (3.7669618 * float(x[743]))+ (-0.90173113 * float(x[744]))+ (1.5010941 * float(x[745]))+ (-0.4038009 * float(x[746]))+ (2.1773791 * float(x[747]))+ (-2.1675467 * float(x[748]))+ (0.32705235 * float(x[749])))+ ((0.80148613 * float(x[750]))+ (1.9444529 * float(x[751]))+ (-2.0469413 * float(x[752]))+ (4.3747478 * float(x[753]))+ (0.66602135 * float(x[754]))+ (1.2946782 * float(x[755]))+ (-2.1303592 * float(x[756]))+ (-3.8824723 * float(x[757]))+ (-0.8258143 * float(x[758]))+ (0.119574204 * float(x[759]))+ (-3.9815764 * float(x[760]))+ (-2.912899 * float(x[761]))+ (1.3339089 * float(x[762]))+ (1.0050828 * float(x[763]))+ (1.1654668 * float(x[764]))+ (4.440384 * float(x[765]))+ (-3.0359898 * float(x[766]))+ (3.815248 * float(x[767]))+ (-2.8214364 * float(x[768]))+ (0.35007173 * float(x[769]))+ (5.556103 * float(x[770]))+ (2.1975842 * float(x[771]))+ (4.279898 * float(x[772]))+ (5.0632606 * float(x[773]))+ (-2.797488 * float(x[774]))+ (-0.26524374 * float(x[775]))+ (-1.3707533 * float(x[776]))+ (3.8980198 * float(x[777]))+ (-0.11026592 * float(x[778]))+ (0.98870456 * float(x[779]))+ (6.764607 * float(x[780]))+ (1.055054 * float(x[781]))+ (-1.3778816 * float(x[782]))+ (-1.4008578 * float(x[783]))+ (-1.9804467 * float(x[784]))+ (2.028423 * float(x[785]))+ (-3.333876 * float(x[786]))+ (-3.9352984 * float(x[787]))+ (1.1991141 * float(x[788]))+ (2.366193 * float(x[789]))+ (-2.827666 * float(x[790]))+ (-3.5882816 * float(x[791]))+ (-5.0672746 * float(x[792]))+ (1.9108031 * float(x[793]))+ (4.6980968 * float(x[794]))+ (2.322407 * float(x[795]))+ (4.786402 * float(x[796]))+ (3.4034 * float(x[797]))+ (-0.5198019 * float(x[798]))+ (-1.2031682 * float(x[799])))+ ((5.155772 * float(x[800]))+ (-0.7560998 * float(x[801]))+ (-3.2934554 * float(x[802]))+ (-3.379825 * float(x[803]))+ (5.0612097 * float(x[804]))+ (-0.2810523 * float(x[805]))+ (0.6128871 * float(x[806]))+ (0.6092721 * float(x[807]))+ (-1.7268767 * float(x[808]))+ (-0.59989744 * float(x[809]))+ (1.8837941 * float(x[810]))+ (-3.1351366 * float(x[811]))+ (-1.7954721 * float(x[812]))+ (-2.1737676 * float(x[813]))+ (-2.7788377 * float(x[814]))+ (1.2305012 * float(x[815]))+ (6.190363 * float(x[816]))+ (3.0147371 * float(x[817]))+ (-1.1947172 * float(x[818]))+ (3.418559 * float(x[819]))+ (6.400436 * float(x[820]))+ (5.112309 * float(x[821]))+ (-3.4574215 * float(x[822]))+ (2.1865306 * float(x[823]))+ (3.3767 * float(x[824]))+ (0.32390797 * float(x[825]))+ (3.2436657 * float(x[826]))+ (-2.504454 * float(x[827]))+ (2.0555084 * float(x[828]))+ (2.8873835 * float(x[829]))+ (1.3351823 * float(x[830]))+ (0.8848198 * float(x[831]))+ (1.5382388 * float(x[832]))+ (-2.3646603 * float(x[833]))+ (-4.5271497 * float(x[834]))+ (-2.1691096 * float(x[835]))+ (1.8108958 * float(x[836]))+ (1.9373009 * float(x[837]))+ (-2.7671924 * float(x[838]))+ (-4.113291 * float(x[839]))+ (-2.5341518 * float(x[840]))+ (-1.0777427 * float(x[841]))+ (0.7348468 * float(x[842]))+ (1.5419781 * float(x[843]))+ (0.28589016 * float(x[844]))+ (2.7661679 * float(x[845]))+ (-1.4497199 * float(x[846]))+ (1.7251554 * float(x[847]))+ (-1.1581398 * float(x[848]))+ (-0.56823415 * float(x[849])))+ ((-1.9173523 * float(x[850]))+ (-2.7812219 * float(x[851]))+ (2.035734 * float(x[852]))+ (1.2458364 * float(x[853]))+ (7.4705057 * float(x[854]))+ (-0.6586087 * float(x[855]))+ (-2.4618497 * float(x[856]))+ (-0.719368 * float(x[857]))+ (6.38781 * float(x[858]))+ (10.142032 * float(x[859]))+ (3.7257657 * float(x[860]))+ (3.3689196 * float(x[861]))+ (-3.4663503 * float(x[862]))+ (-1.1703868 * float(x[863]))+ (-0.6586621 * float(x[864]))+ (-4.265501 * float(x[865]))+ (-1.5544189 * float(x[866]))+ (-0.84166914 * float(x[867]))+ (-2.1134975 * float(x[868]))+ (-0.85362434 * float(x[869]))+ (-1.9836323 * float(x[870]))+ (3.3385942 * float(x[871]))+ (1.6739247 * float(x[872]))+ (-4.3494797 * float(x[873]))+ (-1.7936932 * float(x[874]))+ (-1.2717971 * float(x[875]))+ (0.2371411 * float(x[876]))+ (-0.94162863 * float(x[877]))+ (-1.5687268 * float(x[878]))+ (1.1596931 * float(x[879]))+ (5.996657 * float(x[880]))+ (-2.0030417 * float(x[881]))+ (0.08791142 * float(x[882]))+ (1.3301454 * float(x[883]))+ (4.832669 * float(x[884]))+ (7.6731367 * float(x[885]))+ (10.045363 * float(x[886]))+ (5.045426 * float(x[887]))+ (-0.8118623 * float(x[888]))+ (-1.6272624 * float(x[889]))+ (0.07413162 * float(x[890]))+ (-1.409219 * float(x[891]))+ (5.983302 * float(x[892]))+ (0.9183443 * float(x[893]))+ (0.6869673 * float(x[894]))+ (0.73965347 * float(x[895]))+ (0.12898903 * float(x[896]))+ (-2.216285 * float(x[897]))+ (-1.5290923 * float(x[898]))+ (1.2560617 * float(x[899])))+ ((1.7885834 * float(x[900]))+ (-3.9308414 * float(x[901]))+ (-4.75576 * float(x[902]))+ (3.3616302 * float(x[903]))+ (-1.8338895 * float(x[904]))+ (2.1751854 * float(x[905]))+ (-3.4321492 * float(x[906]))+ (-0.11301213 * float(x[907]))+ (-4.525639 * float(x[908]))+ (-3.0584397 * float(x[909]))+ (-1.0955076 * float(x[910]))+ (-0.44123867 * float(x[911]))+ (0.043948866 * float(x[912]))+ (2.0275762 * float(x[913]))+ (2.1748414 * float(x[914]))+ (-2.4932718 * float(x[915]))+ (-1.7298222 * float(x[916]))+ (-0.29713848 * float(x[917]))+ (0.9011051 * float(x[918]))+ (-1.6526245 * float(x[919]))+ (-1.536636 * float(x[920]))+ (-0.93846154 * float(x[921]))+ (0.06554127 * float(x[922]))+ (-0.29234028 * float(x[923]))+ (1.7185805 * float(x[924]))+ (1.4925237 * float(x[925]))+ (-1.3252937 * float(x[926]))+ (-2.1598318 * float(x[927]))+ (2.411145 * float(x[928]))+ (3.4608727 * float(x[929]))+ (1.2752285 * float(x[930]))+ (-3.3295047 * float(x[931]))+ (-2.1914914 * float(x[932]))+ (1.7983133 * float(x[933]))+ (-2.2775836 * float(x[934]))+ (-3.3811467 * float(x[935]))+ (-6.9042797 * float(x[936]))+ (-2.9378245 * float(x[937]))+ (-0.9950392 * float(x[938]))+ (-0.988949 * float(x[939]))+ (5.0128736 * float(x[940]))+ (4.758685 * float(x[941]))+ (5.6953855 * float(x[942]))+ (-1.3836341 * float(x[943]))+ (6.4495716 * float(x[944]))+ (3.6845427 * float(x[945]))+ (-1.4380469 * float(x[946]))+ (1.3609773 * float(x[947]))+ (-0.5041518 * float(x[948]))+ (-3.2662706 * float(x[949])))+ ((1.3552016 * float(x[950]))+ (-0.6160448 * float(x[951]))+ (-1.2757748 * float(x[952]))+ (-0.38008028 * float(x[953]))+ (-0.01568035 * float(x[954]))+ (0.44938257 * float(x[955]))+ (1.0448532 * float(x[956]))+ (-0.82231444 * float(x[957]))+ (0.07894544 * float(x[958]))+ (-0.23819156 * float(x[959]))+ (-0.66071486 * float(x[960]))+ (-0.40540642 * float(x[961]))+ (0.93096584 * float(x[962]))+ (0.19585639 * float(x[963]))+ (0.77713704 * float(x[964]))+ (-0.4014573 * float(x[965]))+ (-1.316381 * float(x[966]))+ (-1.2935524 * float(x[967]))+ (0.8736039 * float(x[968]))+ (-0.71465725 * float(x[969]))+ (-0.39017215 * float(x[970]))+ (0.83784294 * float(x[971]))+ (0.02002062 * float(x[972]))+ (0.5804319 * float(x[973]))+ (0.09321984 * float(x[974]))+ (0.5391931 * float(x[975]))+ (-0.58508915 * float(x[976]))+ (-0.23051846 * float(x[977]))+ (-0.09640678 * float(x[978]))+ (0.54149014 * float(x[979]))+ (0.15945515 * float(x[980]))+ (-0.15418963 * float(x[981]))+ (0.35098383 * float(x[982]))+ (0.36388972 * float(x[983]))+ (0.10491434 * float(x[984]))+ (-0.32615405 * float(x[985]))+ (-0.5719022 * float(x[986]))+ (-0.21332817 * float(x[987]))+ (0.281793 * float(x[988]))+ (-0.7028524 * float(x[989]))+ (-0.17278102 * float(x[990]))+ (0.7917619 * float(x[991]))+ (1.1941825 * float(x[992]))+ (-0.60080296 * float(x[993]))+ (-0.4016336 * float(x[994]))+ (0.51893467 * float(x[995]))+ (0.1999954 * float(x[996]))+ (-1.5546529 * float(x[997]))+ (1.1045984 * float(x[998]))+ (0.14690876 * float(x[999])))+ ((-0.03635202 * float(x[1000]))+ (-0.13379887 * float(x[1001]))+ (0.8238116 * float(x[1002]))+ (-0.48995295 * float(x[1003]))+ (-0.3287648 * float(x[1004]))+ (-0.12380071 * float(x[1005]))+ (-0.0034807904 * float(x[1006]))+ (-0.55900985 * float(x[1007]))+ (1.1460147 * float(x[1008]))+ (-0.17713547 * float(x[1009]))+ (-0.3072936 * float(x[1010]))+ (-1.6985387 * float(x[1011]))+ (-0.19866855 * float(x[1012]))+ (-0.011100844 * float(x[1013]))+ (-1.0135915 * float(x[1014]))+ (-1.0418632 * float(x[1015]))+ (-0.42681012 * float(x[1016]))+ (-0.38267487 * float(x[1017]))+ (0.5481959 * float(x[1018]))+ (-0.75379497 * float(x[1019]))+ (-0.3211889 * float(x[1020]))+ (1.8078883 * float(x[1021]))+ (-0.58714324 * float(x[1022]))+ (0.3516493 * float(x[1023]))+ (0.12307614 * float(x[1024]))+ (-0.54184026 * float(x[1025]))+ (-0.45752463 * float(x[1026]))+ (0.19463353 * float(x[1027]))+ (-0.81570363 * float(x[1028]))+ (1.5817388 * float(x[1029]))+ (-0.5080323 * float(x[1030]))+ (1.115746 * float(x[1031]))+ (1.3665854 * float(x[1032]))+ (1.1639358 * float(x[1033]))+ (1.0682259 * float(x[1034]))+ (-0.2872531 * float(x[1035]))+ (-0.24253513 * float(x[1036]))+ (0.43991965 * float(x[1037]))+ (-0.32912216 * float(x[1038]))+ (-0.0020891216 * float(x[1039]))+ (-0.465853 * float(x[1040]))+ (-0.55532706 * float(x[1041]))+ (-2.1289907 * float(x[1042]))+ (-1.3022131 * float(x[1043]))+ (-0.88233083 * float(x[1044]))+ (0.4420419 * float(x[1045]))+ (0.44263452 * float(x[1046]))+ (-1.8935535 * float(x[1047]))+ (1.0954409 * float(x[1048]))+ (-0.23986647 * float(x[1049])))+ ((0.16309531 * float(x[1050]))+ (-1.0078236 * float(x[1051]))+ (1.2004114 * float(x[1052]))+ (0.2001255 * float(x[1053]))+ (-0.4871835 * float(x[1054]))+ (0.03096804 * float(x[1055]))+ (0.54567355 * float(x[1056]))+ (-0.005264356 * float(x[1057]))+ (-0.68408144 * float(x[1058]))+ (-0.70421165 * float(x[1059]))+ (-0.0049402984 * float(x[1060]))+ (-0.90875703 * float(x[1061]))+ (-0.10582442 * float(x[1062]))+ (1.223409 * float(x[1063]))+ (0.28543538 * float(x[1064]))+ (-0.88023263 * float(x[1065]))+ (-0.080971144 * float(x[1066]))+ (-0.0001067506 * float(x[1067]))+ (-1.2265208 * float(x[1068]))+ (-0.12604253 * float(x[1069]))+ (-1.493903 * float(x[1070]))+ (0.07491706 * float(x[1071]))+ (0.015961433 * float(x[1072]))+ (-0.418822 * float(x[1073]))+ (-0.9038893 * float(x[1074]))+ (0.91694957 * float(x[1075]))+ (-1.0395436 * float(x[1076]))+ (-0.12006759 * float(x[1077]))+ (0.07230118 * float(x[1078]))+ (-1.4944087 * float(x[1079]))+ (-0.0377189 * float(x[1080]))+ (-1.7858742 * float(x[1081]))+ (0.29268196 * float(x[1082]))+ (0.37616614 * float(x[1083]))+ (-1.3371696 * float(x[1084]))+ (-0.6542691 * float(x[1085]))+ (-0.5728128 * float(x[1086]))+ (0.5129972 * float(x[1087]))+ (1.0219922 * float(x[1088]))+ (-0.2867269 * float(x[1089]))+ (0.762855 * float(x[1090]))+ (0.8496485 * float(x[1091]))+ (-1.1801444 * float(x[1092]))+ (-0.28663084 * float(x[1093]))+ (-0.17082883 * float(x[1094]))+ (-0.76548684 * float(x[1095]))+ (0.3190524 * float(x[1096]))+ (-0.5060668 * float(x[1097]))+ (1.1854134 * float(x[1098]))+ (0.77415085 * float(x[1099])))+ ((0.5827455 * float(x[1100]))+ (-0.5351182 * float(x[1101]))+ (0.5260103 * float(x[1102]))+ (-0.34705687 * float(x[1103]))+ (-0.49688604 * float(x[1104]))+ (-0.22168712 * float(x[1105]))+ (-0.48922437 * float(x[1106]))+ (1.839127 * float(x[1107]))+ (-0.03653454 * float(x[1108]))+ (1.1921003 * float(x[1109]))+ (0.55389416 * float(x[1110]))+ (0.4977725 * float(x[1111]))+ (-0.09576505 * float(x[1112]))+ (-0.46307462 * float(x[1113]))+ (1.2523896 * float(x[1114]))+ (-0.21038012 * float(x[1115]))+ (-2.2006354 * float(x[1116]))+ (0.9256704 * float(x[1117]))+ (-0.55944854 * float(x[1118]))+ (0.18558863 * float(x[1119]))+ (0.56511885 * float(x[1120]))+ (0.4305177 * float(x[1121]))+ (1.6582395 * float(x[1122]))+ (-0.4434004 * float(x[1123]))+ (0.053087573 * float(x[1124]))+ (-0.22688007 * float(x[1125]))+ (-0.4031312 * float(x[1126]))+ (-0.29026425 * float(x[1127]))+ (0.4103278 * float(x[1128]))+ (-0.6349523 * float(x[1129]))+ (-0.85079324 * float(x[1130]))+ (0.98477995 * float(x[1131]))+ (-0.951422 * float(x[1132]))+ (1.5283585 * float(x[1133]))+ (0.15773901 * float(x[1134]))+ (-0.6621897 * float(x[1135]))+ (-0.31448975 * float(x[1136]))+ (-0.46700224 * float(x[1137]))+ (-0.5776964 * float(x[1138]))+ (0.047619227 * float(x[1139]))+ (0.69337153 * float(x[1140]))+ (-0.2897466 * float(x[1141]))+ (1.3089507 * float(x[1142]))+ (-0.43750203 * float(x[1143]))+ (0.16535152 * float(x[1144]))+ (0.5010625 * float(x[1145]))+ (0.92260695 * float(x[1146]))+ (-0.809865 * float(x[1147]))+ (-0.43569264 * float(x[1148]))+ (-0.26371485 * float(x[1149])))+ ((1.2281983 * float(x[1150]))+ (0.049263984 * float(x[1151]))+ (0.8393231 * float(x[1152]))+ (-1.3267899 * float(x[1153]))+ (0.008643119 * float(x[1154]))+ (0.787668 * float(x[1155]))+ (0.5029153 * float(x[1156]))+ (0.40699825 * float(x[1157]))+ (0.19775115 * float(x[1158]))+ (0.67137825 * float(x[1159]))+ (-0.605222 * float(x[1160]))+ (0.45902294 * float(x[1161]))+ (0.14228684 * float(x[1162]))+ (0.60025305 * float(x[1163]))+ (-0.24622208 * float(x[1164]))+ (-0.8125301 * float(x[1165]))+ (0.2255968 * float(x[1166]))+ (1.4729561 * float(x[1167]))+ (0.31004584 * float(x[1168]))+ (-0.7360284 * float(x[1169]))+ (-0.12278238 * float(x[1170]))+ (0.092042625 * float(x[1171]))+ (1.0955315 * float(x[1172]))+ (0.13364163 * float(x[1173]))+ (-0.5791921 * float(x[1174]))+ (-0.5139427 * float(x[1175]))+ (0.5335047 * float(x[1176]))+ (-0.067649774 * float(x[1177]))+ (1.4752367 * float(x[1178]))+ (1.0461655 * float(x[1179]))+ (-1.1199758 * float(x[1180]))+ (0.426085 * float(x[1181]))+ (0.8672504 * float(x[1182]))+ (-0.6102558 * float(x[1183]))+ (0.8647969 * float(x[1184]))+ (-0.8108782 * float(x[1185]))+ (-0.68235976 * float(x[1186]))+ (1.8655992 * float(x[1187]))+ (-0.38308164 * float(x[1188]))+ (0.16015476 * float(x[1189]))+ (0.2859168 * float(x[1190]))+ (-0.3028839 * float(x[1191]))+ (-1.6119853 * float(x[1192]))+ (0.46355373 * float(x[1193]))+ (-0.89735854 * float(x[1194]))+ (-0.20054075 * float(x[1195]))+ (-0.059255302 * float(x[1196]))+ (-0.4362237 * float(x[1197]))+ (-0.45775524 * float(x[1198]))+ (-0.37231448 * float(x[1199])))+ ((0.08105753 * float(x[1200]))+ (0.37731424 * float(x[1201]))+ (1.7052238 * float(x[1202]))+ (-0.9429726 * float(x[1203]))+ (-0.3564665 * float(x[1204]))+ (-1.3355575 * float(x[1205]))+ (1.4992526 * float(x[1206]))+ (-1.7689298 * float(x[1207]))+ (1.4460841 * float(x[1208]))+ (-2.0836444 * float(x[1209]))+ (-0.06643708 * float(x[1210]))+ (1.2579105 * float(x[1211]))+ (-0.9896705 * float(x[1212]))+ (-0.4424353 * float(x[1213]))+ (-0.21790414 * float(x[1214]))+ (-0.18528743 * float(x[1215]))+ (2.3973296 * float(x[1216]))+ (1.5395736 * float(x[1217]))+ (-0.65895367 * float(x[1218]))+ (-0.8735951 * float(x[1219]))+ (-0.6893237 * float(x[1220]))+ (1.3533801 * float(x[1221]))+ (-1.1504298 * float(x[1222]))+ (2.1573622 * float(x[1223]))+ (0.53054017 * float(x[1224]))+ (-1.0916654 * float(x[1225]))+ (-0.043308757 * float(x[1226]))+ (0.9131113 * float(x[1227]))+ (0.17600052 * float(x[1228]))+ (-0.53542435 * float(x[1229]))+ (-1.232941 * float(x[1230]))+ (-0.3922842 * float(x[1231]))+ (-0.78638786 * float(x[1232]))+ (-1.0536066 * float(x[1233]))+ (-0.23116899 * float(x[1234]))+ (1.0404074 * float(x[1235]))+ (1.1776731 * float(x[1236]))+ (1.333792 * float(x[1237]))+ (-1.4863307 * float(x[1238]))+ (1.1774848 * float(x[1239]))+ (-0.34170416 * float(x[1240]))+ (1.8536967 * float(x[1241]))+ (-2.1746366 * float(x[1242]))+ (-0.16951197 * float(x[1243]))+ (0.75374836 * float(x[1244]))+ (-0.43779534 * float(x[1245]))+ (0.17548853 * float(x[1246]))+ (0.06703094 * float(x[1247]))+ (-0.20003834 * float(x[1248]))+ (0.8465545 * float(x[1249])))+ ((-0.024314782 * float(x[1250]))+ (-0.018471751 * float(x[1251]))+ (2.207981 * float(x[1252]))+ (-0.046614572 * float(x[1253]))+ (-1.0376525 * float(x[1254]))+ (-0.68930584 * float(x[1255]))+ (-0.60496855 * float(x[1256]))+ (-1.5600833 * float(x[1257]))+ (0.566259 * float(x[1258]))+ (1.4755615 * float(x[1259]))+ (0.908113 * float(x[1260]))+ (-0.6675734 * float(x[1261]))+ (-1.4830995 * float(x[1262]))+ (0.54737717 * float(x[1263]))+ (0.15607215 * float(x[1264]))+ (0.31653166 * float(x[1265]))+ (-1.4030675 * float(x[1266]))+ (0.7679433 * float(x[1267]))+ (3.335933 * float(x[1268]))+ (0.3404306 * float(x[1269]))+ (0.8001219 * float(x[1270]))+ (-0.19319727 * float(x[1271]))+ (-0.09282729 * float(x[1272]))+ (1.3959335 * float(x[1273]))+ (-0.23839071 * float(x[1274]))+ (1.3644154 * float(x[1275]))+ (-1.1492653 * float(x[1276]))+ (1.6680541 * float(x[1277]))+ (-1.5376511 * float(x[1278]))+ (-0.54515296 * float(x[1279]))+ (-0.8346837 * float(x[1280]))+ (-0.99974906 * float(x[1281]))+ (-0.3795398 * float(x[1282]))+ (-1.7499539 * float(x[1283]))+ (0.8447729 * float(x[1284]))+ (-1.709048 * float(x[1285]))+ (-0.44963428 * float(x[1286]))+ (-1.5362192 * float(x[1287]))+ (-0.41881004 * float(x[1288]))+ (-0.60431594 * float(x[1289]))+ (1.3382401 * float(x[1290]))+ (1.6738058 * float(x[1291]))+ (1.2788337 * float(x[1292]))+ (-0.9312166 * float(x[1293]))+ (-0.38743994 * float(x[1294]))+ (-1.2661985 * float(x[1295]))+ (-1.7209039 * float(x[1296]))+ (-1.0175378 * float(x[1297]))+ (-0.4910129 * float(x[1298]))+ (0.604327 * float(x[1299])))+ ((0.7127543 * float(x[1300]))+ (1.9115043 * float(x[1301]))+ (-0.87989235 * float(x[1302]))+ (2.5442991 * float(x[1303]))+ (0.40841067 * float(x[1304]))+ (0.6206907 * float(x[1305]))+ (-0.7998863 * float(x[1306]))+ (0.66472477 * float(x[1307]))+ (-0.8088143 * float(x[1308]))+ (-1.3572794 * float(x[1309]))+ (-1.4449521 * float(x[1310]))+ (1.6872566 * float(x[1311]))+ (-0.93737274 * float(x[1312]))+ (0.89003706 * float(x[1313]))+ (0.024618333 * float(x[1314]))+ (0.45774147 * float(x[1315]))+ (-0.23278473 * float(x[1316]))+ (1.0797433 * float(x[1317]))+ (0.31025818 * float(x[1318]))+ (1.8051791 * float(x[1319]))+ (-1.358119 * float(x[1320]))+ (-0.3197149 * float(x[1321]))+ (0.71367955 * float(x[1322]))+ (0.11386586 * float(x[1323]))+ (0.053894334 * float(x[1324]))+ (1.0502617 * float(x[1325]))+ (-0.8199897 * float(x[1326]))+ (-0.92444223 * float(x[1327]))+ (1.1721255 * float(x[1328]))+ (-0.95599705 * float(x[1329]))+ (0.9068291 * float(x[1330]))+ (1.3047955 * float(x[1331]))+ (-2.2137756 * float(x[1332]))+ (0.5657828 * float(x[1333]))+ (0.05576575 * float(x[1334]))+ (1.0498569 * float(x[1335]))+ (-0.32911858 * float(x[1336]))+ (-1.4516085 * float(x[1337]))+ (0.005575456 * float(x[1338]))+ (-0.8869719 * float(x[1339]))+ (-0.6610324 * float(x[1340]))+ (1.3433546 * float(x[1341]))+ (0.9197806 * float(x[1342]))+ (0.20414299 * float(x[1343]))+ (0.64804626 * float(x[1344]))+ (-0.39766634 * float(x[1345]))+ (-0.94371814 * float(x[1346]))+ (0.25698903 * float(x[1347]))+ (-1.2340679 * float(x[1348]))+ (-1.8693646 * float(x[1349])))+ ((-2.3684182 * float(x[1350]))+ (-0.10991557 * float(x[1351]))+ (-1.2896235 * float(x[1352]))+ (-0.80385345 * float(x[1353]))+ (0.578241 * float(x[1354]))+ (-0.82539207 * float(x[1355]))+ (0.97764087 * float(x[1356]))+ (1.59041 * float(x[1357]))+ (0.620352 * float(x[1358]))+ (0.058342367 * float(x[1359]))+ (-0.044149783 * float(x[1360]))+ (-0.16535169 * float(x[1361]))+ (-0.00756349 * float(x[1362]))+ (0.6478064 * float(x[1363]))+ (-0.53122014 * float(x[1364]))+ (0.5436912 * float(x[1365]))+ (-0.9608155 * float(x[1366]))+ (-1.2163324 * float(x[1367]))+ (0.27640718 * float(x[1368]))+ (2.2680433 * float(x[1369]))+ (-1.4485083 * float(x[1370]))+ (-1.2782676 * float(x[1371]))+ (-0.26011232 * float(x[1372]))+ (-0.20314784 * float(x[1373]))+ (1.0929253 * float(x[1374]))+ (-1.46395 * float(x[1375]))+ (-0.028527217 * float(x[1376]))+ (-1.5248857 * float(x[1377]))+ (-0.080102034 * float(x[1378]))+ (0.65007174 * float(x[1379]))+ (-0.93894184 * float(x[1380]))+ (-0.8471458 * float(x[1381]))+ (0.3854317 * float(x[1382]))+ (0.91712254 * float(x[1383]))+ (0.095656 * float(x[1384]))+ (1.1511992 * float(x[1385]))+ (1.4999461 * float(x[1386]))+ (-0.7070592 * float(x[1387]))+ (0.341984 * float(x[1388]))+ (-1.2876503 * float(x[1389]))+ (-0.70806724 * float(x[1390]))+ (-1.7240005 * float(x[1391]))+ (1.6320333 * float(x[1392]))+ (0.7195034 * float(x[1393]))+ (0.7442327 * float(x[1394]))+ (0.20885287 * float(x[1395]))+ (1.2346704 * float(x[1396]))+ (0.9199905 * float(x[1397]))+ (1.1812884 * float(x[1398]))+ (-0.06801678 * float(x[1399])))+ ((1.3143574 * float(x[1400]))+ (-0.18422382 * float(x[1401]))+ (0.019960465 * float(x[1402]))+ (1.3719516 * float(x[1403]))+ (0.37607855 * float(x[1404]))+ (-0.83466375 * float(x[1405]))+ (-1.2404953 * float(x[1406]))+ (1.5236409 * float(x[1407]))+ (-1.0037098 * float(x[1408]))+ (-1.573883 * float(x[1409]))+ (-0.057472475 * float(x[1410]))+ (0.7841779 * float(x[1411]))+ (-1.243065 * float(x[1412]))+ (-0.091564395 * float(x[1413]))+ (-0.2299828 * float(x[1414]))+ (-2.3206298 * float(x[1415]))+ (-0.5889545 * float(x[1416]))+ (-1.8071628 * float(x[1417]))+ (-0.86804575 * float(x[1418]))+ (0.5968209 * float(x[1419]))+ (-0.690142 * float(x[1420]))+ (-1.7592406 * float(x[1421]))+ (-0.87850744 * float(x[1422]))+ (-2.3736923 * float(x[1423]))+ (-0.24802512 * float(x[1424]))+ (-0.46955067 * float(x[1425]))+ (0.35202616 * float(x[1426]))+ (-0.03581509 * float(x[1427]))+ (0.7188367 * float(x[1428]))+ (-0.22127193 * float(x[1429]))+ (-0.8213183 * float(x[1430]))+ (1.0041764 * float(x[1431]))+ (0.6249377 * float(x[1432]))+ (-0.92293614 * float(x[1433]))+ (1.8755007 * float(x[1434]))+ (0.7402396 * float(x[1435]))+ (-0.48472616 * float(x[1436]))+ (1.8629539 * float(x[1437]))+ (0.6834791 * float(x[1438]))+ (0.5901349 * float(x[1439]))+ (-1.252951 * float(x[1440]))+ (-1.083186 * float(x[1441]))+ (1.2146752 * float(x[1442]))+ (1.5618547 * float(x[1443]))+ (-0.80330276 * float(x[1444]))+ (1.0861205 * float(x[1445]))+ (-0.04557119 * float(x[1446]))+ (-0.023925774 * float(x[1447]))+ (0.80012625 * float(x[1448]))+ (0.9225852 * float(x[1449])))+ ((-0.20428428 * float(x[1450]))+ (1.1209344 * float(x[1451]))+ (0.622517 * float(x[1452]))+ (-0.9233894 * float(x[1453]))+ (-0.6065671 * float(x[1454]))+ (0.112498894 * float(x[1455]))+ (0.3461785 * float(x[1456]))+ (1.2805089 * float(x[1457]))+ (-0.14474761 * float(x[1458]))+ (1.4811198 * float(x[1459]))+ (0.6387926 * float(x[1460]))+ (0.36820972 * float(x[1461]))+ (-0.033042863 * float(x[1462]))+ (0.8120552 * float(x[1463]))+ (-0.11022303 * float(x[1464]))+ (-0.9134187 * float(x[1465]))+ (-0.32349253 * float(x[1466]))+ (0.06955654 * float(x[1467]))+ (0.6328786 * float(x[1468]))+ (-0.68732804 * float(x[1469]))+ (0.3207333 * float(x[1470]))+ (-0.16335155 * float(x[1471]))+ (0.7115674 * float(x[1472]))+ (-0.43141112 * float(x[1473]))+ (-1.3464627 * float(x[1474]))+ (-0.3641239 * float(x[1475]))+ (-0.16184117 * float(x[1476]))+ (-0.41968116 * float(x[1477]))+ (0.79675066 * float(x[1478]))+ (-0.8543593 * float(x[1479]))+ (-0.26916435 * float(x[1480]))+ (-0.6212265 * float(x[1481]))+ (0.98255277 * float(x[1482]))+ (-0.102638096 * float(x[1483]))+ (0.8290421 * float(x[1484]))+ (-0.98746955 * float(x[1485]))+ (-0.081004895 * float(x[1486]))+ (-0.24195212 * float(x[1487]))+ (-0.13548267 * float(x[1488]))+ (-0.47402537 * float(x[1489]))+ (0.29216102 * float(x[1490]))+ (-0.2631013 * float(x[1491]))+ (0.5103606 * float(x[1492]))+ (1.144008 * float(x[1493]))+ (-1.3094074 * float(x[1494]))+ (-0.8896189 * float(x[1495]))+ (-1.0935806 * float(x[1496]))+ (-1.4140527 * float(x[1497]))+ (-0.5908803 * float(x[1498]))+ (-0.43382928 * float(x[1499])))+ ((1.1322427 * float(x[1500]))+ (-0.026544156 * float(x[1501]))+ (0.6952576 * float(x[1502]))+ (1.1252046 * float(x[1503]))+ (0.33814213 * float(x[1504]))+ (0.40188974 * float(x[1505]))+ (0.49726358 * float(x[1506]))+ (0.060660508 * float(x[1507]))+ (-0.14963293 * float(x[1508]))+ (-1.3847919 * float(x[1509]))+ (-0.64889115 * float(x[1510]))+ (-0.8371588 * float(x[1511]))+ (-0.2536076 * float(x[1512]))+ (0.6402627 * float(x[1513]))+ (-0.30824825 * float(x[1514]))+ (0.10786407 * float(x[1515]))+ (0.7143667 * float(x[1516]))+ (-0.633569 * float(x[1517]))+ (0.9389343 * float(x[1518]))+ (0.03595354 * float(x[1519]))+ (1.0750824 * float(x[1520]))+ (0.8717128 * float(x[1521]))+ (1.1698803 * float(x[1522]))+ (0.14479484 * float(x[1523]))+ (0.37831008 * float(x[1524]))+ (-0.5413507 * float(x[1525]))+ (0.7536093 * float(x[1526]))+ (-0.10042979 * float(x[1527]))+ (0.9416328 * float(x[1528]))+ (-1.0929012 * float(x[1529]))+ (0.38959613 * float(x[1530]))+ (0.75734377 * float(x[1531]))+ (-1.3787583 * float(x[1532]))+ (0.24616434 * float(x[1533]))+ (0.47909474 * float(x[1534]))+ (0.12795463 * float(x[1535]))+ (0.046485238 * float(x[1536]))+ (1.0497172 * float(x[1537]))+ (-1.1783171 * float(x[1538]))+ (-0.07857552 * float(x[1539]))+ (0.17571269 * float(x[1540]))+ (-0.040701646 * float(x[1541]))+ (-0.4672967 * float(x[1542]))+ (0.032425985 * float(x[1543]))+ (-1.0704389 * float(x[1544]))+ (1.1907172 * float(x[1545]))+ (-0.0028590674 * float(x[1546]))+ (0.3153434 * float(x[1547]))+ (0.52715486 * float(x[1548]))+ (1.0209323 * float(x[1549])))+ ((0.77828956 * float(x[1550]))+ (0.781977 * float(x[1551]))+ (-0.102652416 * float(x[1552]))+ (-0.72648495 * float(x[1553]))+ (0.7968058 * float(x[1554]))+ (-0.14156011 * float(x[1555]))+ (-0.17457639 * float(x[1556]))+ (0.5189038 * float(x[1557]))+ (0.5533575 * float(x[1558]))+ (0.45793033 * float(x[1559]))+ (0.20012113 * float(x[1560]))+ (-0.8993685 * float(x[1561]))+ (-0.15378852 * float(x[1562]))+ (0.15233003 * float(x[1563]))+ (-0.6404024 * float(x[1564]))+ (-1.0170343 * float(x[1565]))+ (-0.8845442 * float(x[1566]))+ (-0.20233467 * float(x[1567]))+ (-0.51914346 * float(x[1568]))+ (-0.58378565 * float(x[1569]))+ (-0.43341637 * float(x[1570]))+ (-0.24148199 * float(x[1571]))+ (0.22622517 * float(x[1572]))+ (-1.3550946 * float(x[1573]))+ (-0.9778852 * float(x[1574]))+ (-0.02195252 * float(x[1575]))+ (0.38110355 * float(x[1576]))+ (-0.28176898 * float(x[1577]))+ (0.04952464 * float(x[1578]))+ (0.47092575 * float(x[1579]))+ (1.3256922 * float(x[1580]))+ (0.2599384 * float(x[1581]))+ (1.0035374 * float(x[1582]))+ (0.27022123 * float(x[1583]))+ (-0.5729881 * float(x[1584]))+ (0.53270864 * float(x[1585]))+ (-1.1039207 * float(x[1586]))+ (0.8606567 * float(x[1587]))+ (-1.2242258 * float(x[1588]))+ (-0.1374505 * float(x[1589]))+ (-0.30993366 * float(x[1590]))+ (-0.5340147 * float(x[1591]))+ (-0.4916244 * float(x[1592]))+ (-0.37512788 * float(x[1593]))+ (0.035753045 * float(x[1594]))+ (-0.37354803 * float(x[1595]))+ (0.45002645 * float(x[1596]))+ (0.13821132 * float(x[1597]))+ (-1.3854761 * float(x[1598]))+ (0.7743953 * float(x[1599])))+ ((0.39907208 * float(x[1600]))+ (-0.3382145 * float(x[1601]))+ (0.47823378 * float(x[1602]))+ (0.9012663 * float(x[1603]))+ (-0.8188463 * float(x[1604]))+ (0.64340234 * float(x[1605]))+ (-0.4102015 * float(x[1606]))+ (0.4318315 * float(x[1607]))+ (1.2807187 * float(x[1608]))+ (0.8500715 * float(x[1609]))+ (-0.017689288 * float(x[1610]))+ (-0.67990166 * float(x[1611]))+ (-0.76968336 * float(x[1612]))+ (0.114312835 * float(x[1613]))+ (0.53074515 * float(x[1614]))+ (0.60722893 * float(x[1615]))+ (-1.0294774 * float(x[1616]))+ (0.23793551 * float(x[1617]))+ (-1.151163 * float(x[1618]))+ (-0.6758014 * float(x[1619]))+ (-0.8160831 * float(x[1620]))+ (-0.23797873 * float(x[1621]))+ (0.5276676 * float(x[1622]))+ (-0.06539577 * float(x[1623]))+ (0.238513 * float(x[1624]))+ (0.90480465 * float(x[1625]))+ (0.39664856 * float(x[1626]))+ (1.1836038 * float(x[1627]))+ (1.1482813 * float(x[1628]))+ (0.49272153 * float(x[1629]))+ (0.77068657 * float(x[1630]))+ (-0.7540348 * float(x[1631]))+ (-1.1581298 * float(x[1632]))+ (-0.85930055 * float(x[1633]))+ (0.0051091504 * float(x[1634]))+ (0.26905054 * float(x[1635]))+ (-0.638055 * float(x[1636]))+ (0.4513842 * float(x[1637]))+ (0.4657189 * float(x[1638]))+ (-0.83366513 * float(x[1639]))+ (0.00040774365 * float(x[1640]))+ (0.47365332 * float(x[1641]))+ (0.2579662 * float(x[1642]))+ (0.27884176 * float(x[1643]))+ (0.6601052 * float(x[1644]))+ (1.2401878 * float(x[1645]))+ (-1.0049216 * float(x[1646]))+ (0.5641349 * float(x[1647]))+ (-0.9336842 * float(x[1648]))+ (-0.5851285 * float(x[1649])))+ ((-0.89040476 * float(x[1650]))+ (-1.1793556 * float(x[1651]))+ (-0.23907335 * float(x[1652]))+ (0.76435965 * float(x[1653]))+ (0.20480703 * float(x[1654]))+ (0.95177317 * float(x[1655]))+ (-0.5960519 * float(x[1656]))+ (0.7324941 * float(x[1657]))+ (0.9998003 * float(x[1658]))+ (0.6113466 * float(x[1659]))+ (0.05679742 * float(x[1660]))+ (0.5433124 * float(x[1661]))+ (-0.5818158 * float(x[1662]))+ (0.9177916 * float(x[1663]))+ (-0.09583173 * float(x[1664]))+ (-0.25815645 * float(x[1665]))+ (0.28773907 * float(x[1666]))+ (-0.6267131 * float(x[1667]))+ (-1.0123447 * float(x[1668]))+ (0.5370829 * float(x[1669]))+ (0.23502986 * float(x[1670]))+ (-0.32535672 * float(x[1671]))+ (0.09439278 * float(x[1672]))+ (0.49015573 * float(x[1673]))+ (0.6142785 * float(x[1674]))+ (0.7166954 * float(x[1675]))+ (-0.21240973 * float(x[1676]))+ (-0.84730667 * float(x[1677]))+ (-0.39740738 * float(x[1678]))+ (0.37459472 * float(x[1679]))+ (0.17206913 * float(x[1680]))+ (0.773237 * float(x[1681]))+ (-0.19130506 * float(x[1682]))+ (-0.52961797 * float(x[1683]))+ (-0.65276915 * float(x[1684]))+ (0.18870161 * float(x[1685]))+ (1.6991585 * float(x[1686]))+ (0.31533578 * float(x[1687]))+ (0.294003 * float(x[1688]))+ (1.153053 * float(x[1689]))+ (-1.0893654 * float(x[1690]))+ (0.46881983 * float(x[1691]))+ (-0.38181227 * float(x[1692]))+ (-1.1950922 * float(x[1693]))+ (1.542125 * float(x[1694]))+ (-0.5722109 * float(x[1695]))+ (-0.13577315 * float(x[1696]))+ (0.30407187 * float(x[1697]))+ (0.016076805 * float(x[1698]))+ (0.93093926 * float(x[1699])))+ ((0.53986585 * float(x[1700]))+ (0.58680326 * float(x[1701]))+ (-0.6363214 * float(x[1702]))+ (-1.0836794 * float(x[1703]))+ (-0.47226506 * float(x[1704]))+ (-0.17495164 * float(x[1705]))+ (0.2980304 * float(x[1706]))+ (-0.91327095 * float(x[1707]))+ (0.4828823 * float(x[1708]))+ (-0.9327247 * float(x[1709]))+ (-0.73367727 * float(x[1710]))+ (-1.3909663 * float(x[1711]))+ (0.82912236 * float(x[1712]))+ (-0.0061236173 * float(x[1713]))+ (-0.0033630533 * float(x[1714]))+ (-0.6656383 * float(x[1715]))+ (0.6950059 * float(x[1716]))+ (-1.3453782 * float(x[1717]))+ (0.8210475 * float(x[1718]))+ (-0.16543743 * float(x[1719]))+ (0.98515517 * float(x[1720]))+ (-1.1630235 * float(x[1721]))+ (-0.42283 * float(x[1722]))+ (0.60279906 * float(x[1723]))+ (-0.14251994 * float(x[1724]))+ (-0.8070135 * float(x[1725]))+ (-0.66641086 * float(x[1726]))+ (-0.9136873 * float(x[1727]))+ (-0.4225961 * float(x[1728]))+ (-0.26877952 * float(x[1729]))+ (-0.656337 * float(x[1730]))+ (0.8165805 * float(x[1731]))+ (-0.3714213 * float(x[1732]))+ (-0.4086434 * float(x[1733]))+ (-1.5967958 * float(x[1734]))+ (-0.08262584 * float(x[1735]))+ (0.8478186 * float(x[1736]))+ (1.1285597 * float(x[1737]))+ (-1.0944487 * float(x[1738]))+ (0.76966715 * float(x[1739]))+ (0.9271017 * float(x[1740]))+ (-0.5716821 * float(x[1741]))+ (0.34738976 * float(x[1742]))+ (0.6159872 * float(x[1743]))+ (1.0989864 * float(x[1744]))+ (-1.4815042 * float(x[1745]))+ (-0.9084373 * float(x[1746]))+ (-1.0770524 * float(x[1747]))+ (-0.4568822 * float(x[1748]))+ (0.3587482 * float(x[1749])))+ ((-0.7750528 * float(x[1750]))+ (0.8392026 * float(x[1751]))+ (-0.9000322 * float(x[1752]))+ (-0.54243386 * float(x[1753]))+ (-0.76924765 * float(x[1754]))+ (0.34281966 * float(x[1755]))+ (0.5722636 * float(x[1756]))+ (-0.95902824 * float(x[1757]))+ (0.9479284 * float(x[1758]))+ (0.5476077 * float(x[1759]))+ (0.497261 * float(x[1760]))+ (-0.6884723 * float(x[1761]))+ (-0.12673499 * float(x[1762]))+ (-0.86522245 * float(x[1763]))+ (0.87267435 * float(x[1764]))+ (0.7475799 * float(x[1765]))+ (0.72748595 * float(x[1766]))+ (-0.3237415 * float(x[1767]))+ (-0.18209787 * float(x[1768]))+ (0.056332856 * float(x[1769]))+ (-0.7115352 * float(x[1770]))+ (-0.029741885 * float(x[1771]))+ (0.47622868 * float(x[1772]))+ (0.07323624 * float(x[1773]))+ (-0.84003663 * float(x[1774]))+ (-0.2777461 * float(x[1775]))) + 0.4048517), 0)
    h_1 = max((((-0.33972386 * float(x[0]))+ (0.31271717 * float(x[1]))+ (-0.029347971 * float(x[2]))+ (0.12907346 * float(x[3]))+ (0.2519769 * float(x[4]))+ (-0.089355856 * float(x[5]))+ (-0.48733705 * float(x[6]))+ (-0.71054053 * float(x[7]))+ (-0.9630736 * float(x[8]))+ (0.41357246 * float(x[9]))+ (-0.69819856 * float(x[10]))+ (-0.059852228 * float(x[11]))+ (-0.3404275 * float(x[12]))+ (-0.44018704 * float(x[13]))+ (-0.75418365 * float(x[14]))+ (-1.0741827 * float(x[15]))+ (-0.34057814 * float(x[16]))+ (-0.62681484 * float(x[17]))+ (0.40858144 * float(x[18]))+ (0.9760852 * float(x[19]))+ (0.25213695 * float(x[20]))+ (0.12303706 * float(x[21]))+ (0.14956412 * float(x[22]))+ (-0.8941563 * float(x[23]))+ (-0.37985107 * float(x[24]))+ (-0.57603127 * float(x[25]))+ (0.81090474 * float(x[26]))+ (-0.026289327 * float(x[27]))+ (0.41084817 * float(x[28]))+ (-0.350249 * float(x[29]))+ (0.5691275 * float(x[30]))+ (-0.36484832 * float(x[31]))+ (-0.9554893 * float(x[32]))+ (-0.34375915 * float(x[33]))+ (-0.31371847 * float(x[34]))+ (0.47483203 * float(x[35]))+ (0.78285456 * float(x[36]))+ (0.048871506 * float(x[37]))+ (-0.68161345 * float(x[38]))+ (-0.95731866 * float(x[39]))+ (0.5325552 * float(x[40]))+ (0.08754368 * float(x[41]))+ (0.019025622 * float(x[42]))+ (0.3407301 * float(x[43]))+ (-0.40420553 * float(x[44]))+ (0.50807357 * float(x[45]))+ (-0.83535665 * float(x[46]))+ (-0.63197166 * float(x[47]))+ (0.60642976 * float(x[48]))+ (0.2664183 * float(x[49])))+ ((-0.9192731 * float(x[50]))+ (0.049096316 * float(x[51]))+ (0.34924352 * float(x[52]))+ (-0.6738264 * float(x[53]))+ (-0.20156816 * float(x[54]))+ (0.27975452 * float(x[55]))+ (-0.8961896 * float(x[56]))+ (0.022070926 * float(x[57]))+ (-0.111797705 * float(x[58]))+ (-0.24211769 * float(x[59]))+ (-0.47336403 * float(x[60]))+ (0.49451885 * float(x[61]))+ (0.24937174 * float(x[62]))+ (0.1529878 * float(x[63]))+ (0.48756558 * float(x[64]))+ (-0.8999751 * float(x[65]))+ (-0.61387 * float(x[66]))+ (-0.094693616 * float(x[67]))+ (0.014994414 * float(x[68]))+ (-0.18345197 * float(x[69]))+ (-0.016761202 * float(x[70]))+ (-0.246084 * float(x[71]))+ (-0.9341778 * float(x[72]))+ (0.6387512 * float(x[73]))+ (-0.31574878 * float(x[74]))+ (0.19385126 * float(x[75]))+ (0.21745387 * float(x[76]))+ (0.3836435 * float(x[77]))+ (-0.0056574894 * float(x[78]))+ (0.38718328 * float(x[79]))+ (0.75191927 * float(x[80]))+ (0.91429406 * float(x[81]))+ (0.36887616 * float(x[82]))+ (0.47486383 * float(x[83]))+ (0.7822416 * float(x[84]))+ (0.107424155 * float(x[85]))+ (0.55593354 * float(x[86]))+ (0.3705104 * float(x[87]))+ (0.052222963 * float(x[88]))+ (0.80123454 * float(x[89]))+ (-1.1745207 * float(x[90]))+ (0.0104368245 * float(x[91]))+ (0.10187977 * float(x[92]))+ (-0.7508253 * float(x[93]))+ (0.20543493 * float(x[94]))+ (-0.5829539 * float(x[95]))+ (-0.41696814 * float(x[96]))+ (0.94481856 * float(x[97]))+ (-0.2213769 * float(x[98]))+ (-1.0353132 * float(x[99])))+ ((0.6236925 * float(x[100]))+ (-0.92808837 * float(x[101]))+ (0.36105612 * float(x[102]))+ (-0.6517139 * float(x[103]))+ (0.43614945 * float(x[104]))+ (-0.8909944 * float(x[105]))+ (-0.3020684 * float(x[106]))+ (-0.85435313 * float(x[107]))+ (0.7231702 * float(x[108]))+ (0.8678674 * float(x[109]))+ (0.41596392 * float(x[110]))+ (0.73065233 * float(x[111]))+ (-0.683455 * float(x[112]))+ (-0.087440774 * float(x[113]))+ (0.15732662 * float(x[114]))+ (0.9273855 * float(x[115]))+ (0.18143217 * float(x[116]))+ (-0.108142376 * float(x[117]))+ (0.8373332 * float(x[118]))+ (0.36808586 * float(x[119]))+ (0.8475449 * float(x[120]))+ (-0.8627469 * float(x[121]))+ (-0.84068084 * float(x[122]))+ (0.6825839 * float(x[123]))+ (0.6552206 * float(x[124]))+ (-0.8446437 * float(x[125]))+ (-0.027199361 * float(x[126]))+ (-0.36395594 * float(x[127]))+ (-0.4098679 * float(x[128]))+ (-0.72823054 * float(x[129]))+ (-0.40778273 * float(x[130]))+ (0.6778135 * float(x[131]))+ (0.7513355 * float(x[132]))+ (0.18340144 * float(x[133]))+ (-0.17456937 * float(x[134]))+ (-0.7148619 * float(x[135]))+ (-0.7443624 * float(x[136]))+ (0.9265447 * float(x[137]))+ (0.7200917 * float(x[138]))+ (0.91650206 * float(x[139]))+ (0.07899804 * float(x[140]))+ (0.9106799 * float(x[141]))+ (0.35577977 * float(x[142]))+ (0.41769508 * float(x[143]))+ (0.7290331 * float(x[144]))+ (0.36581144 * float(x[145]))+ (0.4825621 * float(x[146]))+ (-0.86796814 * float(x[147]))+ (0.6200755 * float(x[148]))+ (-0.6170156 * float(x[149])))+ ((0.285356 * float(x[150]))+ (0.86815697 * float(x[151]))+ (0.46581802 * float(x[152]))+ (0.22987413 * float(x[153]))+ (-0.7044015 * float(x[154]))+ (-0.44512716 * float(x[155]))+ (0.68502027 * float(x[156]))+ (0.89373875 * float(x[157]))+ (-0.428245 * float(x[158]))+ (-0.2710534 * float(x[159]))+ (0.07018549 * float(x[160]))+ (-0.62484556 * float(x[161]))+ (0.28764892 * float(x[162]))+ (-0.6910596 * float(x[163]))+ (-0.69009453 * float(x[164]))+ (0.52615476 * float(x[165]))+ (-0.70342934 * float(x[166]))+ (-0.064438105 * float(x[167]))+ (0.68819773 * float(x[168]))+ (-0.099459864 * float(x[169]))+ (-0.9521495 * float(x[170]))+ (-0.72509074 * float(x[171]))+ (-0.42592385 * float(x[172]))+ (-0.1642004 * float(x[173]))+ (-0.9896236 * float(x[174]))+ (0.9997928 * float(x[175]))+ (0.6313449 * float(x[176]))+ (-0.8046866 * float(x[177]))+ (-0.36422157 * float(x[178]))+ (0.7560893 * float(x[179]))+ (-0.89313793 * float(x[180]))+ (0.34439152 * float(x[181]))+ (-0.80625266 * float(x[182]))+ (0.046657745 * float(x[183]))+ (0.82837725 * float(x[184]))+ (-0.7629483 * float(x[185]))+ (-0.31943852 * float(x[186]))+ (0.6586981 * float(x[187]))+ (-1.0639887 * float(x[188]))+ (0.29600042 * float(x[189]))+ (0.6516821 * float(x[190]))+ (0.11840235 * float(x[191]))+ (-0.10061988 * float(x[192]))+ (0.49193949 * float(x[193]))+ (0.21541692 * float(x[194]))+ (-0.21037044 * float(x[195]))+ (-0.05013067 * float(x[196]))+ (0.4512518 * float(x[197]))+ (0.029303776 * float(x[198]))+ (-1.1548674 * float(x[199])))+ ((0.013543505 * float(x[200]))+ (-1.1813194 * float(x[201]))+ (-0.43966123 * float(x[202]))+ (-1.02285 * float(x[203]))+ (-0.98711246 * float(x[204]))+ (-0.0019257795 * float(x[205]))+ (-0.9337925 * float(x[206]))+ (-0.13689739 * float(x[207]))+ (-1.083967 * float(x[208]))+ (0.5787802 * float(x[209]))+ (0.16893344 * float(x[210]))+ (0.15064658 * float(x[211]))+ (-0.24553567 * float(x[212]))+ (-0.12572412 * float(x[213]))+ (-0.006956399 * float(x[214]))+ (-0.88457566 * float(x[215]))+ (-0.4131854 * float(x[216]))+ (-0.21013317 * float(x[217]))+ (-0.41669235 * float(x[218]))+ (0.7159551 * float(x[219]))+ (-0.111658074 * float(x[220]))+ (0.33142027 * float(x[221]))+ (0.72913975 * float(x[222]))+ (0.47364622 * float(x[223]))+ (-0.72320366 * float(x[224]))+ (-0.9704303 * float(x[225]))+ (-0.3960815 * float(x[226]))+ (0.0007583245 * float(x[227]))+ (0.39731508 * float(x[228]))+ (-0.10425951 * float(x[229]))+ (0.7323114 * float(x[230]))+ (-0.2777223 * float(x[231]))+ (-0.6136156 * float(x[232]))+ (-0.92759997 * float(x[233]))+ (0.4344479 * float(x[234]))+ (0.011045161 * float(x[235]))+ (0.38303003 * float(x[236]))+ (-0.008306702 * float(x[237]))+ (-0.5409908 * float(x[238]))+ (0.4193509 * float(x[239]))+ (-0.51650125 * float(x[240]))+ (-0.011576864 * float(x[241]))+ (0.64643496 * float(x[242]))+ (0.740006 * float(x[243]))+ (-0.17698409 * float(x[244]))+ (-0.38789377 * float(x[245]))+ (-0.88143826 * float(x[246]))+ (0.78723127 * float(x[247]))+ (0.5301593 * float(x[248]))+ (-0.20139554 * float(x[249])))+ ((-0.13410042 * float(x[250]))+ (-0.85353917 * float(x[251]))+ (0.62403446 * float(x[252]))+ (0.17547193 * float(x[253]))+ (0.154122 * float(x[254]))+ (0.43123907 * float(x[255]))+ (0.7060153 * float(x[256]))+ (-0.9908688 * float(x[257]))+ (-0.79421115 * float(x[258]))+ (0.13468215 * float(x[259]))+ (-0.22794238 * float(x[260]))+ (-0.6448891 * float(x[261]))+ (0.74600047 * float(x[262]))+ (0.91192734 * float(x[263]))+ (-0.6857105 * float(x[264]))+ (0.7058727 * float(x[265]))+ (-0.5271368 * float(x[266]))+ (0.9333676 * float(x[267]))+ (0.9181087 * float(x[268]))+ (0.13707513 * float(x[269]))+ (0.41193 * float(x[270]))+ (0.39423123 * float(x[271]))+ (0.32473642 * float(x[272]))+ (0.29402447 * float(x[273]))+ (-0.4944876 * float(x[274]))+ (0.13402455 * float(x[275]))+ (0.4939754 * float(x[276]))+ (0.90577286 * float(x[277]))+ (-0.4549532 * float(x[278]))+ (0.5090189 * float(x[279]))+ (-0.59983224 * float(x[280]))+ (0.97987616 * float(x[281]))+ (-0.15559626 * float(x[282]))+ (0.47729686 * float(x[283]))+ (-0.5588722 * float(x[284]))+ (0.13507172 * float(x[285]))+ (0.50106484 * float(x[286]))+ (0.50279826 * float(x[287]))+ (0.405823 * float(x[288]))+ (-0.36605906 * float(x[289]))+ (-0.12751602 * float(x[290]))+ (-0.7466578 * float(x[291]))+ (0.09979232 * float(x[292]))+ (-0.16550149 * float(x[293]))+ (-0.9421624 * float(x[294]))+ (-0.57352686 * float(x[295]))+ (-0.75182045 * float(x[296]))+ (-0.8309738 * float(x[297]))+ (-0.9266465 * float(x[298]))+ (0.082113944 * float(x[299])))+ ((0.6420291 * float(x[300]))+ (0.613593 * float(x[301]))+ (-0.91597044 * float(x[302]))+ (-0.6248312 * float(x[303]))+ (-0.77467126 * float(x[304]))+ (-0.48624942 * float(x[305]))+ (-0.42439017 * float(x[306]))+ (-0.6354347 * float(x[307]))+ (0.39840293 * float(x[308]))+ (-0.20778452 * float(x[309]))+ (-0.8934984 * float(x[310]))+ (-0.17230327 * float(x[311]))+ (0.63631505 * float(x[312]))+ (-0.44520804 * float(x[313]))+ (-0.23588225 * float(x[314]))+ (-0.9082331 * float(x[315]))+ (-0.87019014 * float(x[316]))+ (0.78541756 * float(x[317]))+ (-0.91914636 * float(x[318]))+ (0.11679534 * float(x[319]))+ (-0.8996987 * float(x[320]))+ (0.91837716 * float(x[321]))+ (-0.7171625 * float(x[322]))+ (-0.7821143 * float(x[323]))+ (0.7717438 * float(x[324]))+ (-0.44831282 * float(x[325]))+ (-0.2231094 * float(x[326]))+ (0.6223283 * float(x[327]))+ (0.024148716 * float(x[328]))+ (-0.08000895 * float(x[329]))+ (0.4665084 * float(x[330]))+ (0.5730174 * float(x[331]))+ (-0.5499822 * float(x[332]))+ (0.35878184 * float(x[333]))+ (0.90976375 * float(x[334]))+ (0.82349783 * float(x[335]))+ (-0.11961414 * float(x[336]))+ (-0.80559176 * float(x[337]))+ (-0.08325597 * float(x[338]))+ (0.46425408 * float(x[339]))+ (-0.44811273 * float(x[340]))+ (-0.821591 * float(x[341]))+ (0.87488943 * float(x[342]))+ (-0.7021222 * float(x[343]))+ (-0.83432287 * float(x[344]))+ (0.055877704 * float(x[345]))+ (-0.23032291 * float(x[346]))+ (0.72751987 * float(x[347]))+ (-0.31082463 * float(x[348]))+ (-0.46610996 * float(x[349])))+ ((0.47499633 * float(x[350]))+ (-0.86627316 * float(x[351]))+ (0.7577901 * float(x[352]))+ (0.7440072 * float(x[353]))+ (0.78079396 * float(x[354]))+ (0.6243869 * float(x[355]))+ (0.3750649 * float(x[356]))+ (-0.81266737 * float(x[357]))+ (-0.19581075 * float(x[358]))+ (-0.66837865 * float(x[359]))+ (0.2684778 * float(x[360]))+ (-0.47321764 * float(x[361]))+ (0.9142666 * float(x[362]))+ (0.82303935 * float(x[363]))+ (-0.45169204 * float(x[364]))+ (-0.7636756 * float(x[365]))+ (0.6028406 * float(x[366]))+ (-0.004678151 * float(x[367]))+ (0.8310025 * float(x[368]))+ (0.9475291 * float(x[369]))+ (0.25310755 * float(x[370]))+ (0.8891167 * float(x[371]))+ (0.88081247 * float(x[372]))+ (0.93515044 * float(x[373]))+ (-0.98678136 * float(x[374]))+ (-0.79495174 * float(x[375]))+ (-0.97953874 * float(x[376]))+ (-0.34135142 * float(x[377]))+ (-0.34400868 * float(x[378]))+ (0.124096006 * float(x[379]))+ (0.924129 * float(x[380]))+ (0.3796702 * float(x[381]))+ (-0.13446745 * float(x[382]))+ (0.0030497515 * float(x[383]))+ (-0.7820171 * float(x[384]))+ (0.5712649 * float(x[385]))+ (0.26740113 * float(x[386]))+ (-0.29149935 * float(x[387]))+ (0.22758995 * float(x[388]))+ (0.8029899 * float(x[389]))+ (-0.43260282 * float(x[390]))+ (0.872915 * float(x[391]))+ (-0.56013495 * float(x[392]))+ (0.24061333 * float(x[393]))+ (0.17178863 * float(x[394]))+ (0.1098908 * float(x[395]))+ (-0.24462453 * float(x[396]))+ (-0.93258905 * float(x[397]))+ (-0.07752938 * float(x[398]))+ (-0.06441144 * float(x[399])))+ ((-0.7166324 * float(x[400]))+ (0.34446287 * float(x[401]))+ (-0.20593783 * float(x[402]))+ (0.61520183 * float(x[403]))+ (0.72410715 * float(x[404]))+ (-0.41675058 * float(x[405]))+ (-0.5853208 * float(x[406]))+ (0.49197307 * float(x[407]))+ (0.8572339 * float(x[408]))+ (-0.20637248 * float(x[409]))+ (-0.6277245 * float(x[410]))+ (-0.44187707 * float(x[411]))+ (-0.34539276 * float(x[412]))+ (-0.6306971 * float(x[413]))+ (-0.17557837 * float(x[414]))+ (-0.70221967 * float(x[415]))+ (0.4080051 * float(x[416]))+ (-0.7224483 * float(x[417]))+ (0.4669153 * float(x[418]))+ (-0.29768065 * float(x[419]))+ (-0.5993399 * float(x[420]))+ (-0.2635808 * float(x[421]))+ (0.72243 * float(x[422]))+ (-0.1608172 * float(x[423]))+ (-0.9187621 * float(x[424]))+ (0.1700306 * float(x[425]))+ (0.69290894 * float(x[426]))+ (0.498812 * float(x[427]))+ (-0.2917852 * float(x[428]))+ (-0.7056417 * float(x[429]))+ (0.90499085 * float(x[430]))+ (0.2300392 * float(x[431]))+ (-0.405736 * float(x[432]))+ (-0.22730587 * float(x[433]))+ (-0.90705806 * float(x[434]))+ (-0.81197345 * float(x[435]))+ (-0.96252906 * float(x[436]))+ (-0.5941089 * float(x[437]))+ (-0.8131487 * float(x[438]))+ (-0.5753415 * float(x[439]))+ (0.31917235 * float(x[440]))+ (0.21421668 * float(x[441]))+ (-0.18974039 * float(x[442]))+ (0.8711196 * float(x[443]))+ (0.790974 * float(x[444]))+ (0.020302469 * float(x[445]))+ (0.5482201 * float(x[446]))+ (-0.8018495 * float(x[447]))+ (-0.07871269 * float(x[448]))+ (0.31681293 * float(x[449])))+ ((0.781751 * float(x[450]))+ (-0.91566974 * float(x[451]))+ (-0.69832194 * float(x[452]))+ (0.7477528 * float(x[453]))+ (0.98332363 * float(x[454]))+ (-0.22665109 * float(x[455]))+ (0.6247448 * float(x[456]))+ (0.83773607 * float(x[457]))+ (0.48883036 * float(x[458]))+ (-0.035924423 * float(x[459]))+ (0.7749112 * float(x[460]))+ (-0.10043359 * float(x[461]))+ (0.28334022 * float(x[462]))+ (-0.90202856 * float(x[463]))+ (0.3790841 * float(x[464]))+ (0.0418625 * float(x[465]))+ (-0.06125875 * float(x[466]))+ (0.9913284 * float(x[467]))+ (0.8159982 * float(x[468]))+ (-0.06714485 * float(x[469]))+ (0.77901024 * float(x[470]))+ (0.26821396 * float(x[471]))+ (0.8296295 * float(x[472]))+ (-0.39737314 * float(x[473]))+ (0.3575825 * float(x[474]))+ (-0.074232146 * float(x[475]))+ (-0.7071897 * float(x[476]))+ (0.5831103 * float(x[477]))+ (-0.45821762 * float(x[478]))+ (-0.9573449 * float(x[479]))+ (0.07034631 * float(x[480]))+ (-0.6049706 * float(x[481]))+ (0.98406434 * float(x[482]))+ (0.7855591 * float(x[483]))+ (0.39603516 * float(x[484]))+ (0.2133486 * float(x[485]))+ (-0.5001597 * float(x[486]))+ (-0.5523695 * float(x[487]))+ (-0.34578657 * float(x[488]))+ (-0.64627814 * float(x[489]))+ (0.54101527 * float(x[490]))+ (-0.83964795 * float(x[491]))+ (0.30191672 * float(x[492]))+ (0.7859264 * float(x[493]))+ (0.5951905 * float(x[494]))+ (-0.02944168 * float(x[495]))+ (0.5346516 * float(x[496]))+ (0.8658009 * float(x[497]))+ (-0.58775425 * float(x[498]))+ (-0.119269 * float(x[499])))+ ((0.017034514 * float(x[500]))+ (0.3714293 * float(x[501]))+ (0.8408834 * float(x[502]))+ (-0.30476117 * float(x[503]))+ (-0.7261963 * float(x[504]))+ (0.29873067 * float(x[505]))+ (0.17053959 * float(x[506]))+ (-0.033112004 * float(x[507]))+ (0.07418153 * float(x[508]))+ (0.083964445 * float(x[509]))+ (0.5733836 * float(x[510]))+ (-0.4101381 * float(x[511]))+ (0.27819368 * float(x[512]))+ (0.0052749687 * float(x[513]))+ (-0.6915434 * float(x[514]))+ (-0.09752618 * float(x[515]))+ (0.5138836 * float(x[516]))+ (-0.3197378 * float(x[517]))+ (-0.48435396 * float(x[518]))+ (-0.68551433 * float(x[519]))+ (0.3669301 * float(x[520]))+ (0.9805072 * float(x[521]))+ (0.003329922 * float(x[522]))+ (-0.3279138 * float(x[523]))+ (0.18286161 * float(x[524]))+ (-0.6457806 * float(x[525]))+ (0.29609114 * float(x[526]))+ (-0.20162751 * float(x[527]))+ (-0.54167783 * float(x[528]))+ (0.3081239 * float(x[529]))+ (-0.31883934 * float(x[530]))+ (-0.848608 * float(x[531]))+ (0.82730263 * float(x[532]))+ (-0.32995868 * float(x[533]))+ (0.12662369 * float(x[534]))+ (0.9681802 * float(x[535]))+ (-0.8593889 * float(x[536]))+ (0.22630215 * float(x[537]))+ (-0.97849107 * float(x[538]))+ (0.4717096 * float(x[539]))+ (-0.5047972 * float(x[540]))+ (0.73383015 * float(x[541]))+ (-0.53783846 * float(x[542]))+ (-0.47574246 * float(x[543]))+ (-0.8795453 * float(x[544]))+ (-0.83768475 * float(x[545]))+ (-0.44874445 * float(x[546]))+ (0.46509555 * float(x[547]))+ (0.47214133 * float(x[548]))+ (-0.10975989 * float(x[549])))+ ((0.82535154 * float(x[550]))+ (0.19032408 * float(x[551]))+ (-0.08290985 * float(x[552]))+ (0.89484817 * float(x[553]))+ (-0.79162693 * float(x[554]))+ (-0.8106165 * float(x[555]))+ (-0.7291644 * float(x[556]))+ (-0.0055763363 * float(x[557]))+ (-0.19900149 * float(x[558]))+ (0.2946734 * float(x[559]))+ (0.3958108 * float(x[560]))+ (0.568138 * float(x[561]))+ (-0.8602738 * float(x[562]))+ (-0.3847598 * float(x[563]))+ (0.2487779 * float(x[564]))+ (-0.4325616 * float(x[565]))+ (0.084611386 * float(x[566]))+ (-0.28226 * float(x[567]))+ (-0.31120956 * float(x[568]))+ (0.8278197 * float(x[569]))+ (-0.64784664 * float(x[570]))+ (-0.6209994 * float(x[571]))+ (-0.9674735 * float(x[572]))+ (-0.7749947 * float(x[573]))+ (-0.6840883 * float(x[574]))+ (0.55755526 * float(x[575]))+ (-0.54211986 * float(x[576]))+ (0.7714518 * float(x[577]))+ (0.3661192 * float(x[578]))+ (-0.80063796 * float(x[579]))+ (0.4535459 * float(x[580]))+ (-0.106170304 * float(x[581]))+ (0.56218946 * float(x[582]))+ (0.1029924 * float(x[583]))+ (-0.18083663 * float(x[584]))+ (-0.9857219 * float(x[585]))+ (-0.9278826 * float(x[586]))+ (0.5863569 * float(x[587]))+ (-0.9027996 * float(x[588]))+ (-0.34639972 * float(x[589]))+ (-0.70009214 * float(x[590]))+ (-0.111843206 * float(x[591]))+ (0.5573222 * float(x[592]))+ (-0.98032236 * float(x[593]))+ (0.18258916 * float(x[594]))+ (-0.83769727 * float(x[595]))+ (0.4331047 * float(x[596]))+ (0.64896125 * float(x[597]))+ (-0.51418746 * float(x[598]))+ (-0.5130507 * float(x[599])))+ ((0.15047227 * float(x[600]))+ (-0.24643955 * float(x[601]))+ (0.6878239 * float(x[602]))+ (-0.6811398 * float(x[603]))+ (-0.8851882 * float(x[604]))+ (0.33312345 * float(x[605]))+ (-0.62967217 * float(x[606]))+ (-0.7717521 * float(x[607]))+ (0.34999114 * float(x[608]))+ (0.71310186 * float(x[609]))+ (0.54433423 * float(x[610]))+ (-0.7023108 * float(x[611]))+ (0.15058789 * float(x[612]))+ (-0.40574402 * float(x[613]))+ (-0.81868935 * float(x[614]))+ (-0.45618308 * float(x[615]))+ (-0.1198616 * float(x[616]))+ (-0.5899839 * float(x[617]))+ (0.577409 * float(x[618]))+ (0.5538828 * float(x[619]))+ (-0.54434 * float(x[620]))+ (0.48808834 * float(x[621]))+ (-0.4394945 * float(x[622]))+ (0.20254503 * float(x[623]))+ (0.08945513 * float(x[624]))+ (0.10259008 * float(x[625]))+ (-0.61190534 * float(x[626]))+ (-0.67542654 * float(x[627]))+ (-0.03251639 * float(x[628]))+ (0.78057724 * float(x[629]))+ (-0.9039204 * float(x[630]))+ (0.12820642 * float(x[631]))+ (-0.9244548 * float(x[632]))+ (-0.702901 * float(x[633]))+ (-0.65303046 * float(x[634]))+ (0.0031278268 * float(x[635]))+ (0.9176949 * float(x[636]))+ (0.15462081 * float(x[637]))+ (0.8960354 * float(x[638]))+ (-0.5942287 * float(x[639]))+ (-0.5343859 * float(x[640]))+ (-0.13554977 * float(x[641]))+ (-0.26522925 * float(x[642]))+ (0.8840694 * float(x[643]))+ (0.5885772 * float(x[644]))+ (0.9634674 * float(x[645]))+ (-0.12816267 * float(x[646]))+ (-0.9439991 * float(x[647]))+ (-0.89142793 * float(x[648]))+ (-0.49714342 * float(x[649])))+ ((-0.29422596 * float(x[650]))+ (-0.8601022 * float(x[651]))+ (0.124549456 * float(x[652]))+ (0.49604166 * float(x[653]))+ (0.10982293 * float(x[654]))+ (-0.4622153 * float(x[655]))+ (0.5310777 * float(x[656]))+ (0.5950125 * float(x[657]))+ (-0.40115055 * float(x[658]))+ (0.3238271 * float(x[659]))+ (0.5036459 * float(x[660]))+ (-0.5548532 * float(x[661]))+ (-0.73303324 * float(x[662]))+ (0.6836779 * float(x[663]))+ (0.005568188 * float(x[664]))+ (0.56424534 * float(x[665]))+ (-0.22942737 * float(x[666]))+ (0.8375745 * float(x[667]))+ (0.26962528 * float(x[668]))+ (0.9364412 * float(x[669]))+ (-0.5706875 * float(x[670]))+ (0.020370841 * float(x[671]))+ (-0.7109759 * float(x[672]))+ (-0.7489703 * float(x[673]))+ (0.38302684 * float(x[674]))+ (-0.56458634 * float(x[675]))+ (0.5912807 * float(x[676]))+ (0.060179196 * float(x[677]))+ (0.675512 * float(x[678]))+ (-0.38721007 * float(x[679]))+ (0.121940546 * float(x[680]))+ (0.16586614 * float(x[681]))+ (-0.52650267 * float(x[682]))+ (0.45482457 * float(x[683]))+ (0.3675418 * float(x[684]))+ (0.6114697 * float(x[685]))+ (0.09240056 * float(x[686]))+ (-0.059511572 * float(x[687]))+ (-0.3764723 * float(x[688]))+ (-0.14318122 * float(x[689]))+ (0.18274803 * float(x[690]))+ (-0.43678463 * float(x[691]))+ (0.015400087 * float(x[692]))+ (0.46015432 * float(x[693]))+ (-0.12396265 * float(x[694]))+ (-0.55152583 * float(x[695]))+ (-0.1197059 * float(x[696]))+ (0.6899958 * float(x[697]))+ (0.13398685 * float(x[698]))+ (0.40289846 * float(x[699])))+ ((-0.6306149 * float(x[700]))+ (-0.72245306 * float(x[701]))+ (-0.57869464 * float(x[702]))+ (0.41736704 * float(x[703]))+ (0.75306624 * float(x[704]))+ (0.9723458 * float(x[705]))+ (0.7549402 * float(x[706]))+ (0.7270848 * float(x[707]))+ (0.5327772 * float(x[708]))+ (0.97708994 * float(x[709]))+ (-0.87883615 * float(x[710]))+ (0.40339878 * float(x[711]))+ (0.4901929 * float(x[712]))+ (-0.03920874 * float(x[713]))+ (0.927325 * float(x[714]))+ (0.36560723 * float(x[715]))+ (-0.024622204 * float(x[716]))+ (0.06840014 * float(x[717]))+ (0.75846297 * float(x[718]))+ (0.0069441176 * float(x[719]))+ (0.20495611 * float(x[720]))+ (0.7337355 * float(x[721]))+ (0.1770837 * float(x[722]))+ (0.84467703 * float(x[723]))+ (-0.45006925 * float(x[724]))+ (-0.21812294 * float(x[725]))+ (-0.7507724 * float(x[726]))+ (-0.41046333 * float(x[727]))+ (0.17943127 * float(x[728]))+ (0.49392164 * float(x[729]))+ (-0.651696 * float(x[730]))+ (-0.8603025 * float(x[731]))+ (-0.0051880153 * float(x[732]))+ (-0.0867604 * float(x[733]))+ (-0.06784382 * float(x[734]))+ (-0.24448267 * float(x[735]))+ (-0.9000236 * float(x[736]))+ (0.35451424 * float(x[737]))+ (-0.75219595 * float(x[738]))+ (-0.3823442 * float(x[739]))+ (0.6671161 * float(x[740]))+ (0.86286813 * float(x[741]))+ (-0.76587504 * float(x[742]))+ (-0.51389927 * float(x[743]))+ (0.7761855 * float(x[744]))+ (-0.41921082 * float(x[745]))+ (-0.8600484 * float(x[746]))+ (0.7451555 * float(x[747]))+ (-0.24261506 * float(x[748]))+ (-0.8851441 * float(x[749])))+ ((-0.68615764 * float(x[750]))+ (0.54339725 * float(x[751]))+ (0.028455177 * float(x[752]))+ (0.37858075 * float(x[753]))+ (0.25929308 * float(x[754]))+ (0.2436602 * float(x[755]))+ (-0.5703564 * float(x[756]))+ (0.11220719 * float(x[757]))+ (-0.40229803 * float(x[758]))+ (-0.8319779 * float(x[759]))+ (0.08506908 * float(x[760]))+ (-0.5721242 * float(x[761]))+ (0.9644436 * float(x[762]))+ (0.8616052 * float(x[763]))+ (-0.6964505 * float(x[764]))+ (-0.3689546 * float(x[765]))+ (-0.9446548 * float(x[766]))+ (-0.05586082 * float(x[767]))+ (-0.8342799 * float(x[768]))+ (0.9262435 * float(x[769]))+ (0.21075648 * float(x[770]))+ (-0.35336387 * float(x[771]))+ (-0.25087735 * float(x[772]))+ (0.5003194 * float(x[773]))+ (0.32287621 * float(x[774]))+ (-0.36223853 * float(x[775]))+ (0.7751901 * float(x[776]))+ (0.6780962 * float(x[777]))+ (-0.8444361 * float(x[778]))+ (-0.906521 * float(x[779]))+ (0.6416641 * float(x[780]))+ (-0.26841033 * float(x[781]))+ (-0.9730266 * float(x[782]))+ (-0.80886513 * float(x[783]))+ (0.67291975 * float(x[784]))+ (0.62887025 * float(x[785]))+ (0.47124684 * float(x[786]))+ (-0.2653671 * float(x[787]))+ (-0.49171397 * float(x[788]))+ (0.7475553 * float(x[789]))+ (-0.66746193 * float(x[790]))+ (-0.14749439 * float(x[791]))+ (0.7529763 * float(x[792]))+ (-0.0649865 * float(x[793]))+ (-0.2859803 * float(x[794]))+ (0.021985115 * float(x[795]))+ (0.63739496 * float(x[796]))+ (-0.042315822 * float(x[797]))+ (0.14929776 * float(x[798]))+ (-0.21527764 * float(x[799])))+ ((0.072722256 * float(x[800]))+ (0.56735635 * float(x[801]))+ (0.09565957 * float(x[802]))+ (-0.0074938955 * float(x[803]))+ (-0.057948977 * float(x[804]))+ (0.53446627 * float(x[805]))+ (-0.54365396 * float(x[806]))+ (-0.1637657 * float(x[807]))+ (-0.38478446 * float(x[808]))+ (-0.76414037 * float(x[809]))+ (0.22054875 * float(x[810]))+ (0.30423778 * float(x[811]))+ (-0.8056403 * float(x[812]))+ (0.8505638 * float(x[813]))+ (0.18264322 * float(x[814]))+ (-0.4383784 * float(x[815]))+ (-0.9589212 * float(x[816]))+ (0.081906535 * float(x[817]))+ (-0.33467275 * float(x[818]))+ (0.95853543 * float(x[819]))+ (0.9329773 * float(x[820]))+ (-0.03914733 * float(x[821]))+ (0.3702552 * float(x[822]))+ (0.15979573 * float(x[823]))+ (-0.79577875 * float(x[824]))+ (-0.45136616 * float(x[825]))+ (-0.6499081 * float(x[826]))+ (-0.35490215 * float(x[827]))+ (-0.46180493 * float(x[828]))+ (-0.52186555 * float(x[829]))+ (0.5092116 * float(x[830]))+ (0.69894195 * float(x[831]))+ (-0.08575821 * float(x[832]))+ (0.5528738 * float(x[833]))+ (-0.7908769 * float(x[834]))+ (0.6137434 * float(x[835]))+ (0.23904873 * float(x[836]))+ (0.41998738 * float(x[837]))+ (-0.6442242 * float(x[838]))+ (0.8138181 * float(x[839]))+ (-0.19167948 * float(x[840]))+ (-0.72576296 * float(x[841]))+ (0.5298049 * float(x[842]))+ (0.57552695 * float(x[843]))+ (0.000335317 * float(x[844]))+ (-0.45244697 * float(x[845]))+ (-0.8253387 * float(x[846]))+ (-0.3262382 * float(x[847]))+ (0.19056444 * float(x[848]))+ (0.49542668 * float(x[849])))+ ((0.777192 * float(x[850]))+ (0.13993192 * float(x[851]))+ (-0.78755546 * float(x[852]))+ (0.36610985 * float(x[853]))+ (-0.9443626 * float(x[854]))+ (0.5270846 * float(x[855]))+ (-0.055105094 * float(x[856]))+ (0.37453687 * float(x[857]))+ (0.6738577 * float(x[858]))+ (-0.40537554 * float(x[859]))+ (0.10744685 * float(x[860]))+ (-0.4546554 * float(x[861]))+ (0.42563316 * float(x[862]))+ (-0.16723152 * float(x[863]))+ (-0.3882351 * float(x[864]))+ (0.8185275 * float(x[865]))+ (-0.7424339 * float(x[866]))+ (-0.7227982 * float(x[867]))+ (-0.035093147 * float(x[868]))+ (0.51722795 * float(x[869]))+ (-0.84309685 * float(x[870]))+ (0.73906446 * float(x[871]))+ (-0.9146658 * float(x[872]))+ (-0.8083199 * float(x[873]))+ (-0.04989615 * float(x[874]))+ (-0.09377385 * float(x[875]))+ (-0.4265075 * float(x[876]))+ (0.87535834 * float(x[877]))+ (0.16273491 * float(x[878]))+ (-0.93066657 * float(x[879]))+ (0.48312515 * float(x[880]))+ (-0.6269516 * float(x[881]))+ (0.4984672 * float(x[882]))+ (0.112271704 * float(x[883]))+ (-0.98509985 * float(x[884]))+ (0.6647981 * float(x[885]))+ (0.021022532 * float(x[886]))+ (0.57838655 * float(x[887]))+ (-0.10912385 * float(x[888]))+ (0.6982878 * float(x[889]))+ (0.70445967 * float(x[890]))+ (0.06613523 * float(x[891]))+ (0.38495052 * float(x[892]))+ (-0.27815172 * float(x[893]))+ (0.6572162 * float(x[894]))+ (-0.53121084 * float(x[895]))+ (0.88308614 * float(x[896]))+ (-0.3402248 * float(x[897]))+ (0.3989602 * float(x[898]))+ (-0.59786123 * float(x[899])))+ ((-0.8314003 * float(x[900]))+ (-0.5807603 * float(x[901]))+ (0.9972514 * float(x[902]))+ (0.95169616 * float(x[903]))+ (-0.9383174 * float(x[904]))+ (-0.0356413 * float(x[905]))+ (0.31729978 * float(x[906]))+ (-0.7568064 * float(x[907]))+ (-0.25377762 * float(x[908]))+ (-0.45071584 * float(x[909]))+ (-0.08472909 * float(x[910]))+ (-0.4206543 * float(x[911]))+ (-0.129897 * float(x[912]))+ (-0.40855354 * float(x[913]))+ (-0.96865153 * float(x[914]))+ (0.68811864 * float(x[915]))+ (0.7173515 * float(x[916]))+ (0.9308173 * float(x[917]))+ (0.46682426 * float(x[918]))+ (0.6244247 * float(x[919]))+ (-0.87445515 * float(x[920]))+ (0.9210352 * float(x[921]))+ (-0.38833705 * float(x[922]))+ (-0.90545064 * float(x[923]))+ (0.1538127 * float(x[924]))+ (-0.92212707 * float(x[925]))+ (-0.64882654 * float(x[926]))+ (0.94315237 * float(x[927]))+ (0.19778533 * float(x[928]))+ (0.5678945 * float(x[929]))+ (-0.97168326 * float(x[930]))+ (-0.122537054 * float(x[931]))+ (-0.16046573 * float(x[932]))+ (0.5608609 * float(x[933]))+ (-0.5281872 * float(x[934]))+ (-0.21525538 * float(x[935]))+ (-0.909287 * float(x[936]))+ (-0.28618154 * float(x[937]))+ (-0.69030094 * float(x[938]))+ (0.7891109 * float(x[939]))+ (0.8216303 * float(x[940]))+ (0.97185063 * float(x[941]))+ (-0.36079335 * float(x[942]))+ (-0.25597355 * float(x[943]))+ (0.4340774 * float(x[944]))+ (0.4017188 * float(x[945]))+ (0.051865056 * float(x[946]))+ (0.08239896 * float(x[947]))+ (-0.61383665 * float(x[948]))+ (-0.5939229 * float(x[949])))+ ((-0.15984678 * float(x[950]))+ (-0.95325154 * float(x[951]))+ (-0.060683724 * float(x[952]))+ (0.16319636 * float(x[953]))+ (-0.09064266 * float(x[954]))+ (-0.8948369 * float(x[955]))+ (0.40419203 * float(x[956]))+ (-1.2820585 * float(x[957]))+ (0.56204623 * float(x[958]))+ (-0.2516306 * float(x[959]))+ (-0.5001142 * float(x[960]))+ (0.51985484 * float(x[961]))+ (-0.027546499 * float(x[962]))+ (-0.56877655 * float(x[963]))+ (0.093436025 * float(x[964]))+ (-0.7011639 * float(x[965]))+ (0.2522321 * float(x[966]))+ (-0.049746048 * float(x[967]))+ (0.2557599 * float(x[968]))+ (-0.52045614 * float(x[969]))+ (-0.3992492 * float(x[970]))+ (-0.30684206 * float(x[971]))+ (0.74102175 * float(x[972]))+ (-0.28540325 * float(x[973]))+ (0.558734 * float(x[974]))+ (0.31073698 * float(x[975]))+ (-0.609402 * float(x[976]))+ (-0.70969254 * float(x[977]))+ (-0.75176024 * float(x[978]))+ (-0.8501283 * float(x[979]))+ (0.8277376 * float(x[980]))+ (-0.8811502 * float(x[981]))+ (-0.16688578 * float(x[982]))+ (0.72330284 * float(x[983]))+ (-0.54828036 * float(x[984]))+ (-0.50792664 * float(x[985]))+ (0.6302427 * float(x[986]))+ (0.39813212 * float(x[987]))+ (-1.0173544 * float(x[988]))+ (-0.891676 * float(x[989]))+ (0.9743414 * float(x[990]))+ (-0.16444509 * float(x[991]))+ (-1.0854502 * float(x[992]))+ (-0.29934594 * float(x[993]))+ (0.27560467 * float(x[994]))+ (-1.1257277 * float(x[995]))+ (-1.167929 * float(x[996]))+ (-0.64892364 * float(x[997]))+ (-0.3281069 * float(x[998]))+ (0.8094633 * float(x[999])))+ ((0.5613586 * float(x[1000]))+ (0.037124038 * float(x[1001]))+ (0.6339742 * float(x[1002]))+ (0.11860032 * float(x[1003]))+ (0.32877496 * float(x[1004]))+ (-0.28348687 * float(x[1005]))+ (-0.6941634 * float(x[1006]))+ (-0.16165337 * float(x[1007]))+ (0.6888457 * float(x[1008]))+ (0.86314183 * float(x[1009]))+ (-0.79389036 * float(x[1010]))+ (-0.47836438 * float(x[1011]))+ (0.58367616 * float(x[1012]))+ (0.19190027 * float(x[1013]))+ (-0.36912227 * float(x[1014]))+ (0.0037230342 * float(x[1015]))+ (-0.5815249 * float(x[1016]))+ (-0.8661177 * float(x[1017]))+ (-0.5603753 * float(x[1018]))+ (0.6512024 * float(x[1019]))+ (0.3756122 * float(x[1020]))+ (0.6090086 * float(x[1021]))+ (0.9429217 * float(x[1022]))+ (0.597873 * float(x[1023]))+ (-0.19460313 * float(x[1024]))+ (-0.53936285 * float(x[1025]))+ (-1.1537766 * float(x[1026]))+ (0.080962576 * float(x[1027]))+ (0.15398645 * float(x[1028]))+ (0.8403936 * float(x[1029]))+ (-0.49453646 * float(x[1030]))+ (-1.0389285 * float(x[1031]))+ (0.38469914 * float(x[1032]))+ (-0.6854885 * float(x[1033]))+ (-0.66993433 * float(x[1034]))+ (-0.12367137 * float(x[1035]))+ (0.08547988 * float(x[1036]))+ (0.23275231 * float(x[1037]))+ (-0.76301455 * float(x[1038]))+ (-0.3585501 * float(x[1039]))+ (0.58141273 * float(x[1040]))+ (-0.64876807 * float(x[1041]))+ (-0.8364719 * float(x[1042]))+ (0.10136955 * float(x[1043]))+ (-0.6783839 * float(x[1044]))+ (0.116983816 * float(x[1045]))+ (0.0859398 * float(x[1046]))+ (-0.9648377 * float(x[1047]))+ (-0.32019967 * float(x[1048]))+ (-0.6882007 * float(x[1049])))+ ((0.24094506 * float(x[1050]))+ (-1.3838166 * float(x[1051]))+ (0.12526605 * float(x[1052]))+ (-0.8994151 * float(x[1053]))+ (-0.11464768 * float(x[1054]))+ (0.14367172 * float(x[1055]))+ (-0.66583425 * float(x[1056]))+ (0.013213766 * float(x[1057]))+ (0.3532144 * float(x[1058]))+ (0.21093863 * float(x[1059]))+ (-0.3639482 * float(x[1060]))+ (-1.0943514 * float(x[1061]))+ (-1.1563622 * float(x[1062]))+ (0.79967064 * float(x[1063]))+ (0.06197768 * float(x[1064]))+ (-0.7887833 * float(x[1065]))+ (0.40398335 * float(x[1066]))+ (-0.93926716 * float(x[1067]))+ (0.10326829 * float(x[1068]))+ (-0.4906967 * float(x[1069]))+ (0.7459759 * float(x[1070]))+ (-0.72780335 * float(x[1071]))+ (-0.30272305 * float(x[1072]))+ (-0.52342635 * float(x[1073]))+ (-1.1478069 * float(x[1074]))+ (-0.16288225 * float(x[1075]))+ (-0.21400899 * float(x[1076]))+ (0.48104528 * float(x[1077]))+ (0.6971636 * float(x[1078]))+ (-0.0865161 * float(x[1079]))+ (-0.5281634 * float(x[1080]))+ (-0.057375684 * float(x[1081]))+ (0.1287462 * float(x[1082]))+ (-0.56335986 * float(x[1083]))+ (-0.901297 * float(x[1084]))+ (0.22411846 * float(x[1085]))+ (0.6840684 * float(x[1086]))+ (-0.1367586 * float(x[1087]))+ (-0.8783585 * float(x[1088]))+ (-0.20433998 * float(x[1089]))+ (-0.99538076 * float(x[1090]))+ (-0.90918255 * float(x[1091]))+ (0.14365423 * float(x[1092]))+ (-0.21831392 * float(x[1093]))+ (-0.3754051 * float(x[1094]))+ (-0.062711425 * float(x[1095]))+ (-0.041747358 * float(x[1096]))+ (0.21446566 * float(x[1097]))+ (-0.12518705 * float(x[1098]))+ (0.29062545 * float(x[1099])))+ ((-0.3151536 * float(x[1100]))+ (-0.06063492 * float(x[1101]))+ (-0.26673678 * float(x[1102]))+ (0.4334567 * float(x[1103]))+ (-0.57534486 * float(x[1104]))+ (-0.840332 * float(x[1105]))+ (0.56971484 * float(x[1106]))+ (-0.5855911 * float(x[1107]))+ (-0.55705714 * float(x[1108]))+ (-0.9814678 * float(x[1109]))+ (-0.86452746 * float(x[1110]))+ (0.5907595 * float(x[1111]))+ (-0.57697123 * float(x[1112]))+ (0.48855492 * float(x[1113]))+ (0.44746432 * float(x[1114]))+ (-0.44017175 * float(x[1115]))+ (-0.2870823 * float(x[1116]))+ (0.36393797 * float(x[1117]))+ (-0.35306948 * float(x[1118]))+ (0.2327399 * float(x[1119]))+ (0.052839894 * float(x[1120]))+ (0.6496591 * float(x[1121]))+ (0.40031034 * float(x[1122]))+ (0.5050348 * float(x[1123]))+ (-0.6185752 * float(x[1124]))+ (0.7365768 * float(x[1125]))+ (0.38296026 * float(x[1126]))+ (0.2745079 * float(x[1127]))+ (-0.22586459 * float(x[1128]))+ (0.24010536 * float(x[1129]))+ (0.773673 * float(x[1130]))+ (0.035669036 * float(x[1131]))+ (-0.05695226 * float(x[1132]))+ (-0.58880496 * float(x[1133]))+ (-0.5539655 * float(x[1134]))+ (-0.86897683 * float(x[1135]))+ (0.22133055 * float(x[1136]))+ (-1.1965275 * float(x[1137]))+ (0.6853657 * float(x[1138]))+ (0.19739977 * float(x[1139]))+ (-0.38187397 * float(x[1140]))+ (-0.26008478 * float(x[1141]))+ (-0.5580158 * float(x[1142]))+ (0.14138871 * float(x[1143]))+ (-0.15415992 * float(x[1144]))+ (0.17887749 * float(x[1145]))+ (-1.0284238 * float(x[1146]))+ (-0.2683561 * float(x[1147]))+ (-0.45679218 * float(x[1148]))+ (0.45270616 * float(x[1149])))+ ((0.69068664 * float(x[1150]))+ (-0.37024167 * float(x[1151]))+ (-0.7509821 * float(x[1152]))+ (-0.27056113 * float(x[1153]))+ (-0.57665396 * float(x[1154]))+ (0.6598529 * float(x[1155]))+ (0.51964736 * float(x[1156]))+ (0.6015817 * float(x[1157]))+ (-1.4212528 * float(x[1158]))+ (0.6179486 * float(x[1159]))+ (0.25696614 * float(x[1160]))+ (-0.055254947 * float(x[1161]))+ (0.41604206 * float(x[1162]))+ (0.25075525 * float(x[1163]))+ (-0.074125215 * float(x[1164]))+ (0.45602775 * float(x[1165]))+ (0.30262744 * float(x[1166]))+ (0.5975098 * float(x[1167]))+ (-0.09003344 * float(x[1168]))+ (-0.42059737 * float(x[1169]))+ (0.2369702 * float(x[1170]))+ (-0.6085112 * float(x[1171]))+ (-0.038600273 * float(x[1172]))+ (-0.54104465 * float(x[1173]))+ (-0.1335526 * float(x[1174]))+ (-0.6275162 * float(x[1175]))+ (0.15531841 * float(x[1176]))+ (0.75066584 * float(x[1177]))+ (-0.9996738 * float(x[1178]))+ (-0.35186866 * float(x[1179]))+ (-0.15030545 * float(x[1180]))+ (-0.3026232 * float(x[1181]))+ (0.4551223 * float(x[1182]))+ (-1.0655816 * float(x[1183]))+ (-1.0720189 * float(x[1184]))+ (0.09938537 * float(x[1185]))+ (-0.6850875 * float(x[1186]))+ (0.8045591 * float(x[1187]))+ (-0.32688633 * float(x[1188]))+ (0.5264461 * float(x[1189]))+ (0.39496073 * float(x[1190]))+ (0.44242644 * float(x[1191]))+ (0.058574207 * float(x[1192]))+ (0.835382 * float(x[1193]))+ (0.6642312 * float(x[1194]))+ (0.12356181 * float(x[1195]))+ (-0.031966526 * float(x[1196]))+ (0.11022938 * float(x[1197]))+ (-0.28803685 * float(x[1198]))+ (-0.72797966 * float(x[1199])))+ ((-0.6027754 * float(x[1200]))+ (-1.147043 * float(x[1201]))+ (0.48345277 * float(x[1202]))+ (-0.57263446 * float(x[1203]))+ (-0.78171116 * float(x[1204]))+ (-0.5557693 * float(x[1205]))+ (-0.27925494 * float(x[1206]))+ (0.4795194 * float(x[1207]))+ (-0.59027475 * float(x[1208]))+ (-0.628734 * float(x[1209]))+ (-0.14433269 * float(x[1210]))+ (-0.10992243 * float(x[1211]))+ (0.23605783 * float(x[1212]))+ (0.37653303 * float(x[1213]))+ (0.26968032 * float(x[1214]))+ (0.37936336 * float(x[1215]))+ (-0.94931686 * float(x[1216]))+ (0.023804149 * float(x[1217]))+ (0.45307654 * float(x[1218]))+ (-0.45826402 * float(x[1219]))+ (0.10847549 * float(x[1220]))+ (-0.9880617 * float(x[1221]))+ (-0.9243635 * float(x[1222]))+ (0.2683815 * float(x[1223]))+ (0.31682807 * float(x[1224]))+ (0.38692346 * float(x[1225]))+ (-0.2655981 * float(x[1226]))+ (0.19591382 * float(x[1227]))+ (-0.71217674 * float(x[1228]))+ (-0.34598818 * float(x[1229]))+ (-0.23560478 * float(x[1230]))+ (-1.0139041 * float(x[1231]))+ (-0.5566614 * float(x[1232]))+ (-0.7862493 * float(x[1233]))+ (0.7692876 * float(x[1234]))+ (0.6639117 * float(x[1235]))+ (-0.6255102 * float(x[1236]))+ (0.7874333 * float(x[1237]))+ (0.053910967 * float(x[1238]))+ (-0.7986188 * float(x[1239]))+ (0.33253196 * float(x[1240]))+ (-0.046614707 * float(x[1241]))+ (0.11461903 * float(x[1242]))+ (0.68003577 * float(x[1243]))+ (-0.8696497 * float(x[1244]))+ (0.32830024 * float(x[1245]))+ (-0.71834326 * float(x[1246]))+ (-0.63784194 * float(x[1247]))+ (0.04798161 * float(x[1248]))+ (0.72837245 * float(x[1249])))+ ((-0.43877602 * float(x[1250]))+ (0.5470827 * float(x[1251]))+ (-0.16859253 * float(x[1252]))+ (-0.4717201 * float(x[1253]))+ (-1.0659914 * float(x[1254]))+ (0.6614967 * float(x[1255]))+ (-0.14290145 * float(x[1256]))+ (-0.5402982 * float(x[1257]))+ (-0.6579946 * float(x[1258]))+ (-0.24078014 * float(x[1259]))+ (-0.6650034 * float(x[1260]))+ (-0.59422463 * float(x[1261]))+ (0.065637626 * float(x[1262]))+ (0.7253139 * float(x[1263]))+ (0.6454894 * float(x[1264]))+ (0.24762096 * float(x[1265]))+ (-0.37288254 * float(x[1266]))+ (-0.7333773 * float(x[1267]))+ (0.14186259 * float(x[1268]))+ (0.24512826 * float(x[1269]))+ (0.867238 * float(x[1270]))+ (0.5995893 * float(x[1271]))+ (-0.61651117 * float(x[1272]))+ (-0.677574 * float(x[1273]))+ (0.9409188 * float(x[1274]))+ (0.6868428 * float(x[1275]))+ (-1.1876174 * float(x[1276]))+ (0.1782559 * float(x[1277]))+ (-0.6762475 * float(x[1278]))+ (-0.15530793 * float(x[1279]))+ (0.15541352 * float(x[1280]))+ (-0.5014004 * float(x[1281]))+ (0.022061538 * float(x[1282]))+ (-0.6844815 * float(x[1283]))+ (-0.10054366 * float(x[1284]))+ (0.06996265 * float(x[1285]))+ (-0.84465325 * float(x[1286]))+ (0.33251414 * float(x[1287]))+ (-0.73639125 * float(x[1288]))+ (-0.4709663 * float(x[1289]))+ (-1.2133344 * float(x[1290]))+ (0.5122891 * float(x[1291]))+ (0.073570415 * float(x[1292]))+ (-0.42342672 * float(x[1293]))+ (-0.97068906 * float(x[1294]))+ (-0.69285935 * float(x[1295]))+ (0.62050265 * float(x[1296]))+ (0.090574116 * float(x[1297]))+ (-0.30467704 * float(x[1298]))+ (-0.672858 * float(x[1299])))+ ((-0.72532856 * float(x[1300]))+ (-0.45801508 * float(x[1301]))+ (0.47831988 * float(x[1302]))+ (0.09329089 * float(x[1303]))+ (-0.9802244 * float(x[1304]))+ (-0.040244076 * float(x[1305]))+ (-0.82741207 * float(x[1306]))+ (-0.45285738 * float(x[1307]))+ (-0.77452636 * float(x[1308]))+ (-0.56669545 * float(x[1309]))+ (0.6172569 * float(x[1310]))+ (0.4571991 * float(x[1311]))+ (0.57227314 * float(x[1312]))+ (0.22501445 * float(x[1313]))+ (-0.80356026 * float(x[1314]))+ (0.62704164 * float(x[1315]))+ (-0.2673498 * float(x[1316]))+ (-0.7176397 * float(x[1317]))+ (0.03485821 * float(x[1318]))+ (-0.7003924 * float(x[1319]))+ (0.66513157 * float(x[1320]))+ (-0.51016504 * float(x[1321]))+ (0.29946753 * float(x[1322]))+ (0.5894862 * float(x[1323]))+ (0.02543242 * float(x[1324]))+ (0.014696072 * float(x[1325]))+ (-0.5733327 * float(x[1326]))+ (0.6336469 * float(x[1327]))+ (-0.8195894 * float(x[1328]))+ (-0.051156085 * float(x[1329]))+ (0.34428272 * float(x[1330]))+ (-0.98366225 * float(x[1331]))+ (-0.34396654 * float(x[1332]))+ (0.6784055 * float(x[1333]))+ (-0.56631273 * float(x[1334]))+ (-0.4899065 * float(x[1335]))+ (0.276653 * float(x[1336]))+ (-0.59330183 * float(x[1337]))+ (-0.062242042 * float(x[1338]))+ (0.563521 * float(x[1339]))+ (0.9485236 * float(x[1340]))+ (0.28365818 * float(x[1341]))+ (-1.0224177 * float(x[1342]))+ (-0.7011327 * float(x[1343]))+ (0.24425416 * float(x[1344]))+ (-0.1318159 * float(x[1345]))+ (0.052622233 * float(x[1346]))+ (-0.029463088 * float(x[1347]))+ (-1.1132839 * float(x[1348]))+ (-0.25027892 * float(x[1349])))+ ((0.77671057 * float(x[1350]))+ (-0.1382987 * float(x[1351]))+ (0.08663061 * float(x[1352]))+ (0.021409793 * float(x[1353]))+ (-0.45788178 * float(x[1354]))+ (0.14363271 * float(x[1355]))+ (-0.16771373 * float(x[1356]))+ (0.88435656 * float(x[1357]))+ (0.8852728 * float(x[1358]))+ (0.17926675 * float(x[1359]))+ (-0.496216 * float(x[1360]))+ (-0.3773964 * float(x[1361]))+ (-0.17947666 * float(x[1362]))+ (-0.6096668 * float(x[1363]))+ (-1.1174264 * float(x[1364]))+ (-0.056839097 * float(x[1365]))+ (0.020440858 * float(x[1366]))+ (-1.2209629 * float(x[1367]))+ (0.26702067 * float(x[1368]))+ (-0.7681479 * float(x[1369]))+ (-0.770976 * float(x[1370]))+ (-0.950628 * float(x[1371]))+ (-0.63442445 * float(x[1372]))+ (-0.24008852 * float(x[1373]))+ (-0.91635853 * float(x[1374]))+ (-0.5641019 * float(x[1375]))+ (-0.89514935 * float(x[1376]))+ (-0.8510752 * float(x[1377]))+ (-0.39690432 * float(x[1378]))+ (-0.742502 * float(x[1379]))+ (0.17008787 * float(x[1380]))+ (-0.4578933 * float(x[1381]))+ (-0.81124675 * float(x[1382]))+ (-0.40627834 * float(x[1383]))+ (-1.1698582 * float(x[1384]))+ (0.28110725 * float(x[1385]))+ (0.058588374 * float(x[1386]))+ (-0.4777812 * float(x[1387]))+ (0.16172743 * float(x[1388]))+ (0.4257996 * float(x[1389]))+ (-0.4887301 * float(x[1390]))+ (0.8420641 * float(x[1391]))+ (0.8629677 * float(x[1392]))+ (0.26978385 * float(x[1393]))+ (-0.4951438 * float(x[1394]))+ (0.23737873 * float(x[1395]))+ (0.807286 * float(x[1396]))+ (0.36941823 * float(x[1397]))+ (0.2527438 * float(x[1398]))+ (-0.10136061 * float(x[1399])))+ ((-0.49028385 * float(x[1400]))+ (-0.6992639 * float(x[1401]))+ (-0.32720855 * float(x[1402]))+ (0.80571306 * float(x[1403]))+ (-1.0865005 * float(x[1404]))+ (-0.22013798 * float(x[1405]))+ (-0.9819112 * float(x[1406]))+ (-0.017353723 * float(x[1407]))+ (-0.05817473 * float(x[1408]))+ (0.43487048 * float(x[1409]))+ (0.66617125 * float(x[1410]))+ (-0.16262709 * float(x[1411]))+ (0.6481932 * float(x[1412]))+ (-0.013889503 * float(x[1413]))+ (0.6544406 * float(x[1414]))+ (0.7624593 * float(x[1415]))+ (-0.637475 * float(x[1416]))+ (0.96429676 * float(x[1417]))+ (0.70152104 * float(x[1418]))+ (-0.9583741 * float(x[1419]))+ (0.50843036 * float(x[1420]))+ (-0.94813585 * float(x[1421]))+ (0.67396694 * float(x[1422]))+ (-0.91751796 * float(x[1423]))+ (0.1978508 * float(x[1424]))+ (0.32660562 * float(x[1425]))+ (-0.25709972 * float(x[1426]))+ (-0.5268492 * float(x[1427]))+ (-0.22846374 * float(x[1428]))+ (0.71758443 * float(x[1429]))+ (-0.7030192 * float(x[1430]))+ (-0.5384773 * float(x[1431]))+ (-0.09146749 * float(x[1432]))+ (-0.43413693 * float(x[1433]))+ (0.5880634 * float(x[1434]))+ (0.6807753 * float(x[1435]))+ (-0.9625322 * float(x[1436]))+ (0.36671427 * float(x[1437]))+ (0.09493152 * float(x[1438]))+ (-0.99990743 * float(x[1439]))+ (-0.5257521 * float(x[1440]))+ (-1.1702098 * float(x[1441]))+ (-0.9117242 * float(x[1442]))+ (-0.7073883 * float(x[1443]))+ (0.41499838 * float(x[1444]))+ (0.84128064 * float(x[1445]))+ (-0.1470983 * float(x[1446]))+ (0.8713452 * float(x[1447]))+ (0.49701515 * float(x[1448]))+ (-0.40438113 * float(x[1449])))+ ((0.5950223 * float(x[1450]))+ (0.64465195 * float(x[1451]))+ (0.024369912 * float(x[1452]))+ (-0.6132141 * float(x[1453]))+ (-0.857919 * float(x[1454]))+ (0.03935144 * float(x[1455]))+ (-0.6346323 * float(x[1456]))+ (0.5293674 * float(x[1457]))+ (-0.15836605 * float(x[1458]))+ (-0.7729337 * float(x[1459]))+ (-0.9003687 * float(x[1460]))+ (0.20014212 * float(x[1461]))+ (-0.18828647 * float(x[1462]))+ (-0.49235144 * float(x[1463]))+ (-0.14605731 * float(x[1464]))+ (0.43205377 * float(x[1465]))+ (0.067794636 * float(x[1466]))+ (-0.83530545 * float(x[1467]))+ (0.38386554 * float(x[1468]))+ (0.88163006 * float(x[1469]))+ (0.6733658 * float(x[1470]))+ (-0.54301333 * float(x[1471]))+ (-0.057681803 * float(x[1472]))+ (0.13161914 * float(x[1473]))+ (0.6093559 * float(x[1474]))+ (0.26474118 * float(x[1475]))+ (-0.26106155 * float(x[1476]))+ (0.41205934 * float(x[1477]))+ (0.35436192 * float(x[1478]))+ (-0.5512076 * float(x[1479]))+ (0.6849895 * float(x[1480]))+ (-0.92178255 * float(x[1481]))+ (0.58121425 * float(x[1482]))+ (-0.60992295 * float(x[1483]))+ (-0.3591525 * float(x[1484]))+ (-0.0544815 * float(x[1485]))+ (0.78026503 * float(x[1486]))+ (0.8564141 * float(x[1487]))+ (-0.32378265 * float(x[1488]))+ (0.2951113 * float(x[1489]))+ (0.4379214 * float(x[1490]))+ (0.44158474 * float(x[1491]))+ (-0.6970207 * float(x[1492]))+ (0.6035769 * float(x[1493]))+ (-0.4009717 * float(x[1494]))+ (0.09923988 * float(x[1495]))+ (-0.43023422 * float(x[1496]))+ (-0.41145208 * float(x[1497]))+ (0.19756356 * float(x[1498]))+ (-0.6639442 * float(x[1499])))+ ((-0.75021434 * float(x[1500]))+ (0.4439572 * float(x[1501]))+ (0.6207951 * float(x[1502]))+ (-0.35396832 * float(x[1503]))+ (0.49004212 * float(x[1504]))+ (0.58748835 * float(x[1505]))+ (0.9744515 * float(x[1506]))+ (0.39270908 * float(x[1507]))+ (-0.07835173 * float(x[1508]))+ (-0.61943406 * float(x[1509]))+ (0.43903044 * float(x[1510]))+ (0.39592338 * float(x[1511]))+ (0.40786085 * float(x[1512]))+ (-0.054984525 * float(x[1513]))+ (-0.6213705 * float(x[1514]))+ (0.32109705 * float(x[1515]))+ (0.06901081 * float(x[1516]))+ (-0.7144268 * float(x[1517]))+ (0.083156474 * float(x[1518]))+ (-0.36615413 * float(x[1519]))+ (0.81494874 * float(x[1520]))+ (-0.6802677 * float(x[1521]))+ (-0.076559 * float(x[1522]))+ (0.40680116 * float(x[1523]))+ (-1.0732043 * float(x[1524]))+ (-0.39065623 * float(x[1525]))+ (-0.39961892 * float(x[1526]))+ (0.60491115 * float(x[1527]))+ (0.14496985 * float(x[1528]))+ (-0.13530101 * float(x[1529]))+ (-0.28952175 * float(x[1530]))+ (0.1488781 * float(x[1531]))+ (-0.85335815 * float(x[1532]))+ (0.5903176 * float(x[1533]))+ (0.54503644 * float(x[1534]))+ (-0.44732487 * float(x[1535]))+ (0.023112176 * float(x[1536]))+ (0.98711824 * float(x[1537]))+ (-0.6793377 * float(x[1538]))+ (-0.8812096 * float(x[1539]))+ (0.40969363 * float(x[1540]))+ (-0.6406031 * float(x[1541]))+ (0.28273273 * float(x[1542]))+ (0.4205743 * float(x[1543]))+ (-0.5368686 * float(x[1544]))+ (-0.51044565 * float(x[1545]))+ (-0.9900495 * float(x[1546]))+ (0.6205912 * float(x[1547]))+ (0.3750822 * float(x[1548]))+ (-0.7842822 * float(x[1549])))+ ((-0.95340616 * float(x[1550]))+ (-1.0744758 * float(x[1551]))+ (-0.47805542 * float(x[1552]))+ (0.006691653 * float(x[1553]))+ (-1.196376 * float(x[1554]))+ (-0.16203657 * float(x[1555]))+ (0.12172787 * float(x[1556]))+ (-0.6059527 * float(x[1557]))+ (-0.9804306 * float(x[1558]))+ (-0.089312755 * float(x[1559]))+ (-0.23126198 * float(x[1560]))+ (0.61711556 * float(x[1561]))+ (-0.94663787 * float(x[1562]))+ (-0.09339314 * float(x[1563]))+ (0.7318131 * float(x[1564]))+ (-0.78736234 * float(x[1565]))+ (-0.5764981 * float(x[1566]))+ (0.056024242 * float(x[1567]))+ (-0.94537747 * float(x[1568]))+ (0.49321547 * float(x[1569]))+ (0.9125193 * float(x[1570]))+ (0.010151804 * float(x[1571]))+ (0.3143363 * float(x[1572]))+ (-0.35114783 * float(x[1573]))+ (-0.47823876 * float(x[1574]))+ (-0.060775332 * float(x[1575]))+ (-0.3160892 * float(x[1576]))+ (-0.32652214 * float(x[1577]))+ (-0.91791075 * float(x[1578]))+ (-0.15728274 * float(x[1579]))+ (-0.9881637 * float(x[1580]))+ (0.43936333 * float(x[1581]))+ (-0.46669462 * float(x[1582]))+ (0.4637904 * float(x[1583]))+ (-1.1656083 * float(x[1584]))+ (-0.0150029 * float(x[1585]))+ (0.19604388 * float(x[1586]))+ (-0.7282913 * float(x[1587]))+ (0.52926755 * float(x[1588]))+ (-0.031505063 * float(x[1589]))+ (0.44306976 * float(x[1590]))+ (-0.7058217 * float(x[1591]))+ (-0.22151215 * float(x[1592]))+ (-0.924395 * float(x[1593]))+ (-0.1584739 * float(x[1594]))+ (-0.6523106 * float(x[1595]))+ (-0.036386188 * float(x[1596]))+ (0.13687651 * float(x[1597]))+ (-0.39713424 * float(x[1598]))+ (0.16363576 * float(x[1599])))+ ((-0.10558085 * float(x[1600]))+ (0.12640266 * float(x[1601]))+ (-0.55556744 * float(x[1602]))+ (0.8931019 * float(x[1603]))+ (-0.41485104 * float(x[1604]))+ (-0.4320077 * float(x[1605]))+ (-0.36635324 * float(x[1606]))+ (0.6905311 * float(x[1607]))+ (0.69775397 * float(x[1608]))+ (0.82084674 * float(x[1609]))+ (-0.15794829 * float(x[1610]))+ (0.037517283 * float(x[1611]))+ (-0.28708318 * float(x[1612]))+ (-0.6317963 * float(x[1613]))+ (-0.81964993 * float(x[1614]))+ (-0.2925375 * float(x[1615]))+ (0.7436785 * float(x[1616]))+ (0.096230045 * float(x[1617]))+ (-0.8838865 * float(x[1618]))+ (0.11293624 * float(x[1619]))+ (-0.22054632 * float(x[1620]))+ (-0.030792652 * float(x[1621]))+ (-0.11271898 * float(x[1622]))+ (-0.87131804 * float(x[1623]))+ (-0.7219608 * float(x[1624]))+ (0.70502794 * float(x[1625]))+ (-0.38588965 * float(x[1626]))+ (-0.78951 * float(x[1627]))+ (-0.84435654 * float(x[1628]))+ (-0.32350245 * float(x[1629]))+ (-0.001284154 * float(x[1630]))+ (0.59855324 * float(x[1631]))+ (-0.6367079 * float(x[1632]))+ (-0.691587 * float(x[1633]))+ (0.052391555 * float(x[1634]))+ (-0.94175494 * float(x[1635]))+ (0.12696898 * float(x[1636]))+ (-0.7210677 * float(x[1637]))+ (0.12859358 * float(x[1638]))+ (0.8540718 * float(x[1639]))+ (-0.22585635 * float(x[1640]))+ (-0.98065203 * float(x[1641]))+ (0.9616683 * float(x[1642]))+ (0.12144887 * float(x[1643]))+ (0.023370622 * float(x[1644]))+ (0.64160454 * float(x[1645]))+ (0.38887 * float(x[1646]))+ (-0.3596162 * float(x[1647]))+ (0.029125113 * float(x[1648]))+ (-0.12800989 * float(x[1649])))+ ((-0.10927918 * float(x[1650]))+ (0.4195722 * float(x[1651]))+ (-0.3362453 * float(x[1652]))+ (-0.57277566 * float(x[1653]))+ (-0.4725352 * float(x[1654]))+ (0.70730615 * float(x[1655]))+ (-0.97699517 * float(x[1656]))+ (-0.7160176 * float(x[1657]))+ (0.15018342 * float(x[1658]))+ (-0.957888 * float(x[1659]))+ (0.3339303 * float(x[1660]))+ (-0.06573019 * float(x[1661]))+ (-0.4858725 * float(x[1662]))+ (-0.23131977 * float(x[1663]))+ (0.14425856 * float(x[1664]))+ (-0.09304426 * float(x[1665]))+ (0.8417586 * float(x[1666]))+ (0.6653057 * float(x[1667]))+ (-0.7007975 * float(x[1668]))+ (-0.90790486 * float(x[1669]))+ (-0.5842096 * float(x[1670]))+ (-0.86015135 * float(x[1671]))+ (-0.34934017 * float(x[1672]))+ (0.12546013 * float(x[1673]))+ (0.71131235 * float(x[1674]))+ (-0.093323976 * float(x[1675]))+ (-0.15979637 * float(x[1676]))+ (-0.0048404993 * float(x[1677]))+ (0.3114601 * float(x[1678]))+ (-0.51983327 * float(x[1679]))+ (0.020483866 * float(x[1680]))+ (0.46306697 * float(x[1681]))+ (-0.096115336 * float(x[1682]))+ (0.24299447 * float(x[1683]))+ (0.6445862 * float(x[1684]))+ (-0.98287094 * float(x[1685]))+ (0.13105154 * float(x[1686]))+ (-0.06491597 * float(x[1687]))+ (0.6558946 * float(x[1688]))+ (-0.62399375 * float(x[1689]))+ (0.925354 * float(x[1690]))+ (0.98784393 * float(x[1691]))+ (0.33786607 * float(x[1692]))+ (0.3201627 * float(x[1693]))+ (0.13010092 * float(x[1694]))+ (0.55294406 * float(x[1695]))+ (0.7856756 * float(x[1696]))+ (0.14501518 * float(x[1697]))+ (0.78124154 * float(x[1698]))+ (0.42015094 * float(x[1699])))+ ((0.15970805 * float(x[1700]))+ (0.6853307 * float(x[1701]))+ (-0.5232633 * float(x[1702]))+ (-0.005035072 * float(x[1703]))+ (0.17680177 * float(x[1704]))+ (0.78001195 * float(x[1705]))+ (0.043905452 * float(x[1706]))+ (0.93439835 * float(x[1707]))+ (0.35969484 * float(x[1708]))+ (0.24746718 * float(x[1709]))+ (0.23962992 * float(x[1710]))+ (-0.9928041 * float(x[1711]))+ (0.39452976 * float(x[1712]))+ (0.59958345 * float(x[1713]))+ (-0.4971006 * float(x[1714]))+ (-0.021865966 * float(x[1715]))+ (-0.28932977 * float(x[1716]))+ (0.5357782 * float(x[1717]))+ (-1.2376331 * float(x[1718]))+ (-1.1385663 * float(x[1719]))+ (-0.054094587 * float(x[1720]))+ (0.0009472607 * float(x[1721]))+ (-1.0931866 * float(x[1722]))+ (0.4318106 * float(x[1723]))+ (0.036718898 * float(x[1724]))+ (-0.20719574 * float(x[1725]))+ (0.040579997 * float(x[1726]))+ (0.1051577 * float(x[1727]))+ (0.057165213 * float(x[1728]))+ (0.06841616 * float(x[1729]))+ (-0.46844143 * float(x[1730]))+ (0.27559257 * float(x[1731]))+ (-0.60224694 * float(x[1732]))+ (0.90921205 * float(x[1733]))+ (0.77096695 * float(x[1734]))+ (-0.37698016 * float(x[1735]))+ (0.71776086 * float(x[1736]))+ (0.45962095 * float(x[1737]))+ (0.49239507 * float(x[1738]))+ (0.76019627 * float(x[1739]))+ (-0.79316974 * float(x[1740]))+ (-0.27933234 * float(x[1741]))+ (0.6918027 * float(x[1742]))+ (-0.2705304 * float(x[1743]))+ (0.020936383 * float(x[1744]))+ (0.713565 * float(x[1745]))+ (0.66189504 * float(x[1746]))+ (-0.093495525 * float(x[1747]))+ (0.006141475 * float(x[1748]))+ (-0.6746495 * float(x[1749])))+ ((0.5117927 * float(x[1750]))+ (-0.6735756 * float(x[1751]))+ (0.4368396 * float(x[1752]))+ (-0.77972347 * float(x[1753]))+ (0.857126 * float(x[1754]))+ (-0.8127426 * float(x[1755]))+ (0.9538293 * float(x[1756]))+ (-0.35446155 * float(x[1757]))+ (0.41182956 * float(x[1758]))+ (-0.38393903 * float(x[1759]))+ (-0.6867569 * float(x[1760]))+ (-0.11575421 * float(x[1761]))+ (0.5679667 * float(x[1762]))+ (0.6188263 * float(x[1763]))+ (0.7218418 * float(x[1764]))+ (-0.23694824 * float(x[1765]))+ (-0.102087446 * float(x[1766]))+ (0.5043493 * float(x[1767]))+ (0.55385107 * float(x[1768]))+ (-0.8080125 * float(x[1769]))+ (-0.06137938 * float(x[1770]))+ (0.27693242 * float(x[1771]))+ (0.15178737 * float(x[1772]))+ (-1.0227902 * float(x[1773]))+ (0.35474893 * float(x[1774]))+ (0.7036596 * float(x[1775]))) + -0.1520309), 0)
    o[0] = (-5.2501397 * h_0)+ (-0.38107598 * h_1) + 2.3602695

    if num_output_logits == 1:
        return o[0] >= 0
    else:
        return argmax(o)


def Validate(cleanvalfile):
    #Binary
    if n_classes == 2:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
            valcsvreader = csv.reader(valcsvfile)
            for valrow in valcsvreader:
                if len(valrow) == 0:
                    continue
                if int(classify(valrow[:-1])) == int(float(valrow[-1])):
                    correct_count += 1
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_TP += 1
                    else:
                        num_class_0 += 1
                        num_TN += 1
                else:
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_FN += 1
                    else:
                        num_class_0 += 1
                        num_FP += 1
                count += 1
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0

    #Multiclass
    else:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count = 0, 0
            valcsvreader = csv.reader(valcsvfile)
            numeachclass = {}
            preds = []
            y_trues = []
            for i, valrow in enumerate(valcsvreader):
                pred = int(classify(valrow[:-1]))
                preds.append(pred)
                y_true = int(float(valrow[-1]))
                y_trues.append(y_true)
                if len(valrow) == 0:
                    continue
                if pred == y_true:
                    correct_count += 1
                #if class seen, add to its counter
                if y_true in numeachclass.keys():
                    numeachclass[y_true] += 1
                #initialize a new counter
                else:
                    numeachclass[y_true] = 0
                count += 1
        return count, correct_count, numeachclass, preds,  y_trues



def Predict(cleanfile, preprocessedfile, headerless, get_key, classmapping):
    with open(cleanfile,'r') as cleancsvfile, open(preprocessedfile,'r') as dirtycsvfile:
        cleancsvreader = csv.reader(cleancsvfile)
        dirtycsvreader = csv.reader(dirtycsvfile)
        if (not headerless):
            print(','.join(next(dirtycsvreader, None) + ["Prediction"]))
        for cleanrow, dirtyrow in zip(cleancsvreader, dirtycsvreader):
            if len(cleanrow) == 0:
                continue
            print(str(','.join(str(j) for j in ([i for i in dirtyrow]))) + ',' + str(get_key(int(classify(cleanrow)), classmapping)))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempdir + os.sep + "clean.csv"
        preprocessedfile = tempdir + os.sep + "prep.csv"
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x,y: x
        classmapping = {}


    #Predict
    if not args.validate:
        Predict(cleanfile, preprocessedfile, args.headerless, get_key, classmapping)


    #Validate
    else: 
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)

        #Report Metrics
        model_cap=3557
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")





            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                    try:
                        np.array
                    except:
                        import numpy as np
                except:
                    raise ValueError("Scipy and Numpy Required for Multiclass Metrics")
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


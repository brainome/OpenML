#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f QC -target CHURN -cm {'-1':0,'1':1} KDDCup09-churn.csv -o KDDCup09-churn.py -nsamples 0 --yes -nsamples 0 -e 100
# Total compiler execution time: 1:22:03.48. Finished on: Sep-03-2020 11:06:35.
# This source code requires Python 3.
#
"""
Classifier Type:                     Decision Tree
System Type:                         Binary classifier
Training/Validation Split:           50:50%
Best-guess accuracy:                 92.65%
Training accuracy:                   100.00% (30000/30000 correct)
Validation accuracy:                 86.84% (17369/20000 correct)
Overall Model accuracy:              94.73% (47369/50000 correct)
Overall Improvement over best guess: 2.08% (of possible 7.35%)
Model capacity (MEC):                4050 bits
Generalization ratio:                11.69 bits/bit
Model efficiency:                    0.00%/parameter
System behavior
True Negatives:                      90.22% (45112/50000)
True Positives:                      4.51% (2257/50000)
False Negatives:                     2.83% (1415/50000)
False Positives:                     2.43% (1216/50000)
True Pos. Rate/Sensitivity/Recall:   0.61
True Neg. Rate/Specificity:          0.97
Precision:                           0.65
F-1 Measure:                         0.63
False Negative Rate/Miss Rate:       0.39
Critical Success Index:              0.46
Confusion Matrix:
 [90.22% 2.43%]
 [2.83% 4.51%]
Overfitting:                         No
Note: Labels have been remapped to '-1'=0, '1'=1.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "KDDCup09-churn.csv"


#Number of attributes
num_attr = 230
n_classes = 2


# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="CHURN"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="CHURN"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'-1':0,'1':1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([324379488853.995, 324446400947.24506, 324486902186.3153, 324517228613.36743, 324573015990.92194, 324642167182.02454, 325109163160.3437, 325134351331.9934, 325216309012.14514, 325246003848.3366, 325480602105.8061, 325500517600.12885, 326022085230.23645, 326066208506.86414, 326222622896.97046, 326233010616.5256, 326450129485.80505, 326465856151.13354, 327051369560.6455, 327057527708.1409, 327335662716.66583, 327353273820.171, 327495925592.4725, 327510842521.4032, 328006275898.9995, 328013132150.2904, 328027818531.0335, 328039861356.7804, 328137140363.65436, 328147616380.674, 328235354452.4765, 328240322091.6238, 328722636801.2638, 328743999183.5568, 328789363169.17206, 328806024983.907, 328950382853.5017, 328961577146.3491, 329118006753.5616, 329130529727.08154, 329139787377.4983, 329141523529.2508, 329164985738.99835, 329170871120.19336, 329432160136.876, 329434498412.5814, 329491395631.25977, 329495661146.4291, 329583552854.53955, 329589177010.3872, 329657467545.1164, 329663480298.29156, 329715513320.4649, 329720239118.45184, 329752958786.4141, 329758207265.6437, 329768797603.3967, 329777486688.504, 329789619055.65967, 329799286518.1255, 329913537354.603, 329914525466.5768, 329971354099.4822, 329979118733.16113, 329991080466.3465, 329993786921.0504, 330023458021.56067, 330029405870.2529, 330064520574.51855, 330067939724.3535, 330079178754.4255, 330083300295.085, 330230746567.8078, 330239538136.72046, 330365249464.9154, 330367460103.25195, 330374548294.0516, 330375538630.75244, 330381753240.088, 330387871302.8774, 330393723730.7103, 330405725431.74194, 330471155383.60364, 330475125344.77264, 330479722816.994, 330486093556.5088, 330499545158.3655, 330507356236.8555, 330554128547.67596, 330557669496.5488, 330619154711.3058, 330625185786.9541, 330640675041.1869, 330642311472.8331, 330672059363.6054, 330675053025.1455, 330684077288.0375, 330685027172.2322, 330709545754.4689, 330711875408.55457, 330755668413.9033, 330757501878.84875, 330764850457.8918, 330767040918.954, 330793650599.6145, 330796289236.3013, 330805934799.704, 330806838069.6877, 330837722159.3693, 330841211838.8948, 330860248653.63684, 330863852471.8833, 330889730378.09705, 330894526076.4048, 330980706816.6456, 330982839957.48975, 331032209197.3798, 331037197150.45996, 331060680694.5825, 331063531007.0488, 331090769393.8746, 331097266731.80994, 331180093034.57874, 331181723289.3511, 331211326807.1062, 331214340487.4298, 331263170056.69037, 331264184657.2037, 331269406432.318, 331269755079.13525, 331312190450.44037, 331314553406.8067, 331352979013.29004, 331354719119.25543, 331376774447.1556, 331378000787.625, 331387759436.8722, 331390580575.0242, 331417561030.5529, 331420820991.4321, 331430975504.72687, 331433336325.05347, 331452806538.86743, 331455091857.36487, 331461106577.0308, 331462046397.50555, 331522489729.9934, 331527082283.1089, 331707184613.80524, 331712283374.32556, 331714294884.66406, 331717921842.54443, 331730182180.5967, 331731706074.03735, 331782460428.9627, 331783080540.6529, 331823929280.939, 331825323055.6113, 331825864753.0806, 331826458473.77795, 331918206722.25684, 331918698071.21436, 331959647943.2717, 331960911388.3052, 331983460659.6261, 331984012344.40155, 331984665564.5283, 331984859345.16, 332002755950.87335, 332005478755.8526, 332043995618.63794, 332045815323.9955, 332061099330.2984, 332064176923.05994, 332067662888.98145, 332068382360.4407, 332108697485.7213, 332109319600.54285, 332171925443.1696, 332175882258.65106, 332213270690.3477, 332217524812.30945, 332236994579.93445, 332237595694.0216, 332244615956.09674, 332249577377.71765, 332326535564.914, 332328355660.90015, 332338917586.1074, 332339358904.47205, 332349667357.2866, 332349980424.89307, 332404080961.52893, 332406368006.1358, 332429095100.6463, 332429415146.83905, 332469905402.0478, 332471267526.09576, 332502247100.82214, 332503705468.1022, 332504598475.9321, 332505738223.75867, 332515951521.62976, 332516783831.27637, 332581278799.2699, 332582066055.5762, 332592819326.50415, 332595977967.88696, 332639547191.4039, 332639697340.5925, 332731848730.25244, 332732140863.7864, 332732654424.68164, 332733598227.21326, 332762623068.2212, 332763598921.2554, 332803286574.6217, 332805750117.221, 332810718447.34875, 332811945013.39746, 332814777055.0793, 332815226021.58044, 332826539891.9933, 332827536567.8361, 332828455633.0886, 332828923845.1344, 332857000310.626, 332857453883.1001, 332874239313.8385, 332876278020.7641, 332878851977.43286, 332878900051.47046, 332885523338.1991, 332887079215.3284, 332887773632.88605, 332890100593.57043, 332916943730.95624, 332917598418.88306, 332925327217.70074, 332927917133.0991, 332929647406.3219, 332930119350.30444, 332946429829.7239, 332947819138.04114, 332961291947.6718, 332964538970.9956, 332985605269.7883, 332987089621.7614, 333003741296.46326, 333004884298.66516, 333010415411.7674, 333013024579.32275, 333025242013.2602, 333026042340.3214, 333053323234.8793, 333053710547.3755, 333057250761.33563, 333062006071.49493, 333095306162.28955, 333098940404.17236, 333156799486.61914, 333160418660.29193, 333169304449.5885, 333171903755.45715, 333184445918.87756, 333184907587.67224, 333227585082.37354, 333230139161.10284, 333250259841.9811, 333252536672.1982, 333257475339.2218, 333258244744.0276, 333289471663.2448, 333290198531.7754, 333298900349.4299, 333302513958.89825, 333329536337.54346, 333329967880.999, 333359332089.3753, 333359527409.3105, 333367125254.9309, 333369975667.35834, 333382361885.69336, 333384696649.1483, 333389143712.84766, 333391005373.8987, 333426586921.7025, 333427390654.9214, 333437684442.0758, 333438725280.5298, 333471710792.3688, 333472814486.0696, 333499124335.49927, 333500077329.4, 333517760863.086, 333519106432.9331, 333531728360.55066, 333534518150.2472, 333537056246.74817, 333537380882.42615, 333542625660.8424, 333546742234.50684, 333555967204.6107, 333556353814.88477, 333647832653.0642, 333648755304.234, 333671854889.9779, 333673637446.8137, 333675494705.73474, 333676093126.0812, 333693491250.4774, 333697771169.3279, 333757834298.2937, 333759566013.4562, 333766347215.34814, 333767734369.14417, 333784720541.8135, 333786328475.58453, 333817822305.5574, 333818356745.30457, 333848381622.44946, 333849394189.57227, 333882293682.7919, 333883505248.6671, 333893850189.662, 333894320297.9849, 333920352345.6501, 333922235993.77014, 333927040747.6784, 333928957696.67487, 333944812949.24054, 333945646980.0752, 333951300883.4844, 333952565801.99207, 333967013090.7695, 333967791557.396, 333993496162.56616, 333994107111.90356, 333997093903.4306, 333999390299.37024, 334013015758.6719, 334016641415.2467, 334041064214.3007, 334041919850.4801, 334072691190.0125, 334073900805.2645, 334082881503.5819, 334084625580.15405, 334100756673.52356, 334101456991.7033, 334112271448.9605, 334113694376.2036, 334135954483.34155, 334137620587.02167, 334168981358.9592, 334169166697.291, 334190250777.1045, 334191473528.9579, 334194837853.1677, 334195873080.29095, 334199147749.7164, 334201570664.4835, 334210504785.6457, 334211551639.036, 334217622906.927, 334219612611.1715, 334235516828.7684, 334236651962.1178, 334237688581.98846, 334238623173.92303, 334249549894.30676, 334250315992.01245, 334297471467.53345, 334299204819.23047, 334303098878.8947, 334304493950.2393, 334332644198.1908, 334334499884.74524, 334415478104.07166, 334415716614.4633, 334416437979.83014, 334418661079.53015, 334423647089.5952, 334425022090.60095, 334431228715.8712, 334431570466.35846, 334436445239.22034, 334438413014.36707, 334451815393.4378, 334452048065.71423, 334516077694.7283, 334516561670.5663, 334552901641.67896, 334555271769.2622, 334558006116.1175, 334558911263.5541, 334568546950.30444, 334570669054.9726, 334576164761.2386, 334578939738.6466, 334592382693.981, 334592737416.20337, 334603256824.2591, 334603872346.9854, 334605475296.57837, 334605649762.2223, 334606389220.0233, 334607817574.3273, 334618338772.96436, 334618832092.45526, 334620511056.2371, 334621943854.4138, 334630314946.87085, 334632056566.4227, 334645774102.9841, 334648491024.6334, 334651275737.5165, 334653721223.70197, 334666411362.74927, 334666625899.90564, 334680181061.29675, 334681880720.3998, 334684179150.3068, 334686203370.244, 334692881319.88824, 334693896023.6551, 334701352297.60376, 334702667693.9257, 334712001990.0089, 334712571360.0924, 334726006783.7149, 334727638757.0669, 334773431928.1051, 334774079868.6603, 334775136975.7296, 334775935654.4361, 334777396430.89136, 334778375830.1648, 334813782750.6746, 334815100124.2893, 334817723807.2425, 334819428697.08154, 334842703474.9295, 334843129341.1497, 334851684069.9154, 334853679058.00024, 334854090871.52985, 334854501904.26917, 334873629200.2096, 334875663356.4405, 334878179871.5115, 334879953232.73267, 334883602401.98236, 334884224587.756, 334887073050.19714, 334887704945.0785, 334890915217.5481, 334891298904.5801, 334903747917.67615, 334904513276.1507, 334910121581.57855, 334910509708.0133, 334914796074.67786, 334915257273.81104, 334927899411.01355, 334928144670.50464, 334948386730.1185, 334948759201.9698, 334962456628.09033, 334963814345.9655, 334975901690.58514, 334976108159.6991, 334987106823.5463, 334988403592.472, 335025543126.07983, 335026134609.1404, 335048902274.53687, 335049603838.5142, 335062293961.394, 335062939168.35614, 335074164941.66223, 335075193069.2527, 335083238084.5393, 335085154745.5277, 335099753862.8118, 335101475840.47656, 335110386012.50366, 335114297941.82336, 335118715268.78357, 335119442268.1472, 335148034470.58984, 335149227798.36536, 335158715448.7429, 335159857614.3694, 335183654408.422, 335183976361.99365, 335184402898.4042, 335185653938.82916, 335207087799.3594, 335209056396.569, 335239028195.4684, 335240396178.1256, 335245939080.7262, 335246276177.82135, 335249799695.40283, 335251026245.71094, 335252594277.4396, 335253049329.17773, 335265300434.34424, 335266258681.5039, 335280554007.3523, 335282745914.0685, 335293943010.0991, 335294930957.4801, 335296448415.89307, 335297572216.91455, 335314012567.83765, 335314721240.0898, 335317326002.2916, 335317996628.3124, 335374750110.5229, 335376394729.3812, 335386718297.4249, 335388639073.1362, 335390710826.93726, 335391514534.65186, 335393805752.03876, 335394163145.47766, 335395336272.41766, 335395854895.8063, 335422798517.2999, 335423028327.3875, 335429235551.3526, 335432132204.0297, 335442214616.7832, 335442532772.63495, 335444731055.2343, 335445193288.4617, 335447635676.00616, 335448337629.78644, 335475503842.6676, 335475766202.1666, 335499518843.8673, 335500941736.7764, 335508243422.25916, 335508654914.54553, 335529142920.13196, 335531122140.42865, 335535009070.7808, 335535796936.06055, 335538427555.5314, 335538895914.3229, 335549682779.16547, 335550362236.4682, 335564652872.7623, 335566399493.5752, 335580924299.74854, 335581639739.12134, 335590886403.74786, 335591794950.0484, 335598485256.95404, 335599100368.38727, 335634674114.0232, 335634933717.27386, 335644616907.3139, 335647654565.7389, 335651745990.5773, 335651890581.6929, 335683963123.0758, 335685679708.9429, 335705642822.5753, 335705862427.31055, 335738273423.9341, 335738565084.0228, 335740368212.80145, 335740626842.8979, 335762812722.2876, 335763263908.7272, 335795103602.3817, 335796436415.3764, 335800621879.8476, 335801433435.3341, 335808585803.53754, 335809638196.78503, 335820569113.26245, 335821786442.7734, 335824681144.4513, 335826247584.5309, 335828250144.0429, 335828599903.7056, 335830200070.56036, 335832072666.75653, 335834246345.59686, 335835500657.42615, 335843587994.7318, 335843720051.102, 335844311121.656, 335845070186.3248, 335863742076.954, 335863907435.73505, 335873592783.76666, 335874417458.8359, 335884355017.24347, 335885099677.8381, 335897612256.01184, 335897904471.8279, 335900364005.6274, 335900487810.35474, 335901286445.93567, 335902315453.43445, 335904009654.52344, 335904827954.62146, 335914127224.2707, 335914226326.7006, 335919537689.6424, 335920087054.2003, 335949963037.6188, 335950361480.6676, 335968655447.5629, 335969142380.49725, 335970087621.8769, 335971003260.34485, 335988683525.213, 335989481810.42914, 336019410205.56696, 336021519049.7986, 336027937360.3314, 336029975862.9043, 336062551627.24805, 336062925615.23254, 336074171011.6113, 336075279951.81494, 336076732768.5901, 336077905737.0858, 336081215588.5302, 336082121747.53986, 336100198081.97986, 336100533891.1522, 336117140769.39954, 336118576760.85895, 336122007757.0338, 336122950556.2897, 336132775916.6183, 336134233860.9292, 336135975657.2047, 336136535190.00745, 336184521816.9032, 336185836270.9411, 336187131244.27094, 336188524253.97925, 336199584453.5094, 336201558148.5577, 336203891111.54443, 336203989754.00757, 336213285754.90125, 336214208749.17786, 336228204529.5182, 336229211366.1486, 336247842825.38245, 336248150445.8235, 336259191143.3797, 336259494700.07263, 336281095075.9763, 336282105242.28906, 336289761961.03796, 336290949971.5934, 336331573890.7088, 336332757707.5929, 336345160165.2789, 336346450954.844, 336347344402.72687, 336347578825.5413, 336354279763.6737, 336355477937.31964, 336365003608.38477, 336365849934.82886, 336366854702.3463, 336367788430.9476, 336373946333.0369, 336374633753.09534, 336375675017.698, 336376372931.3922, 336392064181.5963, 336393130157.4424, 336393709985.1858, 336394605377.3302, 336395326425.6555, 336396043086.34985, 336408107691.1721, 336409340952.51697, 336419493072.8492, 336420687586.4343, 336424152350.44666, 336424728567.8867, 336434772886.76294, 336435712710.97546, 336458259187.29443, 336460131667.65137, 336490942784.9303, 336492094803.5034, 336494149288.33057, 336494822830.916, 336495372706.58655, 336496076318.2214, 336501920050.607, 336502889598.1758, 336515457212.2042, 336516026598.43726, 336535181321.6019, 336537190335.7519, 336540303559.70325, 336542502535.5487, 336555776077.66064, 336557341528.8165, 336569282542.3257, 336570068636.25964, 336593645672.4236, 336595850727.7311, 336618122342.0122, 336619016087.0906, 336623804747.2907, 336624646917.45984, 336627461380.89606, 336629065794.13, 336657418758.14343, 336657917589.1582, 336667348052.7471, 336667736435.9726, 336715131559.1716, 336715548438.58215, 336760211933.6833, 336760878998.3589, 336770591005.35516, 336770913703.7623, 336771818847.2389, 336772943914.19415, 336780810545.4464, 336781349479.5969, 336782653098.1339, 336783795752.9515, 336787449555.0167, 336787860496.28674, 336812589902.41296, 336813088708.51294, 336852781368.25336, 336853913945.1779, 336871141056.99194, 336872642372.6729, 336881398729.2936, 336881770488.506, 336896368703.7329, 336897312965.2605, 336928976388.26086, 336929884386.71313, 336934392975.5117, 336934858417.88354, 336938191841.8031, 336939357327.6373, 336951129878.35895, 336951272522.30457, 336951545995.6779, 336953346819.96533, 336963680351.1958, 336964613556.70355, 336993019136.14777, 336994097014.22266, 337006337172.0129, 337007498277.08435, 337012986654.2582, 337014137004.6376, 337019370370.31396, 337019541860.4769, 337025687376.90967, 337026194572.45044, 337059431549.50507, 337060074026.1874, 337076311484.61597, 337076928396.2921, 337078303253.709, 337080094845.38477, 337084336373.4453, 337085010436.88763, 337091267418.90466, 337092203209.5033, 337093915410.5306, 337094247255.913, 337095792546.4729, 337096146828.4813, 337096460139.45667, 337096596800.6968, 337105044510.68616, 337106476056.48474, 337109238965.41486, 337109576978.60376, 337153079687.44763, 337154859092.2506, 337176225078.57275, 337176945114.0114, 337185444537.7482, 337185481218.5989, 337193146603.02765, 337194507260.9828, 337199545716.72424, 337200228689.6024, 337218985827.2402, 337219286161.9875, 337237991847.5667, 337239457304.03406, 337283352869.2737, 337283443910.6115, 337297551275.4287, 337297709723.0607, 337304016694.5764, 337304713115.60034, 337334311345.51776, 337335753441.7855, 337339840820.99817, 337340226560.6278, 337351486919.01105, 337352133352.2794, 337353973057.87115, 337355548695.6867, 337367910908.0428, 337368360168.4021, 337380173778.868, 337380519537.7089, 337381026251.8939, 337381244782.2242, 337388143462.75464, 337388486864.0027, 337392787734.3476, 337395078205.3575, 337414602736.9272, 337415938475.7224, 337431439655.07935, 337432294048.49133, 337432662161.4763, 337433174982.6886, 337438697523.37396, 337440504879.1245, 337443623306.6239, 337443763289.1515, 337453451746.061, 337454943816.18353, 337477480443.16, 337479407991.0316, 337501898319.33374, 337502095628.0236, 337511057636.269, 337512116978.04285, 337523034757.52484, 337523184230.0396, 337525525336.1113, 337526492226.0197, 337530944989.94104, 337531242695.08203, 337543613372.02747, 337543887940.8899, 337544737690.7024, 337545212403.40576, 337585330304.5266, 337585614640.89197, 337588642954.4034, 337589921358.37714, 337600842531.47485, 337601993921.1892, 337602186168.5364, 337602734034.2815, 337612235857.7639, 337612420660.9824, 337613701130.23334, 337614223144.2542, 337646255187.3857, 337646822697.2268, 337650473962.6469, 337651539541.40247, 337657076143.813, 337657224303.38055, 337657422750.1223, 337657889031.888, 337666042533.89526, 337666219479.54944, 337671440207.52783, 337672675124.4437, 337685162968.15686, 337685539689.55444, 337688627474.40015, 337688919053.5165, 337694220011.24915, 337694829747.0112, 337700535233.63574, 337701195878.4062, 337708293733.00323, 337709889336.3485, 337723266106.2097, 337723537388.1505, 337734477300.96594, 337734795853.26135, 337741030613.41766, 337741949976.33264, 337751890233.54285, 337751897594.7838, 337773303557.721, 337773480710.57666, 337790699733.6363, 337791429582.4855, 337805781348.595, 337806039454.3263, 337810143095.24194, 337810581782.99207, 337814074965.41345, 337814636780.70105, 337822422698.68506, 337823406118.0504, 337832149014.4296, 337834143849.011, 337844212061.13464, 337844297355.3573, 337861506826.5384, 337862075957.07434, 337871131269.8598, 337872857573.8058, 337891008006.44775, 337891303526.92737, 337891580369.0508, 337891972276.7694, 337901576009.402, 337901776039.66565, 337902518057.4707, 337902637767.41345, 337918386954.11255, 337919665942.81006, 337931550798.1991, 337934005241.6068, 337937170688.8214, 337937328848.8183, 337940262089.116, 337941498699.64105, 337945587487.2029, 337946945845.3888, 337959643544.4811, 337960134632.46924, 337962508808.5098, 337962996684.1374, 337980639456.11456, 337981133552.75574, 337985695267.2776, 337986083271.59436, 337993751149.65576, 337994027680.7099, 337997500464.7838, 337998010571.45825, 338002343362.851, 338002600675.1985, 338005329180.9555, 338005611059.30225, 338016994611.9263, 338018610403.406, 338032424503.93896, 338032999023.9104, 338036753540.61304, 338037186996.8436, 338042364944.65857, 338043167278.67957, 338052043041.8074, 338052934004.6809, 338056686873.4573, 338058079015.7737, 338066404205.1787, 338067155951.7416, 338071870335.84015, 338072335307.17145, 338083948188.306, 338085878991.006, 338086370736.11084, 338086523716.5249, 338089862735.8396, 338090470986.1514, 338092352253.4281, 338093815809.63696, 338103703464.9869, 338103797281.18384, 338114805654.3202, 338117661408.9268, 338123579386.1829, 338124809647.2627, 338142974606.7288, 338144388972.8094, 338145415971.37665, 338145817791.8113, 338152912463.9578, 338153567097.33746, 338161202659.95825, 338161406935.98303, 338171035087.4753, 338171396746.873, 338172245307.3292, 338173247887.3289, 338175648186.5309, 338176048904.36743, 338187021337.343, 338187186973.373, 338205031684.6611, 338205897326.5353, 338218210435.78125, 338220092662.5201, 338248292481.9005, 338248579550.70483, 338259662793.3441, 338259924240.0552, 338266161693.0313, 338266372230.3016, 338267775138.6559, 338268456896.8991, 338272001096.14014, 338273523096.3533, 338277986873.36646, 338278719458.57825, 338283332841.44556, 338283552189.3253, 338284028793.5176, 338284860544.6998, 338297620425.0544, 338298595147.5098, 338339115334.2023, 338340840436.78357, 338351900425.1043, 338352372342.67175, 338354457346.32556, 338354939748.1145, 338355506651.9686, 338355765137.10925, 338384862052.25323, 338385031122.07007, 338387230385.5099, 338387723456.59186, 338390014527.09143, 338390400932.35876, 338404039083.885, 338404307139.89905, 338425777242.33246, 338425974054.68274, 338451010487.00854, 338452738835.7716, 338455600802.7125, 338456296316.7965, 338474084005.8433, 338474416902.78894, 338477093099.2947, 338478752928.063, 338479814952.5133, 338480281952.464, 338496937794.17236, 338498114995.893, 338518892101.89624, 338519153082.7866, 338522554874.0282, 338523118505.73145, 338523582814.71094, 338524158336.25714, 338531336933.0354, 338531941257.86066, 338533000315.97986, 338534156543.85406, 338543568767.1915, 338543791529.94055, 338549267620.0813, 338550221799.09546, 338551341308.43774, 338551869802.9461, 338557320821.0492, 338557793400.54395, 338561098463.55206, 338561698426.12866, 338562012352.04034, 338562420955.52997, 338587721322.5226, 338589429299.4782, 338591052913.4511, 338592206003.872, 338595896898.562, 338596675339.3278, 338606019073.74585, 338608037431.2993, 338613324249.5375, 338614475995.823, 338615621905.8609, 338616290868.9939, 338621679656.63654, 338621751470.44366, 338639459802.0928, 338640219095.0123, 338652716629.3299, 338653409160.49603, 338674955541.6493, 338676162186.50574, 338709428233.82526, 338710616842.46924, 338714921514.8839, 338715576175.1903, 338716365759.73083, 338716639680.3699, 338722271911.3086, 338723333137.8961, 338724321320.04333, 338724489575.3425, 338737620917.17334, 338737873108.52405, 338756854079.03894, 338757618391.16376, 338762815816.509, 338763744126.46625, 338779102637.3672, 338779681419.32806, 338781824357.0179, 338781927839.2363, 338788057105.15594, 338788249370.3484, 338792049729.87256, 338793038805.29425, 338809512814.2988, 338810401581.7372, 338834481371.7861, 338834902586.3516, 338854512371.77576, 338855663747.73346, 338856785915.31366, 338857105408.62463, 338871854743.7305, 338872275850.093, 338884874580.40063, 338885053414.0063, 338890853098.5306, 338890978576.91223, 338893929158.55237, 338894867621.1372, 338896166290.36957, 338898312192.13513, 338904796058.7174, 338905503629.5763, 338911994181.6268, 338912268708.7173, 338917120445.186, 338918189570.31335, 338921061018.66003, 338922204519.0526, 338933337587.47595, 338934119911.06586, 338934913863.36725, 338935567173.9631, 338936098672.29395, 338936423956.307, 338953267984.94995, 338954573915.8278, 338968439430.96136, 338969368434.4111, 339003837833.68066, 339006015544.1054, 339013353510.2301, 339013625613.9406, 339033019488.8656, 339033991563.20435, 339035128480.9133, 339036098933.8071, 339036574480.50195, 339036782143.19275, 339037151214.96387, 339038647394.9899, 339043611115.2074, 339044187040.0067, 339057847227.2654, 339058281203.25494, 339059355808.33777, 339059397532.55914, 339066607250.3273, 339066960895.0322, 339093991406.95306, 339096068230.48944, 339101936188.56433, 339102663928.71765, 339102904355.09216, 339103109570.807, 339104085618.4894, 339104360265.6514, 339126117321.48883, 339126706139.6184, 339144064351.67957, 339144424633.54224, 339147865110.01843, 339148967536.86163, 339151013923.0906, 339151103340.7416, 339168327214.38586, 339169094170.7381, 339177516105.4115, 339177663455.2643, 339197599766.22253, 339198396461.3998, 339206703396.6324, 339207021538.393, 339214327531.83264, 339214545491.8453, 339217413974.2423, 339217600857.74976, 339223654644.1089, 339224686031.6065, 339235592481.1161, 339237097462.4353, 339260855447.9542, 339261392530.22375, 339264071151.61884, 339264949322.0909, 339274028546.00195, 339274220974.4979, 339279333472.12067, 339280008848.8123, 339294102260.3523, 339294338046.87445, 339301922340.58307, 339302416232.1345, 339310281752.2179, 339310504055.78644, 339319778162.8635, 339320434002.10205, 339338816472.50977, 339339542619.5471, 339348248930.5833, 339349760317.2564, 339351893711.86145, 339352161965.3125, 339364204603.45465, 339364531496.55444, 339365315810.5615, 339366276196.02466, 339373692301.73, 339373892903.9546, 339391185413.159, 339392252643.391, 339398601622.3962, 339399933900.44965, 339404507736.5895, 339404942700.51306, 339406183755.82715, 339406554009.6676, 339410867274.51184, 339411085953.0438, 339429234394.223, 339429626668.6754, 339447778406.40784, 339447847953.06775, 339453571117.38074, 339453992743.8943, 339454332657.0868, 339454954307.0781, 339457549888.3093, 339457772285.3019, 339458641447.41296, 339459471461.94556, 339477669273.4708, 339477822009.4518, 339488387124.16516, 339488467897.06976, 339492594448.02856, 339492986903.3889, 339494245747.5989, 339494473069.29755, 339503527021.24084, 339504007067.1347, 339506113972.4928, 339507143673.1377, 339516414734.6323, 339516575659.2267, 339528279560.673, 339528582339.0649, 339529633602.31244, 339530264642.89545, 339539894127.0115, 339540675815.33044, 339580398949.3178, 339581722741.1268, 339591210973.4746, 339591774941.4724, 339592362153.94226, 339592509807.5608, 339601278069.6778, 339601920434.86633, 339604206893.95715, 339605144726.71674, 339609996335.6542, 339610609171.1633, 339615538632.6091, 339616184677.52374, 339622283513.92676, 339623652779.094, 339630762932.0852, 339631768236.43066, 339651091760.7581, 339651315831.33765, 339657257144.31616, 339657493957.87866, 339666021625.64075, 339666984409.6052, 339678098345.0112, 339678734147.5237, 339680618429.1567, 339680978177.09265, 339695801706.84973, 339696501833.69226, 339708700024.56146, 339708952378.77454, 339715985241.8125, 339716145181.2276, 339726111789.60767, 339726462538.3068, 339729467571.6735, 339729572093.305, 339733896014.2982, 339734350222.6809, 339738609460.656, 339739195210.8562, 339741042508.7051, 339741980100.4759, 339776169403.7509, 339776842132.37756, 339782763165.7683, 339783106307.44434, 339783508279.9513, 339783841143.3445, 339805322323.72064, 339806144590.70215, 339811913124.5223, 339811927432.1134, 339819356231.6718, 339821062755.29395, 339828259019.06256, 339828821861.19666, 339851144653.47046, 339852675165.40076, 339854394984.7819, 339854997704.18945, 339857145157.30426, 339857377636.8928, 339861265586.82715, 339861878418.5307, 339862387038.80316, 339863134901.43005, 339864959227.89465, 339865221568.49786, 339867155806.918, 339867874323.5691, 339869580106.2622, 339869889929.9143, 339877042235.99756, 339878010919.931, 339899896728.9119, 339900343943.09906, 339903296361.17004, 339903880431.2444, 339904083518.7877, 339904561985.8715, 339913427008.44226, 339914806271.8147, 339915594201.44183, 339916363329.1577, 339917883368.2005, 339917923206.78314, 339920509204.7604, 339921521657.0099, 339952639553.5972, 339952924760.9622, 339962753810.1546, 339963475182.0018, 339975325461.6693, 339975730019.1522, 339988372952.15375, 339989091301.90405, 339993299314.629, 339993997115.81714, 339997962252.7115, 339998329625.15967, 340006314499.7388, 340006638524.5473, 340026810429.2241, 340027639351.6384, 340045270622.2234, 340045466400.30383, 340053959179.1007, 340054939868.00366, 340057314803.66895, 340057667443.6495, 340058138110.5357, 340058256073.21436, 340059775135.59686, 340060823068.27686, 340062429929.2196, 340062492532.5417, 340082842192.17725, 340083588723.29376, 340089175748.84094, 340090469741.3165, 340100232827.59485, 340100775140.389, 340104690098.06384, 340105157419.5703, 340118039446.7265, 340118345187.4136, 340130113989.7782, 340130197985.664, 340139316420.38477, 340139646035.2069, 340161224675.63464, 340162447172.636, 340162989819.3152, 340163266317.1844, 340169336193.73627, 340170150797.8424, 340174148303.3268, 340174324855.41223, 340179258641.6759, 340179998932.6913, 340202362923.8136, 340202770753.01917, 340204612319.3268, 340205827177.8659, 340208604627.31665, 340208681984.44006, 340232330078.78845, 340233027975.36255, 340233617012.68134, 340234491351.32544, 340240658582.7727, 340241434383.7806, 340269616064.3888, 340270195949.0248, 340282021164.1887, 340282499836.7084, 340286628094.6138, 340286809167.6415, 340289779491.93066, 340290664654.89014, 340300420822.7103, 340300881074.0965, 340306978030.03564, 340307070975.77576, 340309350164.0547, 340309689345.5168, 340310543532.98193, 340310584809.7904, 340325287506.3046, 340325600366.57, 340326944316.7488, 340326986743.40576, 340343778221.7503, 340344100313.3829, 340350052128.6608, 340350079652.35004, 340363695968.6751, 340364878173.6949, 340371907316.0628, 340372258387.3377, 340384316841.08655, 340384407408.7332, 340384704814.1935, 340385313258.16077, 340387647326.76263, 340388287701.97473, 340391931066.94934, 340392616771.1767, 340396628221.2936, 340397672520.81696, 340408492791.8003, 340408848686.3642, 340414680751.99524, 340415183870.444, 340416768245.9301, 340416921099.4102, 340427493620.9558, 340428344491.5946, 340431368627.23535, 340431691557.7414, 340432405059.0398, 340432831838.8411, 340438371440.4653, 340439193985.05927, 340445230442.42566, 340445331193.94165, 340447091875.1612, 340447197287.64514, 340459657575.09344, 340460046723.72925, 340460382111.8661, 340460762457.10693, 340473023242.3775, 340474210303.46564, 340478289075.0972, 340479019120.1535, 340483922066.95605, 340484248988.7915, 340489996002.1083, 340490315579.3926, 340499047130.32355, 340500860496.3638, 340504939366.3131, 340505531250.3524, 340520167956.5706, 340520349134.3543, 340520940217.954, 340522394076.7563, 340527636816.62854, 340527866425.4922, 340529029438.2022, 340530364701.47284, 340533734758.28796, 340534807877.8069, 340538104380.039, 340538768845.1537, 340539891618.18896, 340540719861.745, 340564673115.4245, 340565325855.1581, 340571054726.2698, 340571196932.9759, 340574811155.5729, 340575064875.6315, 340576946643.45685, 340577626084.0987, 340603161058.8821, 340603245425.3476, 340614354527.5526, 340615107601.09424, 340617034255.0929, 340617768817.9635, 340625530808.88806, 340626368185.6378, 340643832210.974, 340643850678.3738, 340655935858.79565, 340656181847.7739, 340666875538.455, 340667111175.50336, 340668221562.268, 340668652870.65906, 340685211071.5765, 340685841983.8789, 340691727179.1816, 340692036112.49207, 340704367794.41327, 340705031938.863, 340716255743.753, 340716310482.5912, 340716541911.48083, 340716837354.15, 340719767578.05695, 340720025845.37805, 340733126316.8919, 340733225828.85034, 340736044068.46844, 340736174825.06415, 340737386771.89343, 340738090986.03613, 340740657230.4296, 340740913690.7089, 340741669982.98126, 340741757710.30585, 340755969459.05347, 340757256892.027, 340762508282.72015, 340762913134.0386, 340777304765.7311, 340777761317.55225, 340783427340.1719, 340783824330.4767, 340824126912.2434, 340824983595.4966, 340845980415.8893, 340847182045.0039, 340848251503.5433, 340848867180.1423, 340852807823.47217, 340853512321.70996, 340855135064.44495, 340855890207.5913, 340884108485.09406, 340884850730.9247, 340900670313.3511, 340901026773.4404, 340906882360.12195, 340907213346.29834, 340926189655.7882, 340927738440.5996, 340937248773.36224, 340937503773.66095, 340944966739.0339, 340945768248.2685, 340952718767.5437, 340953320750.2726, 340953502366.97595, 340953851731.1677, 340957090170.1487, 340957784359.68445, 340965395376.99414, 340965914811.92505, 340966783296.16956, 340968565776.60486, 340982025812.541, 340982691071.79034, 340990713199.92126, 340991600147.87146, 340993056448.1095, 340993925440.8215, 341026272313.5753, 341027107459.79535, 341029002388.0751, 341029537213.7234, 341057027355.7196, 341057500922.48895, 341062289864.00635, 341063144466.2092, 341070144504.4203, 341071245135.36707, 341072835195.3793, 341074400208.0325, 341077152899.09143, 341077831969.0558, 341082819022.91595, 341083567170.4473, 341094646959.8954, 341094763835.28046, 341095706378.9208, 341096551398.5105, 341098387187.2672, 341099271916.43445, 341100022973.6223, 341100574082.3352, 341110494343.34143, 341111163924.32715, 341111777772.87085, 341111986034.9654, 341115915227.28235, 341116792870.47656, 341126009892.8142, 341126322685.6237, 341137292625.6757, 341137665529.50806, 341143209463.2952, 341143377383.342, 341157350769.6216, 341158869207.9233, 341170987554.1047, 341171923057.4697, 341178196929.4494, 341178360989.2182, 341182709957.0325, 341183249680.1529, 341203150268.313, 341203201262.7981, 341218290177.8392, 341218375163.2138, 341218971171.4181, 341219555601.97986, 341221478324.4936, 341222548944.0008, 341225767367.25037, 341225928663.36584, 341231138401.4971, 341232335284.8524, 341238601235.82886, 341239095406.6124, 341243484904.1786, 341243720111.60675, 341248917532.99963, 341249058821.22253, 341253561685.2226, 341253997183.96765, 341267366525.6305, 341268161779.28625, 341273709380.9323, 341273964805.1049, 341274068213.07983, 341274533741.544, 341278503088.5658, 341278746310.3638, 341281422451.89307, 341282667944.8892, 341288596504.20575, 341289201533.54895, 341316476491.5581, 341317004554.4607, 341350315559.6641, 341350959159.1031, 341352888041.1842, 341353618705.64453, 341354406288.70197, 341355383597.82227, 341375748092.13165, 341375903412.16315, 341384263639.2864, 341384817868.2935, 341397141643.5048, 341397459609.0719, 341409915759.18024, 341410196360.97675, 341418444821.09344, 341418767248.4765, 341424161036.98145, 341424902740.40674, 341429002847.86316, 341429034850.068, 341429279575.04736, 341429525203.7797, 341452976322.6925, 341454134903.16156, 341455496733.67535, 341456757727.26483, 341462900107.9746, 341462975479.0228, 341480204033.69586, 341481428415.6111, 341489594349.8224, 341489756649.67346, 341512733228.8187, 341514064156.74133, 341524219193.86707, 341525420247.49475, 341525625394.27686, 341525704090.8386, 341548983723.86615, 341549553531.3109, 341554369990.90796, 341555221778.66077, 341564606944.69635, 341565642420.5947, 341572273150.2285, 341572650939.1958, 341574209843.2672, 341575691546.1417, 341586579637.21155, 341586878719.89484, 341607601911.3447, 341608400830.96826, 341612695964.3529, 341612790766.1238, 341616802945.8994, 341618060147.3112, 341621157567.0039, 341621386638.14514, 341627973681.2239, 341628523793.78033, 341632986626.6558, 341633775882.61646, 341640966468.94995, 341641069749.7453, 341643537208.72144, 341643904689.92206, 341645802918.03125, 341645941127.80005, 341650423291.5443, 341651219993.9061, 341669629948.7895, 341669882301.9616, 341679849298.7565, 341680274779.5188, 341692619243.1555, 341695322458.2001, 341697375705.5001, 341697809266.1817, 341716112507.6311, 341717288032.8562, 341725470425.25525, 341725934982.5809, 341726353782.14124, 341726976538.13574, 341733157077.6255, 341733422642.3729, 341743670571.36053, 341743987518.72894, 341763593800.0907, 341764256051.2233, 341765923344.54504, 341766426167.3464, 341774782872.37836, 341774928619.89355, 341779651914.6411, 341782726826.94617, 341783237604.8427, 341783750958.66925, 341785049136.2372, 341785280492.54565, 341796279310.7228, 341796813121.9746, 341797328960.68066, 341797805456.0624, 341807016386.53925, 341807110760.352, 341809057716.4407, 341809655401.37415, 341818080893.415, 341818675411.45026, 341830299043.3645, 341831971174.0577, 341832701554.73254, 341833500223.61926, 341841047923.5134, 341842857292.49915, 341846309441.98047, 341846538085.0785, 341868289172.17316, 341868487098.7665, 341880014765.6163, 341881109305.5759, 341881634009.6603, 341881952805.01074, 341883691058.16547, 341884083761.51953, 341884639865.8152, 341885545610.4982, 341888048134.29285, 341888447461.91785, 341889951928.625, 341891160229.2199, 341894067339.50366, 341895195516.5077, 341909773240.259, 341910139369.94073, 341914592541.9374, 341914951362.0945, 341917894184.9837, 341919368096.60254, 341920371957.6232, 341920516659.3182, 341946160508.92737, 341947463412.7256, 341950480177.9783, 341950606631.7818, 341962321773.7109, 341963566242.9124, 341970659591.0612, 341970773008.7914, 341975838080.1776, 341977067462.5233, 341980011431.2181, 341980218739.35754, 341982225777.28, 341982874978.38336, 341993484136.9284, 341993878627.7444, 342011674066.4042, 342013013387.37463, 342013603521.5456, 342013690782.6004, 342014343374.0754, 342014513077.8873, 342026072668.1669, 342026310286.2356, 342028073638.8666, 342028357350.33325, 342037124314.7646, 342037614868.0967, 342038112680.3121, 342038199432.225, 342038639297.30585, 342039557281.5016, 342040210158.3, 342040430530.56146, 342043139504.2964, 342043628097.17725, 342048942676.5469, 342049411446.99243, 342051188743.63684, 342051559626.73865, 342052764233.13245, 342053412575.7118, 342054891796.3189, 342055129068.4607, 342069141932.5368, 342070419178.0768, 342071379555.1022, 342071465789.23987, 342080834786.381, 342081576491.7076, 342112807528.6034, 342112976814.04285, 342116784401.2241, 342117470276.5089, 342131258944.41785, 342131553562.5131, 342164169647.0625, 342164493814.407, 342166717750.15564, 342166996551.9586, 342175555260.0404, 342175805248.3562, 342178134730.0778, 342178394707.84766, 342180582271.81665, 342181007306.10986, 342183966302.801, 342184025099.6999, 342193346996.7335, 342194414968.3692, 342195337469.61206, 342195595520.1405, 342203029160.97345, 342203239452.2519, 342213274317.78784, 342213378542.2975, 342213608504.7715, 342213856182.7643, 342214003972.3933, 342214184716.6324, 342216557374.54956, 342216973369.7958, 342220136058.1752, 342220650398.8369, 342222001861.94214, 342222179466.85565, 342228293693.1465, 342228468398.0135, 342229288960.0681, 342229369119.9652, 342241701281.09937, 342242517948.74615, 342256250587.10455, 342256567139.2572, 342269787115.31256, 342270482305.56793, 342271750510.05066, 342273120369.5948, 342277906783.6151, 342278711600.2476, 342283585418.364, 342283812466.85925, 342298116474.98816, 342298234849.1625, 342299320175.97906, 342300523746.76056, 342311673324.07983, 342312367344.2772, 342319696300.7164, 342320121615.38025, 342322382544.72504, 342324275686.24365, 342329650457.59076, 342329763770.4059, 342347533605.32117, 342348279609.61084, 342358952841.47766, 342359632230.0014, 342362813445.28625, 342363927829.7074, 342374576489.782, 342374993166.0785, 342375154610.0123, 342375357683.3684, 342403952695.7412, 342404790167.98706, 342409501629.0925, 342410439353.68115, 342413358719.95703, 342414745321.484, 342418769791.2879, 342419824068.84094, 342431164848.885, 342431386443.9834, 342431810091.2843, 342432641179.5846, 342438012929.5789, 342438196294.1714, 342443468064.5188, 342445126637.4053, 342448444215.8978, 342449253694.27386, 342449783343.0331, 342450258461.4796, 342463482306.9812, 342465189067.95496, 342481830272.2866, 342482313193.9499, 342486397413.8677, 342488567651.5993, 342506222131.7503, 342507368664.8047, 342510516881.3398, 342510968899.4867, 342520503255.0863, 342521294322.4081, 342529228041.21155, 342529644013.15454, 342549337241.7018, 342549629502.3212, 342556900229.7479, 342557109529.6703, 342559815413.18835, 342560561108.0718, 342561151464.5314, 342561797253.40826, 342563662998.82153, 342563771903.0413, 342564438359.91, 342564972994.41614, 342568153036.54974, 342568523722.1388, 342569876752.05164, 342571472348.82837, 342571660273.1435, 342571864346.995, 342574296336.81665, 342575040048.9852, 342577394921.86304, 342577715922.9591, 342578433292.4475, 342578819551.3783, 342597003460.4774, 342597089180.6422, 342603609343.2881, 342603858055.3725, 342611127412.5034, 342612084769.2678, 342615087825.5161, 342615533792.37537, 342618709567.91656, 342620309829.525, 342623070007.0298, 342625215469.8043, 342628429724.4315, 342628747041.50244, 342629226341.5414, 342629865973.78705, 342635759215.983, 342636054243.3352, 342636682188.748, 342637107408.623, 342641384516.4117, 342641547739.18744, 342642666100.8978, 342644799932.2786, 342649405171.1065, 342650044143.5615, 342656969523.43744, 342657843544.9606, 342659794632.1262, 342660144854.2897, 342668804769.2262, 342669504178.87024, 342699777837.74115, 342701015180.8811, 342713852770.0428, 342714234480.16736, 342725724137.0137, 342725948457.0688, 342732098865.458, 342732729494.00366, 342748589397.8912, 342748868760.036, 342750157510.0685, 342750554682.85547, 342754877563.4634, 342755557328.9736, 342765820091.1778, 342766177925.2726, 342767128774.1104, 342767613795.09, 342786675893.1288, 342787210375.7283, 342788594321.1172, 342789277207.6138, 342792981476.18036, 342793425995.5436, 342802224539.78125, 342803340665.7062, 342804304486.17224, 342804818627.3794, 342808256461.92395, 342809071530.1645, 342810750919.1627, 342811555689.3373, 342813858523.7053, 342814310738.62915, 342818318955.2643, 342819134365.75684, 342821720539.35095, 342822302421.0749, 342823652339.62976, 342823920866.756, 342831855312.99493, 342832079920.45056, 342860082923.48364, 342861357448.5951, 342865017645.3239, 342865167917.119, 342865303561.24854, 342865437666.0354, 342878021626.43274, 342878366094.0796, 342883919046.58325, 342883956243.5264, 342891020378.3834, 342892248647.03815, 342893959133.95483, 342894394328.26733, 342900922679.0322, 342901331974.4962, 342909033828.6819, 342910250512.0095, 342911267726.0531, 342912216632.9607, 342918256942.37036, 342919256775.5, 342921650761.1161, 342922185333.3854, 342923280296.18945, 342923916286.0139, 342935475850.0281, 342936050069.5221, 342938168060.6851, 342938334080.5548, 342945047104.4684, 342945987812.02423, 342955696411.3092, 342956782404.7704, 342960745840.3801, 342961445961.5448, 342962870072.6658, 342964328901.2318, 342979231844.8833, 342979383301.57666, 342981416361.80414, 342982336332.94434, 342991540476.70197, 342992842250.3317, 343004929433.68164, 343005110243.58984, 343005732703.29956, 343006287091.69196, 343007930982.08484, 343008289321.7212, 343008398767.80444, 343008495141.8393, 343012921170.0988, 343013847148.96423, 343015073873.0176, 343015410401.35846, 343028853474.51697, 343029671852.03076, 343060467961.90814, 343062203452.55743, 343065982333.24225, 343066810494.8129, 343072506977.4929, 343073897319.3632, 343079273058.1133, 343080013186.6648, 343086626736.82544, 343088026964.1074, 343109189669.88434, 343109996991.2577, 343110522494.755, 343110806403.9915, 343117374482.69885, 343117989904.62933, 343119519563.9746, 343119799488.4982, 343127739033.3258, 343128073966.5486, 343141844005.0803, 343142364821.5399, 343155590925.6678, 343156284390.89154, 343168019851.28455, 343168221285.20654, 343180549285.1703, 343182520131.10077, 343186555452.4012, 343186754797.24524, 343187004356.6324, 343187384700.4629, 343190870643.5074, 343191835686.9307, 343201207500.9652, 343201401415.34814, 343209248203.79126, 343209452435.6655, 343210879472.34924, 343211376404.88635, 343212788023.4236, 343213326812.6488, 343214439485.5264, 343215064162.1704, 343218370550.95056, 343218964995.58936, 343220291686.8993, 343222158000.0163, 343238033208.62036, 343239652540.3684, 343240664795.25543, 343241325973.67957, 343244328417.531, 343244568999.2744, 343261872140.60345, 343262080884.1247, 343269550780.09265, 343269841632.4586, 343273170064.21387, 343273361153.59064, 343279242787.8923, 343279436224.77893, 343284787215.868, 343285307270.5374, 343305144130.55347, 343305409811.745, 343315901763.9807, 343316297628.2575, 343329088234.7019, 343331032064.04004, 343352493933.8348, 343352758841.2174, 343365068150.37415, 343365159612.38635, 343365560353.479, 343365849021.5713, 343367605278.9839, 343368458979.80566, 343369151593.6902, 343369303566.4106, 343372049838.12695, 343373143319.11145, 343373609550.55457, 343374143789.18854, 343384185723.6374, 343385166635.1156, 343396816096.32556, 343397064863.0861, 343397368465.3128, 343397621576.39886, 343402115165.5349, 343402464144.48584, 343416053972.0609, 343416155070.93994, 343419164361.6019, 343419276740.4696, 343420735172.07336, 343421205174.3377, 343452896315.5222, 343453299081.3552, 343466963789.2341, 343467311868.23114, 343480048883.34216, 343480454312.85535, 343490333954.64856, 343490768031.50665, 343494179920.5675, 343494546048.58136, 343497480138.9602, 343498212446.86633, 343498975858.8242, 343499485446.25134, 343521542070.3455, 343521835602.16876, 343534372214.0404, 343534672372.51447, 343539778803.3624, 343540510349.3478, 343567859310.2726, 343570058837.6642, 343579300051.1344, 343579732038.0769, 343580239989.91675, 343580806022.84534, 343588970103.3147, 343589154365.4, 343590685384.0232, 343590931195.7189, 343591249857.52, 343591475945.26385, 343601564664.18054, 343602269203.6738, 343603735237.43274, 343604916342.41376, 343606432937.4863, 343608413406.98224, 343613836794.7964, 343614844414.8401, 343623633072.19666, 343624336614.151, 343648586714.5832, 343649690301.1189, 343659607775.0381, 343659934707.5682, 343676162416.8292, 343677794840.11536, 343685340248.82153, 343685507777.2722, 343698980765.65454, 343699333394.7943, 343711554667.55005, 343712807756.06555, 343721252525.4552, 343722029514.0009, 343742921523.89886, 343743842144.94196, 343745365825.4944, 343745720676.5553, 343747007446.26044, 343747899413.7488, 343749226899.0003, 343750315727.08105, 343763833744.0864, 343764551957.1691, 343772404812.36194, 343773858120.32544, 343774761558.39795, 343775358326.51447, 343798374439.14325, 343799077270.23724, 343800936765.54297, 343801836504.6393, 343805215007.6798, 343806000442.99365, 343831107134.0398, 343831266201.0311, 343831407028.1603, 343831524855.282, 343836108989.4227, 343838146773.364, 343845892524.3623, 343846388142.9942, 343852234663.22876, 343852293792.9619, 343862329979.5299, 343863106384.9001, 343880529337.0504, 343881532305.3577, 343882340285.6406, 343882762425.43353, 343883906786.8597, 343883994277.317, 343899514829.0702, 343900508569.376, 343904481317.4949, 343906075240.2289, 343932763892.4127, 343933059787.63354, 343935341301.15765, 343935484381.99524, 343936651623.15796, 343937050954.48145, 343948863061.1433, 343949027109.5315, 343967995883.46344, 343968782513.1931, 343970872498.77295, 343971335519.7765, 343979419278.08765, 343981257202.1278, 343987763468.36475, 343988055986.3413, 343998834847.32947, 343999864665.61316, 344001262170.8881, 344001474504.19495, 344002157484.1478, 344002322904.33264, 344005797339.6616, 344006637772.6782, 344024564761.9496, 344027505155.0514, 344032405572.8915, 344032970000.1601, 344038177615.28296, 344038305139.531, 344040678980.39136, 344041836144.40533, 344043188049.91943, 344043312462.1548, 344052767742.75757, 344054123628.8256, 344057668678.54614, 344057871598.095, 344064362223.1291, 344064586088.169, 344067331300.94275, 344068194970.721, 344069537711.7833, 344070011094.6393, 344086045159.1296, 344087145402.6807, 344124487085.8851, 344124576667.9853, 344126539180.48126, 344126825710.3927, 344128599938.4024, 344128895980.4245, 344129491869.26184, 344130313996.49414, 344134956837.3499, 344136728850.1886, 344138342949.6386, 344139840401.38464, 344141637586.25214, 344142106564.64764, 344149820478.97644, 344150161185.5715, 344166673552.9502, 344167464643.50354, 344168386541.8944, 344168423353.4185, 344180772336.91315, 344181293677.42096, 344185263059.7748, 344186306412.5502, 344189071861.7241, 344189812757.9458, 344197394978.0733, 344197676808.8607, 344205187194.7899, 344206565506.0338, 344209277651.2491, 344210350456.16174, 344211563877.26074, 344211854484.59326, 344215282099.72327, 344215503062.3463, 344217224844.1895, 344217685852.91223, 344220288918.34766, 344221254902.46387, 344222193888.1657, 344222738804.2001, 344231405353.6306, 344232471726.21326, 344258672326.6331, 344259334730.7183, 344265722183.89233, 344268176117.4298, 344269401749.01355, 344269866450.452, 344291851864.63745, 344292654767.68463, 344295410850.5039, 344297092841.59717, 344305655805.8558, 344306052320.37665, 344314030392.5432, 344314214771.1617, 344317772232.6166, 344317917236.5261, 344333766443.762, 344334584869.38226, 344349183837.40173, 344352279933.0442, 344370062946.6438, 344370108907.7334, 344371186428.15015, 344372067503.4114, 344387635859.6395, 344388315407.51807, 344390014194.9979, 344390831881.1499, 344393628979.04987, 344394603212.1266, 344395440058.08075, 344396213800.5641, 344403796145.7874, 344404176641.7816, 344408688232.75037, 344409123267.59546, 344410404530.4501, 344410674422.256, 344431883820.3502, 344432509798.3162, 344436257777.694, 344437523039.37427, 344449722852.0151, 344449839567.16565, 344452098984.4911, 344452927345.71875, 344454578789.068, 344454958005.0456, 344458874978.01715, 344459098110.33936, 344469671595.79565, 344470326553.50446, 344474293359.17395, 344474748127.8694, 344476261442.7354, 344476600257.09155, 344492785930.2073, 344493345421.8922, 344498397356.00146, 344498820376.3999, 344500587406.8909, 344501217536.6443, 344510400183.18805, 344511122087.1273, 344522679396.96796, 344523710504.6485, 344539042265.38916, 344539157661.25354, 344547193061.0796, 344547550075.70544, 344549015465.87036, 344549785989.5989, 344553140630.9352, 344553943664.9149, 344554549587.31757, 344555126719.1756, 344558732482.98267, 344559526908.693, 344569423442.6663, 344569749241.11285, 344574174982.3307, 344575536292.89465, 344590346221.6064, 344590779270.9841, 344617602681.73926, 344617994681.7043, 344627770260.1476, 344628263338.63556, 344636122579.39124, 344636684654.9969, 344643580864.29486, 344643979718.87085, 344650117133.1846, 344650358642.3827, 344662654451.56036, 344663648129.8612, 344676166221.15533, 344676372050.5924, 344681628165.59326, 344681933271.76855, 344683450916.7103, 344683529451.3806, 344686331891.5039, 344686722935.4227, 344702906748.80194, 344703786719.8401, 344706061583.0297, 344706494644.4926, 344707384976.10266, 344707944431.9001, 344708420182.2183, 344709224787.138, 344728256597.21, 344728570544.8663, 344731146171.0017, 344731624887.1693, 344736254537.59686, 344736777764.62854, 344739481650.718, 344740171320.4597, 344740567729.53186, 344741587387.3724, 344747884973.8523, 344748529797.7057, 344749552799.394, 344749723660.0199, 344765423935.02203, 344766035429.9802, 344769299029.9161, 344770322304.55023, 344799637804.07654, 344800739746.9576, 344808298908.21924, 344809350752.6655, 344817218642.0078, 344818134734.0155, 344832867888.8032, 344832995649.3342, 344838744050.00903, 344839485330.5033, 344840798984.0879, 344841038334.5182, 344856668390.34503, 344858923850.0311, 344872702306.77484, 344873305526.9285, 344877997791.6334, 344878404809.4155, 344888659249.298, 344888897558.76794, 344928985492.38794, 344929386332.5469, 344940896146.72125, 344941519309.62195, 344953677259.37866, 344954374782.5896, 344963789685.87744, 344963996971.27893, 344979529222.8898, 344979787265.63306, 344984686658.455, 344985064973.3877, 344988356218.93634, 344988865772.0381, 345008667095.47455, 345009685189.1501, 345010775078.9679, 345011445989.5795, 345014690998.67633, 345015096855.0715, 345023976443.6754, 345024654439.17004, 345033407847.75073, 345033713132.5412, 345042827906.2555, 345043995021.64185, 345046527346.39795, 345048827159.733, 345080612686.0822, 345081438282.1394, 345094249582.04626, 345095252637.45685, 345098365479.27026, 345099506089.371, 345103402443.33044, 345104524626.0955, 345106343662.0309, 345106417147.6993, 345108123479.5249, 345108709361.05566, 345110006134.19653, 345110280466.70374, 345111591629.85925, 345112793654.39465, 345132298314.91113, 345132780459.99805, 345140445697.9435, 345141069464.83484, 345143244886.1331, 345143538974.19025, 345148595552.47687, 345149507479.8357, 345175580597.9501, 345177094146.49866, 345182861232.9131, 345183501194.9115, 345198504790.3808, 345198783573.3384, 345200689781.68286, 345200934336.54755, 345202526247.944, 345202591683.64886, 345212632721.57446, 345212958877.4658, 345219599735.6812, 345219829369.256, 345222123254.75977, 345222263429.8771, 345240460281.5482, 345241878287.7061, 345250299685.30383, 345250537316.22754, 345267004164.6013, 345267786637.6876, 345268770496.8365, 345270241621.03, 345300951349.2593, 345301666157.3023, 345333224113.3336, 345333329291.79626, 345341962648.3232, 345342470613.1884, 345344527581.68475, 345344669235.9148, 345348584808.1523, 345349019176.1273, 345350503183.2196, 345350699432.8536, 345355860731.11816, 345357439012.0204, 345360317536.996, 345361114741.392, 345364415628.5217, 345365174395.42786, 345375769722.95514, 345376596649.4935, 345408070237.5415, 345408681968.9176, 345409698976.38184, 345410086254.9418, 345417560281.84, 345417887181.2556, 345424538928.1107, 345424823318.4337, 345474230956.1739, 345474560573.4169, 345496372049.4446, 345497781464.7008, 345501216171.273, 345502058029.0084, 345512444377.9099, 345513565640.0517, 345543883750.94794, 345544489155.32007, 345551562207.08374, 345552092293.4446, 345558649766.20776, 345559735288.9856, 345563601031.40955, 345564279001.6419, 345570502185.0109, 345570791399.06305, 345583235471.52686, 345583318081.38635, 345590058828.6748, 345590894780.58484, 345591395504.6279, 345591749049.0807, 345596071338.85156, 345596437529.3395, 345599833904.91785, 345600494541.8833, 345601416280.0178, 345601733753.8307, 345609212478.1561, 345609798014.9933, 345631361354.4613, 345631862096.79224, 345632463745.8701, 345633112095.3799, 345639129987.3264, 345639488093.36487, 345644281672.04584, 345644684568.8528, 345653021780.69275, 345653240327.4059, 345678860952.239, 345679970066.0291, 345682550893.7997, 345682860808.85004, 345683478960.9507, 345683974326.80493, 345691434781.91425, 345692086825.7239, 345710422702.06024, 345711363567.6867, 345723215631.921, 345723434003.4788, 345728074023.5339, 345728310933.1271, 345740116960.45844, 345740555800.93054, 345743482930.37225, 345745318445.8701, 345747364266.7388, 345748199698.7829, 345759253907.8989, 345759655418.7085, 345779606318.71185, 345779979770.0903, 345786230058.5762, 345786429129.5781, 345790809590.4027, 345791229167.9487, 345793851340.4242, 345795371327.0142, 345796510640.7594, 345796909688.9409, 345815456499.813, 345816780467.8529, 345820839626.2278, 345821811353.9339, 345846196455.533, 345846363908.4071, 345848891061.76996, 345851529033.1018, 345875187135.58374, 345875818979.02795, 345878437953.3171, 345879077215.40515, 345879811093.0504, 345880814655.15076, 345886288236.3408, 345887268059.5016, 345906857427.37604, 345908206045.52094, 345910499433.3202, 345911851448.19653, 345933280909.22253, 345933400077.79224, 345940712515.52356, 345940883840.20654, 345944315567.5973, 345944571806.37537, 345955343292.48267, 345956631924.17505, 345957401795.71826, 345958148725.9875, 345972934175.6775, 345973773742.13513, 345987853018.8542, 345988457988.1124, 345989645900.00073, 345989985055.6981, 345998674450.33246, 345999627962.53174, 346003323325.8004, 346003648596.7447, 346006036234.22955, 346006165732.2074, 346006844085.51373, 346007506397.7945, 346008650760.6033, 346008772773.33673, 346016413089.0674, 346016711215.9125, 346036069155.8294, 346036878544.0526, 346038921467.84607, 346039680608.43726, 346045513902.60175, 346045999556.8666, 346048961506.84235, 346049320315.3884, 346056882207.8563, 346057763675.1786, 346100795788.3517, 346101207758.32007, 346106558275.3728, 346106952004.9186, 346114941307.3601, 346116074588.4697, 346132243397.77606, 346132303820.1632, 346143090023.112, 346143866178.10974, 346144545134.39136, 346144850246.80237, 346161168522.7199, 346161972816.4523, 346162469913.5859, 346163226310.8681, 346176352710.802, 346176635730.02905, 346187142520.1084, 346187673560.036, 346193946980.0117, 346194246619.89453, 346204859442.86456, 346205478674.45807, 346208302958.04663, 346208605159.3253, 346219751379.4252, 346219889080.1395, 346239423093.324, 346239558511.1312, 346246557972.29974, 346247365910.2645, 346264801814.3817, 346265281909.90173, 346278653830.8563, 346279953005.0532, 346294927813.84326, 346296681613.1803, 346297500514.37463, 346297663693.8751, 346303928549.53577, 346304129683.79443, 346309652379.454, 346309874620.11414, 346333242582.48, 346333888494.4271, 346341690390.8572, 346342141683.3914, 346342719710.7469, 346343577342.36804, 346356482894.51794, 346357637121.01294, 346360111605.4333, 346361231461.10345, 346363229768.062, 346364077364.43604, 346376041017.0574, 346376392201.99194, 346385055866.573, 346385797382.9862, 346410685103.3512, 346410997818.9018, 346424719881.34326, 346425171422.65204, 346443772509.1619, 346445151270.47906, 346460173162.5984, 346460572838.4331, 346466327733.0332, 346468610053.98785, 346470863480.9615, 346471862143.0872, 346477565676.5935, 346477792242.2879, 346486640675.91235, 346487139843.61743, 346490355074.05707, 346491322315.51575, 346494501714.6787, 346494804933.1918, 346498224212.49304, 346498330963.9605, 346515182363.1898, 346515273631.1229, 346515424012.38696, 346516163340.87006, 346528987526.36914, 346530160115.62115, 346534870666.74133, 346534926037.2466, 346536608052.50745, 346538436437.59143, 346539189520.24713, 346539465475.35474, 346540567091.8325, 346541163782.2268, 346553551612.7628, 346554621219.12463, 346560067461.33325, 346560712697.14294, 346587010808.1162, 346587584305.297, 346590249180.731, 346590418880.65796, 346591997758.96344, 346592110317.3003, 346598664071.17053, 346599023295.5254, 346610767161.58923, 346612199241.10474, 346618749370.1289, 346619567397.4525, 346641708085.80396, 346642961374.47894, 346651450630.9234, 346651950037.0905, 346657469846.11566, 346657823838.8627, 346666261462.2085, 346668037369.7156, 346679477368.6625, 346680220944.13385, 346683797480.8392, 346684418464.90106, 346710061561.5226, 346710137841.703, 346737039913.6015, 346738187375.5746, 346743159063.46185, 346743639044.2102, 346755059370.48206, 346756163762.25214, 346762060398.5458, 346762410399.37524, 346764170899.81366, 346764871116.7616, 346778368705.30725, 346778786285.5498, 346787067547.50525, 346788286456.8989, 346804730450.07916, 346805765509.8585, 346823570492.18054, 346823844303.6386, 346826634294.12335, 346827963964.2482, 346837429182.6479, 346838127093.7227, 346846468702.66296, 346847200955.43604, 346860725122.71326, 346860836360.85474, 346861722630.3297, 346861941229.2837, 346862555487.54, 346863239934.99524, 346864225471.15436, 346865734278.46716, 346866478887.1224, 346866776948.8251, 346868445215.3093, 346869409332.43384, 346873092826.2954, 346873465828.32916, 346882401374.2047, 346882971751.8849, 346899945989.7055, 346900508055.9155, 346905564621.9336, 346906159348.8395, 346910644720.82935, 346911541808.46436, 346917675205.44867, 346918044818.857, 346920414442.9566, 346921061119.3961, 346930477329.26044, 346931043072.83966, 346932858137.1307, 346933013319.30133, 346938324836.3749, 346939029588.90106, 346958124848.62177, 346958573115.52234, 346962243342.3185, 346962736380.5017, 346978375831.1121, 346979048849.7959, 346983455363.9717, 346984243660.85156, 346985555799.32635, 346987565004.8551, 347000652725.5811, 347002164338.7437, 347007960212.8082, 347008314658.70575, 347010773263.7551, 347011880197.3865, 347025805897.93896, 347026350552.42285, 347061756527.17456, 347062194581.61694, 347071530809.3014, 347072305431.09607, 347082464838.7152, 347082823907.2609, 347095984406.0777, 347096787324.42224, 347103804785.3711, 347105355471.9836, 347114009493.83057, 347114743074.411, 347133454683.7748, 347134043033.08813, 347167067736.38904, 347167481877.56586, 347171163719.9243, 347171560755.5737, 347172004096.0609, 347172873659.7925, 347183031111.35254, 347183723510.91986, 347188729534.08984, 347189771246.3404, 347190418625.4717, 347191186601.4734, 347195459471.5365, 347196045129.2099, 347212915722.77155, 347213302161.0152, 347214448529.79144, 347214683043.5641, 347215142741.34674, 347215655048.2942, 347224161800.4535, 347225223303.5853, 347236873593.50916, 347237372532.2617, 347252409671.0078, 347253650716.3069, 347263183693.15063, 347264737522.15784, 347298281913.4227, 347298387382.9905, 347310180312.5568, 347310585282.01276, 347313310248.2761, 347313662752.244, 347322768265.6714, 347323490276.9583, 347344033198.4481, 347345683116.8834, 347358927372.4328, 347359152227.6489, 347376121060.316, 347376234518.4942, 347379128771.0237, 347379627467.1103, 347416209796.93726, 347416735664.6204, 347418433830.8079, 347419236525.1001, 347420105555.77295, 347420215076.8221, 347427604819.8537, 347428412359.55664, 347429363370.0885, 347429827289.345, 347451552800.1503, 347452719491.93896, 347465515780.3248, 347466254866.75116, 347467257904.9595, 347467779735.43524, 347469693856.14453, 347470266254.0663, 347470818556.6903, 347471458450.8486, 347477393615.6067, 347478606806.27246, 347492906601.37024, 347494684226.09125, 347499608337.1317, 347500458032.8069, 347504648468.3229, 347505083753.5718, 347535703789.0104, 347537036827.54724, 347555142874.0675, 347555409265.57764, 347559854406.4355, 347561254221.06494, 347580643808.8279, 347580903940.2263, 347581691081.7815, 347582432395.7645, 347595434056.692, 347596280235.85925, 347597625544.1035, 347598744428.2886, 347600034949.063, 347600572878.27966, 347608098685.5056, 347609833757.27106, 347633442128.25885, 347634249832.58453, 347648113355.97784, 347648926284.8904, 347658676732.901, 347659415206.765, 347676898217.84607, 347680525954.96387, 347683722024.2023, 347684731584.2047, 347700469443.63257, 347701004715.0788, 347718115755.3372, 347720140328.3725, 347747263294.05493, 347747982576.55566, 347748416155.45447, 347748882565.40234, 347754622483.5038, 347755300128.01294, 347765520234.53986, 347766623932.3334, 347768069517.14545, 347769627250.71533, 347791239974.28955, 347792643380.40125, 347810370892.685, 347811418066.683, 347812114810.0672, 347812350892.7777, 347818277357.0293, 347818713833.6874, 347829754892.9186, 347830924971.73706, 347843224951.4665, 347846097730.067, 347850752499.55164, 347851921621.70557, 347854136314.7999, 347854360900.87585, 347863125105.8463, 347863654462.2842, 347878089491.2617, 347878348779.05396, 347894042813.17395, 347894471109.78326, 347917294950.8202, 347918294282.07825, 347925451362.1911, 347926347442.29913, 347934668462.396, 347935294343.4101, 347936462961.3628, 347937364563.95844, 347937644557.92267, 347938056177.51807, 347947854626.3564, 347948294733.9844, 347948849604.05286, 347948879572.81384, 347960123132.3869, 347960937618.60114, 347961489333.42584, 347962235050.83203, 347965045577.7689, 347965788217.84094, 347979638624.94116, 347982804617.5056, 347998598426.0578, 347999593525.836, 348010376612.17126, 348010485415.3607, 348013019029.1798, 348013752130.58856, 348042730205.157, 348043286475.6328, 348049012396.13544, 348049663218.8133, 348060012913.25714, 348060558803.5248, 348066085956.4519, 348066517238.8828, 348079607420.3727, 348080937777.10974, 348083615376.40295, 348085955464.2239, 348092565596.44653, 348092603962.68896, 348115673927.91766, 348116046986.0793, 348174523931.6, 348175126662.41785, 348179207710.9663, 348180009868.8074, 348185073214.2676, 348186394870.29645, 348200115738.90906, 348200838203.37476, 348208451660.86816, 348209118615.5721, 348212440019.06256, 348213158051.30676, 348227264646.5786, 348227973733.4369, 348235565076.7829, 348237320387.2272, 348265980130.86176, 348266719398.3532, 348292407753.5448, 348292578107.9018, 348303919992.80414, 348304557431.4217, 348310133014.68585, 348312512961.01575, 348326645451.79, 348327127604.9479, 348332373659.82996, 348334525431.42236, 348351562780.3982, 348352009723.5978, 348355594309.4435, 348355976046.90796, 348360681513.0985, 348360991638.3489, 348376360426.2387, 348377589176.26636, 348398696748.0935, 348399816090.0846, 348409080720.5537, 348410939765.09985, 348428600383.75696, 348429971794.5737, 348441701415.7626, 348441772561.8583, 348475648359.1971, 348476711625.23, 348478679964.8385, 348480236632.0818, 348519898478.67786, 348521658252.49335, 348534103293.6637, 348534705947.3547, 348537199373.1771, 348540717871.4175, 348544292246.65857, 348544795794.6591, 348585800562.32776, 348587040843.19885, 348590959063.15625, 348591888966.08185, 348593956097.1282, 348595456029.26276, 348616941610.2025, 348617920088.916, 348624594961.5908, 348625252938.26624, 348634195200.1507, 348636157644.88043, 348645218761.3501, 348646560051.5595, 348651603306.2, 348652056352.8392, 348668160598.5292, 348668955210.14795, 348672163654.4429, 348672701551.0741, 348676204887.9183, 348676939481.81506, 348693926026.3446, 348694234393.8009, 348702360350.46594, 348702909511.03705, 348710833754.46594, 348711173121.1443, 348721692660.7306, 348722625684.20447, 348740717325.3509, 348741322616.7698, 348744426621.0249, 348747203794.59204, 348753012580.2459, 348754807684.8959, 348758683866.22974, 348759727039.71423, 348761895623.4557, 348763049947.6595, 348774399316.95795, 348775234874.5579, 348781490098.6481, 348784636271.09106, 348816747711.37634, 348817969147.43823, 348874088578.0334, 348875643558.3126, 348882652208.81335, 348885449817.98517, 348897705395.348, 348898478059.66943, 348929170530.0256, 348929597612.61725, 348942014153.7472, 348942742652.0262, 348951251481.1602, 348952457993.2798, 348956040933.3306, 348957173507.0249, 348968562396.59796, 348968891296.48517, 349005289783.6537, 349005703469.6097, 349031440617.0559, 349034907343.4757, 349038572237.07056, 349038691525.5895, 349039594441.7905, 349039754204.3097, 349053609202.4387, 349053911814.5408, 349069328104.1559, 349070035724.8635, 349071752536.5477, 349072922040.0985, 349087344332.5445, 349087706545.8087, 349101989501.615, 349102619370.91797, 349155989876.8189, 349157133969.1042, 349172618058.60925, 349173731926.3228, 349210028822.4078, 349210805881.4823, 349223350231.70667, 349224276472.1619, 349225939946.4239, 349226491727.6568, 349226905518.12683, 349227329474.2936, 349249403637.3948, 349250273867.9761, 349271782198.2281, 349273008090.2847, 349273905166.62695, 349274157027.9065, 349277608174.32684, 349279038875.87024, 349281357770.5522, 349282330868.5141, 349295238529.3316, 349295898943.73035, 349297711803.5611, 349298568248.2971, 349304610878.94116, 349306404105.9673, 349316392665.65356, 349317017698.5818, 349319296706.2739, 349320641165.63104, 349325360598.6136, 349326576118.9834, 349337738857.7047, 349338542190.7373, 349341180812.1776, 349342887598.2704, 349345989923.5437, 349347637270.04626, 349355583154.36743, 349356906251.506, 349362806332.59875, 349363193776.97034, 349383512497.91376, 349384151871.31647, 349400274876.9574, 349400617666.2042, 349405666694.5552, 349406426940.9241, 349407501013.9538, 349408804962.8745, 349425974017.6183, 349427449030.8696, 349437006197.6476, 349438043404.67, 349464630519.4765, 349464875709.98956, 349472020304.8728, 349473544114.2474, 349484254189.7395, 349485316462.73145, 349504104301.03174, 349504722670.39026, 349505315425.1231, 349505738867.0747, 349512646182.1798, 349513179669.5736, 349543886960.10474, 349544459358.1861, 349614768713.7687, 349615642256.56964, 349630138410.3687, 349631446341.4195, 349654070499.8716, 349656152519.6476, 349658441631.755, 349658924971.9919, 349660775384.9539, 349662889039.20374, 349670816088.0083, 349671764752.5537, 349683648200.8154, 349683983665.572, 349695289821.0144, 349695791402.4723, 349709141224.4689, 349710438932.54645, 349715348024.3152, 349716726015.6481, 349723298597.9321, 349724698388.40796, 349737820219.3567, 349739768485.205, 349747227497.015, 349748492064.8555, 349758294411.1654, 349758621345.8037, 349763227428.1371, 349764473358.2611, 349795817025.1604, 349798083024.8827, 349811965195.5513, 349813087261.6772, 349890359817.5161, 349891337335.21783, 349899868938.7905, 349901891050.92645, 349956350884.68396, 349957855077.27905, 349989905752.8753, 349990213495.9293, 350013324526.0222, 350014480554.1847, 350019579323.09875, 350020486174.2108, 350023186933.22107, 350024382523.29297, 350037412563.1448, 350038943129.40106, 350065805964.5415, 350066421457.60126, 350087878216.8125, 350089898004.4906, 350094300282.6047, 350094715307.3253, 350097142947.76733, 350099355956.1081, 350185200403.8608, 350185324691.163, 350194325414.993, 350195594626.0012, 350207178705.38416, 350207757978.83044, 350240163735.96265, 350240449383.29407, 350246117434.8224, 350246648124.0895, 350253019602.9825, 350253981836.5762, 350267056164.0267, 350267307826.2543, 350282006182.62317, 350282645277.7245, 350296223271.01196, 350297889284.3178, 350301241829.2891, 350301430929.309, 350355020061.716, 350357847767.47394, 350385663004.1786, 350386446536.2583, 350388783258.08044, 350389295620.92993, 350409956378.13257, 350411618457.0294, 350419094040.5271, 350419992971.94867, 350434735231.79285, 350435413229.3598, 350438956415.3887, 350439368667.43207, 350458365880.72156, 350460112825.5051, 350508308589.4493, 350510587390.4762, 350556851011.34143, 350557268270.87885, 350560439552.1291, 350561231424.5881, 350561796483.0691, 350562437717.8517, 350581830788.35645, 350583444178.27026, 350669555075.77905, 350670136634.66675, 350708876643.31934, 350709498543.0933, 350720152428.6018, 350720712470.79626, 350748893462.548, 350749777095.657, 350757128142.542, 350758673085.77576, 350789938629.303, 350793892548.4499, 350800492899.25836, 350801162510.874, 350807505228.8388, 350809922198.31506, 350811604721.07477, 350812059872.84265, 350832233584.8318, 350834180648.8706, 350835099274.8179, 350836500406.41205, 350844498048.74725, 350845657812.3375, 350878576977.7693, 350879895129.3684, 350884605638.31683, 350886438701.1621, 350911122164.8446, 350911989561.56793, 350960774709.37427, 350961186600.957, 350994598527.0576, 350995593768.0405, 351012735607.3947, 351013005326.3208, 351034006227.0846, 351035960408.7537, 351045598901.6315, 351046266360.64777, 351101644969.5193, 351103093973.99963, 351106696839.6328, 351107263581.31885, 351118304663.417, 351119399842.8264, 351162846868.9409, 351163324916.11786, 351170426905.5084, 351171288129.0453, 351210470012.2506, 351211781485.3635, 351260506063.7219, 351263406422.93726, 351296870609.01917, 351297035098.5755, 351312884679.53357, 351313389326.4695, 351329887728.7981, 351330417300.2282, 351333071384.53174, 351333791671.46265, 351375174877.2355, 351377358588.6929, 351385560102.81006, 351387870944.9054, 351409982871.7811, 351411139450.19714, 351424268585.50824, 351424591999.08545, 351428455517.0849, 351430616072.5815, 351438165618.3057, 351440711049.54565, 351445257070.64594, 351446167527.15936, 351466461824.4405, 351467963304.9291, 351471999598.57446, 351472812260.96906, 351490088738.2883, 351492019157.52185, 351493269100.4918, 351493431507.5868, 351551010932.2938, 351553384758.3202, 351559247267.09064, 351560497692.3094, 351596356393.0719, 351596690629.8111, 351632566890.12994, 351632789128.5985, 351639999374.6805, 351640892688.12476, 351643173898.40436, 351645639899.11, 351647479918.6142, 351648894438.0043, 351675532864.0012, 351675592514.1262, 351683807693.3711, 351686316789.79553, 351688082476.3176, 351690264662.56384, 351752851843.3865, 351756953700.1429, 351770806911.23083, 351772228728.5098, 351845673405.7766, 351846164411.24915, 351867151492.39056, 351871262385.1474, 351881859402.1782, 351882250413.40234, 351974297361.2198, 351977592289.0764, 351981114384.73816, 351982982796.8672, 351997284062.58496, 351998037738.8901, 352015150273.0452, 352016894014.4849, 352031273246.65796, 352031476645.7218, 352091343685.3385, 352091942410.70575, 352097583518.0519, 352099055266.5032, 352112022594.8613, 352112789759.5281, 352141499921.1238, 352141758295.40857, 352150390040.1531, 352151709720.46954, 352156375365.303, 352156784723.2165, 352182084429.62463, 352183760081.4436, 352254953352.1018, 352255961751.7567, 352301013547.1074, 352301982464.12805, 352349637732.3386, 352350473643.35913, 352372317853.75165, 352377157355.08636, 352390303434.83325, 352391102332.85754, 352418141050.9324, 352421302471.8691, 352426960219.7068, 352427622160.8082, 352533700545.1771, 352535041584.5609, 352580715477.0686, 352580927440.1842, 352581370089.3335, 352582270760.4223, 352583934224.20984, 352585345492.79736, 352606628057.3795, 352608842977.45795, 352616903879.02686, 352617823992.8313, 352659428986.9313, 352659803666.3905, 352665840367.8357, 352666848304.6477, 352672179646.90314, 352673441764.0277, 352680628212.833, 352683528217.1786, 352688690806.87604, 352689699305.7682, 352703252668.261, 352704276158.0346, 352712482926.4719, 352713930103.58, 352754448109.4315, 352755719313.9652, 352758323222.06287, 352761268679.1944, 352766004909.5232, 352767037521.21173, 352772369202.9753, 352776503574.1079, 352779237132.26855, 352780581440.709, 352785204070.4169, 352787028243.9496, 352788545430.19086, 352789874427.6703, 352814374294.18835, 352816722844.2904, 352831646480.87134, 352833966676.29297, 352853497839.0083, 352855572567.31555, 352892579504.64014, 352895109977.8828, 352899502753.719, 352900194052.4962, 352903436328.60046, 352906389321.5666, 352923132732.9397, 352925169581.53644, 352952185495.5145, 352955650293.88336, 352964232735.75903, 352964629881.5419, 352996144295.1307, 352997647730.0088, 353071758308.7225, 353074475873.1615, 353105448171.1719, 353106472106.199, 353119679643.6408, 353121777572.05304, 353125547700.2716, 353129280813.8296, 353152294271.744, 353154283884.7761, 353182537344.5265, 353183544114.89465, 353195817646.02954, 353196364675.51465, 353198498593.5364, 353201834463.22705, 353207447191.76624, 353212596101.9728, 353235330929.9879, 353237708943.4271, 353239480211.8364, 353240730647.4575, 353250384868.3165, 353250575319.0597, 353333759246.5641, 353335407643.8086, 353525858877.6873, 353531771417.4097, 353561769915.911, 353564181513.6653, 353678609994.74286, 353679335243.14874, 353691458692.4584, 353694623002.9812, 353697072716.6334, 353699154420.90424, 353755798341.671, 353757270744.89325, 353779241482.3561, 353782959341.9628, 353800537783.16156, 353804928393.70557, 353827847599.3716, 353833198988.3823, 353870200177.4531, 353870917519.6354, 353889819328.6084, 353894351302.8601, 353907029385.95844, 353908485538.33655, 353944235785.5842, 353948883176.5532, 353964137453.0333, 353969592363.64905, 354002713033.2494, 354005194637.7778, 354036603812.8148, 354037663251.9032, 354065063049.6039, 354067318463.78687, 354083035448.6019, 354085850912.24744, 354096089784.5491, 354097540372.2538, 354259874358.67444, 354261261019.0632, 354269529811.0763, 354271531023.11304, 354275852067.8357, 354277112131.24396, 354354973633.8953, 354356125849.2378, 354363318354.2976, 354365459036.7529, 354397213946.6899, 354398360828.8068, 354399456020.1509, 354400783055.80615, 354489120388.16156, 354491233252.8835, 354531701320.9669, 354531957110.2, 354532654320.91003, 354536294093.9863, 354614599214.62744, 354619419004.5822, 354622870563.733, 354624377365.0874, 354718698987.29956, 354719768910.26904, 354740052090.4182, 354742871351.50006, 354756976194.1854, 354758967419.6766, 354780279873.6494, 354781676716.27356, 354803837582.7103, 354807422076.79553, 354907643522.7916, 354910988942.7904, 354917300492.2939, 354923594591.51917, 354970584248.86224, 354972011522.9135, 354986881654.93634, 354988342668.86597, 355150754894.49133, 355151339809.31384, 355165333408.4785, 355167784502.95447, 355220128891.04626, 355224633771.9377, 355251957459.5688, 355254223530.04614, 355338336188.4637, 355339136672.50085, 355398945383.6305, 355400048659.4084, 355435309471.1005, 355443239693.0924, 355472259773.02655, 355479857815.746, 355490104976.3739, 355491354601.2902, 355495343716.0656, 355497966565.9685, 355531658697.7584, 355532379966.1681, 355597259637.3187, 355605698456.0044, 355786814140.7041, 355788936123.336, 355845087288.3253, 355851161475.35034, 355920423988.7531, 355925677958.268, 355944462057.8932, 355946342968.6403, 356008438575.03986, 356008970786.2395, 356121254236.3459, 356122080917.05176, 356241136195.7494, 356245119709.51013, 356339472602.1377, 356342087350.1804, 356463857519.9302, 356471622804.1913, 356525925660.48303, 356529393883.44116, 356558653831.12317, 356560530612.27625, 356630215631.77747, 356631117259.83496, 356663825064.14307, 356667269471.22986, 356683888305.9469, 356684864892.2042, 356748449965.8209, 356753726886.0698, 356798216217.792, 356806594629.8893, 356865199100.2927, 356867268045.68506, 356876119508.0682, 356877062838.56946, 356931675294.13904, 356939825945.4821, 357026707398.50806, 357027922682.4734, 357088816293.1915, 357091068585.99976, 357093890045.3456, 357095795065.2588, 357177910200.3435, 357179629080.5925, 357350700222.0048, 357351959839.4482, 357370790955.96106, 357372055964.4573, 357405634686.7062, 357412244648.06604, 357417133116.6101, 357417173460.85, 357625784066.1292, 357626765698.7999, 357685555639.4939, 357692791312.4834, 357709514098.1938, 357713846195.9686, 357715116743.9344, 357724243470.51984, 357742507718.48486, 357744448491.39075, 357747418235.1282, 357749050384.14795, 357777676266.6278, 357781809967.0006, 357799779233.2908, 357804029382.47125, 357887528046.0314, 357888325141.5438, 358023634934.6804, 358026525003.3423, 358035146790.1537, 358043709456.54126, 358158924475.82434, 358165973966.4257, 358256144890.5181, 358259219580.2887, 358355485668.42676, 358356708769.04926, 358364109092.3468, 358372195326.5461, 358394011490.144, 358395777348.7145, 358406468655.2423, 358410433208.27185, 358462992241.6853, 358466551374.8268, 358571011470.46423, 358578111352.5853, 358694381256.8038, 358705023749.3758, 358708155045.567, 358710978956.02844, 358859188194.0729, 358863267434.58295, 358874559472.9011, 358878741821.5886, 358899110148.62604, 358899158335.446, 358932654293.8469, 358939080464.6811, 359142435770.78265, 359142825620.49146, 359183815387.75037, 359192994380.90894, 359249066786.77625, 359257052543.8342, 359264603773.7147, 359266858325.50745, 359292020593.35315, 359293926754.8311, 359309820202.8996, 359322740148.222, 359804051043.42505, 359805943544.4668, 359856345019.15674, 359858491146.6489, 359871367397.74146, 359877061891.0386, 360060246151.99176, 360070043046.2849, 360308034524.499, 360313353459.4751, 360465569068.4655, 360471920124.9084, 360508890740.5187, 360514110192.4118, 360717869494.76605, 360725312013.8578, 360878375712.1993, 360887490713.81396, 361050752638.88086, 361059751168.98206, 361495803442.16516, 361511489675.32135, 361536258434.853, 361544356037.49835, 361562825569.5165, 361582147996.19934, 361604799063.85144, 361615437631.3547, 361641222093.4508, 361643033874.60315, 361756691386.1672, 361764088635.74585, 361841878335.7844, 361844782879.96436, 361877034404.88544, 361890148827.5521, 361901485864.5024, 361908272387.6967, 361972221299.47754, 361984326708.2927, 362101393148.9031, 362108402281.29395, 362235599148.40027, 362253261794.0765, 362963459302.9279, 362981534581.6498, 363311953520.4079, 363335616045.47, 363548401098.7987, 363572968536.6108, 363648338973.67004, 363663182205.1721, 363777449309.92535, 363803984384.1691, 364401620312.7333, 364406328715.43335, 364534465149.475, 364567938716.20996, 364600034383.204, 364610583843.4003, 365144625334.42944, 365149413087.2215, 365356813975.0697, 365389096442.01886, 366111281977.7727, 366138477375.5285, 367825703659.9105, 367852451442.1874, 371176645536.6894, 371206011544.2025, 373329582524.6304, 373402515533.43274])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)
    start_label = 1
    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = (numers[indys] + start_label) % 2
        outputs[defaultindys]=0
        return outputs
    return thresh_search(energys)

numthresholds = 4050



# Main method
model_cap = numthresholds


def Validate(file):
    #Load Array
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs, cleanarr[:, -1]


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    cleanarr = cleanarr.reshape(cleanarr.shape[0], -1)
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in (['"' + i + '"' if ',' in i else i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        classifier_type = 'DT'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)



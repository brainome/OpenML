#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f NN -target Class splice.csv -o splice_NN.py -nsamples 0 --yes -nsamples 0 -e 20
# Total compiler execution time: 0:27:51.48. Finished on: Sep-04-2020 12:32:50.
# This source code requires Python 3.
#
"""
Classifier Type:                     Neural Network
System Type:                         3-way classifier
Training/Validation Split:           50:50%
Best-guess accuracy:                 51.88%
Training accuracy:                   88.77% (1416/1595 correct)
Validation accuracy:                 87.46% (1395/1595 correct)
Overall Model accuracy:              88.11% (2811/3190 correct)
Overall Improvement over best guess: 36.23% (of possible 48.12%)
Model capacity (MEC):                198 bits
Generalization ratio:                14.19 bits/bit
Model efficiency:                    0.18%/parameter
Confusion Matrix:
 [20.85% 2.04% 1.16%]
 [2.76% 20.82% 0.50%]
 [2.04% 3.39% 46.46%]
Overfitting:                         No
Note: Labels have been remapped to 'EI'=0, 'IE'=1, 'N'=2.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "splice.csv"


#Number of output logits
num_output_logits = 3

#Number of attributes
num_attr = 61
n_classes = 3

mappings = [{1219459.0: 0, 1551669.0: 1, 4056121.0: 2, 8714010.0: 3, 8851309.0: 4, 10866144.0: 5, 12579471.0: 6, 13270691.0: 7, 29159697.0: 8, 31010850.0: 9, 31769112.0: 10, 33135129.0: 11, 34876800.0: 12, 35832900.0: 13, 37961477.0: 14, 50376989.0: 15, 51978854.0: 16, 56693493.0: 17, 59092540.0: 18, 59837694.0: 19, 61653816.0: 20, 62066735.0: 21, 62563018.0: 22, 65939202.0: 23, 66063406.0: 24, 68160168.0: 25, 71061196.0: 26, 73018164.0: 27, 82216465.0: 28, 85199050.0: 29, 87748697.0: 30, 88398452.0: 31, 88427942.0: 32, 89217012.0: 33, 92678534.0: 34, 93579019.0: 35, 94218273.0: 36, 96477420.0: 37, 101256952.0: 38, 103765040.0: 39, 106256710.0: 40, 111351524.0: 41, 112984686.0: 42, 113037960.0: 43, 115291216.0: 44, 118772249.0: 45, 119587635.0: 46, 119898541.0: 47, 120868069.0: 48, 121459395.0: 49, 125922540.0: 50, 130517458.0: 51, 134357699.0: 52, 137723485.0: 53, 139254339.0: 54, 145297478.0: 55, 148975799.0: 56, 149166850.0: 57, 150004856.0: 58, 161090643.0: 59, 168838419.0: 60, 169621025.0: 61, 171008830.0: 62, 171281943.0: 63, 172974468.0: 64, 173247480.0: 65, 174567487.0: 66, 177932788.0: 67, 178233574.0: 68, 183048332.0: 69, 185548645.0: 70, 188587501.0: 71, 194399028.0: 72, 208977336.0: 73, 210315482.0: 74, 212592800.0: 75, 217052665.0: 76, 218259306.0: 77, 222133761.0: 78, 223058243.0: 79, 224011102.0: 80, 225222771.0: 81, 225292773.0: 82, 225307313.0: 83, 232197781.0: 84, 232403497.0: 85, 233156205.0: 86, 236522140.0: 87, 239980370.0: 88, 241670237.0: 89, 245274522.0: 90, 245798864.0: 91, 245977796.0: 92, 247819695.0: 93, 253132013.0: 94, 254059667.0: 95, 255648767.0: 96, 257087548.0: 97, 257154697.0: 98, 258049822.0: 99, 258427033.0: 100, 261783584.0: 101, 265656631.0: 102, 273510182.0: 103, 273526529.0: 104, 275235223.0: 105, 275964228.0: 106, 280549619.0: 107, 281053180.0: 108, 281396901.0: 109, 284482596.0: 110, 287658107.0: 111, 297718435.0: 112, 300055153.0: 113, 301501859.0: 114, 305870954.0: 115, 306694859.0: 116, 307638591.0: 117, 309658657.0: 118, 309717596.0: 119, 313151518.0: 120, 319808209.0: 121, 319811537.0: 122, 320561013.0: 123, 323318401.0: 124, 324655572.0: 125, 334037991.0: 126, 339167530.0: 127, 343046854.0: 128, 343572430.0: 129, 344176820.0: 130, 346272212.0: 131, 346910841.0: 132, 348821998.0: 133, 349710063.0: 134, 351028743.0: 135, 351727673.0: 136, 358751002.0: 137, 363148322.0: 138, 363557694.0: 139, 364374392.0: 140, 364475726.0: 141, 367393541.0: 142, 368047887.0: 143, 368342491.0: 144, 368577724.0: 145, 368707565.0: 146, 370734934.0: 147, 373344352.0: 148, 382340050.0: 149, 393750611.0: 150, 396370106.0: 151, 404410236.0: 152, 406355219.0: 153, 406732925.0: 154, 409126732.0: 155, 410444214.0: 156, 413267009.0: 157, 415046217.0: 158, 415250255.0: 159, 417101792.0: 160, 421095003.0: 161, 424645943.0: 162, 431711908.0: 163, 432721751.0: 164, 432767913.0: 165, 434988638.0: 166, 436097245.0: 167, 437723969.0: 168, 446771799.0: 169, 452766232.0: 170, 453947274.0: 171, 459098996.0: 172, 466771271.0: 173, 467869326.0: 174, 470238787.0: 175, 474555253.0: 176, 476635978.0: 177, 479233711.0: 178, 480400072.0: 179, 484996554.0: 180, 485185488.0: 181, 486706246.0: 182, 487777979.0: 183, 488398712.0: 184, 488573510.0: 185, 491487640.0: 186, 493757301.0: 187, 497315354.0: 188, 500507399.0: 189, 507789813.0: 190, 509895873.0: 191, 513108873.0: 192, 515195428.0: 193, 516850952.0: 194, 518979325.0: 195, 519110609.0: 196, 525034919.0: 197, 527468482.0: 198, 528520000.0: 199, 528575537.0: 200, 536323738.0: 201, 536825926.0: 202, 538128689.0: 203, 538738106.0: 204, 539332832.0: 205, 542168690.0: 206, 544701695.0: 207, 547173199.0: 208, 548478888.0: 209, 549507834.0: 210, 550302685.0: 211, 550771184.0: 212, 552074316.0: 213, 556436945.0: 214, 557294468.0: 215, 558024553.0: 216, 561465071.0: 217, 564186110.0: 218, 568202461.0: 219, 569309021.0: 220, 575707041.0: 221, 575784575.0: 222, 577918809.0: 223, 578106490.0: 224, 579842547.0: 225, 582632957.0: 226, 584106758.0: 227, 584203214.0: 228, 585166967.0: 229, 587386333.0: 230, 591024735.0: 231, 591077600.0: 232, 592738598.0: 233, 596571051.0: 234, 597360678.0: 235, 601478542.0: 236, 607277515.0: 237, 613221746.0: 238, 615305904.0: 239, 619430102.0: 240, 624224952.0: 241, 628210658.0: 242, 630681585.0: 243, 632421694.0: 244, 633024798.0: 245, 633648585.0: 246, 638703178.0: 247, 641556627.0: 248, 644638926.0: 249, 644915570.0: 250, 647263609.0: 251, 648445638.0: 252, 652126706.0: 253, 658458820.0: 254, 659654546.0: 255, 665351265.0: 256, 667252785.0: 257, 672128824.0: 258, 673957994.0: 259, 674225459.0: 260, 678974673.0: 261, 679122739.0: 262, 679279659.0: 263, 679741961.0: 264, 679879448.0: 265, 684395779.0: 266, 684731872.0: 267, 689224359.0: 268, 690246282.0: 269, 690626977.0: 270, 696621994.0: 271, 701902469.0: 272, 702459053.0: 273, 703915380.0: 274, 704933684.0: 275, 706003925.0: 276, 710254511.0: 277, 711947691.0: 278, 713558633.0: 279, 713949105.0: 280, 718721584.0: 281, 727719997.0: 282, 729348200.0: 283, 732366348.0: 284, 735483832.0: 285, 742621371.0: 286, 744477138.0: 287, 745810024.0: 288, 747715959.0: 289, 748638226.0: 290, 750148714.0: 291, 754218978.0: 292, 758366641.0: 293, 765551334.0: 294, 766207016.0: 295, 767887627.0: 296, 769782594.0: 297, 774485293.0: 298, 778139412.0: 299, 780244196.0: 300, 780347094.0: 301, 789347488.0: 302, 790527207.0: 303, 791801159.0: 304, 792261456.0: 305, 794290445.0: 306, 800149010.0: 307, 802988924.0: 308, 810821374.0: 309, 813024526.0: 310, 814545386.0: 311, 818715269.0: 312, 821241576.0: 313, 823770167.0: 314, 825778938.0: 315, 833761275.0: 316, 835115908.0: 317, 835239323.0: 318, 837371900.0: 319, 840181305.0: 320, 842933806.0: 321, 854411522.0: 322, 856699340.0: 323, 858413109.0: 324, 859719613.0: 325, 860317540.0: 326, 870304055.0: 327, 871423074.0: 328, 873288069.0: 329, 874781958.0: 330, 877096625.0: 331, 884231271.0: 332, 884855631.0: 333, 890056546.0: 334, 898502942.0: 335, 899010720.0: 336, 903465539.0: 337, 907985587.0: 338, 909091171.0: 339, 909362256.0: 340, 909610869.0: 341, 911084522.0: 342, 913470152.0: 343, 916715858.0: 344, 921338283.0: 345, 921559633.0: 346, 922266359.0: 347, 926432704.0: 348, 928194355.0: 349, 928514878.0: 350, 929312631.0: 351, 931917596.0: 352, 935927328.0: 353, 939919422.0: 354, 947362667.0: 355, 950309304.0: 356, 953323405.0: 357, 954442306.0: 358, 963363055.0: 359, 966271885.0: 360, 967431502.0: 361, 968097401.0: 362, 969935491.0: 363, 972641218.0: 364, 975711634.0: 365, 979041155.0: 366, 981681245.0: 367, 987427042.0: 368, 989102210.0: 369, 989132335.0: 370, 993106897.0: 371, 997511912.0: 372, 997528404.0: 373, 1006162269.0: 374, 1006900847.0: 375, 1007880380.0: 376, 1008627046.0: 377, 1009048644.0: 378, 1012892883.0: 379, 1014963825.0: 380, 1017521545.0: 381, 1018337001.0: 382, 1020054788.0: 383, 1021294534.0: 384, 1024024583.0: 385, 1024723296.0: 386, 1029214195.0: 387, 1032481639.0: 388, 1033120650.0: 389, 1034264039.0: 390, 1034661305.0: 391, 1038406402.0: 392, 1046093282.0: 393, 1051587548.0: 394, 1051649252.0: 395, 1052333132.0: 396, 1060853865.0: 397, 1061150184.0: 398, 1067611036.0: 399, 1072789946.0: 400, 1074494356.0: 401, 1074985221.0: 402, 1080386184.0: 403, 1084253001.0: 404, 1084840846.0: 405, 1085437931.0: 406, 1087147218.0: 407, 1090567265.0: 408, 1090883523.0: 409, 1091610456.0: 410, 1095666341.0: 411, 1095840431.0: 412, 1097427201.0: 413, 1097748687.0: 414, 1099989747.0: 415, 1102460876.0: 416, 1103902807.0: 417, 1108536396.0: 418, 1110140332.0: 419, 1110341491.0: 420, 1111456757.0: 421, 1111889934.0: 422, 1112553007.0: 423, 1112686636.0: 424, 1116321950.0: 425, 1122617234.0: 426, 1122818385.0: 427, 1123243907.0: 428, 1126344642.0: 429, 1128280529.0: 430, 1133414979.0: 431, 1139310098.0: 432, 1143557745.0: 433, 1144860712.0: 434, 1154863844.0: 435, 1154981618.0: 436, 1166421002.0: 437, 1170326629.0: 438, 1171995390.0: 439, 1172795473.0: 440, 1172874632.0: 441, 1175930521.0: 442, 1177510996.0: 443, 1186270919.0: 444, 1190255947.0: 445, 1191447025.0: 446, 1192627968.0: 447, 1209223900.0: 448, 1214539892.0: 449, 1215486863.0: 450, 1223330201.0: 451, 1228003922.0: 452, 1230350054.0: 453, 1232307908.0: 454, 1233559323.0: 455, 1235436335.0: 456, 1236924235.0: 457, 1240258860.0: 458, 1244303704.0: 459, 1244411282.0: 460, 1248815459.0: 461, 1250710209.0: 462, 1254431591.0: 463, 1258580216.0: 464, 1262354824.0: 465, 1263918185.0: 466, 1264031064.0: 467, 1265770958.0: 468, 1268896889.0: 469, 1269112692.0: 470, 1269545436.0: 471, 1271963115.0: 472, 1272673109.0: 473, 1273173021.0: 474, 1274736700.0: 475, 1282538978.0: 476, 1284213883.0: 477, 1285238135.0: 478, 1289160958.0: 479, 1289881823.0: 480, 1290889545.0: 481, 1291076928.0: 482, 1294011579.0: 483, 1297604707.0: 484, 1298546199.0: 485, 1303622294.0: 486, 1307919314.0: 487, 1309620980.0: 488, 1309795987.0: 489, 1314178924.0: 490, 1316808546.0: 491, 1317049090.0: 492, 1321035438.0: 493, 1323655574.0: 494, 1324369535.0: 495, 1329542867.0: 496, 1338010897.0: 497, 1345074150.0: 498, 1345858822.0: 499, 1345975831.0: 500, 1354227250.0: 501, 1356230253.0: 502, 1356306127.0: 503, 1358768328.0: 504, 1358890497.0: 505, 1360523467.0: 506, 1361908295.0: 507, 1363894281.0: 508, 1369114783.0: 509, 1369195766.0: 510, 1371800613.0: 511, 1379147283.0: 512, 1379528870.0: 513, 1380153857.0: 514, 1385983850.0: 515, 1388341519.0: 516, 1391520217.0: 517, 1392138084.0: 518, 1394110321.0: 519, 1398871033.0: 520, 1401333834.0: 521, 1401575126.0: 522, 1401867734.0: 523, 1409483174.0: 524, 1414055973.0: 525, 1417808732.0: 526, 1418993220.0: 527, 1419254589.0: 528, 1420506391.0: 529, 1421394819.0: 530, 1422438665.0: 531, 1426048731.0: 532, 1430356371.0: 533, 1431423475.0: 534, 1432711222.0: 535, 1433197833.0: 536, 1434464872.0: 537, 1434724665.0: 538, 1438983077.0: 539, 1445305102.0: 540, 1452587111.0: 541, 1454622611.0: 542, 1459799277.0: 543, 1471662631.0: 544, 1472751035.0: 545, 1473869910.0: 546, 1477742404.0: 547, 1485503148.0: 548, 1487698235.0: 549, 1488900992.0: 550, 1490469649.0: 551, 1491889958.0: 552, 1497070669.0: 553, 1497559801.0: 554, 1498997605.0: 555, 1501319554.0: 556, 1501956503.0: 557, 1508271146.0: 558, 1510913683.0: 559, 1514207447.0: 560, 1517783665.0: 561, 1519405581.0: 562, 1520224875.0: 563, 1520776889.0: 564, 1524821454.0: 565, 1525241066.0: 566, 1527242397.0: 567, 1527348060.0: 568, 1534289586.0: 569, 1535363569.0: 570, 1538128627.0: 571, 1539523684.0: 572, 1541868940.0: 573, 1544169377.0: 574, 1554486154.0: 575, 1556193314.0: 576, 1559323133.0: 577, 1559795214.0: 578, 1560896918.0: 579, 1563249983.0: 580, 1564980517.0: 581, 1565127145.0: 582, 1565170613.0: 583, 1565535057.0: 584, 1565595223.0: 585, 1567402982.0: 586, 1567879885.0: 587, 1568051919.0: 588, 1572390003.0: 589, 1578167988.0: 590, 1590041586.0: 591, 1591329802.0: 592, 1598598070.0: 593, 1602192144.0: 594, 1602246068.0: 595, 1603300048.0: 596, 1603830722.0: 597, 1604318790.0: 598, 1606016022.0: 599, 1612757968.0: 600, 1613450240.0: 601, 1613968124.0: 602, 1620806069.0: 603, 1622032244.0: 604, 1622656285.0: 605, 1624937991.0: 606, 1625877817.0: 607, 1626994849.0: 608, 1628291420.0: 609, 1629971990.0: 610, 1632727675.0: 611, 1634699591.0: 612, 1635435365.0: 613, 1636754827.0: 614, 1637961552.0: 615, 1644752376.0: 616, 1644956744.0: 617, 1647206046.0: 618, 1648486179.0: 619, 1651363301.0: 620, 1652957289.0: 621, 1656729767.0: 622, 1656851640.0: 623, 1657588263.0: 624, 1661238097.0: 625, 1661507406.0: 626, 1662407695.0: 627, 1662993844.0: 628, 1663044282.0: 629, 1663673057.0: 630, 1667445192.0: 631, 1668472179.0: 632, 1668879034.0: 633, 1668925149.0: 634, 1673030865.0: 635, 1673107077.0: 636, 1673629450.0: 637, 1679257851.0: 638, 1679813733.0: 639, 1689699033.0: 640, 1690626272.0: 641, 1696952547.0: 642, 1700329362.0: 643, 1701350569.0: 644, 1702326319.0: 645, 1715952069.0: 646, 1716133116.0: 647, 1717425815.0: 648, 1718291633.0: 649, 1720240373.0: 650, 1726091273.0: 651, 1730055749.0: 652, 1734054260.0: 653, 1738987254.0: 654, 1740689189.0: 655, 1741723555.0: 656, 1745351874.0: 657, 1745576787.0: 658, 1748001976.0: 659, 1752788819.0: 660, 1753712848.0: 661, 1757053509.0: 662, 1759549249.0: 663, 1759794514.0: 664, 1774666504.0: 665, 1780591753.0: 666, 1781462799.0: 667, 1789074884.0: 668, 1789938783.0: 669, 1792891976.0: 670, 1794515473.0: 671, 1798537568.0: 672, 1811231024.0: 673, 1812258823.0: 674, 1815713368.0: 675, 1819834057.0: 676, 1825343120.0: 677, 1826520554.0: 678, 1834760822.0: 679, 1839104518.0: 680, 1842080230.0: 681, 1842309794.0: 682, 1844425400.0: 683, 1845898153.0: 684, 1848122018.0: 685, 1850844369.0: 686, 1858969792.0: 687, 1869313819.0: 688, 1872503552.0: 689, 1876582532.0: 690, 1876787791.0: 691, 1879653405.0: 692, 1883106314.0: 693, 1883478668.0: 694, 1886001056.0: 695, 1887413411.0: 696, 1902842929.0: 697, 1907422134.0: 698, 1911090532.0: 699, 1913914962.0: 700, 1922118355.0: 701, 1923950751.0: 702, 1925980449.0: 703, 1928036409.0: 704, 1931576499.0: 705, 1934858210.0: 706, 1937708951.0: 707, 1938124039.0: 708, 1941585302.0: 709, 1943852461.0: 710, 1944524353.0: 711, 1945648320.0: 712, 1948219595.0: 713, 1954883418.0: 714, 1956489128.0: 715, 1959211790.0: 716, 1970517471.0: 717, 1971954940.0: 718, 1971973682.0: 719, 1978176496.0: 720, 1978448040.0: 721, 1980716660.0: 722, 1984679515.0: 723, 1985413470.0: 724, 1986930965.0: 725, 1987423907.0: 726, 1989944597.0: 727, 1990869899.0: 728, 1996286236.0: 729, 2005458206.0: 730, 2009195954.0: 731, 2010907293.0: 732, 2013364320.0: 733, 2014832522.0: 734, 2017488541.0: 735, 2019828337.0: 736, 2022300740.0: 737, 2027449922.0: 738, 2032752539.0: 739, 2035098299.0: 740, 2037423680.0: 741, 2042774959.0: 742, 2049294606.0: 743, 2051031874.0: 744, 2051730168.0: 745, 2053109767.0: 746, 2055245600.0: 747, 2056322850.0: 748, 2057621507.0: 749, 2065719974.0: 750, 2069359155.0: 751, 2069362274.0: 752, 2070281269.0: 753, 2075400553.0: 754, 2076772779.0: 755, 2077023908.0: 756, 2092025742.0: 757, 2092310450.0: 758, 2095668886.0: 759, 2099845472.0: 760, 2101043758.0: 761, 2103198338.0: 762, 2105798261.0: 763, 2106021749.0: 764, 2106767272.0: 765, 2109122099.0: 766, 2116939971.0: 767, 2118865949.0: 768, 2122787973.0: 769, 2129376171.0: 770, 2131525975.0: 771, 2135899039.0: 772, 2142703246.0: 773, 2143210342.0: 774, 2145516893.0: 775, 2147367104.0: 776, 2147754780.0: 777, 2148685888.0: 778, 2151204894.0: 779, 2154158716.0: 780, 2154586032.0: 781, 2154649139.0: 782, 2157995615.0: 783, 2160213487.0: 784, 2160908097.0: 785, 2161925444.0: 786, 2167080653.0: 787, 2167160130.0: 788, 2169061414.0: 789, 2169410416.0: 790, 2170248416.0: 791, 2173240944.0: 792, 2174412586.0: 793, 2174814013.0: 794, 2175187798.0: 795, 2180939483.0: 796, 2184232252.0: 797, 2187021876.0: 798, 2191164672.0: 799, 2191695462.0: 800, 2192150913.0: 801, 2195130829.0: 802, 2199126836.0: 803, 2200702093.0: 804, 2201325680.0: 805, 2203974641.0: 806, 2211002770.0: 807, 2213117664.0: 808, 2221263928.0: 809, 2226771131.0: 810, 2233517340.0: 811, 2234821007.0: 812, 2235416780.0: 813, 2239040752.0: 814, 2241643185.0: 815, 2242479239.0: 816, 2243552889.0: 817, 2245402114.0: 818, 2245917676.0: 819, 2257684140.0: 820, 2264664367.0: 821, 2270967254.0: 822, 2272586075.0: 823, 2273780389.0: 824, 2279990822.0: 825, 2282199599.0: 826, 2282723659.0: 827, 2284021293.0: 828, 2285680116.0: 829, 2288935482.0: 830, 2291051194.0: 831, 2296597417.0: 832, 2296981873.0: 833, 2297033597.0: 834, 2303586310.0: 835, 2305366897.0: 836, 2309009604.0: 837, 2309455932.0: 838, 2311203951.0: 839, 2311531091.0: 840, 2320584622.0: 841, 2321156944.0: 842, 2338361008.0: 843, 2346291367.0: 844, 2348072766.0: 845, 2348297191.0: 846, 2349098852.0: 847, 2350788674.0: 848, 2354272065.0: 849, 2357664850.0: 850, 2360104305.0: 851, 2362173487.0: 852, 2362527704.0: 853, 2363979715.0: 854, 2365497080.0: 855, 2366599955.0: 856, 2368326605.0: 857, 2375316204.0: 858, 2376202324.0: 859, 2378278411.0: 860, 2379264074.0: 861, 2389246311.0: 862, 2389806211.0: 863, 2395143225.0: 864, 2397100048.0: 865, 2403392184.0: 866, 2406348083.0: 867, 2407412563.0: 868, 2407771234.0: 869, 2410993947.0: 870, 2412630545.0: 871, 2416725688.0: 872, 2419409219.0: 873, 2419630370.0: 874, 2419880005.0: 875, 2420474979.0: 876, 2424193355.0: 877, 2432579861.0: 878, 2435070427.0: 879, 2436940510.0: 880, 2439347754.0: 881, 2444720529.0: 882, 2445266147.0: 883, 2450549928.0: 884, 2455316394.0: 885, 2457963219.0: 886, 2463750499.0: 887, 2466419571.0: 888, 2467240331.0: 889, 2469040368.0: 890, 2469054314.0: 891, 2470046831.0: 892, 2470227099.0: 893, 2472488306.0: 894, 2477888915.0: 895, 2479044873.0: 896, 2479186321.0: 897, 2482171139.0: 898, 2483917617.0: 899, 2484697018.0: 900, 2485235632.0: 901, 2487247830.0: 902, 2487936131.0: 903, 2491797260.0: 904, 2494846947.0: 905, 2500922737.0: 906, 2500990347.0: 907, 2504306454.0: 908, 2505017720.0: 909, 2505867014.0: 910, 2506762523.0: 911, 2507844177.0: 912, 2509740074.0: 913, 2512861214.0: 914, 2514623879.0: 915, 2517281974.0: 916, 2518227690.0: 917, 2519031676.0: 918, 2519992774.0: 919, 2520005594.0: 920, 2520963738.0: 921, 2526002616.0: 922, 2532110456.0: 923, 2535783653.0: 924, 2538971204.0: 925, 2540602126.0: 926, 2544534797.0: 927, 2544668224.0: 928, 2547646641.0: 929, 2550985810.0: 930, 2552214680.0: 931, 2553641225.0: 932, 2554252040.0: 933, 2554457769.0: 934, 2556762176.0: 935, 2562148187.0: 936, 2562207917.0: 937, 2565168988.0: 938, 2569017070.0: 939, 2574329575.0: 940, 2579993678.0: 941, 2581696794.0: 942, 2586141067.0: 943, 2586762563.0: 944, 2596670416.0: 945, 2597433167.0: 946, 2599512007.0: 947, 2609267987.0: 948, 2611041602.0: 949, 2611182010.0: 950, 2618352646.0: 951, 2620335182.0: 952, 2622805278.0: 953, 2623320113.0: 954, 2625874088.0: 955, 2631458701.0: 956, 2634211511.0: 957, 2637439044.0: 958, 2637936156.0: 959, 2639358042.0: 960, 2640883416.0: 961, 2646928700.0: 962, 2649204669.0: 963, 2651252754.0: 964, 2660333753.0: 965, 2664472353.0: 966, 2670638297.0: 967, 2670819608.0: 968, 2671598999.0: 969, 2673049236.0: 970, 2674042623.0: 971, 2676950912.0: 972, 2677788572.0: 973, 2678767401.0: 974, 2682828250.0: 975, 2686139305.0: 976, 2690443728.0: 977, 2695216352.0: 978, 2699249062.0: 979, 2703098337.0: 980, 2707835293.0: 981, 2715498339.0: 982, 2718112027.0: 983, 2719145407.0: 984, 2725696694.0: 985, 2731329249.0: 986, 2733687367.0: 987, 2734043547.0: 988, 2735150359.0: 989, 2736004094.0: 990, 2738157355.0: 991, 2742949417.0: 992, 2743299031.0: 993, 2744441448.0: 994, 2745128711.0: 995, 2748032374.0: 996, 2750523497.0: 997, 2751257363.0: 998, 2752690259.0: 999, 2754027131.0: 1000, 2755471044.0: 1001, 2758530043.0: 1002, 2763705291.0: 1003, 2763762216.0: 1004, 2764160375.0: 1005, 2764168303.0: 1006, 2768586356.0: 1007, 2771392627.0: 1008, 2773552689.0: 1009, 2773729179.0: 1010, 2782536208.0: 1011, 2785421758.0: 1012, 2786348907.0: 1013, 2794371596.0: 1014, 2795925486.0: 1015, 2798754311.0: 1016, 2800045443.0: 1017, 2802950843.0: 1018, 2806028825.0: 1019, 2809667057.0: 1020, 2813944331.0: 1021, 2815081974.0: 1022, 2815871897.0: 1023, 2816106976.0: 1024, 2819932800.0: 1025, 2820373327.0: 1026, 2823486291.0: 1027, 2824207670.0: 1028, 2824976652.0: 1029, 2828757325.0: 1030, 2832611007.0: 1031, 2833410867.0: 1032, 2835881461.0: 1033, 2838835463.0: 1034, 2841144144.0: 1035, 2841399951.0: 1036, 2842739516.0: 1037, 2843043960.0: 1038, 2844504957.0: 1039, 2845261268.0: 1040, 2846493672.0: 1041, 2850840784.0: 1042, 2852908558.0: 1043, 2853976708.0: 1044, 2855195184.0: 1045, 2858627430.0: 1046, 2862099291.0: 1047, 2862977454.0: 1048, 2864991788.0: 1049, 2865684622.0: 1050, 2866581859.0: 1051, 2866851850.0: 1052, 2867932165.0: 1053, 2869796478.0: 1054, 2870165052.0: 1055, 2873655918.0: 1056, 2873768648.0: 1057, 2874922816.0: 1058, 2875803958.0: 1059, 2884076909.0: 1060, 2885241756.0: 1061, 2885961789.0: 1062, 2890288160.0: 1063, 2890527685.0: 1064, 2891466099.0: 1065, 2892473296.0: 1066, 2892792288.0: 1067, 2893379723.0: 1068, 2896686524.0: 1069, 2900919868.0: 1070, 2902490916.0: 1071, 2903181511.0: 1072, 2905065704.0: 1073, 2905995739.0: 1074, 2913471372.0: 1075, 2913819308.0: 1076, 2918585921.0: 1077, 2926176211.0: 1078, 2926737978.0: 1079, 2927170454.0: 1080, 2927237281.0: 1081, 2928851310.0: 1082, 2930563262.0: 1083, 2933194721.0: 1084, 2933725247.0: 1085, 2936421670.0: 1086, 2938680923.0: 1087, 2941747200.0: 1088, 2942437495.0: 1089, 2943267866.0: 1090, 2944622233.0: 1091, 2956321384.0: 1092, 2957516343.0: 1093, 2965165745.0: 1094, 2966136658.0: 1095, 2970265175.0: 1096, 2971628949.0: 1097, 2972417241.0: 1098, 2973468658.0: 1099, 2974013573.0: 1100, 2977275149.0: 1101, 2977874001.0: 1102, 2978324180.0: 1103, 2979380530.0: 1104, 2983024093.0: 1105, 2984903478.0: 1106, 2990182837.0: 1107, 2994819087.0: 1108, 2997150722.0: 1109, 2997334349.0: 1110, 2999807319.0: 1111, 3002150317.0: 1112, 3002630241.0: 1113, 3004259664.0: 1114, 3006210518.0: 1115, 3014692195.0: 1116, 3020272080.0: 1117, 3020394342.0: 1118, 3023383988.0: 1119, 3024763738.0: 1120, 3025027840.0: 1121, 3026451147.0: 1122, 3029387918.0: 1123, 3030718603.0: 1124, 3031053130.0: 1125, 3031066285.0: 1126, 3033529465.0: 1127, 3038759428.0: 1128, 3040197851.0: 1129, 3045623973.0: 1130, 3047447421.0: 1131, 3052636031.0: 1132, 3063280782.0: 1133, 3063729504.0: 1134, 3067200521.0: 1135, 3067284859.0: 1136, 3068816442.0: 1137, 3069152368.0: 1138, 3070487955.0: 1139, 3072773577.0: 1140, 3073505033.0: 1141, 3076640583.0: 1142, 3081262428.0: 1143, 3086235364.0: 1144, 3087173399.0: 1145, 3090214930.0: 1146, 3091114899.0: 1147, 3091314333.0: 1148, 3091634730.0: 1149, 3092456398.0: 1150, 3099145731.0: 1151, 3101588973.0: 1152, 3103707931.0: 1153, 3105245372.0: 1154, 3112385524.0: 1155, 3113852003.0: 1156, 3114199395.0: 1157, 3118752476.0: 1158, 3122840190.0: 1159, 3123586015.0: 1160, 3126716126.0: 1161, 3131986219.0: 1162, 3141831192.0: 1163, 3141957151.0: 1164, 3142400936.0: 1165, 3143701746.0: 1166, 3144322910.0: 1167, 3151750169.0: 1168, 3154131802.0: 1169, 3154154181.0: 1170, 3154208849.0: 1171, 3155026743.0: 1172, 3159858564.0: 1173, 3161900563.0: 1174, 3165862396.0: 1175, 3167275255.0: 1176, 3168344352.0: 1177, 3170799105.0: 1178, 3171854493.0: 1179, 3172094039.0: 1180, 3184399943.0: 1181, 3184617854.0: 1182, 3184821802.0: 1183, 3185794042.0: 1184, 3186449602.0: 1185, 3187819520.0: 1186, 3190507061.0: 1187, 3193422520.0: 1188, 3195650419.0: 1189, 3198917093.0: 1190, 3202320368.0: 1191, 3204787305.0: 1192, 3206640240.0: 1193, 3210319850.0: 1194, 3214948639.0: 1195, 3215350906.0: 1196, 3218493386.0: 1197, 3224418944.0: 1198, 3226070614.0: 1199, 3230489132.0: 1200, 3231153191.0: 1201, 3240469009.0: 1202, 3244104291.0: 1203, 3245423458.0: 1204, 3245854813.0: 1205, 3260366210.0: 1206, 3260742770.0: 1207, 3262483137.0: 1208, 3263814488.0: 1209, 3264721015.0: 1210, 3269498459.0: 1211, 3270710166.0: 1212, 3270722863.0: 1213, 3282217105.0: 1214, 3283560370.0: 1215, 3283877714.0: 1216, 3287790868.0: 1217, 3290073165.0: 1218, 3290705713.0: 1219, 3293148141.0: 1220, 3294549519.0: 1221, 3294975891.0: 1222, 3295149763.0: 1223, 3299942893.0: 1224, 3301380961.0: 1225, 3301988374.0: 1226, 3303546684.0: 1227, 3303659430.0: 1228, 3304770359.0: 1229, 3304873065.0: 1230, 3307241820.0: 1231, 3316286889.0: 1232, 3316372027.0: 1233, 3318139642.0: 1234, 3318721072.0: 1235, 3318768560.0: 1236, 3320631305.0: 1237, 3321121719.0: 1238, 3326468600.0: 1239, 3326960075.0: 1240, 3327974567.0: 1241, 3328158395.0: 1242, 3338282138.0: 1243, 3341675836.0: 1244, 3345667426.0: 1245, 3355822415.0: 1246, 3355922665.0: 1247, 3374471440.0: 1248, 3385564500.0: 1249, 3387066780.0: 1250, 3388147266.0: 1251, 3388153034.0: 1252, 3388919116.0: 1253, 3390110290.0: 1254, 3394457086.0: 1255, 3405615615.0: 1256, 3406697216.0: 1257, 3410879340.0: 1258, 3413531312.0: 1259, 3414578658.0: 1260, 3415641955.0: 1261, 3425404284.0: 1262, 3425947147.0: 1263, 3427590340.0: 1264, 3428681293.0: 1265, 3429401052.0: 1266, 3433166444.0: 1267, 3434763521.0: 1268, 3436392807.0: 1269, 3436662715.0: 1270, 3438213009.0: 1271, 3438822407.0: 1272, 3441979956.0: 1273, 3444825031.0: 1274, 3448591008.0: 1275, 3450029917.0: 1276, 3453580606.0: 1277, 3455491915.0: 1278, 3455675464.0: 1279, 3458521366.0: 1280, 3461474009.0: 1281, 3462413577.0: 1282, 3466117796.0: 1283, 3468431451.0: 1284, 3468662773.0: 1285, 3469077437.0: 1286, 3470073058.0: 1287, 3470613793.0: 1288, 3471410710.0: 1289, 3471641478.0: 1290, 3490004660.0: 1291, 3490612777.0: 1292, 3493124096.0: 1293, 3493643583.0: 1294, 3500005081.0: 1295, 3501537488.0: 1296, 3507624301.0: 1297, 3508841730.0: 1298, 3514553032.0: 1299, 3518946051.0: 1300, 3519512534.0: 1301, 3520097167.0: 1302, 3523492787.0: 1303, 3526565635.0: 1304, 3535206601.0: 1305, 3536330259.0: 1306, 3537913374.0: 1307, 3545029923.0: 1308, 3548344974.0: 1309, 3551094472.0: 1310, 3551186499.0: 1311, 3553786299.0: 1312, 3555313502.0: 1313, 3556434789.0: 1314, 3562010524.0: 1315, 3563792826.0: 1316, 3564422255.0: 1317, 3565713918.0: 1318, 3567841655.0: 1319, 3569270670.0: 1320, 3577952104.0: 1321, 3579273055.0: 1322, 3579880231.0: 1323, 3587014636.0: 1324, 3588881130.0: 1325, 3592158990.0: 1326, 3592427447.0: 1327, 3594564404.0: 1328, 3596354639.0: 1329, 3599261575.0: 1330, 3600839958.0: 1331, 3603553379.0: 1332, 3603740995.0: 1333, 3606837349.0: 1334, 3607285700.0: 1335, 3607309211.0: 1336, 3610367718.0: 1337, 3616978833.0: 1338, 3621333592.0: 1339, 3621455014.0: 1340, 3622653204.0: 1341, 3624452605.0: 1342, 3628549457.0: 1343, 3631698575.0: 1344, 3635464929.0: 1345, 3638602483.0: 1346, 3638752220.0: 1347, 3640656012.0: 1348, 3645116463.0: 1349, 3647751526.0: 1350, 3653883785.0: 1351, 3658368504.0: 1352, 3663642045.0: 1353, 3669830496.0: 1354, 3670275147.0: 1355, 3671441986.0: 1356, 3673079405.0: 1357, 3677168133.0: 1358, 3678147016.0: 1359, 3679349563.0: 1360, 3685304605.0: 1361, 3687774651.0: 1362, 3690055870.0: 1363, 3690692053.0: 1364, 3691486738.0: 1365, 3694961534.0: 1366, 3699963529.0: 1367, 3702800601.0: 1368, 3703047650.0: 1369, 3705712133.0: 1370, 3713648630.0: 1371, 3714131008.0: 1372, 3716685949.0: 1373, 3718748071.0: 1374, 3719467099.0: 1375, 3719821389.0: 1376, 3721607605.0: 1377, 3721959323.0: 1378, 3725045728.0: 1379, 3726180150.0: 1380, 3727243313.0: 1381, 3727948916.0: 1382, 3728520126.0: 1383, 3728961959.0: 1384, 3739260885.0: 1385, 3742098878.0: 1386, 3745719920.0: 1387, 3748213973.0: 1388, 3748619340.0: 1389, 3754504070.0: 1390, 3754752234.0: 1391, 3755768579.0: 1392, 3759872806.0: 1393, 3761514061.0: 1394, 3762733444.0: 1395, 3782977030.0: 1396, 3788960273.0: 1397, 3789831735.0: 1398, 3789944826.0: 1399, 3792046945.0: 1400, 3792223648.0: 1401, 3801312490.0: 1402, 3803963018.0: 1403, 3808566165.0: 1404, 3810773914.0: 1405, 3814636772.0: 1406, 3818557862.0: 1407, 3822317958.0: 1408, 3822681508.0: 1409, 3827828932.0: 1410, 3829645050.0: 1411, 3830349147.0: 1412, 3832167336.0: 1413, 3838958914.0: 1414, 3840769480.0: 1415, 3843843380.0: 1416, 3844051438.0: 1417, 3844670168.0: 1418, 3846164878.0: 1419, 3848598840.0: 1420, 3852527705.0: 1421, 3860025409.0: 1422, 3860035588.0: 1423, 3860472604.0: 1424, 3860613532.0: 1425, 3861899088.0: 1426, 3862111185.0: 1427, 3862781885.0: 1428, 3866119119.0: 1429, 3866878887.0: 1430, 3868241988.0: 1431, 3870672009.0: 1432, 3873081205.0: 1433, 3874798627.0: 1434, 3875747195.0: 1435, 3876400317.0: 1436, 3878324060.0: 1437, 3878641202.0: 1438, 3880154152.0: 1439, 3880390096.0: 1440, 3881195116.0: 1441, 3883867647.0: 1442, 3887431045.0: 1443, 3894904421.0: 1444, 3904283387.0: 1445, 3906747885.0: 1446, 3908131456.0: 1447, 3908352737.0: 1448, 3912115777.0: 1449, 3912437879.0: 1450, 3912945483.0: 1451, 3915585922.0: 1452, 3919696560.0: 1453, 3920964879.0: 1454, 3924276327.0: 1455, 3924406138.0: 1456, 3925872589.0: 1457, 3926338903.0: 1458, 3927409681.0: 1459, 3934290946.0: 1460, 3938756933.0: 1461, 3939917712.0: 1462, 3944790580.0: 1463, 3949252385.0: 1464, 3952614910.0: 1465, 3955711130.0: 1466, 3956227457.0: 1467, 3958165478.0: 1468, 3961395415.0: 1469, 3961487796.0: 1470, 3962255076.0: 1471, 3964346214.0: 1472, 3966068670.0: 1473, 3966491305.0: 1474, 3967634747.0: 1475, 3968378279.0: 1476, 3970496330.0: 1477, 3971091726.0: 1478, 3971881451.0: 1479, 3973307260.0: 1480, 3974721812.0: 1481, 3976721872.0: 1482, 3978412383.0: 1483, 3978752570.0: 1484, 3980010584.0: 1485, 3980406714.0: 1486, 3982663481.0: 1487, 3984974359.0: 1488, 3993541921.0: 1489, 3994829067.0: 1490, 3999620026.0: 1491, 4005061445.0: 1492, 4005305319.0: 1493, 4005431552.0: 1494, 4005452516.0: 1495, 4005975941.0: 1496, 4008927060.0: 1497, 4010025356.0: 1498, 4011572403.0: 1499, 4013503737.0: 1500, 4015723131.0: 1501, 4016051375.0: 1502, 4024458364.0: 1503, 4025324286.0: 1504, 4026161701.0: 1505, 4029927251.0: 1506, 4031359551.0: 1507, 4034532851.0: 1508, 4037824235.0: 1509, 4040036387.0: 1510, 4040461508.0: 1511, 4040477226.0: 1512, 4044095493.0: 1513, 4044168569.0: 1514, 4046844960.0: 1515, 4048179951.0: 1516, 4058912978.0: 1517, 4067757657.0: 1518, 4070132456.0: 1519, 4070945406.0: 1520, 4073497025.0: 1521, 4074215476.0: 1522, 4074497401.0: 1523, 4082367956.0: 1524, 4089133403.0: 1525, 4089988327.0: 1526, 4090853032.0: 1527, 4095437845.0: 1528, 4102717211.0: 1529, 4103184070.0: 1530, 4103531301.0: 1531, 4106363785.0: 1532, 4106622174.0: 1533, 4107817077.0: 1534, 4109206984.0: 1535, 4110411250.0: 1536, 4112654597.0: 1537, 4116405392.0: 1538, 4120061945.0: 1539, 4121731561.0: 1540, 4124495483.0: 1541, 4125223934.0: 1542, 4129398890.0: 1543, 4129759774.0: 1544, 4137841105.0: 1545, 4140054883.0: 1546, 4141519524.0: 1547, 4143968817.0: 1548, 4144118181.0: 1549, 4144592667.0: 1550, 4144711161.0: 1551, 4149890967.0: 1552, 4152469064.0: 1553, 4152470233.0: 1554, 4154162117.0: 1555, 4157599483.0: 1556, 4166296086.0: 1557, 4168310350.0: 1558, 4169439719.0: 1559, 4169574072.0: 1560, 4169694620.0: 1561, 4170048386.0: 1562, 4176993731.0: 1563, 4184811728.0: 1564, 4192871745.0: 1565, 4193021633.0: 1566, 4193893976.0: 1567, 4193933975.0: 1568, 4210380186.0: 1569, 4218320365.0: 1570, 4222503254.0: 1571, 4225221690.0: 1572, 4226555370.0: 1573, 4234658189.0: 1574, 4235954916.0: 1575, 4240761070.0: 1576, 4253363259.0: 1577, 4258781067.0: 1578, 4260789347.0: 1579, 4260855034.0: 1580, 4262364891.0: 1581, 4271752077.0: 1582, 4274333593.0: 1583, 4279871897.0: 1584, 4284844681.0: 1585, 4288407973.0: 1586, 4292314762.0: 1587, 4293189076.0: 1588, 659897577.0: 1589, 3692259802.0: 1590, 2872444456.0: 1591, 1417771408.0: 1592, 1123737178.0: 1593, 31473230.0: 1594, 2204045349.0: 1595, 1585654736.0: 1596, 810038588.0: 1597, 3273511165.0: 1598, 2620398157.0: 1599, 1135088251.0: 1600, 1595978033.0: 1601, 3760983286.0: 1602, 1183769808.0: 1603, 2356905028.0: 1604, 1047840569.0: 1605, 786921754.0: 1606, 671799884.0: 1607, 4000448715.0: 1608, 2015913245.0: 1609, 2212004605.0: 1610, 3305936474.0: 1611, 3049906158.0: 1612, 3668889376.0: 1613, 1074577715.0: 1614, 1308296432.0: 1615, 2677838610.0: 1616, 3754718861.0: 1617, 444726993.0: 1618, 2296233021.0: 1619, 679931146.0: 1620, 1250803986.0: 1621, 2279439068.0: 1622, 1728975223.0: 1623, 1679789980.0: 1624, 157728294.0: 1625, 540805071.0: 1626, 863092837.0: 1627, 3273902522.0: 1628, 1892728825.0: 1629, 3856870960.0: 1630, 2402361824.0: 1631, 2006246606.0: 1632, 3364250050.0: 1633, 3578127153.0: 1634, 3038540115.0: 1635, 1912223118.0: 1636, 2172789865.0: 1637, 1326286731.0: 1638, 2619244010.0: 1639, 851803360.0: 1640, 1968008424.0: 1641, 2538799993.0: 1642, 1418129136.0: 1643, 3952819202.0: 1644, 1436936440.0: 1645, 324315341.0: 1646, 2963714490.0: 1647, 4127716012.0: 1648, 196345200.0: 1649, 815838543.0: 1650, 648691161.0: 1651, 3942779622.0: 1652, 813271124.0: 1653, 1004945701.0: 1654, 476757634.0: 1655, 2838872475.0: 1656, 2446496956.0: 1657, 2342116211.0: 1658, 3210105019.0: 1659, 2205091539.0: 1660, 191280284.0: 1661, 458260169.0: 1662, 654967829.0: 1663, 1279198716.0: 1664, 1257109836.0: 1665, 550693017.0: 1666, 3105645081.0: 1667, 2827437891.0: 1668, 1764032437.0: 1669, 2122961052.0: 1670, 1568630977.0: 1671, 3809680546.0: 1672, 1302472500.0: 1673, 2990016154.0: 1674, 941632767.0: 1675, 3029059160.0: 1676, 2282508993.0: 1677, 4278991824.0: 1678, 4152574000.0: 1679, 3341496703.0: 1680, 2377122300.0: 1681, 3827354394.0: 1682, 2925548484.0: 1683, 1770129184.0: 1684, 3482167038.0: 1685, 3325156485.0: 1686, 3467716734.0: 1687, 2318942024.0: 1688, 1177214500.0: 1689, 3636853657.0: 1690, 2258782884.0: 1691, 71594619.0: 1692, 3214235871.0: 1693, 1030982789.0: 1694, 3150691175.0: 1695, 863219764.0: 1696, 2912043027.0: 1697, 3771031970.0: 1698, 2330635929.0: 1699, 917731169.0: 1700, 3057220722.0: 1701, 1431835116.0: 1702, 1297095635.0: 1703, 59878620.0: 1704, 1028454928.0: 1705, 4057457887.0: 1706, 1400515212.0: 1707, 3481363647.0: 1708, 590856614.0: 1709, 4151957605.0: 1710, 4195503039.0: 1711, 2465560951.0: 1712, 1730013104.0: 1713, 2711811683.0: 1714, 1035089588.0: 1715, 960869203.0: 1716, 2603898508.0: 1717, 1881722201.0: 1718, 1525771323.0: 1719, 3159028936.0: 1720, 3969492042.0: 1721, 2724529806.0: 1722, 3542408676.0: 1723, 2599860503.0: 1724, 3430582140.0: 1725, 3832803254.0: 1726, 2566429759.0: 1727, 2217903791.0: 1728, 1575643042.0: 1729, 326680911.0: 1730, 3933484176.0: 1731, 1735874060.0: 1732, 564906024.0: 1733, 1195829207.0: 1734, 3781349743.0: 1735, 2765523068.0: 1736, 819809241.0: 1737, 3654823688.0: 1738, 1527815966.0: 1739, 1001272910.0: 1740, 2556691993.0: 1741, 3539214015.0: 1742, 223770659.0: 1743, 3160270652.0: 1744, 393230624.0: 1745, 190410280.0: 1746, 3549534350.0: 1747, 842729051.0: 1748, 1552233299.0: 1749, 1668318169.0: 1750, 32199834.0: 1751, 753171319.0: 1752, 2890284462.0: 1753, 1175883181.0: 1754, 861122888.0: 1755, 3433307607.0: 1756, 3438349682.0: 1757, 3028041621.0: 1758, 2488865765.0: 1759, 1155414548.0: 1760, 944896324.0: 1761, 2124507681.0: 1762, 58082690.0: 1763, 2459970161.0: 1764, 1489857170.0: 1765, 537990824.0: 1766, 3713104577.0: 1767, 2199553796.0: 1768, 1878759284.0: 1769, 2895226334.0: 1770, 866501814.0: 1771, 673838760.0: 1772, 3436462929.0: 1773, 1102429449.0: 1774, 2921522564.0: 1775, 3835403454.0: 1776, 1482424190.0: 1777, 2177683160.0: 1778, 1326276289.0: 1779, 2680575803.0: 1780, 4181197975.0: 1781, 522833409.0: 1782, 658822425.0: 1783, 2755402686.0: 1784, 1320684159.0: 1785, 2888031130.0: 1786, 3713423207.0: 1787, 6528886.0: 1788, 3677112080.0: 1789, 2614804614.0: 1790, 4294744128.0: 1791, 1255689704.0: 1792, 1232689154.0: 1793, 2537295072.0: 1794, 3570403642.0: 1795, 746909182.0: 1796, 3136057221.0: 1797, 516918209.0: 1798, 3729837505.0: 1799, 2414226152.0: 1800, 3075653951.0: 1801, 1620595743.0: 1802, 580746595.0: 1803, 413764435.0: 1804, 1686609549.0: 1805, 2742024896.0: 1806, 904762926.0: 1807, 2287109353.0: 1808, 1014589568.0: 1809, 2956077024.0: 1810, 1602958872.0: 1811, 1700312221.0: 1812, 3091900334.0: 1813, 125132862.0: 1814, 290434278.0: 1815, 3429642143.0: 1816, 468414814.0: 1817, 1892222576.0: 1818, 1694963796.0: 1819, 3260070727.0: 1820, 1008532238.0: 1821, 1106973725.0: 1822, 2354025480.0: 1823, 1778234643.0: 1824, 4035797678.0: 1825, 1888355512.0: 1826, 3393351302.0: 1827, 1378692407.0: 1828, 1513169818.0: 1829, 3832360180.0: 1830, 1632590002.0: 1831, 3056695725.0: 1832, 2844372172.0: 1833, 390365485.0: 1834, 2692903520.0: 1835, 4277340522.0: 1836, 1784488372.0: 1837, 3844649028.0: 1838, 2518558253.0: 1839, 4271956925.0: 1840, 471895108.0: 1841, 2334843410.0: 1842, 1874440512.0: 1843, 2335698865.0: 1844, 306494462.0: 1845, 2773190413.0: 1846, 2979786590.0: 1847, 2032949651.0: 1848, 1285554345.0: 1849, 3342371059.0: 1850, 993201728.0: 1851, 99521540.0: 1852, 2902755990.0: 1853, 917075127.0: 1854, 2693222236.0: 1855, 945917321.0: 1856, 2754545793.0: 1857, 531241325.0: 1858, 112288800.0: 1859, 2943918468.0: 1860, 115863751.0: 1861, 3131817761.0: 1862, 1621658119.0: 1863, 1207107623.0: 1864, 1055021962.0: 1865, 765602218.0: 1866, 3533878836.0: 1867, 4190143014.0: 1868, 2651161386.0: 1869, 2396859862.0: 1870, 3056771678.0: 1871, 2810901734.0: 1872, 4288881736.0: 1873, 1908927847.0: 1874, 1803272295.0: 1875, 4227541891.0: 1876, 2484274787.0: 1877, 1814527171.0: 1878, 3656516040.0: 1879, 447746156.0: 1880, 1634310706.0: 1881, 223117775.0: 1882, 528908285.0: 1883, 3599839244.0: 1884, 3279913958.0: 1885, 102501959.0: 1886, 443687629.0: 1887, 260393764.0: 1888, 821819112.0: 1889, 407014981.0: 1890, 1290262465.0: 1891, 1241245261.0: 1892, 2320061819.0: 1893, 1079228241.0: 1894, 1588511595.0: 1895, 75455192.0: 1896, 3477364060.0: 1897, 783304119.0: 1898, 592065627.0: 1899, 994069314.0: 1900, 1328971368.0: 1901, 792073589.0: 1902, 2834074584.0: 1903, 3395646440.0: 1904, 2357038985.0: 1905, 2929711087.0: 1906, 1115880604.0: 1907, 3057741323.0: 1908, 506879224.0: 1909, 1271606556.0: 1910, 902013619.0: 1911, 3528020330.0: 1912, 3219819283.0: 1913, 676592876.0: 1914, 659080407.0: 1915, 2025769985.0: 1916, 3811810166.0: 1917, 3384404604.0: 1918, 3356682702.0: 1919, 3145612867.0: 1920, 1702148689.0: 1921, 3374299013.0: 1922, 3406426696.0: 1923, 2982858143.0: 1924, 3102260857.0: 1925, 2715697196.0: 1926, 27464427.0: 1927, 2000548549.0: 1928, 3039581432.0: 1929, 4155919502.0: 1930, 1224412555.0: 1931, 1082326443.0: 1932, 2442206293.0: 1933, 888035444.0: 1934, 903091373.0: 1935, 3761210540.0: 1936, 1272227848.0: 1937, 3242218557.0: 1938, 1300595049.0: 1939, 1553736131.0: 1940, 2301681657.0: 1941, 2080568565.0: 1942, 1513338532.0: 1943, 3915059652.0: 1944, 2395934797.0: 1945, 2194309681.0: 1946, 1559460767.0: 1947, 3594083521.0: 1948, 1433581463.0: 1949, 2136774708.0: 1950, 1357673481.0: 1951, 909843036.0: 1952, 2862962521.0: 1953, 3516904748.0: 1954, 4263354073.0: 1955, 550166074.0: 1956, 445982975.0: 1957, 189347503.0: 1958, 4097085958.0: 1959, 4200561032.0: 1960, 2274317235.0: 1961, 2615777819.0: 1962, 1534404078.0: 1963, 583250071.0: 1964, 1370419718.0: 1965, 66894961.0: 1966, 2152612805.0: 1967, 186868720.0: 1968, 495785982.0: 1969, 1253866306.0: 1970, 3089683139.0: 1971, 805110760.0: 1972, 3784173667.0: 1973, 2362723606.0: 1974, 4127993768.0: 1975, 3960715362.0: 1976, 2655234083.0: 1977, 1061743593.0: 1978, 2591243926.0: 1979, 4128653021.0: 1980, 3008392866.0: 1981, 1822716205.0: 1982, 1026702262.0: 1983, 3393151207.0: 1984, 598490424.0: 1985, 1791140261.0: 1986, 739507082.0: 1987, 1661372389.0: 1988, 541825782.0: 1989, 3776728485.0: 1990, 1445369243.0: 1991, 2033757926.0: 1992, 1051334932.0: 1993, 2743462088.0: 1994, 3209196878.0: 1995, 772836956.0: 1996, 271458958.0: 1997, 2020861566.0: 1998, 3618819400.0: 1999, 953375332.0: 2000, 32310003.0: 2001, 996857454.0: 2002, 3975208518.0: 2003, 3224208019.0: 2004, 1849818185.0: 2005, 3490980256.0: 2006, 1092416604.0: 2007, 1028654360.0: 2008, 3310664018.0: 2009, 3860754845.0: 2010, 123807046.0: 2011, 1783493808.0: 2012, 3829099418.0: 2013, 1788660989.0: 2014, 207225006.0: 2015, 4179222511.0: 2016, 133751481.0: 2017, 36393259.0: 2018, 2243299105.0: 2019, 4024358001.0: 2020, 4009366820.0: 2021, 3476901262.0: 2022, 1906063987.0: 2023, 3557178101.0: 2024, 2233619749.0: 2025, 1359266531.0: 2026, 4289682079.0: 2027, 4061632287.0: 2028, 2346331438.0: 2029, 121413783.0: 2030, 533383146.0: 2031, 1413941118.0: 2032, 3548212403.0: 2033, 2138517402.0: 2034, 1989611691.0: 2035, 1710579570.0: 2036, 1328702789.0: 2037, 2611351683.0: 2038, 202765939.0: 2039, 1694851915.0: 2040, 2515539607.0: 2041, 3985007205.0: 2042, 4149805903.0: 2043, 1903140313.0: 2044, 1319507046.0: 2045, 4046278815.0: 2046, 1881408648.0: 2047, 3781590232.0: 2048, 1300157226.0: 2049, 1369991380.0: 2050, 4071624189.0: 2051, 3493139069.0: 2052, 211626264.0: 2053, 2439828276.0: 2054, 1988625743.0: 2055, 3696707456.0: 2056, 777643454.0: 2057, 4065070879.0: 2058, 1392100242.0: 2059, 2870479063.0: 2060, 4267443920.0: 2061, 3748418033.0: 2062, 2408831808.0: 2063, 2324917761.0: 2064, 2686249126.0: 2065, 2751810765.0: 2066, 1102971280.0: 2067, 3221946669.0: 2068, 515249023.0: 2069, 379849827.0: 2070, 1848871169.0: 2071, 637472349.0: 2072, 3630175331.0: 2073, 995804029.0: 2074, 2647466322.0: 2075, 191223783.0: 2076, 1744592647.0: 2077, 2755078410.0: 2078, 3720798372.0: 2079, 449371156.0: 2080, 3107530001.0: 2081, 2209065356.0: 2082, 3076437481.0: 2083, 66653902.0: 2084, 222413687.0: 2085, 3436670227.0: 2086, 3947000362.0: 2087, 1676991365.0: 2088, 1650151131.0: 2089, 652609169.0: 2090, 4026686020.0: 2091, 1129890470.0: 2092, 1229454113.0: 2093, 2196816651.0: 2094, 790703578.0: 2095, 972482484.0: 2096, 1713063058.0: 2097, 2891387298.0: 2098, 3719501655.0: 2099, 154256206.0: 2100, 1953705729.0: 2101, 4199624981.0: 2102, 1192143688.0: 2103, 229905634.0: 2104, 349165407.0: 2105, 1244947512.0: 2106, 2328838529.0: 2107, 3886743306.0: 2108, 2830491788.0: 2109, 2396325969.0: 2110, 4012185333.0: 2111, 777370680.0: 2112, 1147711741.0: 2113, 1415735122.0: 2114, 455681029.0: 2115, 478092476.0: 2116, 2449144312.0: 2117, 195617593.0: 2118, 3417928577.0: 2119, 1037933406.0: 2120, 2861222087.0: 2121, 614474062.0: 2122, 2540711934.0: 2123, 3960894107.0: 2124, 2216328406.0: 2125, 1810585739.0: 2126, 1051959496.0: 2127, 2937033619.0: 2128, 2439564649.0: 2129, 4152443046.0: 2130, 3800354603.0: 2131, 3404380184.0: 2132, 4065637152.0: 2133, 3123168468.0: 2134, 3167887245.0: 2135, 3943518607.0: 2136, 2798942500.0: 2137, 2251095374.0: 2138, 1151512129.0: 2139, 2461507954.0: 2140, 3317519386.0: 2141, 2005389961.0: 2142, 2331327957.0: 2143, 3311432688.0: 2144, 503925938.0: 2145, 2689121781.0: 2146, 3648465500.0: 2147, 405013918.0: 2148, 23438332.0: 2149, 3704354286.0: 2150, 4154809633.0: 2151, 4168368637.0: 2152, 2774792547.0: 2153, 3521551873.0: 2154, 2301101424.0: 2155, 945298043.0: 2156, 3854119599.0: 2157, 3019067668.0: 2158, 1693606276.0: 2159, 178791862.0: 2160, 2381256903.0: 2161, 3494789585.0: 2162, 3676680272.0: 2163, 538989868.0: 2164, 2156759007.0: 2165, 3380656678.0: 2166, 1503498013.0: 2167, 3476272799.0: 2168, 2091383259.0: 2169, 3847194388.0: 2170, 1328124664.0: 2171, 1209635524.0: 2172, 3280505161.0: 2173, 589685523.0: 2174, 3035747590.0: 2175, 3828546774.0: 2176, 1147191549.0: 2177, 1128090791.0: 2178, 1989504557.0: 2179, 644396520.0: 2180, 412167336.0: 2181, 312484230.0: 2182, 1590721528.0: 2183, 695332534.0: 2184, 3770284216.0: 2185, 3940920616.0: 2186, 2379859475.0: 2187, 616047204.0: 2188, 4109762377.0: 2189, 1738870748.0: 2190, 1958513932.0: 2191, 3498166491.0: 2192, 955314189.0: 2193, 2592853399.0: 2194, 672896043.0: 2195, 462741992.0: 2196, 285920237.0: 2197, 44978258.0: 2198, 3374228428.0: 2199, 216037873.0: 2200, 2150368020.0: 2201, 1528957523.0: 2202, 1664806597.0: 2203, 3848813438.0: 2204, 2329163157.0: 2205, 1494277016.0: 2206, 2135753403.0: 2207, 1382848951.0: 2208, 739592455.0: 2209, 3264170279.0: 2210, 2153497893.0: 2211, 3305426837.0: 2212, 4663025.0: 2213, 3359569376.0: 2214, 1414132696.0: 2215, 2467126412.0: 2216, 1078002000.0: 2217, 3551712449.0: 2218, 1171472787.0: 2219, 1926059551.0: 2220, 1520932942.0: 2221, 2198755438.0: 2222, 2254663568.0: 2223, 605560211.0: 2224, 3043471226.0: 2225, 2078994118.0: 2226, 3654365042.0: 2227, 854732387.0: 2228, 830225898.0: 2229, 2519409539.0: 2230, 605587229.0: 2231, 3945803066.0: 2232, 2239772685.0: 2233, 3134078094.0: 2234, 3511063440.0: 2235, 2453150836.0: 2236, 3450357692.0: 2237, 4084526021.0: 2238, 957907735.0: 2239, 527437382.0: 2240, 3646732406.0: 2241, 297530433.0: 2242, 920420181.0: 2243, 210133879.0: 2244, 2004489299.0: 2245, 1082722062.0: 2246, 4082043036.0: 2247, 543321634.0: 2248, 4049184452.0: 2249, 2196580599.0: 2250, 1000282445.0: 2251, 1194042624.0: 2252, 3842096190.0: 2253, 2067899421.0: 2254, 1950936251.0: 2255, 4238064155.0: 2256, 833020913.0: 2257, 2075827570.0: 2258, 4176389182.0: 2259, 3046767998.0: 2260, 2468343170.0: 2261, 2210787548.0: 2262, 2598912410.0: 2263, 652975170.0: 2264, 3473343289.0: 2265, 833093987.0: 2266, 3510050062.0: 2267, 2347320866.0: 2268, 1469201100.0: 2269, 3827114727.0: 2270, 3096356507.0: 2271, 453884820.0: 2272, 3151825360.0: 2273, 1309561720.0: 2274, 4249916842.0: 2275, 1385247684.0: 2276, 2417007236.0: 2277, 339864202.0: 2278, 1640614513.0: 2279, 3270806645.0: 2280, 1272415308.0: 2281, 3452827631.0: 2282, 1804675643.0: 2283, 3982039713.0: 2284, 2705496474.0: 2285, 2037473669.0: 2286, 1537879958.0: 2287, 423646701.0: 2288, 1154588401.0: 2289, 2621369517.0: 2290, 2534652738.0: 2291, 2240055403.0: 2292, 4054673711.0: 2293, 2742175656.0: 2294, 1536104617.0: 2295, 4213276091.0: 2296, 2145712328.0: 2297, 1723895853.0: 2298, 2929058238.0: 2299, 2860558779.0: 2300, 489191261.0: 2301, 2117019499.0: 2302, 1815416067.0: 2303, 1689764729.0: 2304, 2954317045.0: 2305, 4044017707.0: 2306, 2936545280.0: 2307, 3241351632.0: 2308, 1826970280.0: 2309, 3581567420.0: 2310, 66874498.0: 2311, 1645802423.0: 2312, 880705758.0: 2313, 3150930833.0: 2314, 53569314.0: 2315, 1681522380.0: 2316, 1404070491.0: 2317, 380652608.0: 2318, 4000764399.0: 2319, 2784050300.0: 2320, 52832446.0: 2321, 751208052.0: 2322, 157525453.0: 2323, 4205833515.0: 2324, 3001604178.0: 2325, 2037205478.0: 2326, 3551811973.0: 2327, 1980596200.0: 2328, 3346939267.0: 2329, 592343319.0: 2330, 277001611.0: 2331, 1752740803.0: 2332, 3750179242.0: 2333, 1811872008.0: 2334, 1567523906.0: 2335, 354457384.0: 2336, 2693406500.0: 2337, 2318316427.0: 2338, 3099618193.0: 2339, 1271466767.0: 2340, 752777438.0: 2341, 1538120774.0: 2342, 1131332441.0: 2343, 2281264374.0: 2344, 217990698.0: 2345, 1643259698.0: 2346, 3577797879.0: 2347, 494732790.0: 2348, 1893100723.0: 2349, 1586017123.0: 2350, 1016870681.0: 2351, 3730278584.0: 2352, 1264918704.0: 2353, 2387706680.0: 2354, 1355046678.0: 2355, 2689013080.0: 2356, 64716077.0: 2357, 2728154426.0: 2358, 918500039.0: 2359, 1102076441.0: 2360, 3161971840.0: 2361, 1409990789.0: 2362, 3284125818.0: 2363, 1496023723.0: 2364, 1613679088.0: 2365, 3778060639.0: 2366, 2456313832.0: 2367, 3313206534.0: 2368, 4005650067.0: 2369, 119426344.0: 2370, 3093917131.0: 2371, 2486362857.0: 2372, 4240899918.0: 2373, 2553949374.0: 2374, 2731685142.0: 2375, 2236400965.0: 2376, 3235453564.0: 2377, 4258845054.0: 2378, 513544247.0: 2379, 4191329348.0: 2380, 2869614665.0: 2381, 2286410723.0: 2382, 4093315059.0: 2383, 2114121617.0: 2384, 3098444287.0: 2385, 557241403.0: 2386, 2501213391.0: 2387, 2265620849.0: 2388, 1634918968.0: 2389, 3607179158.0: 2390, 923573347.0: 2391, 1097178746.0: 2392, 2693186383.0: 2393, 3120751307.0: 2394, 590707107.0: 2395, 4215147738.0: 2396, 3372624336.0: 2397, 1799114015.0: 2398, 686526048.0: 2399, 3868770821.0: 2400, 2404708270.0: 2401, 3428156974.0: 2402, 3129101409.0: 2403, 3586474637.0: 2404, 3504684338.0: 2405, 3424986706.0: 2406, 3219848006.0: 2407, 977326560.0: 2408, 16384409.0: 2409, 1820712582.0: 2410, 479835628.0: 2411, 4118720811.0: 2412, 4224164382.0: 2413, 3628083315.0: 2414, 558000857.0: 2415, 3631384623.0: 2416, 3257244244.0: 2417, 2783954760.0: 2418, 363555191.0: 2419, 3237194463.0: 2420, 217608997.0: 2421, 2737240580.0: 2422, 2447917466.0: 2423, 3683940326.0: 2424, 3130815508.0: 2425, 678161987.0: 2426, 2257985755.0: 2427, 4146389229.0: 2428, 1227147192.0: 2429, 2756746719.0: 2430, 4259821892.0: 2431, 3227113268.0: 2432, 1965271282.0: 2433, 2502731490.0: 2434, 1038269015.0: 2435, 3831845122.0: 2436, 293227263.0: 2437, 2789962542.0: 2438, 2527955431.0: 2439, 3690887018.0: 2440, 2520240538.0: 2441, 720546792.0: 2442, 1112960319.0: 2443, 2608575970.0: 2444, 473327883.0: 2445, 3730989224.0: 2446, 2631939487.0: 2447, 1434529400.0: 2448, 2907928900.0: 2449, 1883916156.0: 2450, 2182161957.0: 2451, 812631330.0: 2452, 799915942.0: 2453, 4020858102.0: 2454, 2286832622.0: 2455, 4028834232.0: 2456, 2734856171.0: 2457, 1150948364.0: 2458, 3254701473.0: 2459, 826754133.0: 2460, 2997444920.0: 2461, 786915479.0: 2462, 2935779596.0: 2463, 1798370328.0: 2464, 2526792201.0: 2465, 3280555720.0: 2466, 3120232091.0: 2467, 3880388258.0: 2468, 937530571.0: 2469, 2465032386.0: 2470, 2638991623.0: 2471, 707835960.0: 2472, 1678529966.0: 2473, 210852147.0: 2474, 1971449274.0: 2475, 4014482072.0: 2476, 2202460031.0: 2477, 658686654.0: 2478, 4192814416.0: 2479, 2374900175.0: 2480, 2551509337.0: 2481, 843612228.0: 2482, 1175840597.0: 2483, 1416394110.0: 2484, 1955468764.0: 2485, 2737406761.0: 2486, 1836800185.0: 2487, 3870183044.0: 2488, 2929539268.0: 2489, 2853263969.0: 2490, 645788960.0: 2491, 884243373.0: 2492, 519777732.0: 2493, 3522334839.0: 2494, 3389887390.0: 2495, 1095671513.0: 2496, 3253942225.0: 2497, 1037481802.0: 2498, 2026999278.0: 2499, 878588844.0: 2500, 161158014.0: 2501, 1513233229.0: 2502, 3896859097.0: 2503, 60371122.0: 2504, 1341338879.0: 2505, 472108907.0: 2506, 2393792932.0: 2507, 2038757530.0: 2508, 226140557.0: 2509, 700988799.0: 2510, 4138500534.0: 2511, 766510205.0: 2512, 708267608.0: 2513, 3886792082.0: 2514, 2382463553.0: 2515, 1092143235.0: 2516, 2265453751.0: 2517, 229141561.0: 2518, 3140086642.0: 2519, 3521055917.0: 2520, 1572907038.0: 2521, 4056270746.0: 2522, 2952275954.0: 2523, 2982881956.0: 2524, 2614830409.0: 2525, 1397349092.0: 2526, 1233420817.0: 2527, 3359975728.0: 2528, 1960957751.0: 2529, 421074506.0: 2530, 2074134526.0: 2531, 687976318.0: 2532, 2695243230.0: 2533, 2703951300.0: 2534, 1166827294.0: 2535, 2998959791.0: 2536, 2970996446.0: 2537, 1025049733.0: 2538, 2628046257.0: 2539, 1244861049.0: 2540, 3873840492.0: 2541, 3813050573.0: 2542, 4186978093.0: 2543, 3650980159.0: 2544, 110590786.0: 2545, 1372173142.0: 2546, 1760214684.0: 2547, 1840536982.0: 2548, 2394657318.0: 2549, 2928325427.0: 2550, 3878305447.0: 2551, 3948634038.0: 2552, 2290741975.0: 2553, 3596370819.0: 2554, 3339178409.0: 2555, 3742026300.0: 2556, 3677305483.0: 2557, 1776053002.0: 2558, 2450196265.0: 2559, 1997928454.0: 2560, 2992694478.0: 2561, 2111431176.0: 2562, 3848128941.0: 2563, 1095485362.0: 2564, 650288151.0: 2565, 3825928351.0: 2566, 2585904775.0: 2567, 2912676089.0: 2568, 2371738571.0: 2569, 2455839292.0: 2570, 1876004329.0: 2571, 1971366476.0: 2572, 1739931088.0: 2573, 2778470687.0: 2574, 3491099286.0: 2575, 2450520937.0: 2576, 2434025955.0: 2577, 3947246100.0: 2578, 1629154516.0: 2579, 3000086957.0: 2580, 2097339812.0: 2581, 3096822317.0: 2582, 2706509102.0: 2583, 4225623122.0: 2584, 3500795910.0: 2585, 2987248065.0: 2586, 853438842.0: 2587, 2179850480.0: 2588, 3804536556.0: 2589, 991710730.0: 2590, 733125181.0: 2591, 2643017522.0: 2592, 2049633107.0: 2593, 3295812524.0: 2594, 2771491984.0: 2595, 818005011.0: 2596, 1401942983.0: 2597, 2934368628.0: 2598, 3575749797.0: 2599, 488268809.0: 2600, 1641079914.0: 2601, 2410008766.0: 2602, 350787555.0: 2603, 2498083712.0: 2604, 4031362120.0: 2605, 575081450.0: 2606, 1584771318.0: 2607, 1023893493.0: 2608, 157822626.0: 2609, 3207697527.0: 2610, 2138399277.0: 2611, 4059682625.0: 2612, 506817034.0: 2613, 1077805875.0: 2614, 2728707547.0: 2615, 3500563555.0: 2616, 2400492202.0: 2617, 399693220.0: 2618, 622719860.0: 2619, 3779088445.0: 2620, 307767092.0: 2621, 1096831657.0: 2622, 497288578.0: 2623, 4207356553.0: 2624, 1367592754.0: 2625, 1737661351.0: 2626, 3879580802.0: 2627, 2215296491.0: 2628, 2591713690.0: 2629, 688336324.0: 2630, 2096009691.0: 2631, 2478946995.0: 2632, 1591526560.0: 2633, 1027931076.0: 2634, 1589839234.0: 2635, 2660758459.0: 2636, 2966576228.0: 2637, 2073563894.0: 2638, 1267916610.0: 2639, 3852640365.0: 2640, 1602937882.0: 2641, 1406410801.0: 2642, 2584198358.0: 2643, 495763918.0: 2644, 2053800102.0: 2645, 640442565.0: 2646, 4115235045.0: 2647, 3266254258.0: 2648, 2580868772.0: 2649, 1679814613.0: 2650, 3819767024.0: 2651, 1888556855.0: 2652, 2469614256.0: 2653, 2452391226.0: 2654, 3505991626.0: 2655, 3396514144.0: 2656, 4130426280.0: 2657, 1038385932.0: 2658, 3707942725.0: 2659, 432317695.0: 2660, 682636472.0: 2661, 4190713511.0: 2662, 3482181754.0: 2663, 3587655966.0: 2664, 2159692192.0: 2665, 1052024525.0: 2666, 3913101905.0: 2667, 3604354852.0: 2668, 2710725251.0: 2669, 2322639583.0: 2670, 3324192647.0: 2671, 1359124792.0: 2672, 2842398492.0: 2673, 1611169575.0: 2674, 3447517199.0: 2675, 3300034154.0: 2676, 3308536017.0: 2677, 1621338248.0: 2678, 3863248231.0: 2679, 2127191484.0: 2680, 1694011798.0: 2681, 3544422173.0: 2682, 2494849179.0: 2683, 3242249624.0: 2684, 1568891884.0: 2685, 717801286.0: 2686, 122342164.0: 2687, 2354793704.0: 2688, 2266148488.0: 2689, 2368898381.0: 2690, 142868058.0: 2691, 3222295282.0: 2692, 3250123866.0: 2693, 916590211.0: 2694, 726919125.0: 2695, 1915182497.0: 2696, 3777367889.0: 2697, 646135374.0: 2698, 1694702368.0: 2699, 2640891597.0: 2700, 502854038.0: 2701, 3866084099.0: 2702, 607376155.0: 2703, 2599945289.0: 2704, 4066563010.0: 2705, 1772783413.0: 2706, 819364183.0: 2707, 1773444143.0: 2708, 3909892751.0: 2709, 2381019160.0: 2710, 892696673.0: 2711, 3037769954.0: 2712, 3370457304.0: 2713, 2439867950.0: 2714, 1917503446.0: 2715, 3288905892.0: 2716, 1513620528.0: 2717, 642692518.0: 2718, 3424223386.0: 2719, 3494177519.0: 2720, 2857824366.0: 2721, 2316837140.0: 2722, 782573603.0: 2723, 1906590010.0: 2724, 762966322.0: 2725, 402817013.0: 2726, 893470302.0: 2727, 1624057834.0: 2728, 2378297054.0: 2729, 757121246.0: 2730, 3764484054.0: 2731, 3936418948.0: 2732, 2522928267.0: 2733, 1858248742.0: 2734, 3441480240.0: 2735, 3435624784.0: 2736, 1588931197.0: 2737, 3943975284.0: 2738, 550730829.0: 2739, 1390089820.0: 2740, 1533921148.0: 2741, 606921067.0: 2742, 3559736100.0: 2743, 334364918.0: 2744, 2406234551.0: 2745, 1980524343.0: 2746, 532894190.0: 2747, 1660926437.0: 2748, 2269287669.0: 2749, 3655926885.0: 2750, 591350674.0: 2751, 1557834232.0: 2752, 1145619829.0: 2753, 609841430.0: 2754, 2087151692.0: 2755, 3628672226.0: 2756, 4187688987.0: 2757, 384383771.0: 2758, 759902351.0: 2759, 1498454644.0: 2760, 1549348635.0: 2761, 906679681.0: 2762, 3089039500.0: 2763, 3595282046.0: 2764, 2557264769.0: 2765, 507570136.0: 2766, 842045414.0: 2767, 2209373026.0: 2768, 365327498.0: 2769, 920380806.0: 2770, 1004823850.0: 2771, 2372867785.0: 2772, 3317484005.0: 2773, 2729602959.0: 2774, 2186480653.0: 2775, 1176946858.0: 2776, 1451676625.0: 2777, 3265308365.0: 2778, 1056395523.0: 2779, 1245599256.0: 2780, 2436940938.0: 2781, 2939495935.0: 2782, 169249111.0: 2783, 138801591.0: 2784, 28141996.0: 2785, 121984544.0: 2786, 2161664208.0: 2787, 2425000149.0: 2788, 2589780678.0: 2789, 664556966.0: 2790, 2492950997.0: 2791, 3613303362.0: 2792, 2596551092.0: 2793, 2631219616.0: 2794, 3573191707.0: 2795, 3968581757.0: 2796, 3204487431.0: 2797, 2814491212.0: 2798, 4288377701.0: 2799, 3317137078.0: 2800, 1042114400.0: 2801, 859196729.0: 2802, 1911263987.0: 2803, 2107024936.0: 2804, 515035285.0: 2805, 2117195795.0: 2806, 866808735.0: 2807, 1590152274.0: 2808, 3046799155.0: 2809, 3949585808.0: 2810, 634222956.0: 2811, 3140299823.0: 2812, 172182854.0: 2813, 1145697083.0: 2814, 3830908922.0: 2815, 710790433.0: 2816, 4285750928.0: 2817, 261649422.0: 2818, 2031207620.0: 2819, 4141675609.0: 2820, 3212114580.0: 2821, 1110768837.0: 2822, 1653904456.0: 2823, 2227761388.0: 2824, 1469089742.0: 2825, 2793486148.0: 2826, 2407210902.0: 2827, 647012125.0: 2828, 2968721014.0: 2829, 1006064549.0: 2830, 3579613864.0: 2831, 2740714221.0: 2832, 3398716262.0: 2833, 2613631905.0: 2834, 650807626.0: 2835, 3968145334.0: 2836, 1986994398.0: 2837, 4081924532.0: 2838, 653812114.0: 2839, 87062558.0: 2840, 1136749645.0: 2841, 1294749089.0: 2842, 529402655.0: 2843, 2165254925.0: 2844, 2096143505.0: 2845, 3100539737.0: 2846, 492395038.0: 2847, 4085686134.0: 2848, 1405025056.0: 2849, 2151753497.0: 2850, 3615914626.0: 2851, 3224545172.0: 2852, 3335385767.0: 2853, 431982068.0: 2854, 488153440.0: 2855, 2900091822.0: 2856, 1205638474.0: 2857, 533978863.0: 2858, 2996259794.0: 2859, 3322192008.0: 2860, 826739508.0: 2861, 3642388215.0: 2862, 1117786217.0: 2863, 1449615496.0: 2864, 142828860.0: 2865, 3221096393.0: 2866, 1166337942.0: 2867, 701728845.0: 2868, 1803149494.0: 2869, 3984202006.0: 2870, 1026212335.0: 2871, 2536089935.0: 2872, 1618481905.0: 2873, 3240838365.0: 2874, 3246420025.0: 2875, 3807349894.0: 2876, 4092891846.0: 2877, 213198764.0: 2878, 2926005817.0: 2879, 1987578043.0: 2880, 1396680583.0: 2881, 3280739986.0: 2882, 940274098.0: 2883, 2642684021.0: 2884, 2702508400.0: 2885, 3062905402.0: 2886, 2917929540.0: 2887, 888261876.0: 2888, 4036285493.0: 2889, 864137725.0: 2890, 1808887535.0: 2891, 3124090233.0: 2892, 4062357349.0: 2893, 2085476561.0: 2894, 254888618.0: 2895, 1041612629.0: 2896, 885306656.0: 2897, 3949163046.0: 2898, 3294581804.0: 2899, 1286342165.0: 2900, 2347363853.0: 2901, 3364033754.0: 2902, 2445170845.0: 2903, 2791265351.0: 2904, 3892903897.0: 2905, 2062456176.0: 2906, 1195017459.0: 2907, 821213451.0: 2908, 3140374421.0: 2909, 2474145058.0: 2910, 3499219252.0: 2911, 1748640226.0: 2912, 3446240086.0: 2913, 216137681.0: 2914, 4289242070.0: 2915, 3054322292.0: 2916, 2279052394.0: 2917, 421713960.0: 2918, 698054522.0: 2919, 1223981946.0: 2920, 3365647590.0: 2921, 4168929824.0: 2922, 4275314143.0: 2923, 3768669391.0: 2924, 2734636200.0: 2925, 425482057.0: 2926, 1922147987.0: 2927, 2561176667.0: 2928, 3639495629.0: 2929, 3654008301.0: 2930, 2960184876.0: 2931, 1229803162.0: 2932, 238732541.0: 2933, 929015840.0: 2934, 3482489995.0: 2935, 3268208723.0: 2936, 2859476012.0: 2937, 57396896.0: 2938, 955739616.0: 2939, 997212569.0: 2940, 2203472452.0: 2941, 3361501337.0: 2942, 2504917217.0: 2943, 1647928971.0: 2944, 3274600927.0: 2945, 3961313289.0: 2946, 2926347178.0: 2947, 1860438245.0: 2948, 82904803.0: 2949, 1729850305.0: 2950, 4057799129.0: 2951, 400968555.0: 2952, 1886059476.0: 2953, 3279005876.0: 2954, 2377139464.0: 2955, 4257720822.0: 2956, 848471769.0: 2957, 2991902122.0: 2958, 1640906599.0: 2959, 513485453.0: 2960, 2748050865.0: 2961, 3380402502.0: 2962, 478491177.0: 2963, 3441504414.0: 2964, 3850346653.0: 2965, 3662182930.0: 2966, 4187586931.0: 2967, 412908228.0: 2968, 161698341.0: 2969, 1668463849.0: 2970, 3379446690.0: 2971, 3830884060.0: 2972, 560707817.0: 2973, 3845507519.0: 2974, 851059772.0: 2975, 3183360752.0: 2976, 2309528133.0: 2977, 202719956.0: 2978, 4171248755.0: 2979, 1730333394.0: 2980, 684062678.0: 2981, 1827320422.0: 2982, 1890446350.0: 2983, 2484636819.0: 2984, 1743464393.0: 2985, 136831915.0: 2986, 973185080.0: 2987, 1202702622.0: 2988, 1231000986.0: 2989, 3665150367.0: 2990, 121768380.0: 2991, 4105579087.0: 2992, 1300663513.0: 2993, 3779487172.0: 2994, 3170374376.0: 2995, 3461127426.0: 2996, 2529305042.0: 2997, 496147914.0: 2998, 1856375775.0: 2999, 1620929931.0: 3000, 1013671688.0: 3001, 874173125.0: 3002, 2930866482.0: 3003, 1299521402.0: 3004, 951618914.0: 3005, 1586042798.0: 3006, 2417720343.0: 3007, 3106730833.0: 3008, 1629390450.0: 3009, 247453603.0: 3010, 3091538831.0: 3011, 2126938349.0: 3012, 944425457.0: 3013, 3834813746.0: 3014, 585872685.0: 3015, 4026929087.0: 3016, 354267746.0: 3017, 3874443328.0: 3018, 1966048310.0: 3019, 392234916.0: 3020, 895719687.0: 3021, 1886386417.0: 3022, 2142773437.0: 3023, 3284031349.0: 3024, 2556115031.0: 3025, 1176286594.0: 3026, 3417056853.0: 3027, 2061774065.0: 3028, 3862818789.0: 3029, 436899159.0: 3030, 1945797869.0: 3031, 302882766.0: 3032, 2962147350.0: 3033, 1000125152.0: 3034, 547536741.0: 3035, 878979709.0: 3036, 2094033622.0: 3037, 2166245398.0: 3038, 4206258697.0: 3039, 3914611149.0: 3040, 3505025395.0: 3041, 2666240276.0: 3042, 3090628508.0: 3043, 2113427068.0: 3044, 1262513172.0: 3045, 3286976459.0: 3046, 13479263.0: 3047, 1005565377.0: 3048, 869438692.0: 3049, 2224504105.0: 3050, 1507202461.0: 3051, 543463692.0: 3052, 4011568418.0: 3053, 2201973657.0: 3054, 935084651.0: 3055, 1006446065.0: 3056, 3322099744.0: 3057, 4288003046.0: 3058, 3650517431.0: 3059, 1291223862.0: 3060, 877325125.0: 3061, 3138277534.0: 3062, 3558542265.0: 3063, 2423302512.0: 3064, 1579206370.0: 3065, 853316008.0: 3066, 3365005995.0: 3067, 108252703.0: 3068, 1319578417.0: 3069, 3995484435.0: 3070, 2375145143.0: 3071, 3634487759.0: 3072, 2580400436.0: 3073, 1140315027.0: 3074, 510533079.0: 3075, 2497686415.0: 3076, 408854334.0: 3077, 1826130051.0: 3078, 1478883855.0: 3079, 1779809898.0: 3080, 716639415.0: 3081, 1534812909.0: 3082, 454068350.0: 3083, 1523634514.0: 3084, 2386591785.0: 3085, 1660052765.0: 3086, 3933893693.0: 3087, 383334797.0: 3088, 2880932799.0: 3089, 1695576678.0: 3090, 4189423458.0: 3091, 3009255259.0: 3092, 4041389128.0: 3093, 3973753751.0: 3094, 1403819445.0: 3095, 15364154.0: 3096, 2088725128.0: 3097, 899561109.0: 3098, 1757432607.0: 3099, 2369456798.0: 3100, 3042287857.0: 3101, 4226728717.0: 3102, 2462421460.0: 3103, 1186213617.0: 3104, 1486715018.0: 3105, 2080587552.0: 3106, 3059973551.0: 3107, 1180721562.0: 3108, 1255777840.0: 3109, 307316755.0: 3110, 3909396723.0: 3111, 1055593055.0: 3112, 3734826108.0: 3113, 122465848.0: 3114, 3315509715.0: 3115, 1910702698.0: 3116, 2877797611.0: 3117, 1901681339.0: 3118, 826348532.0: 3119, 3085306991.0: 3120, 678341431.0: 3121, 1437848250.0: 3122, 245929591.0: 3123, 2396788791.0: 3124, 2384063996.0: 3125, 3609305534.0: 3126, 889248981.0: 3127, 934415318.0: 3128, 2826741445.0: 3129, 2586546020.0: 3130, 3395940952.0: 3131, 4086888213.0: 3132, 540066988.0: 3133, 928128187.0: 3134, 435551443.0: 3135, 2977499403.0: 3136, 2737196169.0: 3137, 2730014845.0: 3138, 2309964326.0: 3139, 1845189656.0: 3140, 1623006286.0: 3141, 1028946357.0: 3142, 2375747382.0: 3143, 968873776.0: 3144, 1088075355.0: 3145, 2093456681.0: 3146, 1963762093.0: 3147, 1418148118.0: 3148, 86085209.0: 3149, 4123004497.0: 3150, 2792032041.0: 3151, 2714682437.0: 3152, 3466584759.0: 3153, 407687105.0: 3154, 3344101157.0: 3155, 2152892170.0: 3156, 2507374010.0: 3157, 4228911816.0: 3158, 2865906751.0: 3159, 1170912485.0: 3160, 505100054.0: 3161, 1808098102.0: 3162, 3392645424.0: 3163, 2507573897.0: 3164, 2288072856.0: 3165, 1551595997.0: 3166, 1102274733.0: 3167, 831664465.0: 3168, 617229667.0: 3169, 606975628.0: 3170, 2079398216.0: 3171, 3309175143.0: 3172, 18617950.0: 3173, 904561870.0: 3174, 2163386057.0: 3175, 673368382.0: 3176, 3763649649.0: 3177}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 2746444292.0: 4}, {985283518.0: 0, 1037565863.0: 1, 2746444292.0: 2, 3187964512.0: 3, 3554254475.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 1130791706.0: 2, 3187964512.0: 3, 3554254475.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 1130791706.0: 2, 3187964512.0: 3, 3554254475.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 1466425173.0: 2, 3187964512.0: 3, 3554254475.0: 4, 1130791706.0: 5}, {543223747.0: 0, 985283518.0: 1, 1037565863.0: 2, 3187964512.0: 3, 3554254475.0: 4, 1130791706.0: 5}, {985283518.0: 0, 1037565863.0: 1, 1130791706.0: 2, 3187964512.0: 3, 3554254475.0: 4}, {985283518.0: 0, 1037565863.0: 1, 1130791706.0: 2, 3187964512.0: 3, 3554254475.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}, {985283518.0: 0, 1037565863.0: 1, 3187964512.0: 2, 3554254475.0: 3, 1130791706.0: 4}]
list_of_cols_to_normalize = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]

transform_true = False

def column_norm(column,mappings):
    listy = []
    for i,val in enumerate(column.reshape(-1)):
        if not (val in mappings):
            mappings[val] = int(max(mappings.values())) + 1
        listy.append(mappings[val])
    return np.array(listy)

def Normalize(data_arr):
    if list_of_cols_to_normalize:
        for i,mapping in zip(list_of_cols_to_normalize, mappings):
            if i >= data_arr.shape[1]:
                break
            col = data_arr[:, i]
            normcol = column_norm(col,mapping)
            data_arr[:, i] = normcol
        return data_arr
    else:
        return data_arr

def transform(X):
    mean = None
    components = None
    whiten = None
    explained_variance = None
    if (transform_true):
        mean = np.array([])
        components = np.array([])
        whiten = None
        explained_variance = np.array([])
        X = X - mean

    X_transformed = np.dot(X, components.T)
    if whiten:
        X_transformed /= np.sqrt(explained_variance)
    return X_transformed

# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="Class"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="Class"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'EI': 0, 'IE': 1, 'N': 2}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def single_classify(row):
    #inits
    x = row
    o = [0] * num_output_logits


    #Nueron Equations
    h_0 = max((((-0.07676753 * float(x[0]))+ (-0.018687073 * float(x[1]))+ (-0.31623796 * float(x[2]))+ (0.23573497 * float(x[3]))+ (0.25754124 * float(x[4]))+ (0.12575078 * float(x[5]))+ (-0.05947726 * float(x[6]))+ (0.16830528 * float(x[7]))+ (-0.2239919 * float(x[8]))+ (0.22439465 * float(x[9]))+ (-0.2868408 * float(x[10]))+ (-0.2737167 * float(x[11]))+ (-0.10389598 * float(x[12]))+ (0.24280354 * float(x[13]))+ (-0.18977892 * float(x[14]))+ (-0.20107691 * float(x[15]))+ (0.20376684 * float(x[16]))+ (-0.0868151 * float(x[17]))+ (-0.105517454 * float(x[18]))+ (-0.01622318 * float(x[19]))+ (0.15632007 * float(x[20]))+ (-0.21067971 * float(x[21]))+ (0.121307835 * float(x[22]))+ (-0.07488629 * float(x[23]))+ (-0.22300935 * float(x[24]))+ (0.055579327 * float(x[25]))+ (-0.25217232 * float(x[26]))+ (-0.07744718 * float(x[27]))+ (0.24722491 * float(x[28]))+ (0.07979699 * float(x[29]))+ (-0.16358984 * float(x[30]))+ (0.108945094 * float(x[31]))+ (0.10686359 * float(x[32]))+ (0.22033153 * float(x[33]))+ (-0.3266604 * float(x[34]))+ (-0.30713502 * float(x[35]))+ (0.088195466 * float(x[36]))+ (0.23247798 * float(x[37]))+ (-0.09587874 * float(x[38]))+ (-0.19931935 * float(x[39]))+ (0.14634934 * float(x[40]))+ (0.044353575 * float(x[41]))+ (-0.18818647 * float(x[42]))+ (0.081890464 * float(x[43]))+ (0.22983809 * float(x[44]))+ (-0.27980992 * float(x[45]))+ (-0.14793956 * float(x[46]))+ (-0.31927413 * float(x[47]))+ (0.11091511 * float(x[48]))+ (0.024108896 * float(x[49])))+ ((-0.3126525 * float(x[50]))+ (0.17061718 * float(x[51]))+ (-0.04585203 * float(x[52]))+ (-0.057432897 * float(x[53]))+ (-0.27660415 * float(x[54]))+ (-0.14863354 * float(x[55]))+ (-0.03473455 * float(x[56]))+ (0.2067402 * float(x[57]))+ (0.19522649 * float(x[58]))+ (-0.20084894 * float(x[59]))+ (0.070427336 * float(x[60]))) + 0.2936192), 0)
    h_1 = max((((0.00019696062 * float(x[0]))+ (0.028131347 * float(x[1]))+ (-0.1455219 * float(x[2]))+ (0.015125385 * float(x[3]))+ (-0.13086972 * float(x[4]))+ (0.018099029 * float(x[5]))+ (-0.17972223 * float(x[6]))+ (-0.33713755 * float(x[7]))+ (-0.0025569776 * float(x[8]))+ (-0.030918574 * float(x[9]))+ (0.066728964 * float(x[10]))+ (-0.33891037 * float(x[11]))+ (0.08446597 * float(x[12]))+ (-0.31259087 * float(x[13]))+ (-0.043088496 * float(x[14]))+ (0.10242923 * float(x[15]))+ (0.08362709 * float(x[16]))+ (-0.32121453 * float(x[17]))+ (-0.02902064 * float(x[18]))+ (0.44324273 * float(x[19]))+ (-0.0187355 * float(x[20]))+ (-0.1194415 * float(x[21]))+ (0.05888267 * float(x[22]))+ (0.035245392 * float(x[23]))+ (0.2145628 * float(x[24]))+ (0.41616604 * float(x[25]))+ (0.2290839 * float(x[26]))+ (0.033926338 * float(x[27]))+ (0.3268493 * float(x[28]))+ (0.526959 * float(x[29]))+ (-0.764353 * float(x[30]))+ (-8.474566 * float(x[31]))+ (1.2907968 * float(x[32]))+ (0.38332194 * float(x[33]))+ (1.0881903 * float(x[34]))+ (-1.3338524 * float(x[35]))+ (0.06652533 * float(x[36]))+ (0.18170826 * float(x[37]))+ (-0.0751933 * float(x[38]))+ (-0.10464841 * float(x[39]))+ (-0.30277684 * float(x[40]))+ (-0.39822674 * float(x[41]))+ (-0.072517514 * float(x[42]))+ (-0.011857591 * float(x[43]))+ (-0.05080141 * float(x[44]))+ (0.19177833 * float(x[45]))+ (-0.0897022 * float(x[46]))+ (-0.10360353 * float(x[47]))+ (-0.124341324 * float(x[48]))+ (-0.15442833 * float(x[49])))+ ((-0.33407122 * float(x[50]))+ (-0.050418194 * float(x[51]))+ (-0.31501177 * float(x[52]))+ (0.05073216 * float(x[53]))+ (-0.26321346 * float(x[54]))+ (0.15358724 * float(x[55]))+ (-0.20183964 * float(x[56]))+ (-0.0127420155 * float(x[57]))+ (0.3645036 * float(x[58]))+ (-0.094094984 * float(x[59]))+ (0.062876225 * float(x[60]))) + 2.3229828), 0)
    h_2 = max((((6.922351e-05 * float(x[0]))+ (0.06506448 * float(x[1]))+ (-0.01718415 * float(x[2]))+ (-0.08190565 * float(x[3]))+ (0.031440265 * float(x[4]))+ (-0.010867882 * float(x[5]))+ (0.07858882 * float(x[6]))+ (-0.10944614 * float(x[7]))+ (0.039225984 * float(x[8]))+ (0.1701245 * float(x[9]))+ (0.048795998 * float(x[10]))+ (-0.19402137 * float(x[11]))+ (0.0049885185 * float(x[12]))+ (-0.19922264 * float(x[13]))+ (-0.059358135 * float(x[14]))+ (0.25096172 * float(x[15]))+ (0.122977525 * float(x[16]))+ (0.009856551 * float(x[17]))+ (0.10869998 * float(x[18]))+ (0.09712268 * float(x[19]))+ (-0.042588618 * float(x[20]))+ (0.20241846 * float(x[21]))+ (-0.0005754462 * float(x[22]))+ (-0.10105764 * float(x[23]))+ (-0.023499673 * float(x[24]))+ (0.047771912 * float(x[25]))+ (-0.017122017 * float(x[26]))+ (-0.023522813 * float(x[27]))+ (-0.28307635 * float(x[28]))+ (2.4857428 * float(x[29]))+ (-8.107365 * float(x[30]))+ (0.0893122 * float(x[31]))+ (-0.042653456 * float(x[32]))+ (-0.016712798 * float(x[33]))+ (-0.027844243 * float(x[34]))+ (-0.01715445 * float(x[35]))+ (-0.037098 * float(x[36]))+ (-0.027925173 * float(x[37]))+ (0.01896551 * float(x[38]))+ (0.07006954 * float(x[39]))+ (0.049959134 * float(x[40]))+ (-0.11263111 * float(x[41]))+ (0.001984224 * float(x[42]))+ (-0.02976456 * float(x[43]))+ (0.12841475 * float(x[44]))+ (0.012052094 * float(x[45]))+ (-0.09289447 * float(x[46]))+ (-0.15311821 * float(x[47]))+ (-0.13118736 * float(x[48]))+ (0.034355275 * float(x[49])))+ ((-0.02875757 * float(x[50]))+ (0.09739889 * float(x[51]))+ (-0.012498521 * float(x[52]))+ (-0.08485511 * float(x[53]))+ (-0.04228788 * float(x[54]))+ (0.06469468 * float(x[55]))+ (-0.088237725 * float(x[56]))+ (-0.012523147 * float(x[57]))+ (0.12950657 * float(x[58]))+ (0.057472855 * float(x[59]))+ (-0.12770966 * float(x[60]))) + -1.2449083), 0)
    o[0] = (0.8935094 * h_0)+ (0.7851307 * h_1)+ (-0.63626474 * h_2) + -0.11718347
    o[1] = (-0.304749 * h_0)+ (0.032572225 * h_1)+ (0.39882317 * h_2) + -1.9428895
    o[2] = (0.55581677 * h_0)+ (-0.41473407 * h_1)+ (-1.1595186 * h_2) + 5.7368426

    

    #Output Decision Rule
    if num_output_logits==1:
        return o[0]>=0
    else:
        return argmax(o)


def classify(arr, transform=False):
    #apply transformation if necessary
    if transform:
        arr[:,:-1] = transform(arr[:,:-1])
    #init
    w_h = np.array([[-0.07676752656698227, -0.01868707314133644, -0.3162379562854767, 0.2357349693775177, 0.2575412392616272, 0.12575078010559082, -0.05947725847363472, 0.16830527782440186, -0.22399190068244934, 0.22439464926719666, -0.2868407964706421, -0.27371668815612793, -0.10389597713947296, 0.24280354380607605, -0.18977892398834229, -0.2010769098997116, 0.2037668377161026, -0.08681509643793106, -0.10551745444536209, -0.016223179176449776, 0.15632006525993347, -0.21067970991134644, 0.12130783498287201, -0.07488629221916199, -0.22300934791564941, 0.055579327046871185, -0.2521723210811615, -0.07744718343019485, 0.24722491204738617, 0.07979699224233627, -0.16358983516693115, 0.1089450940489769, 0.1068635880947113, 0.22033153474330902, -0.3266603946685791, -0.3071350157260895, 0.08819546550512314, 0.23247797787189484, -0.09587874263525009, -0.19931934773921967, 0.14634934067726135, 0.04435357451438904, -0.18818646669387817, 0.08189046382904053, 0.22983808815479279, -0.2798099219799042, -0.1479395627975464, -0.3192741274833679, 0.11091510951519012, 0.024108896031975746, -0.31265249848365784, 0.17061717808246613, -0.04585203155875206, -0.05743289738893509, -0.27660414576530457, -0.14863353967666626, -0.03473455086350441, 0.20674020051956177, 0.1952264904975891, -0.20084893703460693, 0.07042733579874039], [0.00019696062372531742, 0.02813134714961052, -0.14552189409732819, 0.01512538455426693, -0.13086971640586853, 0.01809902861714363, -0.17972223460674286, -0.3371375501155853, -0.0025569775607436895, -0.030918573960661888, 0.06672896444797516, -0.33891037106513977, 0.08446597307920456, -0.3125908672809601, -0.04308849573135376, 0.10242923349142075, 0.08362708985805511, -0.3212145268917084, -0.0290206391364336, 0.44324272871017456, -0.018735500052571297, -0.11944150179624557, 0.05888266861438751, 0.035245392471551895, 0.2145628035068512, 0.4161660373210907, 0.22908389568328857, 0.0339263379573822, 0.3268493115901947, 0.5269590020179749, -0.7643529772758484, -8.474566459655762, 1.2907967567443848, 0.38332194089889526, 1.0881903171539307, -1.3338524103164673, 0.06652533262968063, 0.18170826137065887, -0.07519330084323883, -0.1046484112739563, -0.30277684330940247, -0.3982267379760742, -0.0725175142288208, -0.011857590638101101, -0.050801411271095276, 0.19177833199501038, -0.08970219641923904, -0.10360352694988251, -0.12434132397174835, -0.15442833304405212, -0.33407121896743774, -0.0504181943833828, -0.31501176953315735, 0.05073216184973717, -0.26321345567703247, 0.1535872370004654, -0.2018396407365799, -0.012742015533149242, 0.3645035922527313, -0.09409498423337936, 0.06287622451782227], [6.922351167304441e-05, 0.06506448239088058, -0.017184149473905563, -0.08190564811229706, 0.031440265476703644, -0.010867881588637829, 0.0785888209939003, -0.10944613814353943, 0.039225984364748, 0.17012450098991394, 0.048795998096466064, -0.19402137398719788, 0.004988518543541431, -0.1992226392030716, -0.0593581348657608, 0.2509617209434509, 0.12297752499580383, 0.009856550954282284, 0.1086999773979187, 0.0971226766705513, -0.04258861765265465, 0.2024184614419937, -0.000575446174480021, -0.10105764120817184, -0.02349967323243618, 0.047771912068128586, -0.017122017219662666, -0.023522812873125076, -0.28307634592056274, 2.4857428073883057, -8.107364654541016, 0.08931220322847366, -0.04265345633029938, -0.016712797805666924, -0.027844242751598358, -0.017154449597001076, -0.037098001688718796, -0.027925172820687294, 0.01896551065146923, 0.07006953656673431, 0.04995913431048393, -0.11263111233711243, 0.0019842239562422037, -0.029764559119939804, 0.12841475009918213, 0.012052093632519245, -0.09289447218179703, -0.15311820805072784, -0.13118736445903778, 0.034355275332927704, -0.028757570311427116, 0.09739889204502106, -0.012498521246016026, -0.0848551094532013, -0.042287878692150116, 0.06469468027353287, -0.08823772519826889, -0.012523147277534008, 0.12950657308101654, 0.05747285485267639, -0.12770965695381165]])
    b_h = np.array([0.29361918568611145, 2.3229827880859375, -1.244908332824707])
    w_o = np.array([[0.8935093879699707, 0.7851306796073914, -0.6362647414207458], [-0.3047490119934082, 0.032572224736213684, 0.39882317185401917], [0.5558167695999146, -0.4147340655326843, -1.1595185995101929]])
    b_o = np.array([-0.11718346923589706, -1.9428894519805908, 5.736842632293701])

    #Hidden Layer
    h = np.dot(arr, w_h.T) + b_h
    
    relu = np.maximum(h, np.zeros_like(h))


    #Output
    out = np.dot(relu, w_o.T) + b_o
    if num_output_logits == 1:
        return (out >= 0).astype('int').reshape(-1)
    else:
        return (np.argmax(out, axis=1)).reshape(-1)



def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(reader, None) + ["Prediction"]))
        
        
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(single_classify(arr[i])), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            print(','.join(row))


def Validate(cleanarr):
    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs
    


# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()


    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')


    #Normalize
    cleanarr = Normalize(cleanarr)


    #Transform
    if transform_true:
        if args.validate:
            trans = transform(cleanarr[:, :-1])
            cleanarr = np.concatenate((trans, cleanarr[:, -1].reshape(-1, 1)), axis = 1)
        else:
            cleanarr = transform(cleanarr)


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile, get_key, classmapping)


    #Validate
    else:
        classifier_type = 'NN'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds = Validate(cleanarr)
        else:
            count, correct_count, numeachclass, preds = Validate(cleanarr)
        #Correct Labels
        true_labels = cleanarr[:, -1]


        #Report Metrics
        model_cap = 198
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


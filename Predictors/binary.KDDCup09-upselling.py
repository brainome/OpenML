#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f QC -target UPSELLING -cm {'-1':0,'1':1} KDDCup09-upselling.csv -o KDDCup09-upselling.py -nsamples 0 --yes -nsamples 0 -e 100
# Total compiler execution time: 0:56:20.69. Finished on: Sep-03-2020 14:51:54.
# This source code requires Python 3.
#
"""
Classifier Type:                     Decision Tree
System Type:                         Binary classifier
Training/Validation Split:           60:40%
Best-guess accuracy:                 92.63%
Overall Model accuracy:              94.72% (47361/50000 correct)
Overall Improvement over best guess: 2.09% (of possible 7.37%)
Model capacity (MEC):                4054 bits
Generalization ratio:                11.68 bits/bit
Model efficiency:                    0.00%/parameter
System behavior
True Negatives:                      90.13% (45063/50000)
True Positives:                      4.60% (2298/50000)
False Negatives:                     2.77% (1384/50000)
False Positives:                     2.51% (1255/50000)
True Pos. Rate/Sensitivity/Recall:   0.62
True Neg. Rate/Specificity:          0.97
Precision:                           0.65
F-1 Measure:                         0.64
False Negative Rate/Miss Rate:       0.38
Critical Success Index:              0.47
Confusion Matrix:
 [90.13% 2.51%]
 [2.77% 4.60%]
Overfitting:                         No
Note: Labels have been remapped to '-1'=0, '1'=1.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "KDDCup09-upselling.csv"


#Number of attributes
num_attr = 230
n_classes = 2


# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="UPSELLING"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="UPSELLING"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'-1':0,'1':1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([324455074703.8961, 324514136357.37006, 326196737523.2883, 326223570230.7016, 326313092238.36456, 326334473279.2783, 326723471184.77856, 326749788182.83075, 326896520611.76355, 326924731697.392, 327484677939.6492, 327495925592.4725, 327611973012.0661, 327623657844.11145, 327934200352.7934, 327940187783.2622, 328030964342.33, 328043007168.0769, 328321643080.4435, 328336089811.21313, 328485994519.3145, 328499172247.681, 328557920657.5174, 328566745034.8417, 328853149830.8366, 328856465709.3861, 328907227593.3631, 328912891942.7532, 329084244441.64124, 329096080342.1853, 329153123513.12195, 329156570596.36414, 329180252605.13275, 329189586061.93024, 329238203693.8355, 329246632194.51843, 329417735743.475, 329421989237.02454, 329711763488.1457, 329714479107.9652, 329867576737.4619, 329872970204.4802, 329996498378.8715, 329997737389.3357, 330050626310.05396, 330061002285.19617, 330172622560.0917, 330172979750.2017, 330182631483.98425, 330183320970.77905, 330284744085.7703, 330289655237.5587, 330449388678.0882, 330451592028.2923, 330477933510.0459, 330480766377.28186, 330495316477.9034, 330500368025.36224, 330628626610.5775, 330630118460.3921, 330713082241.7449, 330713925415.6079, 330779008680.33545, 330786145643.9487, 330829791584.4905, 330832896730.9065, 330884915437.06366, 330886501986.79407, 330907164010.07544, 330910508227.2871, 330956843457.171, 330962687659.5831, 331057625553.23035, 331058609448.6163, 331069547776.06006, 331072817964.58887, 331143332933.019, 331143908062.43164, 331198682877.3782, 331199103885.6476, 331217481741.7567, 331218920298.1229, 331248487772.70465, 331253206519.1366, 331427520869.22253, 331430975504.72687, 331448375393.0316, 331453239766.25714, 331463701417.2582, 331466333598.02466, 331521519935.8307, 331523782270.0916, 331565119125.20966, 331567779438.37506, 331570359377.2639, 331571921814.9313, 331610541587.38104, 331612411902.8259, 331615760104.5156, 331617823124.4862, 331683549853.6076, 331686008977.9778, 331742838768.59033, 331743077770.32196, 331777435865.6722, 331780326647.0718, 331794276848.3838, 331795431110.6009, 331812537239.2163, 331814945084.83374, 331820580126.9918, 331821959367.834, 331880904712.7705, 331882074031.09827, 331892503577.484, 331896808935.7692, 331918027878.8212, 331918669393.64484, 331921911903.2203, 331924614611.70386, 331975996783.2621, 331977180989.70984, 332022795299.5532, 332024742711.71423, 332068837118.93494, 332070339438.5425, 332080806197.9241, 332084832567.3241, 332156120403.1394, 332156707116.87976, 332197936421.4187, 332199573892.04315, 332212244424.5352, 332215174414.1067, 332216338039.3336, 332217662171.7239, 332268433478.4341, 332269946304.14606, 332344847251.93506, 332345291034.4857, 332362709229.15094, 332364181748.6615, 332456544663.69836, 332460642902.4379, 332497594426.734, 332501434511.5409, 332516185412.0581, 332517468402.2337, 332550115072.08215, 332551958202.1133, 332591015201.06384, 332591785383.1221, 332639686633.6437, 332651803608.5204, 332716229500.06366, 332716569802.52246, 332792605807.3385, 332793839085.7518, 332843746169.38025, 332850607933.9566, 332863081901.93854, 332865497949.72437, 332911306043.9806, 332911675073.8335, 332943902610.1202, 332946429829.7239, 332954621656.66455, 332955613951.9624, 332973167125.52747, 332975580279.2435, 333018891457.49835, 333020151384.1267, 333059591776.7935, 333060640114.3176, 333065577678.88025, 333067596210.53076, 333115306738.5746, 333117462591.1299, 333230273444.0935, 333231941248.973, 333234023494.0221, 333235133340.631, 333254755542.0529, 333254906770.7085, 333314331698.3379, 333314923708.1414, 333332993579.2104, 333334494525.2354, 333361467341.87756, 333362595591.8261, 333362858553.8411, 333366400322.77423, 333369975667.35834, 333370386590.2521, 333378786251.82916, 333380330459.48425, 333411061738.6753, 333412829940.25836, 333466463781.6863, 333468458877.80725, 333482155129.34686, 333486609871.1497, 333513347200.22754, 333514634681.25934, 333526814996.6604, 333527879867.585, 333585507605.1722, 333585943965.2899, 333613253966.11743, 333614543991.1111, 333662670657.68085, 333663460968.1919, 333698889474.63214, 333699740088.6105, 333717727846.49036, 333720212910.7208, 333754308868.30475, 333754433099.4656, 333764065397.18286, 333765390317.7167, 333788195723.023, 333788374873.048, 333791706362.6576, 333795706152.6582, 333800287867.4098, 333801213404.74634, 333803212856.3012, 333805277139.94464, 333810408221.37, 333811810356.447, 333812897103.3904, 333813809588.1853, 333814065446.7715, 333815137235.7662, 333931299035.2031, 333934418571.6489, 333935042500.71893, 333935823233.11774, 333968704625.8712, 333971629852.42804, 333982030739.1549, 333983010759.709, 333990236700.2473, 333991347456.23, 334003369423.5095, 334005380623.4675, 334030130626.8108, 334030494719.1787, 334038097981.3805, 334040521024.2392, 334070231460.73486, 334071264095.9092, 334072663658.0692, 334073651436.34436, 334074326239.2569, 334075385181.6984, 334086353483.19995, 334087306393.26575, 334094090019.8219, 334096860135.08374, 334112612466.7147, 334113522174.7679, 334125247162.6104, 334127447983.24304, 334203306183.11194, 334204197841.27966, 334215470674.8738, 334217418647.0249, 334234858311.80273, 334235516828.7684, 334244459587.6052, 334245450466.9292, 334248482257.2848, 334249454434.0066, 334287111610.8238, 334287876414.391, 334292219359.42816, 334294204230.4185, 334311118915.1443, 334311748351.40735, 334345184007.04504, 334347480733.27454, 334358337200.8914, 334358699319.17175, 334405885871.67413, 334407352650.9893, 334415806619.50446, 334417894042.5635, 334427662077.6377, 334428070315.10864, 334450824753.31866, 334453171112.0389, 334458906541.29694, 334459796834.95483, 334463715678.9572, 334465543401.3027, 334477820835.3269, 334481114842.6108, 334503580485.62976, 334503897724.13226, 334534055299.2703, 334535864605.842, 334549252467.1665, 334550207236.344, 334557859422.84186, 334559796440.98303, 334565752828.8268, 334566612979.9233, 334587994493.2786, 334588180536.9679, 334588830990.13306, 334589162546.17786, 334602296461.1179, 334602717525.33026, 334616366142.97876, 334617117039.21814, 334645254097.2168, 334646651547.0029, 334658652312.9944, 334659677181.30225, 334672170230.1357, 334673570084.1662, 334679501763.7372, 334680580055.7498, 334693759056.39874, 334694016554.18555, 334698273845.5969, 334699498239.8929, 334699961563.48706, 334700144773.738, 334731312621.0325, 334732053145.6057, 334770844719.7128, 334772317501.8529, 334782812979.92065, 334783063075.5138, 334791049447.3067, 334794423454.01575, 334802390391.41833, 334803679700.0394, 334809469937.83234, 334810321115.0317, 334854309857.6642, 334856799074.49243, 334910976098.5157, 334912219786.9332, 334923959500.45605, 334924181489.70264, 334938038793.2761, 334939049709.4299, 334948075578.6432, 334948386730.1185, 334948952985.3296, 334954557125.3131, 334967349804.01636, 334967687717.7905, 334997656946.04803, 334997966967.845, 335026728667.15845, 335027170649.68713, 335037663974.82996, 335037970701.55035, 335057171204.8701, 335058381962.7958, 335095460273.5149, 335097058752.11365, 335114304429.4402, 335115475440.9153, 335122202150.2056, 335122503911.7539, 335155620996.4357, 335155981014.01373, 335197209923.49915, 335198751622.86145, 335218616688.08704, 335218668612.5016, 335220084107.1465, 335220480965.6869, 335231451184.2645, 335234243469.4087, 335264758576.4059, 335265641568.9336, 335272106245.19617, 335273073008.6765, 335296284971.97144, 335296868637.0062, 335327377894.7883, 335328353100.3014, 335351219180.8481, 335352435586.71277, 335354024372.55786, 335354192732.66797, 335408524637.27136, 335409349008.06, 335444152829.71533, 335444731055.2343, 335446319019.8055, 335447478084.63367, 335452515670.4487, 335453524090.6821, 335457963427.3354, 335459033752.90906, 335462783368.94025, 335463760068.5006, 335477965975.49725, 335478948484.9114, 335489628278.41187, 335490521848.897, 335498886121.8485, 335500091852.7838, 335546927813.9882, 335547574826.3054, 335547860238.2141, 335548206663.0063, 335551593782.2759, 335552591522.5592, 335557739498.3982, 335558148437.33435, 335579503184.2982, 335580155647.3605, 335597210836.6154, 335598150945.94556, 335623479816.1485, 335623915937.63477, 335641898339.1087, 335642249745.99146, 335654593659.3701, 335658055580.479, 335737844099.24396, 335738226762.2061, 335764693687.2977, 335766682383.0382, 335784342049.10767, 335784732123.43726, 335786511038.2136, 335787022006.8944, 335801453997.23047, 335803494741.07446, 335823085083.568, 335824190174.47925, 335829483436.65906, 335829760401.1028, 335850143872.0874, 335850596524.2236, 335852360024.1461, 335855180834.5204, 335858061330.0041, 335858573397.17993, 335872108881.2925, 335872639072.8243, 335880892483.2012, 335883221152.52484, 335929253294.74, 335929707402.35864, 335949708953.45776, 335950137454.0485, 335960293885.0543, 335961975655.2042, 335966324463.18304, 335967200306.0509, 335976866889.1528, 335978633217.4228, 335989817031.16406, 335990541518.3977, 335997767048.46454, 335998929727.55804, 336058745951.4673, 336059077183.41327, 336060276978.70715, 336060619155.37463, 336107270439.4053, 336107781564.4311, 336158092550.1178, 336160137647.3325, 336160906210.52295, 336161462322.64514, 336162865514.26245, 336163359558.9376, 336167379351.7617, 336169989529.3705, 336189304554.9905, 336191104109.44446, 336219271376.3108, 336219421911.118, 336227134456.3761, 336228204529.5182, 336238438246.9237, 336240271594.94775, 336244624875.16174, 336245372238.6078, 336266450053.59314, 336267007925.4783, 336268770098.92346, 336270473675.38025, 336270789697.4844, 336271323280.2387, 336293866663.82043, 336294505639.1622, 336302977383.6945, 336303402674.0093, 336305163559.9557, 336307917652.34515, 336314924378.349, 336316354079.72455, 336317802899.39355, 336319587138.29553, 336335558401.1207, 336335788378.562, 336413808155.43585, 336415747556.31085, 336450070666.04443, 336452689279.3861, 336471670265.6146, 336472280190.63715, 336479313565.7398, 336479838612.67883, 336523073375.382, 336524055390.28925, 336526128519.56244, 336528309658.38165, 336529410486.7804, 336530159129.67413, 336557341528.8165, 336557781296.78, 336570920677.4116, 336571352751.3181, 336575662565.2361, 336577708930.6843, 336584444758.59827, 336584536687.60803, 336584706666.81177, 336585388625.5343, 336612154768.45703, 336613108405.6524, 336615129160.2674, 336615342008.49774, 336620423698.2089, 336621322234.0078, 336629107437.66296, 336630163801.806, 336632631592.0856, 336634554894.13135, 336674455567.16254, 336675492015.6596, 336684120455.6299, 336684697084.329, 336691980322.3425, 336692293973.1615, 336701850154.0972, 336702629589.58105, 336704416531.7415, 336705441451.5663, 336706485506.8113, 336707712901.7311, 336708432712.5228, 336709083043.9541, 336720235258.91174, 336721096805.9199, 336723329013.9885, 336723573371.4586, 336752484484.7671, 336752944313.37195, 336783988687.661, 336784869267.1278, 336794605532.35077, 336794920194.0997, 336797940178.59283, 336798607202.50446, 336805162219.19165, 336805324600.1771, 336817648301.92065, 336817985575.51764, 336819318399.18774, 336820058312.3963, 336835187172.22925, 336836084181.3092, 336861309000.4113, 336861939283.2313, 336864954129.05035, 336866100367.1077, 336869274889.25476, 336869944987.0271, 336879391283.3783, 336879486714.2623, 336882136695.8069, 336882506033.6302, 336899085332.7998, 336899449190.858, 336917504502.43774, 336918584629.40295, 336925454471.09753, 336928160167.17126, 336933839251.75256, 336934114884.132, 336958351245.3281, 336958585620.2785, 336961609468.67194, 336962307943.2344, 336976283085.84326, 336977510747.5706, 336991404877.97205, 336992192581.90796, 337018122818.7417, 337019120298.3035, 337024420575.2817, 337025613766.931, 337041740767.9176, 337041969869.07623, 337042422003.2692, 337043333486.0398, 337049017509.88403, 337051014921.27844, 337088361665.1703, 337088966622.8729, 337104653786.6399, 337106076145.4646, 337111566871.17615, 337112664587.48987, 337125792867.8354, 337126077822.92566, 337144859801.3777, 337146122125.4221, 337148787311.32214, 337150315506.359, 337152900944.3331, 337154273127.23364, 337169620510.0447, 337170183675.00256, 337189083980.30225, 337191475339.65173, 337211706639.21124, 337212266771.6668, 337223632688.42584, 337225448431.58954, 337258883226.4435, 337259169632.6415, 337276922441.1864, 337278135963.4098, 337279612673.28613, 337281119711.29767, 337287282853.91534, 337288264470.79144, 337301586917.83026, 337302549771.40594, 337311383447.66785, 337311633066.3729, 337313087869.1757, 337313432757.7063, 337329813067.2949, 337330848769.32983, 337346916841.95667, 337348420013.8457, 337350737869.5098, 337351032738.5244, 337363856182.6033, 337364638511.2112, 337380020869.812, 337380709081.2612, 337389622348.98145, 337390810360.5857, 337392494366.2253, 337393389739.45703, 337398109095.7831, 337399428874.8236, 337420471823.8884, 337421194603.12164, 337423107884.54767, 337424466764.8785, 337436196905.3456, 337437046531.61694, 337443169685.4689, 337443486103.8142, 337445453788.7352, 337445710067.2537, 337461913333.9811, 337462360060.16583, 337467633429.2439, 337468269275.689, 337472286987.86005, 337475734359.38336, 337491948517.9487, 337492503763.97534, 337493280761.78046, 337495892823.6759, 337502228042.5099, 337502318799.01154, 337504841645.233, 337505810143.92145, 337519459603.70325, 337519741791.2455, 337542422795.52576, 337542762415.43445, 337542967437.04706, 337543239022.92114, 337559289554.7886, 337559303580.9995, 337568768187.8149, 337570088723.3992, 337575824969.3686, 337576433449.9904, 337580545840.1758, 337581782188.81024, 337583362367.14075, 337583831116.27716, 337584161575.7405, 337584413672.40784, 337604281171.2891, 337604714332.7173, 337607078897.8804, 337607428557.5864, 337608226786.58496, 337608919514.01276, 337612890272.4836, 337613409911.9363, 337614770216.981, 337614957198.61365, 337620395265.0369, 337621309576.4004, 337635755871.59216, 337636122054.9854, 337638356151.3258, 337638915025.973, 337648939173.8812, 337650473962.6469, 337665549746.3408, 337665763217.4541, 337679074212.85455, 337680090687.9203, 337686375936.6367, 337686394008.8194, 337686556246.41016, 337686759739.5709, 337716422907.91797, 337717426196.6543, 337718347115.5282, 337718939090.9464, 337729916423.807, 337731476629.3061, 337743125174.817, 337743263177.7489, 337750563294.224, 337751375210.2523, 337751799577.2803, 337751877119.4512, 337773480710.57666, 337773726321.97705, 337776318009.65466, 337776549148.3568, 337780538952.6826, 337781184271.68713, 337801317454.97156, 337801654365.18225, 337828981197.2621, 337829971224.0132, 337849108386.8485, 337849764289.48303, 337869106623.0758, 337870104875.22363, 337877301442.8512, 337877531278.8185, 337890704142.2572, 337891176580.62854, 337892475898.9569, 337894152263.35187, 337906853458.8428, 337907647552.77783, 337912725497.60345, 337914356368.71136, 337916580581.4446, 337918051974.97815, 337919470828.2729, 337921200837.0166, 337934902465.634, 337935327056.9048, 337944756060.58716, 337945068742.32355, 337956778685.91986, 337957623522.15857, 337960448234.62494, 337960682106.62744, 337961262511.3317, 337962008148.5154, 337964953256.1, 337965211432.31885, 337965535262.8489, 337966072800.16583, 337971555412.82587, 337972020003.80566, 337976296653.02625, 337976585840.44275, 337988066263.6631, 337989004927.4749, 338044729558.4785, 338045176210.1459, 338047739406.6312, 338049196263.8015, 338078332470.8925, 338078966449.59717, 338095937532.96844, 338097330882.45667, 338104891021.7366, 338106006617.3834, 338130800129.5205, 338130903897.4947, 338134697706.173, 338135188302.89795, 338138429575.66327, 338138857283.3135, 338139185018.45825, 338139374287.1969, 338156627962.4386, 338157646734.00195, 338158718583.69617, 338158878107.66833, 338165791261.8031, 338166613910.81244, 338186674228.95593, 338187132575.78625, 338189403244.1439, 338189799302.7864, 338199686192.4357, 338199854401.0524, 338200505188.8307, 338201376464.0944, 338208422914.3298, 338208581649.03955, 338225813020.0983, 338226598488.03894, 338228276483.6149, 338228848154.4031, 338259078401.4718, 338259117329.5424, 338281696521.47363, 338282865874.35016, 338285769325.41016, 338286525342.63727, 338289108738.0128, 338289242040.9131, 338303167539.0333, 338303706076.0353, 338309818243.5889, 338310155044.9967, 338311606560.9423, 338311876105.48773, 338318541114.5489, 338319340906.99756, 338319807700.71814, 338320270131.718, 338323825704.5841, 338324596454.7951, 338325691259.31177, 338326109161.065, 338343553138.3596, 338344347679.8144, 338348081592.0668, 338348159954.2954, 338353868402.3071, 338354456451.4929, 338360875090.2207, 338362490482.2405, 338368846789.54065, 338370008377.8833, 338384878149.4486, 338385408817.7201, 338403706876.41797, 338404184347.0166, 338409976006.4545, 338410777274.8235, 338415263930.1282, 338416402439.88477, 338418486491.3974, 338418808147.5171, 338424674175.32275, 338425235777.7861, 338427039218.3992, 338427504425.62396, 338432920643.11664, 338433873750.21027, 338436840620.85486, 338437319250.3041, 338438640503.1837, 338439016823.35095, 338441458276.2866, 338443382473.69617, 338446130737.8397, 338446756210.00977, 338453800283.1074, 338454149434.1266, 338462141486.35803, 338462586830.99744, 338465744885.2149, 338467677480.89496, 338481375604.3671, 338481434141.46313, 338500031733.71, 338501064842.5277, 338505692208.8518, 338507050799.4647, 338513832521.89923, 338514332766.88556, 338543159869.8512, 338543568767.1915, 338546924876.9872, 338548101567.4726, 338562420955.52997, 338563367502.2438, 338575162281.2777, 338576021584.20544, 338589572238.49347, 338589893247.5556, 338592731227.52783, 338593673241.2903, 338626887236.9415, 338627426731.6422, 338628443227.65814, 338629490483.2071, 338636418977.53546, 338636788585.3303, 338674525633.7646, 338674576196.0378, 338689622259.4469, 338690486572.8333, 338693305948.2665, 338693544688.3331, 338710616225.5827, 338710986408.59485, 338713642288.35376, 338713933012.47107, 338718102742.79553, 338718294710.042, 338721275514.07794, 338722271911.3086, 338724743221.4631, 338725421184.56256, 338733460110.8727, 338734612079.2842, 338737209473.72003, 338737553097.58435, 338738259005.3729, 338738720490.0967, 338742875763.5641, 338743533543.8691, 338749538314.20105, 338749613912.83655, 338752135483.59607, 338752387034.96313, 338772971749.523, 338773778300.9807, 338774974289.6161, 338776444525.9966, 338816296330.9893, 338816500381.19666, 338842353878.5862, 338843841307.80676, 338864648060.8276, 338864927210.6506, 338865316317.04724, 338865587253.63293, 338874868061.7182, 338876891284.85175, 338881563170.11804, 338881597250.3532, 338885310344.1853, 338886106080.814, 338888379241.4724, 338888757376.6064, 338895155796.1861, 338896005145.4396, 338903316346.5635, 338903822416.8682, 338907547171.33844, 338907826703.9352, 338908298380.63257, 338908634229.3421, 338914194829.2445, 338914444621.6407, 338920346920.2697, 338921320254.2219, 338922525427.4607, 338922708162.5294, 338925039184.61414, 338925527626.8155, 338935942672.2171, 338936097497.77844, 338938461817.82806, 338939343970.7662, 338945397476.1871, 338946288208.16406, 338946708927.3025, 338946911018.3802, 338947705417.6015, 338948407196.91113, 338954083052.3224, 338955111399.40106, 338965632182.7334, 338966283855.3727, 338967315805.8366, 338968439430.96136, 338969440733.3529, 338969653218.382, 338976083741.6588, 338976449805.2607, 338986228181.33685, 338986731875.0614, 339002070985.40344, 339002301826.08844, 339016646382.7366, 339018161870.36743, 339019776815.3564, 339020985044.8792, 339043625321.8701, 339044240605.58997, 339048150172.18634, 339048203307.605, 339061126882.7257, 339061860155.5476, 339074700847.5038, 339075295480.8955, 339089520373.70526, 339090647460.8324, 339091473126.9064, 339092168432.1118, 339097535272.25037, 339098041699.448, 339107920891.8197, 339108955157.4646, 339110114063.5121, 339110833207.6887, 339120977008.85986, 339121277043.9739, 339122028528.60376, 339122857715.4562, 339123085406.44995, 339123353332.3379, 339137187921.52167, 339138674470.8845, 339149759637.8532, 339150383654.4747, 339154063931.18915, 339154665959.52655, 339167617664.3251, 339167803053.7291, 339170207224.2581, 339170660544.92224, 339175252539.45105, 339175613269.09546, 339176027944.4316, 339177168154.9519, 339185247134.531, 339185648670.7416, 339186790704.5746, 339187206439.11896, 339199522011.011, 339200267706.7124, 339204762148.6185, 339205445239.85046, 339212813649.17175, 339213559325.0658, 339227884087.02954, 339227970648.57855, 339228430285.5454, 339228736122.0752, 339238446069.92004, 339238850968.4702, 339259791560.54645, 339259998871.91864, 339268043582.3085, 339269134759.2262, 339279751528.8551, 339280275744.86816, 339280454407.2445, 339280674704.6457, 339283631540.47327, 339284779906.48535, 339296162847.8677, 339296573884.59753, 339297619029.4553, 339297782544.2583, 339303220242.24524, 339304009337.37366, 339309344833.7005, 339309810644.5963, 339326513130.1402, 339326737313.73364, 339340039060.8439, 339342509631.3542, 339350509375.3956, 339350987783.98553, 339354885604.33215, 339355864390.61035, 339356251470.5117, 339356402782.179, 339381618038.0483, 339381756599.7305, 339382288073.21265, 339382768410.5266, 339386806927.9503, 339387052317.7642, 339404854097.5646, 339405000077.5936, 339406031126.15625, 339406183755.82715, 339417062356.3822, 339418153008.1371, 339443656168.5239, 339443809309.56885, 339453247144.3535, 339453318834.1034, 339459009808.1318, 339459655742.1694, 339476175351.66156, 339476328556.2945, 339482261388.40125, 339483311876.21375, 339488833994.3893, 339489160434.4465, 339514627670.22644, 339514880037.4919, 339534390801.43286, 339536032712.15326, 339537805711.07214, 339538323979.9426, 339546023729.67346, 339547177171.38367, 339557601548.86426, 339559582987.4142, 339561932020.979, 339562169448.5857, 339576428526.495, 339577308510.7136, 339584324677.78064, 339584790749.7886, 339591603564.416, 339592087479.17523, 339598022102.6736, 339598281574.28467, 339601968852.1885, 339602263372.9746, 339606679740.5107, 339607174668.54846, 339640590289.76373, 339641827148.6647, 339645662434.07837, 339646281540.6992, 339654540093.3473, 339655703613.588, 339662682672.5415, 339663006450.00476, 339666029743.43787, 339666181687.56494, 339668767216.81287, 339669292062.6417, 339705803387.3075, 339705942211.4798, 339706622710.62225, 339707078453.0733, 339714262963.0892, 339714606316.08484, 339714665021.4128, 339714814583.46545, 339715750861.46814, 339715985241.8125, 339725654199.8297, 339726281766.90283, 339734350222.6809, 339734697500.67773, 339739145178.9347, 339739684806.79395, 339744344015.87787, 339745153888.59753, 339746402880.3563, 339747094870.9593, 339755278947.24066, 339755469269.76245, 339756388326.83575, 339756742148.6798, 339761801285.1443, 339761919396.5571, 339764220228.729, 339764643496.3274, 339765473661.0923, 339766392121.19275, 339772484686.0724, 339772838490.82513, 339773245144.9315, 339773470280.2429, 339776842132.37756, 339777414359.4618, 339778459386.7864, 339778746457.3451, 339811938953.25, 339812084456.9889, 339819196985.0122, 339820339502.66284, 339820937872.557, 339821995524.6703, 339829382815.29, 339829679042.79486, 339860694590.23596, 339861131317.3438, 339863967982.23016, 339864631173.5507, 339871013591.38824, 339871584786.8827, 339879210280.318, 339879566512.94556, 339881267745.99634, 339882440938.6599, 339889300565.74524, 339890504264.262, 339908311164.47, 339909536976.25903, 339927076519.4602, 339927210129.9049, 339936648442.379, 339937676540.0311, 339945245461.77496, 339946187230.5969, 339957405588.459, 339957790668.5145, 339960564914.08594, 339960755686.8597, 339967138796.0686, 339967516432.7386, 339972419117.41565, 339972995014.2206, 339977864931.7506, 339978472835.0372, 340002325502.77075, 340002862002.92975, 340016801915.7875, 340016927630.0336, 340022343864.9313, 340022670801.7195, 340025374161.82043, 340026308424.9661, 340027730934.2509, 340028902781.6146, 340058341742.8157, 340058393935.68835, 340062956025.93677, 340063663521.19165, 340065943516.58044, 340066696555.2456, 340067021147.6499, 340067660914.5808, 340071695414.6714, 340071934381.4041, 340085162060.18713, 340085812706.62463, 340086398533.88684, 340088691845.8414, 340094728304.90454, 340095276447.8169, 340099933736.49585, 340100341542.2166, 340111873570.692, 340112187642.0569, 340120395035.479, 340120600244.8455, 340130369691.51086, 340130797548.43176, 340132291173.77515, 340132936259.7289, 340139045033.6294, 340139165537.44775, 340143914884.86865, 340144362952.9888, 340149295809.31726, 340149587510.2702, 340152985617.1764, 340153342803.2198, 340161029447.64417, 340161205253.96045, 340165140570.57135, 340165319177.26056, 340167657751.94257, 340168398531.31934, 340176745978.32837, 340176787917.81177, 340178633814.8303, 340179531744.0486, 340180872462.3531, 340181211742.7027, 340182908421.6437, 340183427149.7079, 340184856607.7168, 340186338356.56226, 340197338894.45764, 340198619867.09686, 340207128470.37036, 340207425255.8065, 340233452043.2257, 340233502827.1949, 340238711860.18933, 340238781186.8956, 340245533735.84955, 340247660850.7483, 340250818065.62714, 340251015521.4556, 340254507755.8253, 340255198181.69727, 340261144606.6478, 340261929060.37225, 340273890210.60614, 340273995430.51227, 340293579022.16064, 340293838104.74194, 340298601865.77905, 340299354168.25726, 340301413129.51526, 340301489948.7074, 340303266057.3159, 340303594044.50366, 340315454989.40497, 340317758707.3813, 340328424660.30334, 340328977461.4597, 340333695249.79517, 340333934765.36, 340335213177.1289, 340336433701.9656, 340339225469.4736, 340340128113.30316, 340349572880.78296, 340350328608.1646, 340352396409.21875, 340353406392.8727, 340357427673.08997, 340357604741.8797, 340357986328.00006, 340358764417.50287, 340365432354.6266, 340366369083.14124, 340370361810.115, 340370394012.2501, 340372255955.1831, 340372848693.2123, 340374447542.34766, 340375011390.72095, 340375567560.51013, 340375881911.01685, 340381252505.74146, 340382252329.6376, 340384397240.3912, 340385096252.0051, 340393317959.1007, 340394392202.2865, 340430765586.2485, 340431368627.23535, 340447197287.64514, 340447356547.1594, 340452119949.40625, 340452241153.5206, 340464478390.65027, 340466730337.3737, 340474188769.6936, 340475006440.157, 340485405849.39905, 340486013633.30426, 340486422202.82886, 340487103938.4363, 340494027710.1207, 340494715086.3351, 340506959406.9547, 340507354204.82794, 340524924207.2831, 340526627048.3617, 340539597088.7097, 340541056433.2926, 340542516356.9971, 340543370966.4082, 340554737879.4913, 340555503117.11206, 340563620959.0009, 340563842287.63916, 340565886272.9678, 340566124787.44885, 340573781482.8442, 340574130232.63696, 340576492951.5049, 340576872554.7798, 340578007363.01807, 340578740813.0287, 340580774129.29126, 340581094250.71027, 340583221371.7178, 340583868848.8, 340593290082.7812, 340593360330.76404, 340596376959.6203, 340596917916.5926, 340603219358.2167, 340603521071.275, 340610254507.7866, 340610955912.26746, 340617040802.48126, 340617433604.7876, 340628929644.3459, 340629198999.8491, 340629722512.605, 340630582617.2572, 340639424306.21185, 340639760406.38184, 340640252823.842, 340640972232.50305, 340641711507.7136, 340642222672.58203, 340656252149.54944, 340656769599.5434, 340658353590.9364, 340658715673.26697, 340659806252.3058, 340660133558.3058, 340669932730.58527, 340670583335.03107, 340672064447.4607, 340673458768.14, 340675402250.3112, 340676266858.5967, 340683872869.2903, 340684234516.2084, 340686790045.2101, 340686954113.2234, 340692036112.49207, 340692365916.5792, 340693004625.1094, 340693405792.98236, 340695253051.772, 340696089580.12964, 340696861503.6691, 340697095412.0122, 340702120534.1624, 340702736476.22253, 340715964229.7539, 340716127661.9711, 340716449482.8046, 340716678781.8463, 340722295923.58374, 340723777243.5696, 340743530899.04474, 340744358569.26166, 340745865572.12195, 340745932601.2763, 340746021794.8336, 340746297663.99243, 340750878132.37024, 340752994794.5878, 340767860827.0059, 340767999373.3507, 340774226727.5029, 340774689267.6006, 340775079471.66187, 340775142364.0936, 340778562966.27747, 340779497284.50995, 340787374168.3571, 340788275953.4176, 340790344146.1738, 340791204461.87634, 340791465325.93115, 340792224000.8144, 340807085573.1314, 340807892919.2173, 340815906660.26135, 340816835519.90247, 340819267445.7418, 340819363799.52826, 340820058098.5362, 340821208666.822, 340823279520.5976, 340824899749.8729, 340836001617.88226, 340836901643.408, 340844614607.0463, 340844882594.36926, 340848921317.63403, 340849332053.77344, 340858733864.2187, 340859311910.4265, 340879904815.8685, 340880646257.0988, 340884941202.8369, 340885628639.4252, 340893393216.5603, 340894112325.4895, 340894545733.2354, 340894713981.94543, 340898396887.5755, 340899147010.18646, 340910023782.2538, 340910185593.86554, 340911527828.70294, 340911926875.39856, 340931789692.12897, 340933527954.74976, 340940007913.31354, 340941322348.1008, 340958984144.68823, 340959567058.46826, 340961449530.4798, 340963355294.0514, 340969896120.85895, 340970537852.6347, 340971370986.44635, 340971753965.6214, 340974242908.4022, 340974557584.9839, 340984273308.5631, 340985100227.3115, 340986012811.3977, 340986953796.2914, 340991794211.6141, 340992304279.17236, 340992951991.72144, 340993693761.6699, 341003916488.05225, 341004342433.29706, 341016148524.5757, 341017280420.4188, 341021367632.5155, 341021727958.63354, 341061790386.3236, 341062201876.9582, 341073210977.5664, 341075081349.06433, 341076004731.89606, 341076364188.5094, 341088489739.27466, 341088918583.4916, 341100623043.67395, 341101078637.2722, 341113501471.4126, 341113606980.254, 341114170435.07, 341114730576.0032, 341116165200.8312, 341117133344.84766, 341121136096.92694, 341121247349.9026, 341142119047.5798, 341143209463.2952, 341158228098.8535, 341158505937.0561, 341158891691.047, 341159321963.6118, 341159643844.0947, 341160088312.7998, 341180488822.6466, 341181744233.91315, 341182271935.28467, 341182746175.1379, 341185740324.8401, 341185825564.4238, 341188236154.6089, 341188339232.68317, 341203201262.7981, 341203348725.7689, 341213051440.71594, 341214649102.1775, 341217762097.5729, 341218128359.5289, 341218531563.0222, 341219110973.9513, 341227352788.23047, 341227634788.57623, 341229871855.9634, 341230210332.5182, 341233465325.91187, 341233621302.857, 341233919121.58044, 341234487481.2644, 341238581083.7782, 341239036875.1312, 341239439176.88855, 341239833198.14966, 341242012817.5536, 341242724014.3032, 341249069808.14923, 341249744189.9683, 341252082538.5233, 341253686654.20105, 341265950779.6052, 341267557914.4982, 341268297311.63403, 341268758348.75, 341271258326.3159, 341271862388.38684, 341272828702.35736, 341273709380.9323, 341282667944.8892, 341282896004.61334, 341286462127.0077, 341286658846.5163, 341297466880.1166, 341298153012.9937, 341316949215.4055, 341317891747.66174, 341320354976.7097, 341320867938.79333, 341326999172.8891, 341327586029.12946, 341340921146.06537, 341341962729.21704, 341360822831.8872, 341360987670.3204, 341371326448.8264, 341372048946.1599, 341375747527.7589, 341375794718.28125, 341379305703.6007, 341379661103.8085, 341380311742.30743, 341380494069.1105, 341383133016.016, 341383225445.1321, 341391399458.9516, 341394000710.4098, 341398734630.35535, 341399069768.55756, 341400472528.08746, 341400691767.1772, 341402832680.738, 341403150165.7683, 341405262096.31274, 341406597192.11206, 341418050722.4333, 341418256193.0374, 341428414995.9144, 341429024113.3517, 341430836419.63007, 341431256162.91956, 341442794278.9254, 341443578174.53345, 341449273894.95844, 341450862019.21497, 341461595106.5825, 341462131561.86536, 341463427119.44385, 341464246064.2782, 341467908458.56573, 341468427157.8222, 341477325482.3221, 341477506294.8541, 341496207089.2593, 341496879341.36365, 341509984587.89014, 341510697838.2396, 341516144474.2853, 341517073336.99646, 341530874437.49524, 341531527388.09216, 341544998111.97675, 341545542234.26556, 341546793991.6492, 341547325457.70935, 341566562513.1327, 341566933972.385, 341571477849.14966, 341571585963.45715, 341577789897.3744, 341578056211.53656, 341584713006.2438, 341585230658.6011, 341593955285.0022, 341594245547.2429, 341598237713.4318, 341598704963.70496, 341607042924.1605, 341607238326.2087, 341611022051.3812, 341611336250.7545, 341626816265.06036, 341627058285.84814, 341630045378.95374, 341630764235.9317, 341631272588.0469, 341634324181.4041, 341654053224.3131, 341654696155.9101, 341658520945.0183, 341659502075.9127, 341663568505.6041, 341663999455.36847, 341669339600.30225, 341669629948.7895, 341672286401.70404, 341672519268.2171, 341681350143.6191, 341681793486.407, 341686139706.2696, 341686393753.9906, 341688735527.3617, 341689785398.57153, 341690891957.8219, 341693154232.19415, 341699062309.6325, 341700662483.75446, 341724528393.1068, 341724562270.52856, 341724654100.98773, 341724897428.4429, 341732896335.4744, 341733565781.42017, 341738841423.64355, 341739243214.2585, 341750606039.81, 341751212935.8251, 341751864189.7317, 341752085183.322, 341764363532.3054, 341764706654.7745, 341767571466.2372, 341768097685.3423, 341770782608.883, 341770962253.7711, 341776755604.8118, 341777278645.8453, 341792546470.30054, 341793012715.7224, 341794379293.9547, 341794892503.3207, 341815826740.38916, 341816133840.23474, 341816422915.1063, 341818266439.9043, 341820460771.9386, 341821028026.5333, 341821595321.97217, 341823663476.8198, 341843128645.2776, 341843982078.8867, 341851053697.37006, 341854162396.8505, 341856747514.41815, 341856946695.75354, 341857044314.12695, 341857105634.4354, 341860228126.63544, 341860750880.1208, 341864305577.6128, 341864433180.2152, 341866443527.5486, 341867157435.121, 341868796731.61597, 341869923508.5786, 341873099584.3666, 341873807048.7857, 341879331309.44904, 341880165024.19324, 341882283417.60535, 341882855128.18427, 341887498787.57275, 341887838289.21924, 341887934725.2897, 341887954605.85486, 341893053493.39197, 341894181137.51086, 341898677938.0546, 341898860210.6628, 341901599289.46967, 341902185292.1316, 341904341379.95386, 341904703343.5142, 341905450852.6118, 341906764806.65173, 341909393333.0268, 341909466383.3832, 341909850371.17737, 341910085177.66876, 341913745653.3717, 341914323801.1428, 341922742576.90955, 341922747083.1277, 341925949041.1505, 341926289112.1334, 341936024643.74646, 341936320363.83704, 341942872571.90796, 341943924408.063, 341949150639.30426, 341949764687.8337, 341953639320.3189, 341953941625.60547, 341965890974.6634, 341966323745.8242, 341973069206.2339, 341973466463.3963, 341974131999.6072, 341974676353.5381, 341991134465.1057, 341991544536.61707, 342000714133.7417, 342000925140.01855, 342009866087.0924, 342009914110.3932, 342010249093.1461, 342010658434.3917, 342013889624.0812, 342014135836.6448, 342044463439.9276, 342045031196.4319, 342055972403.7533, 342056856615.8868, 342062496543.8716, 342063331747.28174, 342083520663.0067, 342083581090.0374, 342085921944.6178, 342086205893.2317, 342087206057.4131, 342087838721.30945, 342089674056.1221, 342090295220.4988, 342100492863.67163, 342100832432.74225, 342101251824.0559, 342102769574.06464, 342104272353.8082, 342107355932.72107, 342110587149.702, 342111064435.92004, 342132990823.81555, 342133511629.12396, 342144967813.54675, 342145074024.0445, 342157252721.5128, 342157870860.8802, 342168186866.4525, 342168573774.4269, 342174653544.3563, 342174924606.19104, 342182988157.57635, 342183586476.51953, 342183996434.676, 342185860226.9555, 342202981093.9769, 342203548764.7469, 342204487973.9739, 342205753721.4514, 342217942794.0071, 342218748711.02606, 342225921916.48987, 342226116512.1621, 342228824443.4634, 342228952581.7284, 342229813656.9703, 342230028507.1788, 342233472748.9474, 342233791469.02185, 342255039841.9233, 342255757680.07794, 342258590400.82983, 342259028260.6365, 342262065226.3274, 342262594307.34717, 342265793121.3523, 342266568410.181, 342272915626.8379, 342273161165.34766, 342278711600.2476, 342279417034.29193, 342279939810.2134, 342280082060.5703, 342281334373.6275, 342281975507.53015, 342286407294.2753, 342287231106.3247, 342300295332.1721, 342300803958.1591, 342301565538.63385, 342302245213.9168, 342303736999.3037, 342304769661.2147, 342312819482.1035, 342313516764.8188, 342316653341.6907, 342316705518.05383, 342316899169.3991, 342317394784.3514, 342337429488.05255, 342337597648.52905, 342343826801.8157, 342344083304.2878, 342348780925.87683, 342348845639.76904, 342353474820.3411, 342353925347.8492, 342356687858.1137, 342357484007.2468, 342367244116.41516, 342368026270.51746, 342368874894.96436, 342369453454.3047, 342375094288.8157, 342375178305.6903, 342387244065.04504, 342387313972.05725, 342411596497.9795, 342412068400.865, 342414549925.29114, 342415190388.2339, 342418742673.1947, 342419796950.7478, 342420785759.5424, 342421535386.0153, 342422938353.5366, 342423341794.56744, 342423642790.8435, 342424009434.2171, 342450258461.4796, 342450631789.3317, 342454385658.6924, 342456938031.9233, 342458370800.6379, 342458828281.60846, 342462781494.60504, 342463098803.2657, 342476463739.5823, 342477219396.82996, 342503137024.9827, 342504533449.7976, 342508111134.00146, 342508306325.6738, 342508500850.9334, 342509427588.7555, 342511587322.31854, 342512485486.96765, 342520594857.82635, 342520994729.6803, 342533705523.6549, 342534336982.0249, 342553455228.86255, 342553928970.56586, 342555123510.49475, 342555912838.5201, 342563022358.9484, 342563230770.4737, 342563398859.11835, 342563599690.57263, 342568378331.1829, 342568525790.6579, 342576815353.43225, 342577216003.9902, 342578533273.5065, 342579671381.9842, 342583534033.18335, 342583869434.4619, 342614133521.9968, 342614742380.4954, 342626233839.06335, 342626439388.2716, 342646835124.0404, 342647047017.4812, 342655356455.3489, 342655669925.7389, 342658773939.64307, 342658984783.9835, 342672668314.5856, 342673093570.52765, 342682827770.1731, 342683329727.9585, 342690408932.603, 342690480151.4542, 342696708058.32745, 342697410872.77966, 342702712387.2894, 342703378801.83765, 342709660203.56335, 342710282553.42505, 342723497323.72626, 342724933445.6166, 342732428380.6278, 342732659648.65656, 342737291576.2986, 342738210153.0845, 342742202565.0226, 342743429720.1765, 342748021720.24896, 342748654905.9994, 342759237604.1204, 342759907575.18695, 342762620595.3662, 342762717401.52625, 342767615849.90405, 342768017321.69385, 342776742343.0205, 342778533134.47546, 342779542626.5278, 342780050277.2378, 342807587606.7858, 342807863335.5605, 342808996444.59564, 342809930961.6619, 342813329901.78796, 342814182784.8259, 342815422368.5973, 342816853542.4197, 342828963009.13153, 342829458775.6407, 342839497403.7263, 342839629778.47107, 342848646800.2865, 342849750771.912, 342865710413.79443, 342866041228.46466, 342886822408.4381, 342887112174.18835, 342893676154.15173, 342893959133.95483, 342914020277.1502, 342915234816.6002, 342917107237.2396, 342917395677.05725, 342928929712.4148, 342929520392.6725, 342935894258.82117, 342936503294.02826, 342939289473.8742, 342940039869.47485, 342944537515.74194, 342945742262.011, 342952251610.303, 342952516734.88385, 342973519635.63464, 342973813906.25543, 342980821209.02625, 342981389009.77734, 342987174851.4491, 342987553167.4558, 342993454629.8369, 342993816717.9622, 342996927473.1781, 342998801336.745, 343004979974.6964, 343005120852.5653, 343014931285.58704, 343015332028.20215, 343020808157.85754, 343022166178.6749, 343029345411.4049, 343029579953.52026, 343035474744.229, 343035836748.077, 343038040472.33606, 343038261994.9979, 343038630326.2005, 343038987315.48834, 343048738203.61804, 343049487083.6045, 343050051864.8961, 343050885790.8411, 343062703777.82715, 343063325928.37885, 343067394437.46545, 343068023675.1853, 343088415487.25, 343088813022.9325, 343090575552.77765, 343091418602.1763, 343098202631.6778, 343098816151.5473, 343100089662.15076, 343100971665.5017, 343118882806.9188, 343119991709.4722, 343125457942.2975, 343125703107.3198, 343134803864.0213, 343135803066.8722, 343143257326.6089, 343143727138.5764, 343150194340.1848, 343151338350.479, 343151826330.29724, 343152344299.2737, 343152810343.2091, 343153606833.2218, 343158128472.3949, 343158395738.7695, 343165961470.3557, 343166390923.7284, 343171137399.74536, 343171933481.02124, 343177659876.0635, 343178203048.17737, 343178630334.74817, 343179236819.5666, 343184111449.84534, 343186019653.5293, 343194141658.3856, 343195608234.07153, 343208206830.1498, 343208845630.42206, 343209585430.86414, 343210210080.72687, 343216277647.69147, 343216551312.2547, 343231028808.595, 343231883920.74744, 343243819052.151, 343243938333.0055, 343244908351.29724, 343245431705.15326, 343246301029.229, 343246885313.026, 343264834251.6843, 343265845498.8792, 343267133479.5073, 343267757122.1189, 343271296242.18115, 343272540068.2088, 343273975804.14655, 343274038638.2126, 343281921885.3307, 343283030833.189, 343288453229.73486, 343289194200.00525, 343295039641.61975, 343295356588.57874, 343305993136.05994, 343306500137.39154, 343309563148.82794, 343309907868.73267, 343319637874.4498, 343320106647.0339, 343328924651.57825, 343329955048.81665, 343336908007.2533, 343337076996.1909, 343340616533.0541, 343341909628.01666, 343345986215.54016, 343346911224.8986, 343354132923.5359, 343354521818.91846, 343359431166.92554, 343360591508.08057, 343365159612.38635, 343365436092.2772, 343368893727.4946, 343369674315.26514, 343381333313.8856, 343381875259.00244, 343391064539.2097, 343391689115.1632, 343403135244.1639, 343403856811.68164, 343416804480.74225, 343418115218.1107, 343419328240.6487, 343420197576.77435, 343424718253.2336, 343425131750.0333, 343444895417.5792, 343446071045.86584, 343458436232.8987, 343458949177.2206, 343463978142.8983, 343464307669.54565, 343467164370.5938, 343467809572.3648, 343478245511.87036, 343478758359.9845, 343488119647.68427, 343489275811.34265, 343505559903.8025, 343505935623.8744, 343506283002.7335, 343506999262.6303, 343518420700.1676, 343518735855.61035, 343538757728.95825, 343538975756.8539, 343545518752.8349, 343545903556.0005, 343548211669.9557, 343548638659.53735, 343552279078.01697, 343553096600.6644, 343556478829.82886, 343557297849.5793, 343557362505.00793, 343557740875.59015, 343583606327.9625, 343584087912.7484, 343588190617.43567, 343589170709.61743, 343617042354.32623, 343617658010.06915, 343625639475.8511, 343626017706.00977, 343628022555.3121, 343629043213.6511, 343636026356.6268, 343636188671.55945, 343646516462.4056, 343647440694.9918, 343655443627.78265, 343655889564.53064, 343663919963.71545, 343664160587.8457, 343686187957.4667, 343686838813.9989, 343687018842.5134, 343687487111.9498, 343691606770.0532, 343691800267.28284, 343700658051.53296, 343701030477.98364, 343708967084.80945, 343709438853.13885, 343723153050.2302, 343723715697.0569, 343724266929.4238, 343724437960.5507, 343733090698.2207, 343733566299.0855, 343743424219.95215, 343744060168.729, 343754171770.26794, 343754266870.0405, 343760163351.187, 343760734779.76184, 343770004168.5416, 343770241738.23505, 343772315023.61865, 343773097349.7933, 343800246507.6564, 343800936765.54297, 343809199722.53, 343811064968.6335, 343813887901.74713, 343814554284.4143, 343816499526.6675, 343816612411.7687, 343826969109.6006, 343828262913.90283, 343848274307.9115, 343849422554.7383, 343866714062.83093, 343868185291.1401, 343902374033.4858, 343903262379.7213, 343906838076.4784, 343907253095.1235, 343929695818.9565, 343930598137.51624, 343941004491.40234, 343941325098.6294, 343943929255.99615, 343944142170.40576, 343945170533.19403, 343947150168.1478, 343949277682.39905, 343949764758.7392, 343966029782.29724, 343966918331.7373, 343968432271.95624, 343968553351.1471, 343969582433.81604, 343969889079.16406, 344007582633.83496, 344008464023.7267, 344034678308.3026, 344034782336.8427, 344035258560.22296, 344035690528.33514, 344038648928.24084, 344039029205.86914, 344042011248.9835, 344042836463.63745, 344043895985.9148, 344044186580.9124, 344048119973.5529, 344048511582.4385, 344049181985.3809, 344049542370.7223, 344051202941.99994, 344052175204.69946, 344056558941.5005, 344056943528.54395, 344059093830.74615, 344059557832.69324, 344071199416.3478, 344071598800.3321, 344082656510.97394, 344083208497.13605, 344091165761.80225, 344091942722.099, 344094366268.1547, 344094390569.53845, 344096664837.13916, 344097754764.36536, 344122442422.4909, 344123497570.0316, 344125860275.0205, 344125990315.14746, 344143023194.8363, 344143615669.3913, 344161711374.156, 344161736570.85315, 344165500758.2339, 344165870613.95056, 344175220278.2882, 344176549082.3811, 344177350400.60767, 344177468674.8568, 344210070905.7732, 344210648854.42175, 344210985017.3053, 344211314809.3222, 344216945069.6273, 344217009160.4188, 344222118456.0939, 344222199446.25336, 344225799788.9877, 344226374957.4349, 344235200348.7251, 344236412150.82605, 344243475312.7495, 344244415024.1631, 344246969604.09454, 344247453716.0163, 344269022688.27545, 344269401749.01355, 344273929379.4656, 344274658096.85767, 344299430043.34796, 344300348900.5323, 344303465337.93274, 344305046647.781, 344306409778.31793, 344307456627.7832, 344336078729.69836, 344336404021.26697, 344340448291.7424, 344341840239.06213, 344348204850.7511, 344349183837.40173, 344352279933.0442, 344353021543.7673, 344360635627.2669, 344360887574.6682, 344392746226.5537, 344393199664.5879, 344395407662.58386, 344396064862.2721, 344397398887.54144, 344398510508.83484, 344403458479.3538, 344404126373.9849, 344409554270.3081, 344409647838.8944, 344416957195.2219, 344417667000.34155, 344426353011.50977, 344427705561.3169, 344438410534.46484, 344439079324.4641, 344444447265.5331, 344444942577.28143, 344447183351.99146, 344447860482.37366, 344473562044.23285, 344474018058.63574, 344475404600.27045, 344475839216.91785, 344479980999.8248, 344480954210.75555, 344491400046.8355, 344492395168.72473, 344494228828.0581, 344494751823.30817, 344501063542.80646, 344502063982.10376, 344531222356.8726, 344531701694.2492, 344536144538.5553, 344536369976.2666, 344539091502.26984, 344539206898.1343, 344541196925.4334, 344541406117.6715, 344543666313.7756, 344544363127.31006, 344551325355.48706, 344551750560.62244, 344552825374.5985, 344552934277.5649, 344564647582.80774, 344564781821.46826, 344581613670.7644, 344582788903.96985, 344586304895.52814, 344586606961.0818, 344597584655.0927, 344598020629.15656, 344609428470.5062, 344610314293.3369, 344616146645.85657, 344616935445.6007, 344623935414.69446, 344625616465.08997, 344626203912.6168, 344626764890.35547, 344627247556.6902, 344627770260.1476, 344631696878.3081, 344633398944.96313, 344634575555.3396, 344635297359.468, 344662963437.00256, 344664670008.9452, 344665223562.1531, 344665473120.023, 344669977936.5563, 344670642940.5986, 344684662289.4864, 344684970032.3781, 344685475869.1085, 344687257342.33826, 344694789928.73047, 344695715179.6686, 344700857326.02295, 344701602980.8198, 344708287082.6052, 344708891732.2015, 344711455671.56604, 344711785859.4093, 344713584601.1279, 344715272638.68567, 344725965020.6611, 344726124998.7748, 344732266176.01196, 344733580510.80347, 344735247584.756, 344735592119.9092, 344737137558.7176, 344737276835.7849, 344737435222.3319, 344737518911.7488, 344753528845.1574, 344754081151.4377, 344755607865.11115, 344757146093.11346, 344761600441.21063, 344763257985.2435, 344767288332.61414, 344769151965.53973, 344775606213.3677, 344776546956.4352, 344797264848.9696, 344797318825.15546, 344813025401.75604, 344814364076.35895, 344819767128.1065, 344820406924.64136, 344821918951.3165, 344822255561.11115, 344835582651.02295, 344837277382.12524, 344838510713.7169, 344838779197.3193, 344846972731.26044, 344847191999.89325, 344856490824.1682, 344857185597.50635, 344858863325.4143, 344862348980.43994, 344862596483.9177, 344863658907.817, 344865406472.09204, 344866567655.07324, 344877956193.78735, 344877982147.21655, 344885049082.2895, 344885522260.8854, 344899871453.28284, 344901628451.12384, 344907384480.338, 344910875554.58765, 344915582152.4634, 344915767571.82294, 344928629416.68555, 344928985492.38794, 344931363347.99994, 344931547701.27216, 344932900191.64136, 344934457093.3036, 344936512721.0399, 344937429621.26355, 344940028418.09436, 344940133343.90137, 344947372198.87946, 344949302152.1117, 344950821570.5698, 344951388819.8153, 344969855815.60645, 344970039908.9476, 344970549239.6656, 344971253200.2849, 344977578849.44995, 344979529222.8898, 344992408437.8888, 344993409539.1228, 345028984637.77094, 345029481324.15625, 345044353227.6085, 345045392091.65576, 345059185492.23956, 345059678007.1848, 345060324807.74927, 345060732895.12177, 345062392856.994, 345065434695.2311, 345068094027.0242, 345068267468.007, 345069985751.8622, 345071048552.34247, 345073463313.86584, 345075221682.68616, 345099275653.79675, 345100454112.4105, 345110152281.35693, 345110621665.64514, 345141035871.484, 345141379528.1969, 345149035358.45013, 345149621247.3456, 345160934156.7084, 345161474521.2824, 345166052256.6322, 345166213993.1054, 345169792410.1914, 345170014130.72034, 345173266443.47437, 345173590393.2372, 345177324928.8982, 345178405113.6552, 345188809527.89294, 345190656988.3854, 345194158603.05316, 345195243052.86035, 345198689170.45483, 345199531723.2688, 345200146229.95496, 345200689781.68286, 345207100599.3047, 345207199574.4486, 345207700854.54456, 345208084470.2612, 345211486024.9708, 345212329262.2847, 345226475657.16455, 345227277426.1854, 345228150838.1454, 345228748383.8843, 345229664786.9819, 345230201551.13513, 345232353210.2943, 345233457068.8847, 345237148583.4076, 345238902484.2278, 345245463749.8826, 345246253544.777, 345247884586.67004, 345248357173.7306, 345258230143.02844, 345258482780.76074, 345258668816.8417, 345259371637.9717, 345264875687.22296, 345265049500.825, 345271913177.5969, 345272072775.36426, 345292575294.23, 345293040939.71716, 345297503912.2805, 345297699814.47205, 345298472785.35364, 345298736610.63916, 345300375318.5508, 345300624762.7012, 345303627601.6082, 345305083649.68115, 345312511281.09766, 345312710272.6177, 345318943197.37665, 345319513485.8292, 345331625580.9345, 345332422872.2547, 345333446228.8431, 345333485644.63275, 345336097330.5017, 345336380970.24426, 345337399320.69934, 345337777283.2654, 345344163008.15155, 345344468269.98376, 345350701455.31274, 345350843808.724, 345352988266.01294, 345353951754.86523, 345387889960.6236, 345388932512.01904, 345390977702.4022, 345391656575.99744, 345407694457.1885, 345408301617.3425, 345415129776.58636, 345415986165.45605, 345424395095.60675, 345424679485.92975, 345432169941.33765, 345432323789.0423, 345432520586.47736, 345433100355.8011, 345451146022.9576, 345451784899.41986, 345455621258.8273, 345456504365.1295, 345457366251.6433, 345457785911.09204, 345463036259.55524, 345463896585.56244, 345479598489.2149, 345479781692.94745, 345491708444.24054, 345493273594.608, 345520441190.3316, 345521471296.85077, 345523872954.0409, 345524371312.6202, 345524683034.8383, 345525012417.76013, 345541735221.3618, 345543399056.7184, 345547265052.49286, 345548747816.9691, 345555666241.5856, 345556846136.47485, 345562343746.13434, 345562456640.44086, 345574943454.2232, 345575288537.5725, 345586088781.9055, 345586617085.16705, 345620500203.54865, 345621557740.6271, 345622313798.51874, 345622938865.76447, 345627563272.5548, 345628200984.01514, 345639472875.0331, 345639565666.2903, 345642170853.2762, 345642435917.6123, 345655155676.3582, 345655488932.652, 345664835514.4569, 345664967734.49634, 345686701288.1443, 345687000851.102, 345690554346.4021, 345690817956.1599, 345694276155.84546, 345694810442.2468, 345696271811.73145, 345696617348.00726, 345715793448.73517, 345716019426.1761, 345752050044.7199, 345752231310.5038, 345753087157.46814, 345753577533.9474, 345765927701.72174, 345766657767.45056, 345767890958.49036, 345768671909.4804, 345773378296.44324, 345774369456.6484, 345795597012.7529, 345796487866.6221, 345820833245.2925, 345821095713.2008, 345845356232.41736, 345845880241.7091, 345850684023.05023, 345851535541.1227, 345855494970.5875, 345856603474.08374, 345873095604.5067, 345873354272.32623, 345889429245.6748, 345889771422.09717, 345901918116.17346, 345902062316.5353, 345922601769.99744, 345923001537.136, 345942237436.49475, 345942479460.62024, 345952232559.8733, 345953278595.2215, 345966376505.07086, 345966472519.4756, 345968293368.0408, 345968829172.13696, 346004024628.97845, 346005331715.4428, 346010018087.86707, 346010588699.1741, 346049320315.3884, 346049963071.32104, 346051456029.17725, 346052267272.76514, 346053104474.5177, 346054021647.304, 346072911875.1907, 346073203141.60925, 346079068533.826, 346079216376.67053, 346089696089.63635, 346089862571.58936, 346090961382.1408, 346092174205.24506, 346098036458.92847, 346098226711.2642, 346098859046.2025, 346100044270.55536, 346103419071.2008, 346104224412.2386, 346107245982.4173, 346107826274.4944, 346111922453.2223, 346112083444.9652, 346132255697.5985, 346132349037.9563, 346133913968.7283, 346133975490.82806, 346134595468.88367, 346134810226.90247, 346135369496.2186, 346136432843.02856, 346163279409.98785, 346163529292.2322, 346164572651.9298, 346165263691.10364, 346171286575.4037, 346171671914.52625, 346172062602.19916, 346172698405.7219, 346180120284.372, 346180460678.7841, 346206545840.95435, 346206747745.4053, 346207421216.7821, 346207816619.792, 346211257843.2466, 346211666949.5406, 346232273017.6281, 346233133827.2665, 346236545483.6963, 346236763417.2387, 346265419966.8197, 346265594653.5288, 346301261914.7269, 346301447091.1222, 346309753503.0281, 346310019455.9276, 346329012439.90485, 346329356388.37683, 346355599772.26666, 346355985059.5181, 346369971107.4641, 346370965830.0505, 346375303200.9155, 346376403525.1342, 346379824171.99335, 346380855287.13745, 346392114837.0916, 346393180420.2655, 346425757058.7865, 346426413192.9418, 346434476893.2582, 346434645531.1885, 346452738087.2489, 346452942718.8025, 346457940346.6207, 346458461004.98364, 346459929012.4348, 346460173162.5984, 346465601019.0003, 346466327733.0332, 346486260058.6811, 346487240372.8926, 346498743739.3424, 346499125505.7269, 346499376595.71954, 346499753811.29474, 346500256801.4588, 346500697808.1108, 346504258494.27716, 346504316911.95386, 346506516807.66284, 346507958980.0243, 346511003212.91095, 346512277641.42694, 346539741296.44763, 346540193725.6511, 346545851404.5785, 346546034086.81616, 346549281913.46564, 346549852309.54016, 346580049429.5292, 346580150828.7988, 346581222751.1375, 346583410784.28674, 346586472369.405, 346586687274.6006, 346594168693.68866, 346595293093.276, 346598925817.72876, 346599285042.0836, 346608600836.8796, 346608935307.3612, 346626650869.83813, 346628330635.01447, 346638840555.74207, 346639405375.16345, 346644052743.1466, 346644621645.8259, 346645659209.37854, 346646131868.3838, 346646825490.77075, 346647004665.3986, 346680668251.46313, 346681882680.56555, 346690386074.3468, 346690710908.60675, 346708033663.9535, 346708165517.677, 346709861296.8102, 346710061561.5226, 346717202938.80554, 346717805223.9742, 346735802639.80347, 346736815841.37823, 346746841602.09186, 346747137891.5424, 346765574600.1079, 346768287829.12317, 346774956686.89624, 346776118386.572, 346786573565.41016, 346787366753.07556, 346791052493.0437, 346791285695.1985, 346791602085.28577, 346791996680.72705, 346803705159.78265, 346804698942.4883, 346806102295.53534, 346806520609.66187, 346836860043.5951, 346837045350.5157, 346837671817.4074, 346838431552.69275, 346838771258.18085, 346839055661.567, 346849938658.60834, 346852605552.21204, 346868335606.94165, 346868982301.7254, 346889222643.4078, 346890109339.2462, 346904034113.67566, 346904878520.5677, 346919867146.21387, 346919977362.4153, 346923125053.1063, 346923504940.5311, 346925425251.77246, 346926353778.32855, 346930665724.27954, 346931352359.8279, 346960560227.4441, 346960812001.24304, 346962886398.79474, 346962971974.7429, 346968582559.4181, 346969191586.333, 346970389059.0256, 346970862798.87976, 346974731401.2491, 346976662284.71155, 346977011018.5482, 346977391973.322, 347003025043.81525, 347003948698.78467, 347017542768.59436, 347018839403.9234, 347019426648.5097, 347019668860.4293, 347026532633.18524, 347027097302.6886, 347030969676.0718, 347032039698.8454, 347040537629.8089, 347042590997.8381, 347080465710.5521, 347081037629.6708, 347102020190.68994, 347103216073.7377, 347111323707.44275, 347111764453.33746, 347157178891.34076, 347158067742.68774, 347159107793.81616, 347160650309.46173, 347166031499.5336, 347166826514.3975, 347169363877.42725, 347170076813.6438, 347170853546.89966, 347170888638.36664, 347193293848.29254, 347193588922.7871, 347196126842.7018, 347197351722.37805, 347211650678.72095, 347212915722.77155, 347226173129.6522, 347227092286.254, 347262136495.3429, 347262275517.6639, 347264478256.5818, 347265340104.7229, 347266529499.0636, 347267906536.28516, 347271684303.7493, 347272288335.8772, 347276946715.2619, 347278461887.76996, 347281481460.1168, 347282708538.36273, 347295035590.86597, 347295305848.51086, 347300729100.92334, 347302125311.5256, 347322115291.7433, 347322293150.55786, 347324713901.0709, 347325160038.1551, 347358280495.1327, 347358602312.14966, 347360184609.41864, 347363621462.80255, 347367696922.1216, 347368180335.7303, 347384830031.2765, 347386886416.31323, 347401681136.3752, 347402137434.423, 347412899689.0248, 347412947249.5686, 347431776392.33545, 347433372604.575, 347434935087.1007, 347435194385.9723, 347437151786.4018, 347437972222.0099, 347462874841.4812, 347464135337.4935, 347464909946.0519, 347465302414.049, 347481398962.651, 347481991942.6446, 347484626391.72235, 347486443659.3618, 347499781953.349, 347500738347.7264, 347505712715.6169, 347506683679.6598, 347507743773.697, 347508686141.57117, 347513801115.5537, 347515423522.1621, 347525671250.3948, 347525910132.1775, 347526580417.8106, 347527610144.0552, 347530820427.1183, 347532277212.6571, 347535424629.93494, 347536586710.33655, 347538873404.3003, 347540475341.7993, 347541128869.1111, 347541634013.26355, 347545218174.1405, 347545396040.00037, 347555409265.57764, 347555602207.0468, 347556388615.45886, 347557151623.80286, 347565085097.8861, 347565687583.1223, 347585456519.5906, 347587113805.8456, 347592129480.2117, 347592734024.2849, 347611998789.9861, 347613034253.6133, 347626570792.45886, 347627161404.7135, 347650245778.90784, 347651247548.7807, 347653722378.19055, 347654673195.9106, 347666508935.9985, 347667099382.95776, 347667711730.9684, 347667927006.73895, 347684285715.01086, 347687427561.57446, 347699210213.6554, 347700440829.4443, 347726097166.2948, 347726440985.2624, 347774043474.6084, 347775230151.22754, 347796082381.5997, 347798029780.5675, 347800941660.3601, 347801166334.03125, 347823880083.3513, 347824787312.62665, 347835342292.4515, 347837774477.9038, 347860766692.54474, 347860998915.99713, 347864079205.58777, 347865006412.68164, 347873611475.03064, 347874169490.58685, 347879595233.694, 347879637787.42737, 347879799047.71686, 347879988916.4012, 347881080787.57996, 347881472237.5869, 347886038011.0006, 347887183845.3784, 347890523471.20874, 347892252676.5648, 347905624393.2439, 347906842861.20984, 347920085956.8, 347921736708.78406, 347934184143.5711, 347935051178.7891, 347937935440.55914, 347938670945.7095, 347939590847.52747, 347941329083.6872, 347943920138.10425, 347945088472.99713, 347950101611.55835, 347953799642.3174, 347978235744.423, 347978610280.84894, 347990939739.59033, 347991421925.8988, 348000680112.5708, 348001071013.42346, 348002428327.96484, 348004357016.7228, 348008114207.65454, 348008677879.2689, 348011415391.9222, 348012312974.45953, 348017231331.9209, 348018095559.3078, 348034179891.6046, 348034376531.1913, 348036713842.9719, 348037911242.6869, 348039468380.1587, 348040558683.10974, 348054143842.1422, 348054750123.6592, 348056314193.9261, 348057040424.135, 348063560236.08496, 348065535272.97437, 348075473425.4379, 348076437554.2802, 348082173267.8947, 348083615376.40295, 348092824792.5126, 348093149303.9988, 348130593040.10547, 348131046259.7248, 348144018361.7952, 348144418065.1696, 348161676179.64343, 348162910885.85626, 348173786495.81915, 348174259812.9228, 348175979014.24207, 348176123518.4865, 348183018776.9024, 348183620835.80225, 348187961993.13104, 348188810821.1036, 348201878356.6647, 348202982239.6818, 348205073189.2241, 348206710571.29376, 348218487555.5705, 348218819076.9464, 348232397548.03143, 348233388346.62976, 348241277354.1278, 348242288471.58484, 348248962962.04785, 348249237491.60315, 348257322192.33887, 348259130521.7033, 348260130246.3541, 348260346674.93243, 348260503986.7926, 348261856362.09314, 348266719398.3532, 348267526336.12537, 348268705107.6645, 348269161244.3552, 348271195865.958, 348272928635.3736, 348276065058.39343, 348276410197.9203, 348277596437.70593, 348277758859.22015, 348282542004.4844, 348283739296.8854, 348297502534.78687, 348298310576.2269, 348321244012.5634, 348322340216.38086, 348329543151.4935, 348331012150.96265, 348332017070.73486, 348332114745.9873, 348348613036.59863, 348349834275.9839, 348350682633.7499, 348351027018.6192, 348359568349.4625, 348360011456.10974, 348373077308.0657, 348374214443.53186, 348388329327.5032, 348389395467.9331, 348391915540.08777, 348392325823.62897, 348395471262.78186, 348395609122.09753, 348404480784.4412, 348404837806.9458, 348432713215.8331, 348432937693.9699, 348438108498.442, 348438291259.8104, 348442525032.7548, 348443424128.762, 348450422125.5607, 348451329828.0691, 348452104730.38654, 348452932819.07117, 348456148404.03406, 348457294744.3198, 348457599708.9392, 348458491628.7206, 348462582789.2685, 348462833246.9491, 348474064042.9613, 348474923724.24097, 348476707713.0527, 348477402230.7906, 348480966386.8014, 348481372936.45483, 348482005492.1034, 348483834923.8358, 348487916432.2932, 348489287152.8977, 348493524686.2271, 348494589038.50745, 348494927179.0663, 348495118581.72943, 348495527396.64905, 348495762066.0152, 348496064773.35516, 348496391208.3154, 348497265991.50916, 348498196205.7454, 348508002446.2735, 348508408418.26105, 348548813846.36884, 348549086329.85474, 348563273832.04205, 348564398472.96497, 348570828544.22046, 348571700708.66003, 348576150327.0107, 348576482083.659, 348580703839.2982, 348581064828.6714, 348601196207.23834, 348601903164.0622, 348603344471.15594, 348604171194.4401, 348607283733.23535, 348608430267.75134, 348612204650.6971, 348613476678.44995, 348615861251.4441, 348616580412.8238, 348672310158.52277, 348672848055.154, 348676939481.81506, 348677625140.53656, 348696495674.0491, 348696914548.6033, 348715356436.9116, 348716017034.484, 348719492481.23914, 348720565997.5849, 348741539108.5377, 348742123906.27216, 348751731523.484, 348752333964.375, 348752591899.97, 348753012580.2459, 348756111892.82715, 348756254671.06213, 348773482567.3121, 348773853306.182, 348832722845.8113, 348832994021.26514, 348836885934.5635, 348837289341.9854, 348838011417.63544, 348839081260.5568, 348859342069.2134, 348859886682.489, 348860495825.81305, 348860556697.17065, 348867243149.8683, 348869343952.8462, 348873073529.438, 348873303520.14514, 348880399135.44946, 348880696586.88074, 348889215772.6886, 348890891580.97473, 348938123011.51935, 348938738051.494, 348942401001.08813, 348943474468.12775, 348952837441.7722, 348952979259.73206, 348964524210.93616, 348965240194.6576, 348966141259.14966, 348966756663.23425, 348968005025.69336, 348968562396.59796, 348969279887.3161, 348970670838.8512, 348973003914.4678, 348974064208.87573, 349025654083.1972, 349026549045.3406, 349028841240.6582, 349035272773.2882, 349041203444.29553, 349042768605.3633, 349095770147.3107, 349096416740.2713, 349104105274.68555, 349104543306.3607, 349104903396.4345, 349106241544.5627, 349136692468.64124, 349137153418.71545, 349186594890.2793, 349186866723.43915, 349190666943.6599, 349191094599.4779, 349191601073.34204, 349191915653.8978, 349193099395.5182, 349194429987.68933, 349213466592.1444, 349215975919.84436, 349221792675.56134, 349223068304.59607, 349266856569.4589, 349267906861.4412, 349272764274.3739, 349273620670.2769, 349274968326.1063, 349275366455.37885, 349275692288.45306, 349277125747.5813, 349279708826.3581, 349281437547.7535, 349283025129.83813, 349284005758.01965, 349296120466.1383, 349296287259.093, 349317056312.9414, 349317993958.0582, 349320874571.4098, 349321767784.0602, 349342299780.72424, 349343987917.5094, 349355436937.4446, 349356811785.531, 349390643910.66895, 349391778657.7157, 349403538070.448, 349404366640.46423, 349406500324.635, 349406627998.47864, 349407495250.9211, 349407898804.5206, 349408858364.7256, 349410854083.3893, 349420734150.36975, 349421523252.88, 349439475033.536, 349439797350.1829, 349453377473.69073, 349455529221.78845, 349463861491.8428, 349464177604.926, 349507848389.53125, 349508846813.0935, 349510663345.76575, 349511762186.58374, 349521373728.14087, 349523269269.6927, 349529727657.89233, 349533445813.98315, 349536742283.6394, 349538787824.5048, 349538947699.955, 349539505483.36475, 349561534914.6345, 349562291115.5362, 349569435989.56323, 349570334996.70306, 349575087047.02783, 349575623689.22925, 349577827745.55676, 349579090931.0619, 349585447168.7818, 349585810695.77576, 349628992423.5823, 349630200613.886, 349632373321.1115, 349633037352.8917, 349633621037.19507, 349635137720.2344, 349651732252.8555, 349654503257.97906, 349658924971.9919, 349660469374.5691, 349669104627.80554, 349669524355.95856, 349674062121.14734, 349674340880.0812, 349695529281.82007, 349696303417.46716, 349707603338.54803, 349708950327.3098, 349728078269.94495, 349729687135.2949, 349739975461.7759, 349740587418.9834, 349745416219.4511, 349747134605.93005, 349756876050.9148, 349757652391.5745, 349766922503.9486, 349767575586.1058, 349767846130.32434, 349768246062.5393, 349770594275.6207, 349772750727.8517, 349804871343.7239, 349805569434.0871, 349816208941.3174, 349816689444.8573, 349822570497.6875, 349823432697.0911, 349840112737.30164, 349840459825.99457, 349895030953.5062, 349895208605.09937, 349911384707.8429, 349912888624.21576, 349917964179.8663, 349918692999.1222, 349936720815.8625, 349936845342.11365, 349940772363.1465, 349941209122.3479, 349943288819.4846, 349944201615.94104, 349947880227.94336, 349948759351.7279, 349965240371.03625, 349966177990.3581, 349968622727.3135, 349970787567.87744, 349974560747.9414, 349975453513.16046, 349977010008.38635, 349977817737.54926, 350007692538.65356, 350008403744.52075, 350011361390.64545, 350011815927.439, 350012098734.3937, 350013228748.5624, 350025336536.0731, 350026857456.58325, 350029990276.45715, 350030519996.94446, 350031872387.9315, 350032772883.2709, 350056727176.8334, 350059610926.38947, 350107885779.9985, 350108688290.0171, 350126243112.41565, 350126733845.8042, 350135315942.5251, 350135781002.61707, 350159535845.3757, 350159701098.8998, 350170414937.8323, 350171709375.2516, 350180058086.93854, 350180589784.8015, 350185920471.9297, 350186820114.2411, 350189293464.9599, 350189959973.1122, 350190627143.3569, 350192510317.74786, 350231536323.36487, 350231830790.76483, 350243540568.3312, 350246043535.8231, 350248163481.1231, 350248966219.35864, 350267307826.2543, 350267666573.41437, 350272683748.3995, 350273055964.9397, 350301043611.7094, 350302421524.64984, 350325314681.6445, 350325757006.7192, 350344523282.0082, 350345659113.1588, 350348404309.49316, 350349175032.87384, 350351182538.655, 350352701657.54376, 350354544620.4107, 350356569763.87964, 350362256796.1834, 350366052024.1402, 350376157852.2634, 350376577604.96606, 350379890141.8466, 350381202024.6979, 350416273178.4712, 350417009125.65625, 350421805130.4436, 350422461312.0727, 350429339690.1446, 350430228089.27405, 350460405541.7793, 350464096011.82465, 350474956164.78107, 350477734131.9587, 350482879108.978, 350483521200.43604, 350493348994.79803, 350494312497.4836, 350496446016.3041, 350497104087.5744, 350497687281.7018, 350499252054.23645, 350523191087.5625, 350524841697.1848, 350526361839.39764, 350528420896.9453, 350578481218.1257, 350579244409.9153, 350593592130.7195, 350594625469.9706, 350667264719.3375, 350668332139.067, 350672181272.0244, 350674180539.1858, 350694494942.51904, 350694610805.37134, 350701506192.10254, 350701624166.7156, 350728247808.996, 350728604193.82294, 350735627292.65393, 350735893465.1364, 350743655081.1279, 350746618561.2675, 350749363645.76184, 350750600830.97906, 350821242202.4426, 350821986269.5162, 350855917931.6095, 350858172255.2314, 350864698575.3325, 350867798681.5255, 350880147617.9026, 350881292857.0011, 350894459733.9763, 350894929299.30585, 350909222844.17944, 350910086850.9976, 350921241226.8467, 350921927804.2023, 350925321550.4381, 350927545042.454, 350941234407.7024, 350943546983.43317, 350958432560.5357, 350960112113.19104, 350962627940.1447, 350966167572.5897, 350973672462.0456, 350975739393.8355, 350983716605.289, 350985230073.7661, 350995571718.85236, 350997460861.2422, 350998989987.9647, 350999722352.0526, 351002321033.34375, 351003805066.1277, 351027137643.24347, 351028126690.93774, 351042284130.2831, 351043077697.4247, 351069012209.0889, 351073944068.00354, 351119878154.8001, 351120586631.1246, 351121344132.59534, 351122892424.75543, 351144191719.94104, 351144765745.8222, 351147945987.50214, 351148661864.3634, 351214631603.3302, 351215564288.7435, 351235237398.053, 351235685904.9065, 351293212858.0937, 351293629406.00635, 351329294327.58, 351330055495.8003, 351330774100.8169, 351331371680.00745, 351349283721.72296, 351350195786.8169, 351406806188.6288, 351407725173.43384, 351429784593.35974, 351431945148.8563, 351461502677.1438, 351461991567.4468, 351496917570.758, 351500104097.3718, 351501250840.0799, 351502559103.2196, 351512730476.4121, 351513944365.46106, 351530448974.8097, 351533313020.97046, 351540573823.3478, 351544428343.66486, 351554581680.5774, 351555200452.10846, 351562822017.77203, 351563679991.7339, 351586993450.254, 351587452487.94214, 351595527543.65735, 351596038942.7356, 351602700230.24786, 351603562972.021, 351656723936.2883, 351658059664.67505, 351666408234.7034, 351670061447.5481, 351701714426.79706, 351702961760.6593, 351704464351.7412, 351705671084.3975, 351777367383.2068, 351778287585.7883, 351796286456.5092, 351796933401.0553, 351802794072.6562, 351805852146.5189, 351812916968.8065, 351814135661.7841, 351838746020.8934, 351842149260.59717, 351865474341.81085, 351865908173.8348, 351874503577.26154, 351876513324.52344, 351881736866.71423, 351882538013.4261, 351893958158.6724, 351897664717.4562, 351918235484.2468, 351920118103.8915, 351942643178.8766, 351943212824.4922, 351968313902.6345, 351970542635.8776, 351982927439.1019, 351985040641.30896, 351995934340.0401, 351997284062.58496, 351999927297.28357, 352003070601.65045, 352006004494.8732, 352007201056.0094, 352033065963.80444, 352033778403.4757, 352043420411.4541, 352045763046.0112, 352048213340.2725, 352048691192.4204, 352050550548.5405, 352051032429.8025, 352056976786.8019, 352057517926.92914, 352066218743.07666, 352072046483.0205, 352104110307.0764, 352106985547.7513, 352113275154.2019, 352113790522.78595, 352137168237.6676, 352138451479.12714, 352149808413.8685, 352149843761.5425, 352151192204.30615, 352153028625.0106, 352188236063.3981, 352188760583.55774, 352193098625.9374, 352194815334.35425, 352199337272.39703, 352200389639.73145, 352211723300.43286, 352212189788.35535, 352231253944.76965, 352232764330.89764, 352261713183.6319, 352262992212.26715, 352274618915.6047, 352274809521.79315, 352279481018.22473, 352280325129.6331, 352283893341.9477, 352284666824.8615, 352298920379.83545, 352299562843.10645, 352369815928.84094, 352370593415.50964, 352405782148.6767, 352406782670.744, 352455801893.20435, 352456269551.9657, 352502906227.2355, 352505344411.4212, 352518110441.21606, 352519324573.52893, 352542480075.95026, 352542853169.6049, 352563326952.60645, 352565810413.5955, 352566955309.2907, 352568297468.3542, 352573643954.1936, 352574341514.4833, 352576826365.046, 352577734312.6262, 352619919930.4326, 352620742310.9895, 352634997586.4781, 352635788771.43274, 352651214753.1684, 352651795053.1873, 352665822793.14075, 352667118605.79, 352668179771.56616, 352668928676.8093, 352669775255.1644, 352671147724.7722, 352714897654.6233, 352715741712.71423, 352724009465.79816, 352725208349.0891, 352745584725.26135, 352747499163.3192, 352763325230.3321, 352764283127.5919, 352800459897.5635, 352804409641.8781, 352813128278.9932, 352813627615.5594, 352827078772.3629, 352830611092.3676, 352841569196.06995, 352843503018.03, 352845041273.8711, 352848868706.9916, 352885417615.03906, 352886985816.303, 352889104570.64075, 352890889956.34564, 352898329509.292, 352899502753.719, 352954994654.59875, 352956920521.2308, 353070752076.0269, 353071758308.7225, 353078692994.6244, 353079667836.9049, 353082209435.6651, 353083180647.51355, 353133985766.48035, 353136897118.2274, 353214398399.5357, 353216389360.9325, 353250575319.0597, 353251766584.6244, 353254249808.17786, 353254474255.9447, 353258738573.1246, 353262453027.8033, 353287520362.47217, 353289253417.7738, 353348371543.8306, 353350281362.68506, 353355410898.9396, 353355955738.6541, 353370048379.6994, 353372376571.2942, 353373596043.29016, 353376786968.63806, 353411864948.0481, 353412481468.35364, 353415676297.3915, 353416924087.1126, 353427228436.0967, 353430836870.3805, 353432273028.19684, 353433099645.24316, 353459017416.96576, 353463505547.09564, 353479818608.35693, 353482599200.1742, 353582685488.18567, 353584246690.0748, 353603790351.2694, 353605964285.8047, 353677692216.985, 353678141913.0487, 353701287716.00543, 353707132529.5511, 353797640785.0573, 353800424997.4982, 353932360098.60144, 353932965188.32367, 354006757013.23755, 354006856273.2449, 354035857330.5005, 354037252200.11176, 354071001097.6504, 354074437470.33246, 354078854789.90137, 354083695077.4647, 354164738032.17145, 354167440550.00256, 354196307317.6704, 354202379038.5909, 354214711762.21826, 354217174139.534, 354280064148.04694, 354292195845.10284, 354309555857.42395, 354311503798.1757, 354359256699.1618, 354363562538.36646, 354462672858.8778, 354463074785.1245, 354514769783.54614, 354517534402.04175, 354523289941.83014, 354525407626.994, 354528170953.7274, 354528771745.6874, 354531957110.2, 354532654320.91003, 354552132779.584, 354558431550.41626, 354584383484.4579, 354584735315.0294, 354653181896.85754, 354656917984.96826, 354661584172.23206, 354665369546.66064, 354701906993.7312, 354703634406.47546, 354767007512.0165, 354768920026.00305, 354835371275.944, 354836583369.52893, 354873643576.1969, 354875780182.7001, 354902270902.2483, 354903536904.68146, 355030300674.5521, 355031781126.42163, 355040665292.84674, 355043750283.98254, 355072666815.2718, 355075571394.59973, 355159981284.8626, 355163752273.3164, 355381032922.1804, 355382851200.1648, 355520976851.30786, 355521505670.48645, 355549373538.36444, 355551782077.897, 355597053984.35596, 355599454490.442, 355617864783.13446, 355622336715.562, 355632742944.3578, 355635898794.78406, 355637991633.1453, 355638775911.07214, 355672530072.51135, 355687591970.6649, 355757400698.36444, 355761829813.6618, 355831233692.27246, 355837411369.6576, 355838691912.14355, 355839978024.31604, 355850322964.69946, 355851459129.9379, 355854647358.6596, 355856436526.12915, 355902657026.82117, 355907003078.0685, 355979398873.7415, 355982740795.868, 356040067816.486, 356044225843.1513, 356052242159.90393, 356055081494.162, 356057239595.2005, 356058093177.52625, 356069455298.7812, 356071950433.38947, 356159556170.2719, 356165037261.8524, 356201443379.63043, 356207235500.73645, 356227334881.6117, 356230145284.5186, 356248486218.41907, 356252884291.6361, 356278383195.3863, 356281123001.84644, 356299549094.5559, 356301420466.7422, 356335201373.8137, 356337754004.98303, 356341607542.8025, 356345218825.5632, 356347423779.38916, 356348956646.6726, 356361090416.2699, 356367063995.4504, 356457480612.93274, 356467007303.66565, 356531144823.8906, 356533150745.58624, 356555062430.6075, 356556967373.4584, 356613816653.6118, 356615923819.9695, 356621718408.5088, 356622731606.6553, 356634168865.3392, 356634938603.8701, 356705513217.15234, 356706896406.08545, 356975059369.7912, 356979680149.6833, 356996037152.601, 357003494470.63385, 357043045345.2306, 357049953780.52576, 357122767737.8485, 357128385855.2933, 357180737938.5254, 357180942458.03174, 357305181141.0552, 357307606692.552, 357545616067.9741, 357549680277.0769, 357583137227.73376, 357586369668.76636, 357593866534.4974, 357601470581.5123, 357678917645.7892, 357682666590.1905, 357696963580.97736, 357701077672.1339, 357708599019.70337, 357712931117.4783, 357776093434.52844, 357784555706.7151, 357787158533.3213, 357788205716.2246, 357831283489.37823, 357832258310.95593, 357855078937.4221, 357861242369.29584, 357898140916.9193, 357904984129.5653, 357949180685.65967, 357962286520.6435, 358115797608.6671, 358121034718.3039, 358284695199.3332, 358290643521.7029, 358329665771.0764, 358339668043.21924, 358482867447.6354, 358490473632.2821, 358543574819.42725, 358546369490.9888, 358689575120.12915, 358699125211.1578, 358774327913.0587, 358776377292.9782, 358788271601.98865, 358793096085.5165, 359041902873.91064, 359045489104.60864, 359087502394.9586, 359093412527.2385, 359146449046.9648, 359149831792.5601, 359211880005.5753, 359215300894.4758, 359565295139.415, 359571827874.3716, 359825566199.5016, 359829026357.43616, 359969028315.0708, 359974216875.21967, 359986286592.14294, 359994425633.2975, 360034016291.9044, 360039452854.45044, 360296483788.48755, 360310796601.47595, 360449337176.5971, 360459493976.2265, 360551946385.2843, 360552686427.2537, 361005449907.854, 361010554954.7781, 361259365808.2242, 361269653804.9684, 361719963320.09674, 361721802889.13, 361908272387.6967, 361913287025.80255, 362297000933.8233, 362309684491.20215, 362722567968.28235, 362737910629.5148, 362845433439.82825, 362879972173.8291, 363209523265.59106, 363226088293.30676, 363374432233.42444, 363400462088.3579, 363627354245.45166, 363646302979.3352, 363746583879.7881, 363750641474.6582, 363889711785.112, 363903444172.95056, 364720713947.771, 364724655484.31226, 365550330420.50037, 365583911062.1924, 366221511970.245, 366255423617.72894, 367098793712.4461, 367105751683.5144, 367281960357.95264, 367314837895.92285, 367806572131.7355, 367825703659.9105, 371186915618.17944, 371216281625.6926, 371952412145.8568, 371997739207.3457, 372308690599.8333, 372899063713.41077])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)
    start_label = 1
    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = (numers[indys] + start_label) % 2
        outputs[defaultindys]=0
        return outputs
    return thresh_search(energys)

numthresholds = 4054



# Main method
model_cap = numthresholds


def Validate(file):
    #Load Array
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs, cleanarr[:, -1]


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    cleanarr = cleanarr.reshape(cleanarr.shape[0], -1)
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in (['"' + i + '"' if ',' in i else i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        classifier_type = 'DT'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)




#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is 
# licensed under GNU GPL v2.0 or higher. For details, please see: 
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.93 Table Compiler v0.94.
# Invocation: btc https://www.openml.org/data/get_csv/53276/fri_c4_500_100.arff -o Predictors/fri-c4-500-100_NN.py -target binaryClass -stopat 89.00 -f NN -e 20 --yes
# Total compiler execution time: 0:08:35.61. Finished on: Apr-21-2020 20:20:11.
# This source code requires Python 3.
#
"""
System Type:                        Binary classifier
Best-guess accuracy:                56.60%
Model accuracy:                     89.20% (446/500 correct)
Improvement over best guess:        32.60% (of possible 43.4%)
Model capacity (MEC):               171 bits
Generalization ratio:               2.60 bits/bit
Model efficiency:                   0.19%/parameter
System behavior
True Negatives:                     38.20% (191/500)
True Positives:                     51.00% (255/500)
False Negatives:                    5.60% (28/500)
False Positives:                    5.20% (26/500)
True Pos. Rate/Sensitivity/Recall:  0.90
True Neg. Rate/Specificity:         0.88
Precision:                          0.91
F-1 Measure:                        0.90
False Negative Rate/Miss Rate:      0.10
Critical Success Index:             0.83

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "fri_c4_500_100.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 100
n_classes = 2

mappings = []
list_of_cols_to_normalize = []

transform_true = True

def column_norm(column,mappings):
    listy = []
    for i,val in enumerate(column.reshape(-1)):
        if not (val in mappings):
            mappings[val] = int(max(mappings.values()))+1
        listy.append(mappings[val])
    return np.array(listy)

def Normalize(data_arr):
    if list_of_cols_to_normalize:
        for i,mapping in zip(list_of_cols_to_normalize,mappings):
            if i>=data_arr.shape[1]:
                break
            col = data_arr[:,i]
            normcol = column_norm(col,mapping)
            data_arr[:,i] = normcol
        return data_arr
    else:
        return data_arr

def transform(X):
    mean = None
    components = None
    whiten = None
    explained_variance = None
    if (transform_true):
        mean = np.array([0.01869151428571429, 0.018460880000000006, 0.012049951428571412, 0.005200662857142886, 0.029014745714285712, -0.04460129999999997, -0.05305632571428576, 0.024454668571428573, -0.011876951428571402, -0.043757397142857146, -0.004628122857142875, 0.038707294285714254, -0.0005208171428571516, 0.015898874285714286, -0.04850525142857145, 0.024527694285714274, 0.03651530571428571, 0.04014151714285713, 0.030795842857142885, 0.016105131428571395, -0.07645579428571429, -0.014149640000000012, -0.010293114285714283, -0.01722916571428573, 0.011630577142857135, -0.0032492885714285507, -0.0030603171428571527, -0.01142735714285715, 0.054764134285714326, -0.00040608285714285956, -0.00673125714285717, -0.006234954285714283, 0.0062363742857143, -0.022399605714285724, 0.004447528571428547, 0.00021806857142862393, 0.004924537142857175, -0.052439971428571416, 0.0017978514285714444, -0.011233405714285737, -0.01617443999999997, -0.002339582857142864, -0.013292520000000072, -0.062335562857142875, 0.041778754285714266, 0.02248055999999997, 0.038337557142857144, 0.03325773714285717, -0.0032784971428571424, 0.02416479714285714, -0.028897548571428556, 0.008751517142857122, 0.0294781342857143, 0.017733994285714278, -0.0037442285714285673, 0.008301571428571426, 0.04249355714285715, 0.006123179999999986, -0.013767088571428554, 0.00028494285714282536, 0.01195961142857141, 0.021255028571428563, 0.02160785142857141, -0.0014666314285714036, 0.07686626000000002, 0.0024281257142857054, 0.06843520571428573, 0.004157797142857152, 0.01011750571428572, -0.014086879999999972, 0.0054361685714285745, 0.017213762857142854, -0.011179039999999977, -0.012453040000000038, 0.03492343999999998, 0.020607705714285714, 0.015636505714285723, -0.009824774285714263, -0.03623756857142853, -0.009737902857142848, 0.016460657142857157, 0.010774305714285694, -0.003763905714285695, -0.005069982857142898, 0.02867895428571431, -0.010750545714285733, -0.002612985714285709, -0.04889029714285717, 0.02881000857142854, -0.048144620000000006, -0.02741476285714283, 0.03529259714285724, 0.045329051428571424, -0.006554508571428586, 0.033364045714285695, -0.03246232857142855, -0.006867405714285707, -0.01723518857142852, 0.01773404000000001, -0.007035677142857113])
        components = np.array([array([ 3.83140568e-01,  4.16283343e-01,  4.77213258e-01,  2.22857812e-01,
        5.04270794e-01, -1.90290781e-02, -8.27435507e-03, -3.11437979e-02,
       -4.87657408e-02,  3.98735682e-02,  1.85030971e-02,  4.46594965e-03,
       -1.70512282e-02,  4.76774788e-03,  9.83851267e-02,  5.42307765e-02,
       -3.98436896e-02, -6.30100160e-02,  2.79042906e-02,  1.23323312e-03,
       -1.00326868e-02, -3.36861735e-02, -2.89267172e-02, -8.57280554e-02,
       -6.98183627e-02,  1.36015113e-02,  4.57343967e-02, -2.71409119e-02,
        1.29760951e-02,  3.57406798e-02, -1.10118677e-02, -1.54514782e-02,
        4.12696981e-03,  3.74585102e-02, -8.28513293e-03,  1.78665322e-03,
       -2.57483203e-03, -3.71621916e-03,  5.81605264e-03, -2.42973170e-02,
        4.04502146e-02,  8.41820937e-02,  9.38793780e-02,  3.15901773e-02,
       -1.79477923e-02,  1.01397420e-03,  1.52034922e-02,  2.87057876e-02,
       -3.63571456e-02, -7.78024152e-02,  3.90769071e-02, -2.24294473e-02,
       -1.72432166e-02, -9.84169024e-03,  4.39997526e-02, -1.17555899e-02,
       -2.45548988e-02, -1.96051535e-02, -9.12840623e-03, -4.79389672e-02,
        1.08937864e-02, -4.42285613e-02, -8.16328547e-03,  8.35464539e-04,
        1.75057189e-02, -7.52131040e-03,  4.99054458e-02,  2.55686174e-02,
        3.93962379e-02, -4.72872157e-02,  3.49737911e-03, -4.81780117e-02,
       -4.36149944e-02,  6.60201505e-03,  4.12914925e-02,  6.56685664e-03,
        1.35929197e-02, -4.30116112e-02,  1.94192836e-02, -4.41870297e-02,
        1.72302454e-02,  5.24715431e-02,  1.43452941e-02, -6.82697944e-03,
        2.86809030e-02, -2.01916678e-02,  8.87975117e-03, -1.09965560e-01,
       -3.60904942e-02, -7.14711119e-02,  1.98821937e-04,  6.11095866e-02,
        2.86206520e-02,  9.95037427e-02, -2.16854639e-02, -8.92443258e-03,
        3.62884369e-02,  6.86301420e-02,  4.74186056e-02,  2.43104613e-02]), array([-5.81758442e-03,  2.01766224e-02,  1.08534486e-02,  3.02063564e-02,
        2.42809954e-03,  4.57855346e-01,  3.62792609e-01,  1.45937650e-01,
       -5.48449299e-02,  2.96450681e-01,  3.76436342e-02,  2.71772890e-02,
        4.01397445e-03,  8.95326168e-02, -1.89461177e-01, -5.67349987e-02,
       -9.74984052e-02, -3.32742882e-04,  3.55340168e-04,  1.05498105e-01,
       -6.95912980e-02,  5.29907798e-03,  2.92430623e-03, -5.03246371e-02,
       -7.63003245e-02, -4.81585465e-02,  8.08709061e-02, -5.98233366e-02,
       -4.65030796e-02,  1.67391817e-01, -4.26028846e-02,  4.30958122e-03,
        7.41168590e-02, -5.23097293e-02,  5.86101988e-02,  6.87284474e-03,
        7.52023541e-02, -8.50724905e-02,  7.32368748e-02, -3.22122665e-02,
       -8.62867310e-02,  7.42147867e-02, -1.11814610e-01, -1.20811154e-01,
        5.61783757e-03,  8.23113443e-02,  9.61854249e-02, -9.25826396e-02,
        9.70521666e-02,  1.19311105e-01,  1.37025603e-02,  4.30048243e-02,
        6.78738942e-02, -2.96442618e-02,  2.08245512e-02,  1.50196724e-01,
        3.72390235e-02, -1.12751431e-02,  9.23125797e-02, -6.93947352e-02,
       -9.41116151e-02,  5.54344155e-02,  1.09384060e-01, -7.63950258e-02,
       -6.75811959e-03, -3.81455358e-02,  9.04572948e-02, -1.93812084e-01,
        1.06743891e-01,  9.66846997e-02,  1.15696800e-01, -5.05378682e-02,
        7.45315395e-03,  1.13361860e-01,  1.37064886e-01, -5.06115847e-02,
        1.59503552e-02, -7.55065829e-03, -1.06754417e-01, -5.46737947e-02,
       -2.02419673e-02, -4.42640124e-02,  5.66147601e-03, -4.05650277e-03,
       -1.32126856e-01,  3.55573713e-02, -8.24301263e-02, -6.10314761e-02,
        1.35698289e-01, -7.75051394e-02,  3.47408126e-02,  2.38203790e-02,
       -1.65164032e-02,  3.88990170e-02,  6.01606959e-02,  3.16337363e-02,
        4.34798248e-02, -6.02914937e-02,  7.33589853e-02, -1.22356169e-01]), array([ 0.02979521,  0.05060534, -0.02487373, -0.01792533, -0.02500869,
        0.18527984,  0.12469863,  0.22943469,  0.11210425, -0.06556298,
        0.02189886,  0.08743344, -0.03217474,  0.05058092,  0.11266172,
        0.00097603, -0.06607421,  0.15129721,  0.01559562,  0.0563662 ,
        0.04768462, -0.08658691,  0.02817078,  0.08648085,  0.0388554 ,
        0.03885192, -0.12561775, -0.0485089 ,  0.20714858,  0.0199036 ,
        0.0531881 ,  0.06098912, -0.0436569 , -0.01648398, -0.03452811,
        0.07248005, -0.03357194,  0.06390515,  0.05476421, -0.08829857,
        0.14987459,  0.02988949,  0.04074302, -0.05296279, -0.12046907,
        0.22370328, -0.11280075,  0.02151298,  0.03153585, -0.12643306,
       -0.18234535, -0.0463822 , -0.08782262, -0.00923795,  0.15474929,
        0.1783286 , -0.15413672,  0.01491444, -0.02051903, -0.08731035,
       -0.01301858,  0.06486761, -0.05818716, -0.21926039,  0.1364747 ,
        0.05911659, -0.01890444,  0.10574644, -0.13452759,  0.04128579,
       -0.00395393,  0.01203764, -0.02689419, -0.09099931, -0.13305034,
        0.02243163, -0.03104993,  0.04172521,  0.17689552,  0.19848283,
       -0.02160816, -0.03767326,  0.10398326, -0.06154288,  0.21879165,
        0.0420369 , -0.09636654, -0.01251073, -0.07247416, -0.04500707,
       -0.18858383, -0.0420814 ,  0.0898136 ,  0.04332701,  0.2357971 ,
       -0.19948697, -0.04839048, -0.08979822,  0.05020614,  0.06934734]), array([ 2.38594415e-01,  2.05658232e-01, -1.27911362e-01, -3.53244996e-01,
       -6.38695379e-02,  8.93075086e-03,  3.38026403e-02, -1.08022314e-02,
        1.60185781e-01, -1.83552033e-02,  6.39607306e-03, -5.40634516e-02,
        1.45270687e-01, -3.19317376e-02,  1.32396678e-01, -4.19115536e-02,
        4.92354315e-02,  2.36866920e-02, -2.44049472e-02,  6.88341788e-02,
       -3.26963884e-02,  3.53044950e-02,  4.00755764e-02,  5.63163062e-02,
        4.08938218e-02, -6.49335215e-02, -9.12821085e-03,  1.15299544e-01,
       -2.24667112e-02, -3.02755029e-02,  3.23079217e-02, -2.00248791e-01,
        2.48624336e-01,  1.50759190e-01,  1.11510892e-01, -5.98023333e-02,
       -3.09188328e-03,  6.14827857e-02,  1.72585249e-01, -1.10731363e-01,
        7.62165408e-02,  5.30174182e-02, -5.74295644e-02, -1.08244338e-02,
       -4.50722114e-03,  3.62428417e-02,  8.12039813e-02, -8.06822870e-02,
        1.72662084e-01, -1.84951617e-02,  8.69665512e-02,  8.55014019e-02,
       -4.51977333e-02, -5.61723953e-02, -5.83635251e-02,  2.74560585e-02,
        3.86482511e-02,  8.55428449e-02, -4.00347138e-02,  5.08452826e-02,
        1.87928069e-01,  6.09651878e-02, -1.54351112e-01,  8.53546043e-02,
       -7.56536927e-02,  1.47743109e-02,  1.02899834e-01, -9.00039731e-03,
        5.18122474e-02,  4.81697300e-02, -1.17365171e-01, -6.66798725e-02,
       -8.86438602e-02,  3.28755329e-02,  6.57413801e-03,  1.74298778e-02,
        8.85006624e-02,  4.65363135e-02,  8.24056945e-02,  9.89069693e-02,
       -8.22524230e-02, -5.14053563e-02, -8.99781641e-02, -2.81880938e-02,
       -1.40068728e-01,  1.54087273e-01, -5.49993645e-02,  5.42043826e-02,
       -4.01426303e-02, -1.02409824e-01, -4.60565348e-02,  1.38424743e-04,
        2.39870729e-01, -9.43730851e-02, -7.16684829e-02,  1.29588259e-01,
        1.76897831e-01,  6.41509674e-02,  7.10168626e-02,  9.92431202e-02]), array([ 0.00284685, -0.00389304, -0.02565355, -0.00670983, -0.03149336,
       -0.1097601 , -0.11037455, -0.08732039, -0.18305557,  0.08460145,
       -0.1158076 ,  0.13388325, -0.14730777, -0.0431247 ,  0.10534025,
       -0.11056648, -0.10137182, -0.0530784 , -0.22633327,  0.11753913,
        0.05359191, -0.13325346,  0.0206047 ,  0.07958651, -0.01692352,
       -0.06245361, -0.01594829,  0.02485893, -0.03067019, -0.04614739,
       -0.09287203,  0.01383694, -0.00309674,  0.17557491,  0.17904546,
        0.1541222 ,  0.08538551, -0.14964225,  0.15698451,  0.13879191,
        0.14644642,  0.01818777,  0.02084138,  0.06460886, -0.06605455,
       -0.12112093,  0.05502718, -0.10507464,  0.07432042, -0.24522157,
        0.03989906, -0.0941424 ,  0.16976261, -0.08755298,  0.0251039 ,
        0.13762276, -0.08063   , -0.21153084,  0.0097949 ,  0.0327893 ,
       -0.02125839, -0.16233975,  0.10245636, -0.09623447, -0.02087241,
        0.0994592 , -0.02604205, -0.15126234,  0.01056091,  0.02100265,
        0.10852325,  0.0201547 , -0.13551154, -0.06133561,  0.12283821,
        0.0012147 , -0.00049492,  0.04893405,  0.05143391, -0.0714257 ,
        0.1164515 ,  0.02105427,  0.04420879,  0.05080835, -0.12085438,
        0.0915694 , -0.20204861, -0.01439064,  0.00350821,  0.04821398,
       -0.05597829, -0.14298957, -0.03933335, -0.19123678,  0.00598963,
       -0.14111928, -0.01355802, -0.02195197, -0.046569  ,  0.10410221]), array([-0.04518619, -0.05909773,  0.0310382 ,  0.14616632,  0.02680524,
       -0.09999006, -0.1533414 ,  0.19050947,  0.15890495, -0.08463301,
        0.11288255, -0.00400583, -0.10727435, -0.00077896, -0.07551471,
        0.09952335, -0.1602438 , -0.02352571,  0.07093882,  0.16908035,
       -0.18897319, -0.04259296,  0.00033608,  0.00441572, -0.0137623 ,
        0.0633447 ,  0.10743613,  0.00668879,  0.09233924,  0.05909578,
       -0.21474764,  0.05578491, -0.12607468,  0.07765201, -0.0617423 ,
       -0.02837864, -0.04042026, -0.05161619,  0.16031393,  0.01149812,
        0.01136469, -0.13156427, -0.03936539, -0.13524354,  0.00955692,
        0.01145825, -0.07023366, -0.17112458,  0.11528844, -0.07353703,
        0.20600684,  0.04888158,  0.03545632, -0.11958016,  0.03386429,
       -0.0956465 ,  0.01151351,  0.06784529,  0.15397598,  0.03623487,
        0.12952961,  0.10618799, -0.04589231,  0.13644508, -0.08854842,
       -0.18546404, -0.0135314 ,  0.05513875, -0.0484038 ,  0.01893727,
        0.07246509,  0.10461932,  0.11485261, -0.04441609,  0.15688086,
       -0.16351139, -0.01363218,  0.13630537,  0.11519571,  0.08514406,
       -0.04142905, -0.0539897 , -0.07750184, -0.2759058 , -0.06004784,
        0.06501256, -0.07348244,  0.00936287,  0.07814931,  0.07539422,
        0.00307619,  0.01921476,  0.02925735,  0.02183995,  0.03116307,
       -0.10628432, -0.07503198,  0.22717645,  0.0023962 , -0.07305306]), array([-0.11628714, -0.12413383,  0.00869401,  0.1604109 , -0.03035809,
       -0.00712309, -0.07504543,  0.05463331,  0.02296715,  0.03670671,
        0.01567123,  0.05497452, -0.02257951, -0.0613023 ,  0.0291384 ,
       -0.01406566, -0.06293515,  0.08694665,  0.04382681, -0.18704919,
       -0.09531911, -0.13428941, -0.08964825, -0.05669937, -0.11427866,
       -0.16079786, -0.03783548,  0.17650664,  0.04790135, -0.09453572,
       -0.05965125, -0.13929988, -0.07896894, -0.12451839,  0.06642369,
       -0.00187658, -0.14219126, -0.03846546,  0.01114976, -0.05697376,
        0.15737423,  0.16505252,  0.04902832, -0.04513379, -0.24573692,
        0.08898109,  0.11961802,  0.01747512,  0.03612332, -0.01794433,
        0.00526388,  0.12086855, -0.04651358,  0.02128702,  0.12876938,
       -0.08951367, -0.16748649, -0.03228588, -0.04887106, -0.10703522,
       -0.10134282,  0.23979449, -0.04427012,  0.08126208,  0.03531723,
       -0.07727136,  0.01187102,  0.05430321,  0.1985465 ,  0.05620139,
        0.03358693,  0.03580813, -0.13806587,  0.05948388, -0.14752215,
        0.01764345,  0.09537288,  0.13823467, -0.04177822, -0.26862588,
        0.06292998,  0.14077821, -0.10423955,  0.11230046, -0.06548553,
       -0.13917082, -0.14332019,  0.09246644,  0.02655579, -0.06066735,
        0.03160467,  0.13100107,  0.17708387, -0.02543912, -0.0356872 ,
        0.01181225,  0.08201871,  0.06747518, -0.08636874,  0.0508632 ]), array([ 0.07169411,  0.05780987, -0.02492434, -0.12423456,  0.01485857,
       -0.00816209, -0.03387792,  0.18006505, -0.06015778, -0.05238208,
        0.02381993, -0.16873865, -0.00489737, -0.18990184,  0.00299121,
        0.0760183 ,  0.00917068, -0.14740779,  0.17119271, -0.18184267,
       -0.10984116,  0.10293749, -0.22034296,  0.26864458,  0.01972023,
       -0.02004052, -0.05622145, -0.14774466, -0.142707  ,  0.08820002,
        0.06364905,  0.07818374, -0.06558074, -0.04271051,  0.04378769,
        0.07112296, -0.01866415, -0.09286649, -0.06431595, -0.06204166,
        0.19103576, -0.15525899,  0.09188073, -0.055766  ,  0.04563582,
        0.07917552, -0.15393392, -0.09197982, -0.11793969, -0.02802427,
       -0.11729082, -0.03961703, -0.01922903, -0.00394084, -0.17572647,
        0.09034597, -0.03866643, -0.02118584, -0.05516735, -0.16197991,
       -0.00490496, -0.0120109 ,  0.19460929,  0.02274964,  0.12409824,
       -0.08910015,  0.04180989,  0.02636541,  0.12992313, -0.13702916,
        0.05996032, -0.01436039,  0.0209045 ,  0.15385708,  0.0461769 ,
       -0.00096779,  0.04189803,  0.17788354, -0.02082798,  0.02125986,
        0.06286334,  0.01333496, -0.08184527,  0.06609751, -0.20733317,
        0.01864676, -0.0331967 ,  0.03545093, -0.02353982,  0.07292582,
       -0.2150929 , -0.07187375, -0.09262946, -0.06833047,  0.06146807,
        0.13171929, -0.00748431,  0.08232369,  0.07125448,  0.02166948]), array([-0.02253823, -0.04285724, -0.00620594,  0.04546717, -0.01787353,
        0.05181932,  0.02896316,  0.04227163, -0.11760067,  0.07584975,
       -0.01418843,  0.02789897,  0.00193739, -0.03528683,  0.05428461,
        0.12723676, -0.12246789, -0.06143982, -0.07942785, -0.07785796,
       -0.0216923 , -0.05757536,  0.01980936, -0.03702748, -0.05528791,
       -0.11951784, -0.04710246, -0.04791129, -0.04504452, -0.04010217,
        0.00557583,  0.00638807, -0.06203179, -0.07441449,  0.15718525,
       -0.07748374,  0.02287984,  0.29703162, -0.03926861, -0.11549402,
       -0.09198565, -0.21032347,  0.17665421, -0.02840823, -0.13909305,
       -0.03088165,  0.11975588,  0.08525237,  0.12467647, -0.01875482,
        0.08988989,  0.13744086, -0.04914594, -0.03316837, -0.03163144,
        0.01304026,  0.20569372,  0.08168847,  0.11401866, -0.102346  ,
       -0.11725833, -0.02784939,  0.14840111,  0.06768079,  0.03629886,
        0.03778993, -0.14501012,  0.05116294, -0.01018763, -0.32558364,
       -0.00358527, -0.00646055,  0.0835747 , -0.10568051,  0.06796024,
        0.08311841, -0.05103431, -0.08912344, -0.14056016,  0.1214048 ,
       -0.08469892, -0.22137804, -0.09941559, -0.03131694,  0.05078385,
        0.01161151, -0.18348962, -0.09240475, -0.1763514 ,  0.01036791,
        0.00052605,  0.00569585,  0.15639434, -0.12451391, -0.13513307,
       -0.13022536,  0.03966106, -0.01946852,  0.08156339,  0.14475083]), array([ 1.33356934e-02,  1.00031810e-02, -7.20766371e-02, -7.23126479e-02,
       -5.41665639e-02,  7.86286296e-02,  6.22482612e-02, -9.97184761e-02,
       -7.04778219e-02,  8.77126450e-02,  9.41533441e-03,  7.25878760e-02,
        1.54813735e-02, -2.35735081e-01, -3.08132746e-02,  2.72724909e-01,
       -2.09103470e-03,  1.23643964e-02, -1.66980091e-01,  7.59144825e-03,
       -1.30858912e-02, -1.07525682e-02,  6.77425611e-02, -1.09956758e-02,
        3.41161952e-02, -1.93418239e-02,  2.70442865e-02, -3.65541571e-02,
       -1.66660407e-03,  3.27759941e-01,  1.19823013e-01, -4.86758263e-02,
       -4.40581367e-02,  1.53935071e-04,  9.03488063e-02, -6.44319694e-02,
        1.23053384e-01,  4.06676230e-02,  1.23757591e-01,  3.00798551e-02,
        1.52480001e-01,  2.24924096e-02,  1.48468794e-01,  3.20149687e-02,
        1.13967307e-01, -5.39428305e-03, -1.30698159e-01,  7.98969923e-02,
       -1.28627360e-01, -1.54673528e-01,  9.83373955e-03,  1.05415223e-01,
        8.12635851e-02, -7.50072252e-02,  1.89382979e-01, -1.51265542e-01,
        5.79810910e-02, -3.25948751e-02,  7.46152775e-02,  1.59288096e-02,
       -1.09059298e-01,  7.96004438e-02, -1.53147044e-01, -8.22332647e-04,
       -5.75424182e-02, -1.90497546e-01, -1.37431049e-01, -1.72772034e-02,
        1.00926804e-02, -7.97234392e-03, -1.99837457e-01,  1.41802825e-01,
       -1.50026353e-01,  1.21130634e-01,  7.61767930e-02, -1.19603931e-01,
       -7.73696224e-02,  9.11583781e-03, -1.17044495e-01,  1.09329623e-02,
        1.50889964e-01,  1.04375512e-01,  1.28200102e-01, -4.26311632e-02,
        4.16441723e-02,  3.63525661e-02,  1.53164813e-01,  1.64236628e-01,
       -1.22142709e-01, -5.51352051e-02, -9.48032101e-02,  6.19088451e-02,
        1.09486022e-02,  9.35102315e-02, -5.95999804e-02, -3.82780182e-02,
       -3.14721520e-04, -2.97086566e-02,  1.90420162e-02, -6.08619858e-02]), array([-2.42254922e-02, -3.57454090e-02, -3.26033223e-02, -8.56709334e-02,
       -1.70659490e-02,  2.01657486e-02, -7.49084530e-02, -5.58234591e-03,
       -7.40008549e-02,  2.01363279e-01, -1.44441363e-01, -8.27719241e-02,
       -1.13584592e-01, -1.05648395e-01,  1.12391572e-01, -5.14387864e-02,
        8.51248463e-05,  8.82745794e-02,  5.56677936e-02,  1.04147939e-01,
       -4.30970239e-02, -1.05812172e-03,  1.16781030e-01, -1.48946145e-01,
       -9.98414830e-02, -7.04781355e-02, -1.70739300e-01,  3.65455214e-03,
       -1.25259129e-02, -2.99531851e-02, -1.79234386e-01,  1.18264987e-01,
        3.64493908e-02,  1.32780737e-01, -1.26501670e-01,  7.47928268e-02,
       -4.48464667e-02,  5.66345708e-03, -1.69010356e-01, -9.17943581e-02,
       -1.01833621e-01, -1.54727846e-01, -1.84472418e-01, -4.19261060e-03,
       -5.76263678e-02, -1.87223678e-01,  2.97566613e-02,  5.17558778e-02,
       -9.52496429e-02,  1.34092387e-03,  9.50620821e-02, -1.53421685e-01,
        2.12823302e-02, -1.28011272e-02, -5.88820331e-02,  7.44573313e-02,
       -5.10673828e-02, -9.41602195e-03,  1.79084099e-02, -7.56556540e-02,
        2.75228401e-02,  3.52586546e-02, -2.09283859e-01, -1.39452997e-01,
        9.16436222e-02, -2.15139943e-01,  3.34471614e-03,  4.00308551e-02,
        1.13123456e-01, -8.13019037e-02, -3.27944848e-02, -9.01741991e-02,
       -3.08076965e-02,  2.29500429e-01,  6.80383271e-02,  1.35213861e-01,
       -5.63930336e-02, -4.49885558e-02,  1.07013169e-02, -7.11018882e-02,
        1.01692893e-01, -4.12504356e-02,  7.04512461e-02, -1.21431600e-01,
        1.35633444e-02, -7.85830710e-02,  1.24123330e-01,  7.31437266e-02,
        1.18537754e-02, -8.01646428e-03, -4.25040611e-02,  9.28990583e-02,
        1.53821492e-01,  7.85629461e-02,  1.17372275e-01,  3.24260556e-03,
       -9.98129622e-02,  7.83616289e-02,  2.20526105e-01,  2.34083704e-01]), array([-0.05711162, -0.0344418 ,  0.03425696,  0.08361075,  0.00767101,
        0.06473248,  0.04433558, -0.0504296 , -0.04958531,  0.16727908,
       -0.08899748,  0.00989436,  0.12511778, -0.04551499, -0.01243243,
       -0.15555346,  0.05110867, -0.0749817 ,  0.1466583 ,  0.19174417,
        0.05832085, -0.05979639,  0.18148604,  0.02782255,  0.04002604,
       -0.12466701, -0.08074253,  0.0255973 ,  0.06152165, -0.04736303,
        0.03479857, -0.14589298, -0.06441954,  0.07964241,  0.02852755,
        0.07330211, -0.06283459, -0.0633105 ,  0.06969065,  0.13560822,
       -0.00968171, -0.04388395,  0.20595648, -0.14281805,  0.05042372,
        0.1098315 , -0.16704899,  0.19403637, -0.21287649,  0.08876992,
       -0.06023294,  0.15226938,  0.0552165 ,  0.03354494, -0.05315099,
       -0.09444412, -0.00989513, -0.00111691,  0.01011456, -0.02765883,
        0.11012681, -0.12637808, -0.05166676, -0.09323491, -0.05154387,
       -0.09935453, -0.05527008,  0.08572077, -0.0423544 ,  0.01806289,
        0.03961626, -0.12777185, -0.01764901, -0.02762118, -0.05517436,
       -0.14935105, -0.19067117,  0.05920557,  0.09483307,  0.10442992,
        0.00266899, -0.10364484, -0.24973081, -0.0072735 , -0.11383222,
       -0.18078408,  0.07961648, -0.14261994,  0.19739435, -0.08531825,
       -0.12806192,  0.00136256,  0.01292932, -0.12543348, -0.11238505,
       -0.03934643,  0.1203351 ,  0.04443304, -0.1135867 ,  0.11008412]), array([-0.08159175, -0.06689142, -0.02598554,  0.0287561 , -0.04494263,
        0.0017523 ,  0.03377337,  0.07719025,  0.09863436, -0.02634171,
       -0.18924114,  0.00161043,  0.0117374 ,  0.14292803, -0.01843329,
        0.04195257,  0.14033209,  0.03258256,  0.12346704, -0.04752218,
       -0.2056805 , -0.11218622, -0.21865332, -0.06928123, -0.04466623,
       -0.13233974,  0.10274129, -0.02562453,  0.06477256,  0.08644837,
        0.01726087, -0.05860701,  0.11202924,  0.09009563,  0.25867748,
        0.04358753, -0.04765519, -0.08641157,  0.06000715, -0.02886221,
       -0.21512503,  0.15422279, -0.02229167,  0.07244299, -0.01015453,
        0.0354191 , -0.04424729, -0.0400454 , -0.06183753, -0.13986152,
       -0.00521432, -0.03696599,  0.17145665, -0.00309731, -0.05068479,
        0.05556112,  0.19075596, -0.05758398, -0.02023553,  0.04932608,
        0.0421059 , -0.22301365, -0.05099186,  0.02706712, -0.00940841,
        0.1956766 , -0.07392838,  0.26289658,  0.22576211, -0.121128  ,
       -0.08805009, -0.09019558,  0.04870901, -0.04699494,  0.0429943 ,
       -0.05901681,  0.0982363 ,  0.07166487,  0.04811472, -0.05176241,
       -0.01707943,  0.0297748 ,  0.14843062, -0.12688309,  0.07400525,
       -0.13842588,  0.05515968, -0.07781746, -0.07406154, -0.09385401,
       -0.18632093,  0.09970899, -0.00061563,  0.04321722, -0.01187394,
       -0.01976644, -0.10779984,  0.01825868,  0.00292157, -0.07288753]), array([ 5.99161022e-02,  4.76443640e-02, -1.91740318e-02, -7.99067414e-02,
        7.90438861e-03,  6.10809810e-02,  2.22864718e-01, -1.40524169e-01,
       -6.53878380e-02, -1.74194167e-01, -5.30343813e-02,  3.54406737e-02,
       -8.35684051e-02, -1.07762036e-01, -2.87044602e-02,  7.29615391e-02,
        2.70818176e-01, -1.92784387e-01, -5.12742676e-02, -4.47224967e-02,
       -2.55406517e-02, -1.26392170e-01, -2.14075217e-02,  7.83997435e-02,
        1.29674452e-02,  1.90021936e-01,  8.75403485e-02,  9.36725098e-02,
        1.21717730e-01, -1.42006290e-01, -1.05764780e-01, -5.76035671e-03,
       -1.29194398e-02,  6.73300682e-02, -1.37287013e-01,  1.50322092e-01,
       -2.56441538e-02, -3.02692928e-02,  1.38266773e-01,  3.55926587e-02,
       -5.15226661e-02, -1.32611355e-01, -2.28122497e-02, -9.72335011e-02,
        2.64925941e-02,  6.43508540e-02,  1.57748616e-01,  9.75060041e-02,
        1.36629888e-02,  2.78461655e-02, -5.40219271e-02,  1.10837849e-01,
        5.57641842e-02,  4.02769869e-02, -1.05631076e-01,  4.55174464e-03,
       -8.26632840e-03, -1.42142094e-01,  1.45182150e-01, -1.30858397e-01,
       -5.62107913e-02,  1.23372709e-01,  1.40621153e-01,  5.11003931e-02,
       -3.70035378e-02, -9.53356074e-02, -1.52004937e-01, -4.02391331e-06,
        7.75798339e-02,  1.36241086e-01, -1.35065876e-01,  1.03199212e-01,
        8.18112996e-02, -1.20197786e-01,  7.78238161e-02,  1.03996965e-01,
        1.26293662e-01, -1.66026997e-01,  1.56722931e-01, -1.10386276e-01,
        7.49676234e-02, -1.67363277e-01,  2.63200632e-02, -5.61825495e-02,
        4.60328372e-02, -1.56918461e-01, -4.90931127e-02,  6.00176921e-02,
       -6.35973987e-02, -9.83880286e-02, -7.95886194e-02,  6.63412417e-02,
       -3.73778161e-02,  2.23242208e-02,  1.33291477e-01,  9.29184674e-02,
        1.72647195e-02,  6.69298019e-02, -8.32677541e-02,  6.76702408e-02]), array([-0.10699569, -0.1210198 ,  0.05318113,  0.11848717,  0.02812381,
        0.08972756,  0.15567949, -0.05543849,  0.15521442,  0.06668283,
        0.09988069, -0.08047837, -0.09182577, -0.04568857, -0.08214843,
        0.07597136,  0.07255722, -0.03712741, -0.24127744, -0.11590727,
       -0.11819896, -0.01766421, -0.04433372, -0.06155878,  0.00897131,
       -0.04846403, -0.06720421, -0.06813163,  0.13465293, -0.13968897,
       -0.01787048, -0.12156553,  0.01060164, -0.01068863, -0.12022392,
        0.00661153,  0.04445936,  0.03132858, -0.11430744, -0.13317046,
        0.04983895,  0.03258253, -0.03066974, -0.01039618, -0.00809299,
       -0.12558395, -0.0597735 , -0.04114624, -0.03249898, -0.08459707,
       -0.08689948, -0.04850627,  0.01598618, -0.26762556, -0.13964924,
       -0.0645283 , -0.18171843,  0.0677534 , -0.07533662,  0.09801275,
        0.19114403, -0.08461601,  0.03478414,  0.09464389, -0.02494273,
       -0.04918368,  0.04082393,  0.06442405,  0.01106725, -0.10315867,
        0.06036439,  0.12885184, -0.0112823 , -0.09080901,  0.12086469,
       -0.24344629, -0.03032237, -0.15796886,  0.10744384, -0.01233475,
       -0.09233482,  0.1010923 ,  0.0886891 ,  0.14940717, -0.01398828,
       -0.02417531,  0.05166833, -0.01121627,  0.00471315, -0.11850956,
       -0.03476314, -0.10968574, -0.04708005, -0.11127539,  0.0372778 ,
        0.01739257,  0.25133056, -0.0927735 ,  0.23105849,  0.1210058 ]), array([ 0.03497094,  0.04097841, -0.02196177,  0.01946645, -0.01610416,
       -0.14006671, -0.15542371,  0.0456197 , -0.02472313, -0.09574118,
       -0.11281731,  0.1668564 ,  0.0115127 , -0.01204167, -0.04833438,
       -0.05563177, -0.01496994,  0.19887513,  0.16564041,  0.10520487,
       -0.13329601, -0.13015838, -0.03292048,  0.06480138, -0.03091049,
       -0.06117336, -0.0241914 ,  0.03085121, -0.00960164,  0.00247982,
        0.02191088, -0.19852807,  0.16238231, -0.00616324, -0.01293611,
        0.05651381,  0.05369748, -0.04770093, -0.05869326,  0.04351524,
        0.00574955, -0.02824781, -0.0093568 , -0.03662348, -0.03512048,
       -0.09681409,  0.09652187,  0.11661002, -0.09365277,  0.05260163,
       -0.15463183,  0.01771093, -0.30650729, -0.18150669, -0.16915938,
       -0.08295961, -0.04154496, -0.1912266 ,  0.0414183 , -0.06820819,
       -0.0202561 , -0.02990492,  0.12528868,  0.02619858, -0.12440954,
       -0.10480635,  0.03317282, -0.12848393, -0.09206133, -0.00625296,
        0.0820496 ,  0.04840094,  0.21247725,  0.06838698,  0.15033828,
       -0.03620815, -0.06428626, -0.00387545, -0.16186818,  0.10532487,
        0.03442798, -0.02221684,  0.14305783,  0.0811899 ,  0.02968691,
        0.11213074,  0.01463677, -0.009308  , -0.04826951, -0.16613438,
       -0.07319828,  0.13577027,  0.16935741,  0.0443144 ,  0.11013606,
       -0.07418878,  0.05674953, -0.14650075, -0.03589115, -0.21381883]), array([-0.0126476 ,  0.01874579,  0.06298416,  0.02744794,  0.0087451 ,
        0.02533991,  0.01529299,  0.00184176, -0.02943126,  0.0775257 ,
       -0.16355649, -0.04104431,  0.05141773, -0.05181798, -0.08475246,
       -0.16429771,  0.12252697, -0.00170817, -0.0525278 ,  0.08137066,
        0.10475958,  0.213818  , -0.01894292,  0.10099588,  0.08924376,
        0.02538136,  0.0239788 ,  0.07951821,  0.01827892, -0.02726094,
       -0.14063688, -0.02411655, -0.02935752, -0.11651652, -0.09081382,
        0.08412901, -0.07343392, -0.11241592,  0.09714037, -0.20831581,
       -0.01887056,  0.18906511, -0.16352491, -0.0585869 , -0.03943536,
       -0.06341086, -0.10857553,  0.28843025,  0.0830434 , -0.0182099 ,
        0.11170938, -0.00656519, -0.15122046, -0.14285744,  0.15392281,
        0.05517906,  0.20889738,  0.0671818 ,  0.07817058, -0.07056725,
       -0.14010624, -0.00332531, -0.02149047,  0.16540655, -0.01295427,
        0.01670334,  0.10468383,  0.10960113,  0.03055513, -0.11791354,
        0.11147913,  0.12364869, -0.01611505, -0.07268339,  0.12359472,
        0.02510305, -0.04063068,  0.04066707, -0.04638839,  0.02531128,
        0.15252849,  0.14528965, -0.07163234,  0.00845827,  0.16757919,
        0.08100749,  0.06521224, -0.01021533, -0.06161286,  0.12717341,
       -0.18371768, -0.1927636 ,  0.0508141 , -0.13748486,  0.04772967,
        0.11142539, -0.02043739,  0.03097272, -0.12603119, -0.00814969]), array([-0.01451516, -0.05326768,  0.03336476,  0.07711367,  0.02601296,
       -0.0120134 , -0.04520521, -0.07963892,  0.07610284,  0.02821075,
        0.00572125,  0.24904932, -0.05043274, -0.0634764 ,  0.04871075,
       -0.08984146,  0.11247026,  0.08449518,  0.11204989, -0.06426249,
       -0.03668144,  0.05810554, -0.09432709, -0.09195303,  0.30748421,
        0.16976879, -0.07640268,  0.12506266, -0.17695655,  0.18941646,
       -0.11383106,  0.05089268, -0.04938662, -0.04463638,  0.05305719,
       -0.03153801,  0.05819188, -0.07536961,  0.02411384, -0.09007542,
       -0.08121952,  0.05051878, -0.01348945,  0.0164103 , -0.02657334,
       -0.05928928, -0.0508532 , -0.07377276,  0.01624892, -0.03664021,
       -0.04474696,  0.11165419,  0.03113628, -0.08398379,  0.05440736,
       -0.03654311, -0.03952971, -0.06785864, -0.13013376, -0.29522042,
       -0.18140786,  0.03420702, -0.15591581,  0.08367492, -0.0042485 ,
        0.06328236, -0.03787456, -0.0527732 , -0.05736023, -0.1626475 ,
       -0.17695092,  0.00117312,  0.04345147, -0.03320931, -0.02903969,
        0.12774703, -0.07369351, -0.00062181,  0.16810236,  0.0265243 ,
       -0.17639866, -0.17376237,  0.14779122, -0.00278695, -0.23536605,
        0.0223634 ,  0.02776368, -0.07498257,  0.20489824, -0.01206545,
        0.04365649, -0.10473471, -0.04705133, -0.00884069,  0.02587434,
       -0.02838397,  0.15450488, -0.01447883,  0.06557029,  0.02335292]), array([ 0.00064668, -0.026418  , -0.00111061,  0.06367342, -0.0015851 ,
       -0.00708658,  0.08120888, -0.1410276 ,  0.01533473, -0.01171975,
        0.13581014,  0.00082237, -0.00919653,  0.03150805, -0.05562143,
       -0.0942098 , -0.07833023,  0.05931481,  0.05750254, -0.14461727,
        0.20494705, -0.13229306, -0.14714812, -0.21151277,  0.02082096,
       -0.00697958,  0.06281979,  0.12133859, -0.131329  , -0.09951469,
        0.01611096,  0.27099692,  0.07498089, -0.11316882, -0.14387309,
       -0.11838392, -0.17232127, -0.00539501,  0.13426305, -0.04030391,
       -0.04587072, -0.07225469,  0.01979064,  0.06491659,  0.05986623,
        0.02847837, -0.02052185,  0.0215997 , -0.19726492,  0.04055181,
       -0.10246504,  0.15182399,  0.09132841, -0.01816368, -0.06418453,
        0.1595467 ,  0.02653421, -0.01871369,  0.0638218 ,  0.18754804,
        0.05497698,  0.00953406, -0.01472719, -0.0078368 ,  0.02131072,
       -0.1571847 ,  0.14037377, -0.03323828,  0.01901128, -0.01826144,
        0.00513974, -0.0371549 , -0.02211706, -0.04636449,  0.1506631 ,
        0.11923035,  0.03152456,  0.1561002 ,  0.13862846,  0.02763399,
        0.10894692,  0.06167546, -0.00318417, -0.07258622, -0.15426074,
        0.09816072,  0.0567185 ,  0.02414458, -0.22710237, -0.08249143,
       -0.13541599, -0.07311606,  0.15070853, -0.0683018 , -0.1005599 ,
       -0.22185803,  0.03507069, -0.10479384, -0.01006706, -0.0951598 ]), array([-0.00600322, -0.00255379,  0.01457331,  0.0228192 ,  0.02355285,
       -0.12512824, -0.02912849, -0.02112484,  0.02942165, -0.09039089,
        0.02708657, -0.04119025, -0.14647884, -0.01754337, -0.15962748,
       -0.0046514 ,  0.01638915,  0.13883253,  0.0789019 ,  0.03380556,
        0.16142864, -0.1987417 , -0.04141316,  0.02937257,  0.0042612 ,
        0.00084699,  0.06835243, -0.28924268,  0.0623662 ,  0.08840543,
       -0.00802363,  0.00170196,  0.21176045,  0.08959366, -0.00189349,
       -0.07000115, -0.06067728,  0.07857548,  0.1430495 , -0.07377939,
       -0.09413443,  0.09964501, -0.06221247, -0.07628229, -0.17278969,
        0.02342745, -0.03059099, -0.04060728, -0.01849294,  0.01061721,
       -0.0077059 , -0.13570691, -0.01920803, -0.03351227, -0.18053745,
       -0.00793681,  0.02608925,  0.32098496,  0.15435636, -0.13452633,
        0.04320836,  0.07989232, -0.02341285, -0.07004969, -0.13232644,
       -0.01231923, -0.16864354, -0.10996814,  0.00253311, -0.02481942,
        0.00883951,  0.02577221, -0.27478033,  0.00555885, -0.07652972,
        0.04751858, -0.19221917,  0.05405271, -0.07978399, -0.15016985,
        0.02652079, -0.1492215 ,  0.02466927,  0.1464005 , -0.06898298,
       -0.06912953,  0.01565505, -0.0409328 , -0.09123012,  0.06716513,
       -0.05651708, -0.16308208, -0.09142541,  0.11002355,  0.00367972,
        0.0261652 ,  0.10042782,  0.01102792, -0.12538769,  0.0469748 ]), array([ 0.00747733, -0.01119126,  0.08781929,  0.085947  ,  0.06722866,
       -0.02782772, -0.01679433,  0.03137529, -0.19798929, -0.06853446,
        0.10387717, -0.0973198 , -0.05179881, -0.01405506, -0.0436978 ,
       -0.02829996,  0.02198667,  0.05819134, -0.14838245,  0.1121069 ,
       -0.04054967,  0.087323  ,  0.09529128,  0.04482128,  0.13149975,
       -0.1105515 ,  0.11036525, -0.05404375, -0.15737007,  0.02222552,
        0.16362157, -0.08471153, -0.05554275, -0.04807626,  0.07133184,
        0.00682681, -0.05285333, -0.00226714,  0.16135997, -0.07171989,
       -0.08909438, -0.02983169, -0.04784579, -0.07982172, -0.2579495 ,
        0.00126021, -0.06028226, -0.06369646, -0.18911419,  0.06036427,
       -0.1412818 ,  0.0144477 , -0.01688269, -0.10924794, -0.09769284,
        0.05760473,  0.16698431,  0.04491135, -0.13378164,  0.06342113,
        0.12299165,  0.08849258, -0.10166349, -0.17029209, -0.01656743,
        0.13670272, -0.03701831,  0.04864149, -0.10025493,  0.0832651 ,
       -0.17512733,  0.31450164,  0.18020928, -0.00599718, -0.0043751 ,
        0.09985926,  0.13982381, -0.03947864, -0.05196164, -0.06942379,
        0.0729229 ,  0.09392767, -0.0726246 , -0.08317421, -0.13989608,
       -0.09686391, -0.0419322 ,  0.03790297,  0.10678103, -0.01612987,
        0.10206166,  0.04198692,  0.10872091, -0.13757201,  0.13050459,
       -0.00415824, -0.16078933, -0.05432527,  0.0841632 ,  0.06610887]), array([-5.64815482e-02, -3.54039842e-02,  1.41381514e-04, -8.48725085e-03,
        9.70644231e-03,  6.76333557e-02,  8.50786941e-02,  9.16840786e-02,
        6.27201085e-02,  2.60860934e-03, -5.77972382e-02, -5.05183468e-02,
        5.80022129e-02, -7.48528497e-02, -9.95647050e-04,  6.76433886e-02,
       -2.66541344e-01, -1.18704178e-01,  1.62489489e-01,  5.79983412e-04,
        1.02640306e-01,  1.52816238e-01,  9.19779925e-02,  9.53152300e-02,
        1.73034541e-01,  1.03630431e-01,  1.09389494e-01, -5.86904178e-02,
       -5.76583402e-02, -2.62503965e-01,  1.05612898e-01, -4.92035655e-02,
       -3.66617286e-02,  8.15882013e-02,  8.36095675e-02, -3.13900223e-02,
        1.75715220e-02,  1.14680070e-02, -1.63564437e-01,  2.65461798e-02,
       -1.16123705e-02,  6.70117173e-02, -7.87253536e-04,  2.55778047e-02,
        1.17682234e-01, -1.22648605e-01, -7.66881607e-02,  1.67372647e-01,
       -3.77128830e-02, -1.81614938e-01,  4.89950902e-02, -5.61175286e-02,
        1.16867324e-02, -1.97253273e-01, -3.01156783e-02, -6.20913464e-02,
        6.02004385e-02,  2.54134947e-02,  2.01659281e-01, -3.90706570e-02,
        4.18908500e-02,  3.09988131e-03, -1.70674260e-01, -9.15414786e-02,
        1.90555412e-02,  3.86835194e-02, -3.29215853e-02, -3.89081850e-02,
       -2.08831612e-02,  9.66080136e-02,  7.21481797e-02,  7.76305140e-02,
        4.43117887e-02,  4.60223163e-02, -2.96814119e-02,  2.14663229e-01,
        1.74845510e-01,  9.60268907e-02,  1.10707329e-01, -2.56263098e-01,
       -4.40398528e-02, -5.89492865e-02,  1.22499551e-01,  3.16746767e-02,
        1.59313523e-02, -2.16454260e-02, -1.44216666e-01, -6.03192446e-02,
        2.81823867e-03,  3.20930407e-02, -7.56412204e-02,  1.85138221e-01,
       -1.07081737e-02,  1.75496796e-02, -9.07237944e-02, -1.13206210e-01,
        2.13782986e-01, -7.28535727e-03,  3.30440464e-02, -1.23799584e-01]), array([ 0.01500312, -0.01667912, -0.03679542,  0.04343156, -0.04683059,
        0.10367303,  0.03154633,  0.0239981 ,  0.01599634,  0.11372431,
        0.12351053,  0.13949934,  0.08186688,  0.12511718,  0.01612429,
        0.01972361, -0.12629577, -0.09929779, -0.07883877, -0.08121092,
       -0.07822537,  0.08975851, -0.01590478, -0.07552674,  0.03204525,
        0.02496002,  0.14766203, -0.06709197,  0.1184359 , -0.08144728,
        0.10340031,  0.00711845,  0.14376666,  0.12464063, -0.14651543,
        0.14737091,  0.08469161, -0.14689542, -0.13631488, -0.02385089,
        0.0328006 , -0.00930671, -0.01480914, -0.09586153, -0.21721219,
       -0.15561182,  0.04801117, -0.03410001, -0.16019737, -0.03108113,
        0.11061339,  0.04024781,  0.00491077,  0.12520413,  0.08866436,
       -0.2044968 ,  0.00378322,  0.00459936, -0.05629037, -0.0454004 ,
        0.11562585, -0.15829498,  0.12837118,  0.11009865,  0.04781261,
       -0.04330128, -0.04905599,  0.00285026, -0.12405623, -0.0188992 ,
       -0.18348267,  0.04934555, -0.0322087 , -0.05723528, -0.08706063,
        0.26167999, -0.17611835,  0.22756528, -0.04859938, -0.06003227,
       -0.02820399, -0.02026661, -0.06167365, -0.04687912, -0.00939125,
        0.17894298, -0.02420465,  0.02814229, -0.01591746, -0.23014675,
       -0.13979649, -0.10747621,  0.00670853,  0.0307728 ,  0.02972021,
        0.12985213, -0.16121103,  0.0315585 , -0.05952013, -0.00151243]), array([ 0.04464536,  0.04318695, -0.07973034, -0.05075252, -0.07001483,
       -0.01626923,  0.05725284, -0.14235158,  0.03069397,  0.06756382,
       -0.14543667, -0.10949695, -0.13767655,  0.02113238,  0.05229017,
       -0.07178865, -0.07058519, -0.02466032, -0.01102428, -0.09503676,
       -0.01235907,  0.04801044,  0.03469771, -0.1132552 , -0.07678618,
        0.03810594,  0.15675867, -0.20272906,  0.1452049 ,  0.00250847,
       -0.08869147, -0.06487768,  0.0316235 , -0.20429904,  0.05481258,
       -0.06290816,  0.07827348, -0.04488237, -0.04991079, -0.01264814,
        0.0141898 , -0.06396259, -0.0449145 , -0.03488639,  0.00767535,
       -0.05682853, -0.15201311, -0.13640468,  0.01690441, -0.10223871,
       -0.02353381,  0.25052269, -0.21507142,  0.19223729, -0.08009847,
        0.0504713 ,  0.03701558, -0.14735703, -0.04628059,  0.12034185,
       -0.13078818,  0.00271102, -0.03498423,  0.04454086, -0.03394607,
        0.11370089, -0.14609367,  0.04668658, -0.31384172,  0.00455689,
        0.04179192,  0.01551756, -0.08510172,  0.12839442,  0.10594443,
       -0.01451374,  0.12652889,  0.03179984,  0.1010591 , -0.04364588,
        0.06103732,  0.02724019, -0.07900605,  0.15179334, -0.03399635,
       -0.09764828,  0.06165346, -0.17199279,  0.06120564,  0.02015309,
       -0.02828598, -0.07209336,  0.17828559,  0.14135373,  0.10803047,
       -0.08691336,  0.04674764,  0.22527099,  0.0308546 , -0.02462312]), array([ 9.14834962e-03,  3.56342940e-02,  1.85205847e-02,  1.69372022e-02,
        2.16743396e-02,  2.17020578e-02, -2.16032549e-02,  8.94624897e-02,
        4.92895485e-02,  2.23812036e-02,  9.42361659e-03,  1.04400808e-01,
       -4.65536779e-02,  1.50509714e-01, -7.02917940e-03,  5.05549189e-02,
        5.38300968e-02, -1.78482237e-02, -5.42356177e-02,  1.10251514e-01,
        8.92968063e-02,  1.44146059e-01,  1.93231252e-03,  1.21135691e-01,
        1.88559387e-01, -3.87211416e-02, -1.08468186e-02,  2.41048948e-04,
        1.52131999e-01, -2.19580799e-02,  7.35704774e-02,  6.66321887e-02,
        3.73850948e-02,  5.76425182e-02, -1.09939641e-01,  3.63851662e-01,
       -4.14037205e-01, -3.21815935e-02,  7.90987782e-03, -4.37786070e-02,
        1.05970476e-01, -4.52395120e-02, -7.64755776e-02,  1.59608769e-01,
       -9.15880586e-02,  4.09215335e-02, -1.07473882e-01, -5.88295167e-02,
        7.78557870e-02,  5.41528589e-02,  1.05529364e-01,  1.63518536e-01,
        6.94564525e-02, -2.76378075e-02, -1.60079387e-01,  3.94432216e-02,
        4.74573157e-02, -1.06994463e-01,  9.23160024e-03,  1.17314390e-01,
       -1.34360423e-01,  2.06998828e-02,  8.43587926e-02, -4.13453264e-02,
       -5.01036469e-02, -9.64624019e-02, -2.01380199e-01, -9.37871178e-03,
        3.90136828e-02, -1.35242875e-01, -2.52111322e-02,  6.84318113e-03,
       -9.00932347e-02,  1.48446525e-01, -6.26561563e-02, -2.75945960e-02,
        1.12096801e-01, -3.55138402e-02, -1.48125191e-01,  2.75774812e-02,
       -1.77912641e-01,  4.13882032e-02,  7.30108239e-02,  9.54763414e-02,
       -3.37463449e-02,  5.00303417e-02,  1.27860665e-01,  1.81293862e-02,
        2.25364245e-02, -1.17958303e-02,  1.13587582e-01,  8.54972028e-02,
        1.58754334e-02,  3.11403403e-02, -1.71131136e-01, -1.38385688e-01,
        5.07153674e-02,  9.55189847e-03,  2.92057447e-02, -2.40471591e-02]), array([-0.06762236, -0.09588161,  0.06458709,  0.0245286 ,  0.03309078,
        0.03780043,  0.0440634 , -0.0443157 ,  0.21993295,  0.01381938,
        0.10555108, -0.02118268,  0.03883872,  0.03230541,  0.03787809,
       -0.03118294,  0.09040191, -0.0962536 ,  0.03804574,  0.08298502,
       -0.00302649, -0.03179103,  0.0427249 , -0.00288391,  0.08287809,
       -0.11440542, -0.14122438,  0.17493686, -0.2337991 ,  0.09222392,
        0.05807899,  0.04746097, -0.13316745,  0.11491444, -0.06999609,
        0.01977577, -0.07579216,  0.10106919, -0.18804948,  0.03458046,
        0.02589646, -0.00030885,  0.11951435, -0.21189935, -0.00725406,
       -0.05241204,  0.02263115, -0.03168693,  0.08385343,  0.01404075,
       -0.0328911 , -0.03284175, -0.01935192, -0.06316899,  0.00327135,
        0.12138721,  0.06881822, -0.07865445,  0.19249779,  0.00149997,
        0.12078095, -0.13262939,  0.15145565,  0.04008076, -0.21435437,
        0.16362995,  0.0551222 , -0.12573198, -0.06403009, -0.08568542,
       -0.16481192,  0.066153  , -0.12396289,  0.16296667, -0.11680841,
       -0.07488656,  0.07231956, -0.06016155,  0.05596771, -0.03126423,
        0.15593826,  0.07800705,  0.05974892,  0.04351048,  0.03754705,
       -0.09851794, -0.12089139,  0.01510758, -0.02587617,  0.0127379 ,
       -0.05440084, -0.18929523,  0.20629381,  0.26628287,  0.02676313,
        0.01296583, -0.07834237,  0.13092166, -0.06194171, -0.06541441]), array([-0.01285189, -0.02816191, -0.01650637,  0.06662781, -0.02007292,
       -0.07809419, -0.17000238,  0.09332914, -0.03427402,  0.06476558,
        0.07005339,  0.02056528, -0.06788768,  0.25848737, -0.01754198,
        0.00970995, -0.05021726, -0.12474074, -0.07353826, -0.05715508,
        0.04425601,  0.18311052, -0.01637287, -0.14647742, -0.04259053,
        0.1403862 , -0.05745547,  0.07948513, -0.07093628, -0.09253718,
        0.07005795, -0.0718574 ,  0.07560128, -0.00308237, -0.03724986,
       -0.00204027,  0.25345896,  0.08175748,  0.16901369, -0.22585522,
        0.15784548,  0.0338681 , -0.01563645, -0.22454983,  0.11161638,
        0.05366557, -0.03274567, -0.09609823,  0.03239239,  0.14368902,
       -0.03767875,  0.09879647,  0.15796331,  0.10353659, -0.09574096,
        0.03127808, -0.07070677, -0.06968664,  0.024912  , -0.21291866,
        0.0444333 , -0.01596356, -0.00770597, -0.16929298, -0.30181052,
        0.01987271, -0.00462561,  0.05220284,  0.01977258, -0.0262352 ,
        0.03166261, -0.01046335, -0.00475608,  0.09009211,  0.03327756,
        0.0457666 , -0.05979835,  0.0200963 , -0.00920571,  0.01313305,
        0.03633444,  0.06195922,  0.16561774,  0.04353898,  0.15078428,
       -0.07993969,  0.10639686, -0.04642275, -0.09056287,  0.10884083,
       -0.10502716,  0.20854445,  0.01837   , -0.18164185, -0.02916403,
        0.00486481,  0.01193521,  0.05409105, -0.0291914 ,  0.04108047]), array([ 0.06998329,  0.07931719,  0.03205092, -0.05838789,  0.03403696,
       -0.05446407, -0.01651321,  0.00795355,  0.1007265 , -0.13770502,
        0.0237807 ,  0.01253602, -0.0860807 ,  0.09131839, -0.23093367,
        0.0196715 ,  0.01051612, -0.09734999, -0.1047321 , -0.00931359,
        0.01335352,  0.0600758 ,  0.08458608, -0.06825184,  0.01811035,
       -0.04732984,  0.12523242,  0.10269004,  0.03355282,  0.09616063,
        0.09788027, -0.12121218, -0.15192776,  0.08602042,  0.05357312,
       -0.07167044,  0.16369905,  0.00432444, -0.12255466,  0.00490842,
        0.0664207 , -0.19643631, -0.25947284, -0.09911081, -0.10514238,
       -0.01189404, -0.14593688,  0.02548465,  0.10480594,  0.04629715,
        0.08543745, -0.024126  , -0.01898637, -0.04610994, -0.01075385,
        0.03088766, -0.01187775, -0.01962133, -0.01385135,  0.02923508,
       -0.13847192, -0.15496183,  0.04886514,  0.01280233,  0.21054878,
        0.04518719,  0.1261482 ,  0.07834156,  0.21140646,  0.04371703,
        0.01859272, -0.04692898, -0.02320535, -0.05700924, -0.0793059 ,
        0.02459706, -0.06258018,  0.14294742,  0.01565357,  0.03436889,
        0.16287707, -0.21962218, -0.01373141,  0.07735008, -0.09511158,
       -0.16556961,  0.17216086,  0.19892907,  0.01383302, -0.03420639,
        0.05865777, -0.00522962,  0.11563959,  0.03896569,  0.0299524 ,
       -0.24740699,  0.12174446, -0.15129378, -0.12312649,  0.00855881]), array([-0.00787799, -0.02881098,  0.04966231,  0.06774579,  0.05312995,
        0.13116957,  0.17821065,  0.04524827,  0.11740379, -0.11677893,
        0.0518925 ,  0.10082848, -0.07194834, -0.23770185,  0.09308203,
        0.03409581, -0.09125559,  0.08606652,  0.02682987, -0.11228684,
        0.12487625,  0.1292829 , -0.04268587, -0.15734958, -0.03582893,
       -0.15613734, -0.04987744, -0.18705707,  0.00361467, -0.14805935,
       -0.09976875, -0.02978985,  0.07278475,  0.10112148,  0.12789049,
        0.12948994, -0.0273826 , -0.09687008,  0.02020654, -0.02960046,
       -0.04575912,  0.00534001,  0.06234444,  0.08969074,  0.08048196,
       -0.05936218,  0.07817211, -0.09939044, -0.07128477,  0.04578251,
        0.20051012, -0.02795099, -0.05119426, -0.07710313,  0.04113115,
        0.10351884,  0.00999083, -0.09640059, -0.10730924,  0.04477744,
       -0.00510997,  0.05784849,  0.05859715,  0.13572431, -0.22291312,
        0.03762281,  0.142117  ,  0.1126252 , -0.14812519,  0.08766396,
       -0.04648668,  0.01627611,  0.01739979,  0.06248726, -0.17204331,
        0.02049586, -0.0714925 , -0.07591304, -0.09511421,  0.21552545,
        0.14097315, -0.15226101,  0.02913638, -0.01890618, -0.10545294,
       -0.16218685,  0.05539034,  0.14719877, -0.02110876,  0.20972592,
       -0.07083083,  0.12128392, -0.06638137, -0.09242856,  0.05211819,
       -0.01146908, -0.00616825, -0.03278959, -0.14433311, -0.01466501]), array([-0.09177937, -0.02703357,  0.0497877 ,  0.00776978,  0.02528177,
       -0.00436183,  0.01830868,  0.03335562,  0.09685113, -0.07627717,
       -0.0446738 ,  0.03492226, -0.00049405, -0.00478997,  0.2196896 ,
       -0.12753534,  0.18330552, -0.15542042,  0.09556551, -0.06597348,
       -0.21884452, -0.00968282,  0.16504165, -0.24941921,  0.01436957,
       -0.05257733,  0.09639001, -0.0571471 ,  0.06593379,  0.01530421,
        0.23428666, -0.09656796, -0.0894676 , -0.14178022,  0.04410829,
        0.18797734, -0.00547139,  0.20116048,  0.1333576 ,  0.10523249,
        0.05121365, -0.01708908, -0.00029834,  0.07073654, -0.10371018,
       -0.032062  ,  0.03643486, -0.15626271, -0.07221487,  0.11950854,
        0.00546721, -0.0346511 , -0.00881948, -0.19090876,  0.02337536,
        0.07320879, -0.07197283, -0.003332  ,  0.13332364,  0.06338132,
       -0.04889722,  0.0109769 , -0.09546493, -0.05154109,  0.15577287,
        0.01114669, -0.05270179, -0.21408604,  0.02054678, -0.04293808,
        0.13007551, -0.0389554 , -0.08165136, -0.04780457,  0.08177408,
        0.1817228 , -0.12451744,  0.00487979,  0.04417622,  0.05416829,
        0.05308774,  0.01485835, -0.04584393, -0.07769325,  0.06911933,
        0.03231617,  0.08707503,  0.05780366, -0.03728358,  0.15195422,
       -0.03739312, -0.03085016, -0.04013809, -0.07085404, -0.00818413,
        0.1834851 ,  0.08800115,  0.10853422,  0.04623067, -0.21462487]), array([-2.93520396e-02, -3.37186871e-02, -1.25656847e-02, -6.31338376e-02,
       -9.35061563e-03, -3.46548638e-02, -1.91840296e-02, -1.43971694e-01,
       -1.31698398e-03,  2.58568421e-02,  5.19156759e-02,  3.19332219e-01,
       -1.46175146e-02,  7.79045487e-02,  8.22994532e-02,  9.49765693e-02,
       -7.45788475e-03, -1.29119957e-01, -2.74438573e-03,  1.12521839e-01,
       -1.04461387e-01,  1.32103359e-01,  6.74094819e-02,  8.33469465e-02,
       -4.38502600e-02, -1.84979857e-01,  4.97582897e-02, -2.15526237e-02,
       -6.22911770e-03, -1.44120221e-01, -1.64507977e-01,  1.59171698e-02,
        1.28852945e-01, -1.72159942e-02, -2.50844684e-02, -1.25068808e-01,
       -1.12233855e-02,  1.22675387e-04,  3.74147012e-02,  5.88956512e-02,
        1.75198174e-01, -6.23544744e-02, -1.35950773e-01,  9.47925863e-02,
       -4.22203847e-03,  1.25562990e-01, -2.04021345e-01, -3.34173924e-02,
       -3.20134904e-03,  2.18716394e-02, -1.46964601e-01, -1.87149553e-01,
        1.09341386e-01,  4.70505242e-02, -3.55707341e-02,  5.79334316e-02,
        6.54012594e-02,  1.26031068e-01, -1.22553174e-01, -4.15662734e-02,
       -1.02074966e-01,  7.91557835e-02, -1.46684168e-02,  4.16568944e-02,
       -6.03096314e-02, -1.05250926e-01,  1.13451386e-01,  1.48480815e-01,
        7.46336680e-03, -7.24346015e-02, -2.57240255e-02,  4.63793054e-02,
        9.91259416e-03, -4.63166613e-02,  4.35811159e-02,  1.53684584e-01,
       -1.28458367e-01, -1.63242039e-01, -7.26462729e-03,  4.19671295e-02,
        1.42693089e-01,  5.42922423e-02, -7.61383766e-02,  4.94361282e-03,
        1.84891525e-03, -1.71158308e-01, -2.51398596e-01, -1.14835976e-01,
        2.11121020e-02, -6.51675594e-02, -2.86388550e-02, -1.80312225e-02,
        4.19377723e-03,  1.92160830e-01, -1.11633576e-01,  3.76832900e-02,
        7.31234515e-02, -2.23369554e-02,  9.75467010e-02, -2.45148310e-01]), array([-0.00055126,  0.01541196,  0.07518959, -0.03571196,  0.05881927,
        0.01440795,  0.07141434, -0.15407876,  0.05930522,  0.12863639,
       -0.16810244, -0.06524986,  0.10142893,  0.20741734, -0.13900849,
       -0.01165373,  0.01514658,  0.13901151, -0.01964446, -0.18558316,
       -0.09951574, -0.08902064,  0.16676412,  0.04988969,  0.04715817,
        0.10310778, -0.08445602, -0.27780217, -0.10391363,  0.02040901,
       -0.14513217,  0.10314759,  0.04339739,  0.01080766,  0.03721187,
       -0.03137375, -0.0725855 ,  0.0930175 ,  0.02078892,  0.13207501,
        0.25786129,  0.00906324,  0.03313564, -0.04375472, -0.06664592,
       -0.01619163, -0.02611549,  0.00384417,  0.16180218, -0.03502889,
        0.04408209,  0.08916523,  0.02853273, -0.10865139, -0.08639431,
       -0.08275224,  0.08911476, -0.16920747, -0.06827741, -0.02434591,
        0.11677381,  0.07503118,  0.07468816, -0.05321383, -0.0259919 ,
       -0.01724291, -0.04376631,  0.0904093 ,  0.04583009,  0.04157708,
       -0.03630458, -0.11219458,  0.24056863, -0.07532814, -0.13162419,
        0.06777444, -0.16814427, -0.05285147,  0.06900889, -0.16433897,
       -0.0164437 ,  0.12257398, -0.04362495, -0.09907271, -0.03383376,
        0.06311747,  0.05118898,  0.18268075,  0.02380574,  0.24320908,
       -0.09356404, -0.02482676,  0.11219724,  0.02533855, -0.00654646,
        0.00442097,  0.00372105, -0.12741743, -0.0131766 , -0.05886267])])
        whiten = False
        explained_variance = np.array([3.6597023896396355, 2.329763088375653, 2.1387745903428166, 2.074916443068115, 2.058239778660008, 2.0137888359889478, 1.9293493702069315, 1.9136056070574348, 1.8640083586067275, 1.8053153589385802, 1.7905365355949634, 1.7562475018593708, 1.7395442209436762, 1.7086048118860193, 1.6773628281810933, 1.6068243906283972, 1.5916282099846635, 1.5792853488591518, 1.5279907430216242, 1.497523961633521, 1.4650551706526256, 1.44411613247924, 1.4296063530358656, 1.4071730578322486, 1.3760696584609442, 1.3615818960893933, 1.3426478381586189, 1.3151087615716543, 1.2962790487459033, 1.2879022577284298, 1.2607259206902184, 1.2386229281465708])
        X = X - mean

    X_transformed = np.dot(X, components.T)
    if whiten:
        X_transformed /= np.sqrt(explained_variance)
    return X_transformed

# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="binaryClass"


    if (testfile):
        target=''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless==False):
                header=next(reader, None)
                try:
                    if (target!=''): 
                        hc=header.index(target)
                    else:
                        hc=len(header)-1
                        target=header[hc]
                except:
                    raise NameError("Target '"+target+"' not found! Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=header.index(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute '"+ignorecolumns[i]+"' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '"+ignorecolumns[i]+"' not found in header. Header must be same as in file passed to btc.")
                for i in range(0,len(header)):      
                    if (i==hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i]+",", end = '', file=outputfile)
                print(header[hc],file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"'+row[name]+'"'+",",end = '', file=outputfile)
                        else:
                            print (row[name]+",",end = '', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target!=""): 
                        hc=int(target)
                    else:
                        hc=-1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=int(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute "+str(col)+" is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc==-1):
                        hc=len(row)-1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0,len(row)):
                        if (i in il):
                            continue
                        if (i==hc):
                            continue
                        if (',' in row[i]):
                            print ('"'+row[i]+'"'+",",end = '', file=outputfile)
                        else:
                            print(row[i]+",",end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'P': 0, 'N': 1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def classify(row):
    #inits
    x=row
    o=[0]*num_output_logits


    #Nueron Equations
    h_0 = max((((-3.8392699 * float(x[0]))+ (5.47422 * float(x[1]))+ (-8.169706 * float(x[2]))+ (-9.01825 * float(x[3]))+ (-3.0026064 * float(x[4]))+ (4.708443 * float(x[5]))+ (-8.397032 * float(x[6]))+ (-5.0259447 * float(x[7]))+ (4.7375956 * float(x[8]))+ (-7.962242 * float(x[9]))+ (-1.439622 * float(x[10]))+ (-0.42159626 * float(x[11]))+ (2.921931 * float(x[12]))+ (2.0633218 * float(x[13]))+ (7.9304667 * float(x[14]))+ (-2.1866608 * float(x[15]))+ (4.5096364 * float(x[16]))+ (-0.76198816 * float(x[17]))+ (-6.544072 * float(x[18]))+ (5.572116 * float(x[19]))+ (6.8909 * float(x[20]))+ (-1.6385647 * float(x[21]))+ (5.842375 * float(x[22]))+ (7.406946 * float(x[23]))+ (0.056761876 * float(x[24]))+ (3.0855668 * float(x[25]))+ (3.0749955 * float(x[26]))+ (-4.9315405 * float(x[27]))+ (-2.161801 * float(x[28]))+ (1.7422378 * float(x[29]))+ (3.0749714 * float(x[30]))+ (3.6904633 * float(x[31]))) + 0.92384064), 0)
    h_1 = max((((-6.74677 * float(x[0]))+ (-3.9108288 * float(x[1]))+ (4.376139 * float(x[2]))+ (4.1767106 * float(x[3]))+ (0.46696946 * float(x[4]))+ (-4.173306 * float(x[5]))+ (2.7991524 * float(x[6]))+ (-3.814358 * float(x[7]))+ (1.4003801 * float(x[8]))+ (-1.5629708 * float(x[9]))+ (0.2083234 * float(x[10]))+ (1.9061683 * float(x[11]))+ (2.0660715 * float(x[12]))+ (-5.3604827 * float(x[13]))+ (4.293773 * float(x[14]))+ (-1.2040126 * float(x[15]))+ (4.2423763 * float(x[16]))+ (4.0869446 * float(x[17]))+ (-0.619881 * float(x[18]))+ (0.23154712 * float(x[19]))+ (3.1972096 * float(x[20]))+ (0.43673402 * float(x[21]))+ (-3.2976854 * float(x[22]))+ (-0.15652542 * float(x[23]))+ (5.4492803 * float(x[24]))+ (-3.1102455 * float(x[25]))+ (-2.7852743 * float(x[26]))+ (2.273933 * float(x[27]))+ (8.989383 * float(x[28]))+ (1.0604693 * float(x[29]))+ (-1.6541462 * float(x[30]))+ (-3.292498 * float(x[31]))) + 1.6138953), 0)
    h_2 = max((((1.1316149 * float(x[0]))+ (-2.4613519 * float(x[1]))+ (-0.998806 * float(x[2]))+ (0.2490476 * float(x[3]))+ (-2.1162682 * float(x[4]))+ (-1.345272 * float(x[5]))+ (0.5427048 * float(x[6]))+ (3.326091 * float(x[7]))+ (-0.0022732902 * float(x[8]))+ (2.640864 * float(x[9]))+ (2.4413996 * float(x[10]))+ (2.6251395 * float(x[11]))+ (6.2352943 * float(x[12]))+ (-0.5726262 * float(x[13]))+ (-0.17663303 * float(x[14]))+ (1.4662178 * float(x[15]))+ (-0.4630323 * float(x[16]))+ (-1.6199101 * float(x[17]))+ (0.545112 * float(x[18]))+ (-0.5134472 * float(x[19]))+ (-3.1150346 * float(x[20]))+ (0.18134876 * float(x[21]))+ (-4.689382 * float(x[22]))+ (-4.1734004 * float(x[23]))+ (2.6226134 * float(x[24]))+ (0.6540975 * float(x[25]))+ (-1.8342688 * float(x[26]))+ (4.479362 * float(x[27]))+ (3.5479915 * float(x[28]))+ (-0.49158177 * float(x[29]))+ (3.584625 * float(x[30]))+ (-3.642796 * float(x[31]))) + -11.652327), 0)
    h_3 = max((((-2.2078202 * float(x[0]))+ (-2.9174113 * float(x[1]))+ (0.7795491 * float(x[2]))+ (2.5244062 * float(x[3]))+ (-1.2936298 * float(x[4]))+ (-3.0205412 * float(x[5]))+ (1.1691754 * float(x[6]))+ (1.013992 * float(x[7]))+ (0.58126116 * float(x[8]))+ (0.6425554 * float(x[9]))+ (0.6914753 * float(x[10]))+ (1.981758 * float(x[11]))+ (2.8882055 * float(x[12]))+ (-1.9902792 * float(x[13]))+ (1.177423 * float(x[14]))+ (0.24264693 * float(x[15]))+ (1.9114479 * float(x[16]))+ (-0.74704367 * float(x[17]))+ (-0.48193255 * float(x[18]))+ (-0.16312848 * float(x[19]))+ (0.5355519 * float(x[20]))+ (-0.7923109 * float(x[21]))+ (-2.8924344 * float(x[22]))+ (-1.2501463 * float(x[23]))+ (1.6823635 * float(x[24]))+ (0.23160934 * float(x[25]))+ (-1.3926071 * float(x[26]))+ (3.04169 * float(x[27]))+ (4.9404483 * float(x[28]))+ (0.6713974 * float(x[29]))+ (0.95321584 * float(x[30]))+ (-1.863219 * float(x[31]))) + -2.2250502), 0)
    h_4 = max((((-0.96024597 * float(x[0]))+ (0.76421076 * float(x[1]))+ (-1.6195316 * float(x[2]))+ (-1.5861702 * float(x[3]))+ (0.3828281 * float(x[4]))+ (0.30878848 * float(x[5]))+ (-1.9597604 * float(x[6]))+ (-1.8276659 * float(x[7]))+ (1.3615286 * float(x[8]))+ (-1.6784849 * float(x[9]))+ (0.46208698 * float(x[10]))+ (-0.8901164 * float(x[11]))+ (0.28582624 * float(x[12]))+ (0.47572556 * float(x[13]))+ (2.539151 * float(x[14]))+ (0.06689971 * float(x[15]))+ (1.232553 * float(x[16]))+ (1.2805449 * float(x[17]))+ (-1.5326896 * float(x[18]))+ (1.0992296 * float(x[19]))+ (1.339806 * float(x[20]))+ (0.10942984 * float(x[21]))+ (0.7603439 * float(x[22]))+ (1.7146645 * float(x[23]))+ (1.340752 * float(x[24]))+ (-0.073121674 * float(x[25]))+ (0.041666906 * float(x[26]))+ (-1.9704622 * float(x[27]))+ (-1.330149 * float(x[28]))+ (-0.44204223 * float(x[29]))+ (0.9458529 * float(x[30]))+ (0.042729672 * float(x[31]))) + -0.64184284), 0)
    o[0] = (1.0865726 * h_0)+ (1.9560524 * h_1)+ (4.043725 * h_2)+ (-6.148713 * h_3)+ (-4.2573647 * h_4) + -2.7395048

    

    #Output Decision Rule
    if num_output_logits==1:
        return o[0]>=0
    else:
        return argmax(o)


def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        writer = csv.writer(sys.stdout, lineterminator=os.linesep)
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            writer.writerow(','.join(next(reader, None) + ["Prediction"]))
        
        
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(classify(arr[i])), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            writer.writerow(row)


def Validate(arr):
    if n_classes == 2:
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        outputs=[]
        for i, row in enumerate(arr):
            outputs.append(int(classify(arr[i, :-1].tolist())))
        outputs=np.array(outputs)
        correct_count = int(np.sum(outputs.reshape(-1) == arr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, arr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, arr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, arr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, arr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(arr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(arr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0
    else:
        numeachclass = {}
        count, correct_count = 0, 0
        preds = []
        for i, row in enumerate(arr):
            pred = int(classify(arr[i].tolist()))
            preds.append(pred)
            if pred == int(float(arr[i, -1])):
                correct_count += 1
                if int(float(arr[i, -1])) in numeachclass.keys():
                    numeachclass[int(float(arr[i, -1]))] += 1
                else:
                    numeachclass[int(float(arr[i, -1]))] = 0
            count += 1
        return count, correct_count, numeachclass, preds
    


# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()


    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempdir + os.sep + "clean.csv"
        preprocessedfile = tempdir + os.sep + "prep.csv"
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x,y: x
        classmapping = {}


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')


    #Normalize
    cleanarr = Normalize(cleanarr)


    #Transform
    if transform_true:
        if args.validate:
            trans = transform(cleanarr[:, :-1])
            cleanarr = np.concatenate((trans, cleanarr[:, -1].reshape(-1, 1)), axis = 1)
        else:
            cleanarr = transform(cleanarr)


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile, get_key, classmapping)


    #Validate
    else: 
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanarr)
        else:
            count, correct_count, numeachclass, preds = Validate(cleanarr)
            #Correct Labels
            true_labels = cleanarr[:, -1]


        #Report Metrics
        model_cap=171
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")





            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                    try:
                        np.array
                    except:
                        import numpy as np
                except:
                    raise ValueError("Scipy and Numpy Required for Multiclass Metrics")
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)

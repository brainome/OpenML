#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f NN -target Class -cm {'1':0,'2':1} dbworld-subjects-stemmed.csv -o dbworld-subjects-stemmed_NN.py -nsamples 0 --yes -nsamples 0 -e 20
# Total compiler execution time: 0:21:10.94. Finished on: Sep-03-2020 16:13:55.
# This source code requires Python 3.
#
"""
Classifier Type:                     Neural Network
System Type:                         Binary classifier
Best-guess accuracy:                 54.68%
Overall Model accuracy:              98.43% (63/64 correct)
Overall Improvement over best guess: 43.75% (of possible 45.32%)
Model capacity (MEC):                39 bits
Generalization ratio:                1.61 bits/bit
Model efficiency:                    1.12%/parameter
System behavior
True Negatives:                      53.12% (34/64)
True Positives:                      45.31% (29/64)
False Negatives:                     0.00% (0/64)
False Positives:                     1.56% (1/64)
True Pos. Rate/Sensitivity/Recall:   1.00
True Neg. Rate/Specificity:          0.97
Precision:                           0.97
F-1 Measure:                         0.98
False Negative Rate/Miss Rate:       0.00
Critical Success Index:              0.97
Confusion Matrix:
 [53.12% 1.56%]
 [0.00% 45.31%]
Overfitting:                         Yes
Warning: The prediction model overfits the training data.
Note: Unable to split dataset. The predictor was trained and evaluated on the same data.
Note: Labels have been remapped to '1'=0, '2'=1.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "dbworld-subjects-stemmed.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 229
n_classes = 2

mappings = []
list_of_cols_to_normalize = []

transform_true = True

def column_norm(column,mappings):
    listy = []
    for i,val in enumerate(column.reshape(-1)):
        if not (val in mappings):
            mappings[val] = int(max(mappings.values())) + 1
        listy.append(mappings[val])
    return np.array(listy)

def Normalize(data_arr):
    if list_of_cols_to_normalize:
        for i,mapping in zip(list_of_cols_to_normalize, mappings):
            if i >= data_arr.shape[1]:
                break
            col = data_arr[:, i]
            normcol = column_norm(col,mapping)
            data_arr[:, i] = normcol
        return data_arr
    else:
        return data_arr

def transform(X):
    mean = None
    components = None
    whiten = None
    explained_variance = None
    if (transform_true):
        mean = np.array([0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.046875, 0.015625, 0.03125, 0.03125, 0.015625, 0.046875, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.1875, 0.015625, 0.015625, 0.015625, 0.25, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.03125, 0.015625, 0.0625, 0.015625, 0.0625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.109375, 0.015625, 0.015625, 0.046875, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.078125, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.046875, 0.03125, 0.015625, 0.015625, 0.015625, 0.09375, 0.015625, 0.0625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.046875, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.09375, 0.015625, 0.015625, 0.0625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.09375, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.09375, 0.015625, 0.046875, 0.015625, 0.078125, 0.265625, 0.046875, 0.046875, 0.03125, 0.015625, 0.015625, 0.015625, 0.03125, 0.03125, 0.015625, 0.015625, 0.0625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.109375, 0.015625, 0.015625, 0.046875, 0.015625, 0.03125, 0.046875, 0.015625, 0.015625, 0.046875, 0.03125, 0.015625, 0.015625, 0.015625, 0.0625, 0.03125, 0.015625, 0.0625, 0.015625, 0.015625, 0.046875, 0.03125, 0.015625, 0.078125, 0.015625, 0.046875, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.03125, 0.015625, 0.015625, 0.109375, 0.015625, 0.046875, 0.03125, 0.015625, 0.015625, 0.078125, 0.015625, 0.015625, 0.0625, 0.015625])
        components = np.array([array([ 4.95227848e-02,  1.13234551e-01, -4.32377418e-03,  2.09210342e-02,
        2.51822711e-02,  4.37895493e-02, -6.78202906e-03,  1.07428092e-02,
       -1.01110990e-02, -1.02802319e-02, -2.97785076e-03,  1.20302472e-01,
        4.95227848e-02,  8.99649449e-04,  7.76369845e-02,  4.13292697e-02,
       -2.72187623e-03, -1.08033646e-02, -1.79854342e-03,  4.95227848e-02,
        3.95504399e-02, -2.55668155e-02, -2.60795846e-02, -3.20318130e-02,
       -3.63616374e-03,  2.09210342e-02, -3.73102513e-03,  3.44687563e-02,
       -3.62152568e-03, -7.28807818e-03, -2.42574035e-02, -3.97108593e-02,
       -3.73102513e-03, -6.35289199e-03, -2.97785076e-03,  5.82995339e-01,
       -2.83956493e-02, -2.49270178e-02, -3.31327077e-02, -3.17747215e-02,
        3.42398622e-02,  1.13234551e-01,  4.55029421e-02,  5.28543632e-02,
       -3.62152568e-03,  2.06546885e-01, -1.66832609e-03,  4.95227848e-02,
       -2.49270178e-02, -3.73102513e-03, -6.78202906e-03,  3.44687563e-02,
       -4.37185918e-02, -2.48897370e-02, -1.28456519e-02,  2.18079569e-02,
       -1.66832609e-03, -3.63616374e-03, -2.02160742e-04, -1.66832609e-03,
       -1.05004829e-02, -2.91910467e-03,  5.78808639e-02,  3.42398622e-02,
       -3.21530249e-02, -5.62701363e-02, -3.17747215e-02, -1.01110990e-02,
        9.72775566e-04, -3.62152568e-03,  1.13234551e-01,  9.72775566e-04,
        1.07428092e-02, -4.32377418e-03, -3.62152568e-03, -4.52593492e-03,
       -3.21530249e-02, -1.57577077e-03, -1.79854342e-03,  2.34121076e-02,
       -2.00407363e-02, -1.14431035e-01, -2.97785076e-03, -3.09242832e-02,
       -2.90452177e-02, -3.51528640e-03,  2.41287632e-02, -2.97785076e-03,
       -1.28456519e-02, -1.28456519e-02, -1.05004829e-02,  3.27172788e-02,
        2.51822711e-02, -3.51528640e-03, -1.30176827e-02,  2.09210342e-02,
       -1.57577077e-03, -4.47898244e-03, -3.73102513e-03,  2.09210342e-02,
       -2.83956493e-02, -3.62152568e-03,  4.55029421e-02, -1.30176827e-02,
       -4.32377418e-03,  4.19137803e-03, -5.65345202e-02,  4.37895493e-02,
       -1.79854342e-03, -3.21530249e-02,  2.25127217e-01, -1.66832609e-03,
        7.77638944e-02, -6.78202906e-03, -3.09242832e-02, -2.49270178e-02,
        3.27172788e-02, -1.34195875e-02,  1.19549491e-01, -6.78202906e-03,
        1.13234551e-01, -2.90504179e-03, -2.63506786e-02, -3.62152568e-03,
        7.76369845e-02, -1.02802319e-02, -1.02802319e-02, -2.90452177e-02,
       -2.00407363e-02, -1.79854342e-03,  9.41740462e-02, -1.79854342e-03,
       -2.60795846e-02, -1.69221667e-02,  4.37895493e-02, -2.82531443e-03,
        1.07428092e-02, -2.49270178e-02,  7.76369845e-02,  2.01169128e-02,
       -1.79854342e-03,  1.24552134e-01, -4.72651679e-03,  3.44687563e-02,
       -1.57577077e-03, -1.48123256e-02,  4.13292697e-02, -1.05004829e-02,
       -1.01110990e-02,  2.51822711e-02, -2.97785076e-03, -5.44451614e-03,
       -1.72792648e-02, -1.05004829e-02, -2.97785076e-03, -6.35289199e-03,
       -3.21530249e-02, -4.28497109e-03, -2.02160742e-04, -2.36517421e-02,
       -7.28807818e-03, -1.72115768e-02,  1.07428092e-02, -6.04108571e-02,
       -4.49566214e-01, -8.84231612e-02, -5.70489919e-02, -1.40157693e-02,
       -1.02802319e-02, -2.91910467e-03, -2.97785076e-03,  7.76369845e-02,
       -3.20318130e-02, -2.00407363e-02, -1.72792648e-02, -7.67680141e-03,
        4.13292697e-02, -2.72249187e-02, -2.90504179e-03, -1.01110990e-02,
       -2.90504179e-03, -1.43265097e-01, -2.48897370e-02, -3.51528640e-03,
       -6.20049436e-02, -2.72249187e-02,  6.02655939e-02, -1.96760241e-02,
       -1.02802319e-02, -2.90452177e-02, -3.35880336e-02,  7.76369845e-02,
       -1.01110990e-02,  1.07428092e-02, -3.09242832e-02, -2.53291256e-03,
        1.13234551e-01, -5.44451614e-03,  1.17422184e-01, -2.81388709e-02,
       -1.39771716e-02, -3.31757155e-02,  2.36065003e-02,  1.07428092e-02,
        2.78510719e-02, -1.72792648e-02, -2.38172414e-02, -7.28807818e-03,
       -2.83956493e-02,  7.06792087e-03, -1.01110990e-02, -2.83956493e-02,
       -5.93525129e-02,  4.55029421e-02, -1.01110990e-02, -4.48713183e-03,
        4.37895493e-02, -3.09242832e-02, -1.42476714e-01, -2.81388709e-02,
       -1.01627312e-02,  1.13234551e-01, -1.66832609e-03, -3.62152568e-03,
        1.08254671e-02,  2.51822711e-02, -2.72249187e-02,  3.34891335e-02,
       -1.28456519e-02]), array([-0.01311521, -0.04728254,  0.03294383, -0.0095721 , -0.00243526,
       -0.0236934 ,  0.04079417, -0.00522851,  0.01356804, -0.00637767,
        0.00062687,  0.01881165, -0.01311521,  0.15316744, -0.02738857,
       -0.00940345,  0.16473825,  0.05031554,  0.00117987, -0.01311521,
       -0.01399272, -0.02082809, -0.01684545, -0.02537122,  0.00239894,
       -0.0095721 , -0.00197617, -0.00963585,  0.01157081,  0.04582654,
       -0.01399919,  0.55101197, -0.00197617, -0.00409858,  0.00062687,
       -0.21556708, -0.02777016, -0.0226061 ,  0.02585112, -0.02215873,
       -0.01201086, -0.04728254, -0.0197162 , -0.08816454,  0.01157081,
       -0.08409114,  0.01484328, -0.01311521, -0.0226061 , -0.00197617,
        0.04079417, -0.00963585, -0.00874678, -0.01030264, -0.00762762,
        0.0102732 ,  0.01484328,  0.00239894,  0.07922331,  0.01484328,
        0.02665832,  0.00180822, -0.02168273, -0.01201086, -0.02868129,
       -0.04859196, -0.02215873,  0.01356804,  0.00184778,  0.01157081,
       -0.04728254,  0.00184778, -0.00522851,  0.03294383,  0.01157081,
        0.11216714, -0.02868129,  0.01152858,  0.00117987, -0.01204688,
       -0.02004982, -0.11829759,  0.00062687, -0.02088403, -0.02450991,
        0.004489  ,  0.00155718,  0.00062687, -0.00762762, -0.00762762,
        0.02665832, -0.01054909, -0.00243526,  0.004489  , -0.01751918,
       -0.0095721 ,  0.01152858,  0.02990091, -0.00197617, -0.0095721 ,
       -0.02777016,  0.01157081, -0.0197162 , -0.01751918,  0.03294383,
       -0.01845279, -0.05610062, -0.0236934 ,  0.00117987, -0.02868129,
       -0.08316762,  0.01484328,  0.07566459,  0.04079417, -0.02088403,
       -0.0226061 , -0.01054909,  0.02846654, -0.03966873,  0.04079417,
       -0.04728254,  0.00124863, -0.01494305,  0.01157081, -0.02738857,
       -0.00637767, -0.00637767, -0.02450991, -0.02004982,  0.00117987,
       -0.06247248,  0.00117987, -0.01684545,  0.20895898, -0.0236934 ,
        0.03675309, -0.00522851, -0.0226061 , -0.02738857, -0.0091456 ,
        0.00117987,  0.13585622,  0.03418942, -0.00963585,  0.01152858,
        0.08566223, -0.00940345,  0.02665832,  0.01356804, -0.00243526,
        0.00062687,  0.03403347, -0.02098118,  0.02665832,  0.00062687,
       -0.00409858, -0.02868129,  0.03747323,  0.07922331,  0.20601009,
        0.04582654,  0.10976092, -0.00522851, -0.02533252, -0.37676398,
       -0.07727325, -0.036228  ,  0.03114732, -0.00637767,  0.00180822,
        0.00062687, -0.02738857, -0.02537122, -0.02004982, -0.02098118,
        0.16301373, -0.00940345, -0.02408205,  0.00124863,  0.01356804,
        0.00124863,  0.00523079, -0.01030264,  0.004489  , -0.06558302,
       -0.02408205, -0.01834371,  0.05871561, -0.00637767, -0.02450991,
       -0.01008339, -0.02738857,  0.01356804, -0.00522851, -0.02088403,
        0.24591995, -0.04728254,  0.03403347,  0.02815653, -0.02833046,
       -0.00762152, -0.01934772,  0.00909333, -0.00522851, -0.04343219,
       -0.02098118, -0.0666497 ,  0.04582654, -0.02777016,  0.06609419,
        0.01356804, -0.02777016, -0.04483321, -0.0197162 ,  0.01356804,
        0.11669654, -0.0236934 , -0.02088403, -0.11393519, -0.02833046,
        0.01521837, -0.04728254,  0.01484328,  0.01157081,  0.13854273,
       -0.00243526, -0.02408205,  0.10053414, -0.00762762]), array([-0.02880197,  0.2149866 ,  0.00526456, -0.00119456,  0.01257774,
       -0.01030818,  0.02726558, -0.0295833 ,  0.03998273, -0.0137675 ,
       -0.00175329,  0.26987663, -0.02880197, -0.0449823 ,  0.02495094,
       -0.04202693, -0.05372848,  0.00288625,  0.00172599, -0.02880197,
        0.01287813, -0.01231568,  0.0234736 ,  0.022233  ,  0.00151688,
       -0.00119456, -0.04753529, -0.05150555, -0.00874618,  0.00120351,
       -0.05845784,  0.09554505, -0.04753529, -0.03699015, -0.00175329,
       -0.00094906,  0.02071613,  0.01129988,  0.05268793,  0.01796298,
       -0.06443468,  0.2149866 , -0.04627141, -0.06134516, -0.00874618,
        0.17587645, -0.05740803, -0.02880197,  0.01129988, -0.04753529,
        0.02726558, -0.05150555, -0.22031277, -0.0115396 , -0.03262331,
        0.03300929, -0.05740803,  0.00151688, -0.01665174, -0.05740803,
        0.0330563 ,  0.00133104, -0.06329503, -0.06443468,  0.00454958,
        0.00391213,  0.01796298,  0.03998273, -0.0467932 , -0.00874618,
        0.2149866 , -0.0467932 , -0.0295833 ,  0.00526456, -0.00874618,
       -0.01138718,  0.00454958,  0.01870556,  0.00172599, -0.01178948,
        0.00203698,  0.03490572, -0.00175329,  0.02999115, -0.00652317,
        0.00168273, -0.02445195, -0.00175329, -0.03262331, -0.03262331,
        0.0330563 ,  0.00517786,  0.01257774,  0.00168273, -0.00974789,
       -0.00119456,  0.01870556,  0.00622166, -0.04753529, -0.00119456,
        0.02071613, -0.00874618, -0.04627141, -0.00974789,  0.00526456,
       -0.00484487,  0.03778767, -0.01030818,  0.00172599,  0.00454958,
       -0.22142647, -0.05740803,  0.04913943,  0.02726558,  0.02999115,
        0.01129988,  0.00517786,  0.03438734, -0.08312048,  0.02726558,
        0.2149866 , -0.00191753,  0.02542235, -0.00874618,  0.02495094,
       -0.0137675 , -0.0137675 , -0.00652317,  0.00203698,  0.00172599,
       -0.26766032,  0.00172599,  0.0234736 , -0.00163187, -0.01030818,
       -0.01140257, -0.0295833 ,  0.01129988,  0.02495094, -0.00111487,
        0.00172599, -0.22472479,  0.01829475, -0.05150555,  0.01870556,
        0.03654646, -0.04202693,  0.0330563 ,  0.03998273,  0.01257774,
       -0.00175329,  0.00606496, -0.01112019,  0.0330563 , -0.00175329,
       -0.03699015,  0.00454958, -0.00261807, -0.01665174,  0.1944816 ,
        0.00120351,  0.01349013, -0.0295833 , -0.18402751,  0.13895879,
        0.00846171, -0.05785914,  0.03473904, -0.0137675 ,  0.00133104,
       -0.00175329,  0.02495094,  0.022233  ,  0.00203698, -0.01112019,
       -0.09975924, -0.04202693,  0.0104353 , -0.00191753,  0.03998273,
       -0.00191753,  0.20523206, -0.0115396 ,  0.00168273, -0.01708125,
        0.0104353 , -0.05838527, -0.00841402, -0.0137675 , -0.00652317,
       -0.10671386,  0.02495094,  0.03998273, -0.0295833 ,  0.02999115,
        0.04296404,  0.2149866 ,  0.00606496,  0.08501883,  0.01707154,
       -0.04469034, -0.11430381,  0.0312833 , -0.0295833 , -0.09673132,
       -0.01112019,  0.04296553,  0.00120351,  0.02071613,  0.05489003,
        0.03998273,  0.02071613,  0.0312069 , -0.04627141,  0.03998273,
       -0.01926981, -0.01030818,  0.02999115, -0.07710074,  0.01707154,
       -0.00914683,  0.2149866 , -0.05740803, -0.00874618,  0.10324446,
        0.01257774,  0.0104353 , -0.15096102, -0.03262331]), array([ 3.17478125e-02,  1.90180065e-01,  6.75790870e-03, -7.70167559e-03,
       -3.34799097e-02,  9.23461064e-03, -1.51344333e-02,  2.56907749e-03,
       -4.76833474e-02,  2.23464778e-02,  1.07101056e-03,  1.56736328e-01,
        3.17478125e-02,  9.70365835e-02, -1.55539683e-01, -1.59686910e-03,
        1.10680301e-01, -2.74100373e-02, -5.93843444e-03,  3.17478125e-02,
       -8.04470574e-02,  3.17362495e-02, -1.16113204e-02, -3.92844008e-02,
       -2.33361197e-02, -7.70167559e-03, -1.64157107e-02,  2.32542820e-03,
        1.36437173e-02, -2.22725178e-02,  6.20933660e-02,  1.63828799e-02,
       -1.64157107e-02,  4.11884747e-02,  1.07101056e-03, -1.08903820e-01,
       -1.59482811e-02,  2.18446224e-03, -2.79077609e-02,  1.60610744e-04,
       -2.07853605e-02,  1.90180065e-01, -4.08960126e-02, -9.32019606e-03,
        1.36437173e-02,  2.31162488e-01,  7.50442428e-02,  3.17478125e-02,
        2.18446224e-03, -1.64157107e-02, -1.51344333e-02,  2.32542820e-03,
       -3.06583059e-02, -5.06935065e-03,  4.77115571e-02, -6.21849444e-02,
        7.50442428e-02, -2.33361197e-02,  4.95247262e-02,  7.50442428e-02,
       -3.78221776e-02, -2.43072426e-03, -3.98327448e-03, -2.07853605e-02,
        1.62662857e-02,  2.12970509e-03,  1.60610744e-04, -4.76833474e-02,
       -5.65226849e-03,  1.36437173e-02,  1.90180065e-01, -5.65226849e-03,
        2.56907749e-03,  6.75790870e-03,  1.36437173e-02,  5.62826349e-02,
        1.62662857e-02, -2.27666002e-02, -5.93843444e-03, -6.30870269e-03,
        1.94811152e-03,  2.08436271e-02,  1.07101056e-03, -1.41264000e-02,
       -2.09985918e-04, -5.13751942e-03, -6.84687079e-02,  1.07101056e-03,
        4.77115571e-02,  4.77115571e-02, -3.78221776e-02, -6.12293342e-02,
       -3.34799097e-02, -5.13751942e-03,  1.74685587e-02, -7.70167559e-03,
       -2.27666002e-02, -1.52309043e-04, -1.64157107e-02, -7.70167559e-03,
       -1.59482811e-02,  1.36437173e-02, -4.08960126e-02,  1.74685587e-02,
        6.75790870e-03, -8.96348045e-02, -2.18147844e-02,  9.23461064e-03,
       -5.93843444e-03,  1.62662857e-02, -1.97267415e-02,  7.50442428e-02,
       -1.70551127e-01, -1.51344333e-02, -1.41264000e-02,  2.18446224e-03,
       -6.12293342e-02, -4.02529019e-02, -1.03722216e-01, -1.51344333e-02,
        1.90180065e-01, -9.96152843e-05, -1.27733276e-02,  1.36437173e-02,
       -1.55539683e-01,  2.23464778e-02,  2.23464778e-02, -2.09985918e-04,
        1.94811152e-03, -5.93843444e-03, -8.81196484e-02, -5.93843444e-03,
       -1.16113204e-02,  5.85234956e-02,  9.23461064e-03,  1.54921804e-02,
        2.56907749e-03,  2.18446224e-03, -1.55539683e-01, -7.15251256e-03,
       -5.93843444e-03,  2.04557198e-01, -9.90703529e-03,  2.32542820e-03,
       -2.27666002e-02, -5.72545609e-02, -1.59686910e-03, -3.78221776e-02,
       -4.76833474e-02, -3.34799097e-02,  1.07101056e-03, -4.68829908e-03,
       -6.69572433e-03, -3.78221776e-02,  1.07101056e-03,  4.11884747e-02,
        1.62662857e-02,  1.76765822e-02,  4.95247262e-02, -1.63917197e-01,
       -2.22725178e-02, -2.71131260e-02,  2.56907749e-03,  2.35427412e-01,
       -9.86547071e-04,  1.83959908e-02, -1.18632353e-02, -4.29596971e-02,
        2.23464778e-02, -2.43072426e-03,  1.07101056e-03, -1.55539683e-01,
       -3.92844008e-02,  1.94811152e-03, -6.69572433e-03,  1.55724863e-01,
       -1.59686910e-03,  2.33969101e-03, -9.96152843e-05, -4.76833474e-02,
       -9.96152843e-05, -1.58838005e-01, -5.06935065e-03, -5.13751942e-03,
        5.40774554e-02,  2.33969101e-03,  3.43168900e-02, -5.89261874e-02,
        2.23464778e-02, -2.09985918e-04,  1.47968967e-01, -1.55539683e-01,
       -4.76833474e-02,  2.56907749e-03, -1.41264000e-02,  2.57706686e-02,
        1.90180065e-01, -4.68829908e-03, -2.50212755e-01, -5.86650330e-03,
        3.97468882e-02,  1.28646920e-01, -5.62465099e-02,  2.56907749e-03,
        1.58171920e-02, -6.69572433e-03, -8.30441186e-02, -2.22725178e-02,
       -1.59482811e-02, -3.34437372e-02, -4.76833474e-02, -1.59482811e-02,
       -4.50457391e-03, -4.08960126e-02, -4.76833474e-02,  6.72013084e-02,
        9.23461064e-03, -1.41264000e-02,  1.53322204e-01, -5.86650330e-03,
       -9.79201773e-03,  1.90180065e-01,  7.50442428e-02,  1.36437173e-02,
       -1.50354462e-01, -3.34799097e-02,  2.33969101e-03,  3.65664087e-02,
        4.77115571e-02]), array([-0.04318622, -0.00383472, -0.00411032,  0.00692766,  0.03420987,
       -0.02594373,  0.01198526, -0.01080787,  0.03597422,  0.0593005 ,
        0.02227203, -0.01550959, -0.04318622, -0.1455417 ,  0.07269142,
       -0.03625067, -0.13385615,  0.03668613,  0.03238576, -0.04318622,
        0.03767506,  0.01647671, -0.01829948, -0.01757583,  0.02677671,
        0.00692766, -0.00547626, -0.01583853,  0.01168555,  0.01524989,
        0.14032336, -0.1232895 , -0.00547626,  0.07738861,  0.02227203,
       -0.07538756, -0.04435254, -0.02780832, -0.00532944,  0.00173168,
       -0.03399083, -0.00383472, -0.04383194, -0.08119601,  0.01168555,
       -0.07296467,  0.03825143, -0.04318622, -0.02780832, -0.00547626,
        0.01198526, -0.01583853, -0.03797385, -0.04575693,  0.09485894,
        0.10490564,  0.03825143,  0.02677671, -0.07821454,  0.03825143,
        0.02162958,  0.01623301, -0.00291856, -0.03399083, -0.00599612,
       -0.07060908,  0.00173168,  0.03597422, -0.0120183 ,  0.01168555,
       -0.00383472, -0.0120183 , -0.01080787, -0.00411032,  0.01168555,
       -0.08232486, -0.00599612,  0.03831002,  0.03238576,  0.01291997,
       -0.01247924, -0.11027343,  0.02227203, -0.02482746, -0.03700429,
        0.02143624,  0.00198339,  0.02227203,  0.09485894,  0.09485894,
        0.02162958, -0.01258916,  0.03420987,  0.02143624,  0.01783627,
        0.00692766,  0.03831002,  0.00483167, -0.00547626,  0.00692766,
       -0.04435254,  0.01168555, -0.04383194,  0.01783627, -0.00411032,
       -0.03156938, -0.08758898, -0.02594373,  0.03238576, -0.00599612,
       -0.19401126,  0.03825143, -0.06153646,  0.01198526, -0.02482746,
       -0.02780832, -0.01258916,  0.03786259, -0.09267177,  0.01198526,
       -0.00383472,  0.01948416, -0.0173147 ,  0.01168555,  0.07269142,
        0.0593005 ,  0.0593005 , -0.03700429, -0.01247924,  0.03238576,
       -0.1445194 ,  0.03238576, -0.01829948, -0.20297349, -0.02594373,
       -0.01013873, -0.01080787, -0.02780832,  0.07269142,  0.00640166,
        0.03238576, -0.20256569,  0.00965987, -0.01583853,  0.03831002,
        0.0218094 , -0.03625067,  0.02162958,  0.03597422,  0.03420987,
        0.02227203,  0.00714282, -0.03336354,  0.02162958,  0.02227203,
        0.07738861, -0.00599612, -0.00725291, -0.07821454,  0.09081401,
        0.01524989,  0.02722438, -0.01080787,  0.30799856, -0.38786641,
       -0.0766052 , -0.05619921,  0.04306582,  0.0593005 ,  0.01623301,
        0.02227203,  0.07269142, -0.01757583, -0.01247924, -0.03336354,
       -0.04646737, -0.03625067, -0.03360479,  0.01948416,  0.03597422,
        0.01948416,  0.00545336, -0.04575693,  0.02143624,  0.00505637,
       -0.03360479, -0.05399409,  0.02329614,  0.0593005 , -0.03700429,
        0.13211675,  0.07269142,  0.03597422, -0.01080787, -0.02482746,
       -0.13558698, -0.00383472,  0.00714282,  0.04842739, -0.04323645,
        0.08102286,  0.25327041,  0.07251988, -0.01080787,  0.08876751,
       -0.03336354, -0.10017814,  0.01524989, -0.04435254, -0.01167486,
        0.03597422, -0.04435254, -0.02979348, -0.04383194,  0.03597422,
       -0.08546745, -0.02594373, -0.02482746,  0.24378813, -0.04323645,
        0.05794643, -0.00383472,  0.03825143,  0.01168555,  0.08619119,
        0.03420987, -0.03360479, -0.12347501,  0.09485894]), array([-0.00529318,  0.06944966, -0.00553486, -0.00597442,  0.00639265,
        0.01473813,  0.01171827,  0.01779443,  0.05044326,  0.00306919,
        0.0007699 ,  0.05727946, -0.00529318, -0.10822065, -0.18006795,
       -0.01548464, -0.13259372,  0.08403587,  0.00358575, -0.00529318,
       -0.093399  , -0.02948503,  0.00091499, -0.05289914, -0.01274307,
       -0.00597442,  0.09737225, -0.00710491, -0.02437307,  0.07101417,
        0.0267797 ,  0.00331647,  0.09737225, -0.02493925,  0.0007699 ,
       -0.07625897, -0.04015607, -0.017025  ,  0.01361982,  0.00050861,
        0.08066322,  0.06944966,  0.02996856,  0.01526463, -0.02437307,
        0.07889461, -0.05900095, -0.00529318, -0.017025  ,  0.09737225,
        0.01171827, -0.00710491,  0.39200684,  0.02385956, -0.01148465,
        0.02295292, -0.05900095, -0.01274307, -0.06328466, -0.05900095,
        0.03929607,  0.00409925, -0.019923  ,  0.08066322, -0.00988156,
        0.02325346,  0.00050861,  0.05044326,  0.06574192, -0.02437307,
        0.06944966,  0.06574192,  0.01779443, -0.00553486, -0.02437307,
       -0.06881952, -0.00988156,  0.01297453,  0.00358575, -0.01281809,
       -0.01657834, -0.09606742,  0.0007699 ,  0.00133404,  0.0296452 ,
        0.01302169,  0.13110649,  0.0007699 , -0.01148465, -0.01148465,
        0.03929607, -0.03924308,  0.00639265,  0.01302169, -0.01172441,
       -0.00597442,  0.01297453,  0.00862065,  0.09737225, -0.00597442,
       -0.04015607, -0.02437307,  0.02996856, -0.01172441, -0.00553486,
       -0.02812659, -0.07273143,  0.01473813,  0.00358575, -0.00988156,
        0.12238651, -0.05900095,  0.00117912,  0.01171827,  0.00133404,
       -0.017025  , -0.03924308,  0.04339532, -0.02475916,  0.01171827,
        0.06944966, -0.00322141,  0.00190155, -0.02437307, -0.18006795,
        0.00306919,  0.00306919,  0.0296452 , -0.01657834,  0.00358575,
        0.28288807,  0.00358575,  0.00091499, -0.09653128,  0.01473813,
       -0.00078221,  0.01779443, -0.017025  , -0.18006795, -0.00551049,
        0.00358575, -0.19510433,  0.00793081, -0.00710491,  0.01297453,
        0.09363801, -0.01548464,  0.03929607,  0.05044326,  0.00639265,
        0.0007699 ,  0.02276946,  0.01624704,  0.03929607,  0.0007699 ,
       -0.02493925, -0.00988156, -0.01465281, -0.06328466,  0.09352051,
        0.07101417,  0.10240429,  0.01779443, -0.10119937, -0.11144943,
        0.0133719 ,  0.12220712,  0.05231776,  0.00306919,  0.00409925,
        0.0007699 , -0.18006795, -0.05289914, -0.01657834,  0.01624704,
       -0.11937196, -0.01548464, -0.00639174, -0.00322141,  0.05044326,
       -0.00322141,  0.11702237,  0.02385956,  0.01302169, -0.05892709,
       -0.00639174,  0.01250124,  0.15943778,  0.00306919,  0.0296452 ,
       -0.11342523, -0.18006795,  0.05044326,  0.01779443,  0.00133404,
       -0.08109478,  0.06944966,  0.02276946, -0.23148123, -0.03257536,
        0.02371051, -0.01271339,  0.01936718,  0.01779443, -0.07418366,
        0.01624704, -0.11197451,  0.07101417, -0.04015607, -0.0121702 ,
        0.05044326, -0.04015607,  0.00230936,  0.02996856,  0.05044326,
       -0.07793746,  0.01473813,  0.00133404, -0.004827  , -0.03257536,
       -0.04033756,  0.06944966, -0.05900095, -0.02437307,  0.09178962,
        0.00639265, -0.00639174,  0.10068694, -0.01148465]), array([ 6.63488992e-02, -7.52967363e-02, -3.06599699e-03,  1.86119537e-03,
        1.47250180e-03,  5.46588939e-02,  3.00428490e-02,  6.45675011e-02,
        1.15910238e-01,  2.64901236e-03,  7.10494575e-03, -9.43953447e-02,
        6.63488992e-02, -1.96062176e-02, -1.31285307e-01,  4.96018721e-02,
       -2.31592107e-02, -6.99309245e-02,  1.36109026e-02,  6.63488992e-02,
       -6.83195112e-02,  6.44497910e-03,  2.72463155e-02, -5.69006863e-02,
       -3.49652548e-02,  1.86119537e-03, -7.59965862e-02, -2.06687648e-03,
       -3.55299308e-03, -6.96502694e-02, -2.94146982e-02, -5.97881250e-02,
       -7.59965862e-02,  1.23541750e-04,  7.10494575e-03, -2.09040065e-02,
       -2.19354315e-02,  3.63190225e-03,  6.00809549e-02,  2.80865112e-02,
       -1.71141130e-02, -7.52967363e-02,  4.66379097e-02,  1.48433651e-01,
       -3.55299308e-03,  4.57110568e-02,  2.56573541e-02,  6.63488992e-02,
        3.63190225e-03, -7.59965862e-02,  3.00428490e-02, -2.06687648e-03,
       -3.71269701e-01, -7.23200945e-02,  2.69126946e-03,  5.10926348e-02,
        2.56573541e-02, -3.49652548e-02, -8.00609744e-03,  2.56573541e-02,
        2.65394739e-02,  6.91231364e-03, -4.61975107e-03, -1.71141130e-02,
       -9.80954380e-03, -7.23138828e-02,  2.80865112e-02,  1.15910238e-01,
       -4.89502439e-02, -3.55299308e-03, -7.52967363e-02, -4.89502439e-02,
        6.45675011e-02, -3.06599699e-03, -3.55299308e-03, -1.10720944e-02,
       -9.80954380e-03,  3.60092305e-02,  1.36109026e-02, -2.55287459e-03,
       -5.97208702e-03,  5.19442410e-02,  7.10494575e-03,  3.63922949e-02,
       -5.51746830e-02, -2.80655124e-04,  9.87961253e-02,  7.10494575e-03,
        2.69126946e-03,  2.69126946e-03,  2.65394739e-02, -1.67335120e-02,
        1.47250180e-03, -2.80655124e-04,  2.82436393e-02,  1.86119537e-03,
        3.60092305e-02, -9.79176680e-03, -7.59965862e-02,  1.86119537e-03,
       -2.19354315e-02, -3.55299308e-03,  4.66379097e-02,  2.82436393e-02,
       -3.06599699e-03, -1.24018861e-01, -2.43918427e-02,  5.46588939e-02,
        1.36109026e-02, -9.80954380e-03,  2.64700963e-01,  2.56573541e-02,
        5.26551126e-02,  3.00428490e-02,  3.63922949e-02,  3.63190225e-03,
       -1.67335120e-02,  3.34517875e-02,  7.95062698e-02,  3.00428490e-02,
       -7.52967363e-02,  2.75574138e-04,  3.00381059e-02, -3.55299308e-03,
       -1.31285307e-01,  2.64901236e-03,  2.64901236e-03, -5.51746830e-02,
       -5.97208702e-03,  1.36109026e-02, -1.10085386e-01,  1.36109026e-02,
        2.72463155e-02, -1.11024920e-01,  5.46588939e-02, -8.67348657e-03,
        6.45675011e-02,  3.63190225e-03, -1.31285307e-01,  1.70294581e-03,
        1.36109026e-02,  1.19935031e-01,  1.72711709e-02, -2.06687648e-03,
        3.60092305e-02, -2.78009461e-02,  4.96018721e-02,  2.65394739e-02,
        1.15910238e-01,  1.47250180e-03,  7.10494575e-03, -1.68647769e-02,
       -1.25954764e-02,  2.65394739e-02,  7.10494575e-03,  1.23541750e-04,
       -9.80954380e-03, -2.20034566e-03, -8.00609744e-03,  2.21984204e-01,
       -6.96502694e-02, -9.63068131e-02,  6.45675011e-02,  2.85343393e-03,
       -5.37934218e-02, -8.21234266e-02, -1.59072395e-01,  2.62588187e-02,
        2.64901236e-03,  6.91231364e-03,  7.10494575e-03, -1.31285307e-01,
       -5.69006863e-02, -5.97208702e-03, -1.25954764e-02,  3.18340172e-03,
        4.96018721e-02, -1.71391998e-02,  2.75574138e-04,  1.15910238e-01,
        2.75574138e-04,  3.06062263e-01, -7.23200945e-02, -2.80655124e-04,
        5.35818268e-02, -1.71391998e-02,  1.30916400e-01, -6.63218892e-02,
        2.64901236e-03, -5.51746830e-02,  3.22258750e-02, -1.31285307e-01,
        1.15910238e-01,  6.45675011e-02,  3.63922949e-02, -1.21653521e-02,
       -7.52967363e-02, -1.68647769e-02, -1.67117428e-01, -2.45641122e-03,
       -3.20637105e-02, -2.92488993e-02,  3.74817323e-02,  6.45675011e-02,
       -4.54335511e-02, -1.25954764e-02, -4.11253547e-02, -6.96502694e-02,
       -2.19354315e-02, -1.90986084e-02,  1.15910238e-01, -2.19354315e-02,
        2.56365808e-02,  4.66379097e-02,  1.15910238e-01, -1.02064431e-02,
        5.46588939e-02,  3.63922949e-02,  9.04146395e-03, -2.45641122e-03,
       -3.82426737e-02, -7.52967363e-02,  2.56573541e-02, -3.55299308e-03,
       -9.57021569e-02,  1.47250180e-03, -1.71391998e-02, -8.63379637e-02,
        2.69126946e-03]), array([ 0.00245593, -0.00268862, -0.01676465,  0.00344797,  0.05991998,
       -0.01750272, -0.03494348,  0.00065431, -0.02433924, -0.03872019,
        0.01153071, -0.01714287,  0.00245593, -0.0142448 , -0.13775419,
        0.00284921,  0.06192605,  0.02096879,  0.02591699,  0.00245593,
       -0.07185025, -0.00662691, -0.00284909,  0.23778951,  0.15466991,
        0.00344797, -0.00221816,  0.05479868,  0.07617085,  0.00178518,
       -0.07999038, -0.1889918 , -0.00221816,  0.03330284,  0.01153071,
       -0.02384596,  0.0831196 , -0.00681149, -0.0412581 , -0.02792887,
       -0.02486786, -0.00268862, -0.02133127, -0.10076596,  0.07617085,
       -0.01773541,  0.01159374,  0.00245593, -0.00681149, -0.00221816,
       -0.03494348,  0.05479868, -0.10469718, -0.00060015, -0.03373885,
        0.09904479,  0.01159374,  0.15466991, -0.00513202,  0.01159374,
        0.07548295,  0.01476308,  0.09515572, -0.02486786, -0.04221775,
       -0.03973311, -0.02792887, -0.02433924, -0.01189619,  0.07617085,
       -0.00268862, -0.01189619,  0.00065431, -0.01676465,  0.07617085,
       -0.02189667, -0.04221775,  0.01320781,  0.02591699,  0.04035704,
        0.03423289, -0.06226276,  0.01153071, -0.00783559, -0.02562981,
        0.01918361, -0.0492071 ,  0.01153071, -0.03373885, -0.03373885,
        0.07548295,  0.00988503,  0.05991998,  0.01918361, -0.04223463,
        0.00344797,  0.01320781, -0.01359907, -0.00221816,  0.00344797,
        0.0831196 ,  0.07617085, -0.02133127, -0.04223463, -0.01676465,
        0.1639548 ,  0.09641179, -0.01750272,  0.02591699, -0.04221775,
       -0.05774239,  0.01159374, -0.0544253 , -0.03494348, -0.00783559,
       -0.00681149,  0.00988503,  0.09024603, -0.00859702, -0.03494348,
       -0.00268862,  0.03580941, -0.00631462,  0.07617085, -0.13775419,
       -0.03872019, -0.03872019, -0.02562981,  0.03423289,  0.02591699,
       -0.00699112,  0.02591699, -0.00284909, -0.0292992 , -0.01750272,
       -0.02099851,  0.00065431, -0.00681149, -0.13775419,  0.00313687,
        0.02591699,  0.05745276, -0.02176236,  0.05479868,  0.01320781,
       -0.02673963,  0.00284921,  0.07548295, -0.02433924,  0.05991998,
        0.01153071, -0.00852741, -0.00147632,  0.07548295,  0.01153071,
        0.03330284, -0.04221775, -0.01695764, -0.00513202, -0.11081633,
        0.00178518, -0.0203413 ,  0.00065431, -0.03673937, -0.065031  ,
       -0.08195086, -0.02959125,  0.09466656, -0.03872019,  0.01476308,
        0.01153071, -0.13775419,  0.23778951,  0.03423289, -0.00147632,
       -0.03547519,  0.00284921, -0.0141033 ,  0.03580941, -0.02433924,
        0.03580941, -0.02230928, -0.00060015,  0.01918361, -0.06855889,
       -0.0141033 ,  0.00311025,  0.06473738, -0.03872019, -0.02562981,
        0.03826967, -0.13775419, -0.02433924,  0.00065431, -0.00783559,
        0.0467839 , -0.00268862, -0.00852741, -0.14232341,  0.01329219,
       -0.04127019, -0.04170619,  0.0731278 ,  0.00065431,  0.31736136,
       -0.00147632,  0.10629682,  0.00178518,  0.0831196 , -0.01445425,
       -0.02433924,  0.0831196 , -0.03460854, -0.02133127, -0.02433924,
       -0.02208965, -0.01750272, -0.00783559, -0.25288342,  0.01329219,
        0.26665017, -0.00268862,  0.01159374,  0.07617085,  0.27740378,
        0.05991998, -0.0141033 , -0.06687535, -0.03373885]), array([ 0.00750259,  0.02498691, -0.03705987, -0.00157409, -0.01789408,
       -0.0448176 , -0.05318417, -0.03813105,  0.086743  , -0.02198721,
       -0.01761914,  0.0174798 ,  0.00750259,  0.09102331,  0.08989831,
        0.00194554,  0.07824153, -0.06414166, -0.02922208,  0.00750259,
        0.04704034,  0.00626064,  0.043042  , -0.08114118, -0.02884475,
       -0.00157409,  0.0429465 ,  0.04983153, -0.01278179, -0.06287218,
       -0.01998526, -0.23847577,  0.0429465 ,  0.0164273 , -0.01761914,
        0.06027715, -0.05229644, -0.01972026, -0.01589351,  0.03844156,
        0.02681646,  0.02498691, -0.047938  , -0.2032988 , -0.01278179,
       -0.0123281 ,  0.05620488,  0.00750259, -0.01972026,  0.0429465 ,
       -0.05318417,  0.04983153,  0.06543044,  0.02415294, -0.00344001,
       -0.07850281,  0.05620488, -0.02884475,  0.04472631,  0.05620488,
        0.12977452,  0.00666177,  0.05963762,  0.02681646, -0.00161936,
        0.02033557,  0.03844156,  0.086743  ,  0.01825019, -0.01278179,
        0.02498691,  0.01825019, -0.03813105, -0.03705987, -0.01278179,
        0.00766644, -0.00161936, -0.03138665, -0.02922208,  0.00980608,
        0.00818372, -0.19444786, -0.01761914,  0.06547902,  0.01413458,
       -0.00126948,  0.11355946, -0.01761914, -0.00344001, -0.00344001,
        0.12977452, -0.03529194, -0.01789408, -0.00126948, -0.0669824 ,
       -0.00157409, -0.03138665, -0.04437839,  0.0429465 , -0.00157409,
       -0.05229644, -0.01278179, -0.047938  , -0.0669824 , -0.03705987,
       -0.03998374, -0.09676057, -0.0448176 , -0.02922208, -0.00161936,
       -0.09462206,  0.05620488, -0.10557648, -0.05318417,  0.06547902,
       -0.01972026, -0.03529194,  0.13643629, -0.0812844 , -0.05318417,
        0.02498691, -0.01606947,  0.03729066, -0.01278179,  0.08989831,
       -0.02198721, -0.02198721,  0.01413458,  0.00818372, -0.02922208,
        0.10398041, -0.02922208,  0.043042  ,  0.10766914, -0.0448176 ,
       -0.01717707, -0.03813105, -0.01972026,  0.08989831, -0.00142048,
       -0.02922208,  0.20650786, -0.03606291,  0.04983153, -0.03138665,
       -0.07771161,  0.00194554,  0.12977452,  0.086743  , -0.01789408,
       -0.01761914, -0.03419752,  0.01407373,  0.12977452, -0.01761914,
        0.0164273 , -0.00161936, -0.02222044,  0.04472631, -0.05623727,
       -0.06287218, -0.14144809, -0.03813105,  0.07745477,  0.08692253,
        0.01871621,  0.0781434 ,  0.12850504, -0.02198721,  0.00666177,
       -0.01761914,  0.08989831, -0.08114118,  0.00818372,  0.01407373,
        0.06310437,  0.00194554,  0.00620099, -0.01606947,  0.086743  ,
       -0.01606947,  0.38593133,  0.02415294, -0.00126948, -0.10428256,
        0.00620099, -0.03062846,  0.1385235 , -0.02198721,  0.01413458,
        0.07889282,  0.08989831,  0.086743  , -0.03813105,  0.06547902,
        0.21329072,  0.02498691, -0.03419752,  0.04709925, -0.04446413,
        0.00200195,  0.01498925, -0.04928073, -0.03813105,  0.05540389,
        0.01407373, -0.13205251, -0.06287218, -0.05229644, -0.00750711,
        0.086743  , -0.05229644,  0.07652297, -0.047938  ,  0.086743  ,
        0.02250587, -0.0448176 ,  0.06547902, -0.0425415 , -0.04446413,
       -0.057696  ,  0.02498691,  0.05620488, -0.01278179,  0.0126564 ,
       -0.01789408,  0.00620099,  0.07418657, -0.00344001]), array([ 0.02050872, -0.0217383 , -0.01352466, -0.00635974,  0.01789649,
        0.048782  , -0.0677704 ,  0.02859956, -0.10074343,  0.06809302,
       -0.01218204,  0.02282853,  0.02050872,  0.05400659, -0.01360711,
        0.01609692,  0.06048707,  0.04290337, -0.02038806,  0.02050872,
       -0.00714388, -0.01705321, -0.00454337, -0.02570315,  0.00331821,
       -0.00635974,  0.00250413, -0.05993041,  0.00648048,  0.01748821,
        0.10345736, -0.08851829,  0.00250413, -0.03792616, -0.01218204,
       -0.01144575, -0.02902136,  0.00138436, -0.0802908 ,  0.03233951,
       -0.03666881, -0.0217383 ,  0.04473285,  0.20129963,  0.00648048,
        0.04755242, -0.062145  ,  0.02050872,  0.00138436,  0.00250413,
       -0.0677704 , -0.05993041, -0.03702877,  0.00392099,  0.04147061,
       -0.04907381, -0.062145  ,  0.00331821,  0.04325089, -0.062145  ,
        0.16477035,  0.01630079, -0.09230918, -0.03666881,  0.03107661,
       -0.04730828,  0.03233951, -0.10074343, -0.03351348,  0.00648048,
       -0.0217383 , -0.03351348,  0.02859956, -0.01352466,  0.00648048,
        0.02972623,  0.03107661, -0.04658224, -0.02038806, -0.03237878,
       -0.0342022 ,  0.10701093, -0.01218204, -0.0022632 , -0.02612414,
        0.02541516, -0.13741224, -0.01218204,  0.04147061,  0.04147061,
        0.16477035,  0.02327015,  0.01789649,  0.02541516,  0.07884031,
       -0.00635974, -0.04658224, -0.01262972,  0.00250413, -0.00635974,
       -0.02902136,  0.00648048,  0.04473285,  0.07884031, -0.01352466,
        0.03050935, -0.03256394,  0.048782  , -0.02038806,  0.03107661,
        0.12205123, -0.062145  ,  0.09218113, -0.0677704 , -0.0022632 ,
        0.00138436,  0.02327015,  0.18107114,  0.08409992, -0.0677704 ,
       -0.0217383 , -0.00504734, -0.0125204 ,  0.00648048, -0.01360711,
        0.06809302,  0.06809302, -0.02612414, -0.0342022 , -0.02038806,
       -0.11029782, -0.02038806, -0.00454337,  0.10249441,  0.048782  ,
       -0.03538237,  0.02859956,  0.00138436, -0.01360711, -0.00568999,
       -0.02038806, -0.03146318, -0.03790402, -0.05993041, -0.04658224,
       -0.00290049,  0.01609692,  0.16477035, -0.10074343,  0.01789649,
       -0.01218204,  0.0063165 , -0.0274221 ,  0.16477035, -0.01218204,
       -0.03792616,  0.03107661, -0.02329654,  0.04325089, -0.22882196,
        0.01748821,  0.01117498,  0.02859956, -0.04028943, -0.05266518,
       -0.01623167,  0.03258634,  0.19018551,  0.06809302,  0.01630079,
       -0.01218204, -0.01360711, -0.02570315, -0.0342022 , -0.0274221 ,
       -0.11006822,  0.01609692, -0.02118414, -0.00504734, -0.10074343,
       -0.00504734,  0.05665077,  0.00392099,  0.02541516,  0.09073158,
       -0.02118414,  0.04910828,  0.17359098,  0.06809302, -0.02612414,
       -0.11712438, -0.01360711, -0.10074343,  0.02859956, -0.0022632 ,
        0.26334378, -0.0217383 ,  0.0063165 ,  0.05422987, -0.00354257,
        0.03536434,  0.03890879, -0.02868575,  0.02859956, -0.16111932,
       -0.0274221 , -0.00929378,  0.01748821, -0.02902136,  0.04456683,
       -0.10074343, -0.02902136,  0.02389802,  0.04473285, -0.10074343,
        0.01995435,  0.048782  , -0.0022632 ,  0.31334563, -0.00354257,
        0.00475135, -0.0217383 , -0.062145  ,  0.00648048,  0.2480401 ,
        0.01789649, -0.02118414, -0.09480896,  0.04147061]), array([ 3.01361963e-02, -1.93915820e-02,  1.91713944e-02,  1.28334709e-02,
        2.27511074e-02,  1.19300461e-02, -6.99656351e-03,  6.47541548e-02,
       -1.55982776e-02,  1.57867379e-02,  5.06547697e-02, -1.14076099e-01,
        3.01361963e-02,  2.65917277e-02,  8.62925917e-02, -1.68092600e-02,
        1.78388106e-01,  1.74931057e-02,  6.50978129e-02,  3.01361963e-02,
        4.53340969e-02, -4.09130465e-02,  2.32880418e-03, -9.39821466e-02,
       -3.53529084e-02,  1.28334709e-02,  6.67917549e-03, -2.83613983e-02,
        1.51796378e-01, -1.10036463e-02, -2.21174269e-02, -6.66330011e-02,
        6.67917549e-03, -6.50048562e-02,  5.06547697e-02, -6.29369184e-02,
       -5.86292383e-02,  8.49213591e-03, -5.50460344e-03, -5.26491626e-03,
        2.26410182e-03, -1.93915820e-02, -7.50282901e-02, -7.13349232e-02,
        1.51796378e-01,  2.26746604e-02, -6.19795305e-02,  3.01361963e-02,
        8.49213591e-03,  6.67917549e-03, -6.99656351e-03, -2.83613983e-02,
       -3.80932978e-02, -2.87573287e-02, -4.63155287e-02,  1.13635874e-01,
       -6.19795305e-02, -3.53529084e-02,  1.83424748e-02, -6.19795305e-02,
       -6.46826511e-03,  2.22486847e-02, -3.62007706e-02,  2.26410182e-03,
        1.31490798e-02,  4.77846806e-02, -5.26491626e-03, -1.55982776e-02,
        9.32385458e-03,  1.51796378e-01, -1.93915820e-02,  9.32385458e-03,
        6.47541548e-02,  1.91713944e-02,  1.51796378e-01,  3.75138692e-02,
        1.31490798e-02,  2.57869535e-02,  6.50978129e-02, -7.83937223e-03,
       -7.91854094e-03, -1.51916373e-02,  5.06547697e-02,  3.72922895e-03,
        2.13047101e-02,  2.84967520e-02, -1.33341758e-02,  5.06547697e-02,
       -4.63155287e-02, -4.63155287e-02, -6.46826511e-03, -1.06010470e-01,
        2.27511074e-02,  2.84967520e-02, -3.46045094e-03,  1.28334709e-02,
        2.57869535e-02,  1.30661492e-02,  6.67917549e-03,  1.28334709e-02,
       -5.86292383e-02,  1.51796378e-01, -7.50282901e-02, -3.46045094e-03,
        1.91713944e-02, -1.70120707e-01, -8.25684683e-02,  1.19300461e-02,
        6.50978129e-02,  1.31490798e-02,  1.72469489e-02, -6.19795305e-02,
       -3.22662928e-01, -6.99656351e-03,  3.72922895e-03,  8.49213591e-03,
       -1.06010470e-01,  1.57804195e-02, -1.97848020e-01, -6.99656351e-03,
       -1.93915820e-02,  4.50703058e-02,  1.49196007e-03,  1.51796378e-01,
        8.62925917e-02,  1.57867379e-02,  1.57867379e-02,  2.13047101e-02,
       -7.91854094e-03,  6.50978129e-02, -8.49545102e-02,  6.50978129e-02,
        2.32880418e-03, -9.68501175e-02,  1.19300461e-02,  1.09309948e-02,
        6.47541548e-02,  8.49213591e-03,  8.62925917e-02,  1.14624693e-02,
        6.50978129e-02, -5.04222648e-02, -4.16617410e-03, -2.83613983e-02,
        2.57869535e-02, -5.79432977e-02, -1.68092600e-02, -6.46826511e-03,
       -1.55982776e-02,  2.27511074e-02,  5.06547697e-02,  1.66450719e-02,
        1.68046412e-04, -6.46826511e-03,  5.06547697e-02, -6.50048562e-02,
        1.31490798e-02,  1.07522127e-02,  1.83424748e-02, -1.42598230e-01,
       -1.10036463e-02,  1.87075749e-02,  6.47541548e-02, -2.52117127e-01,
       -8.40416779e-02,  6.09337604e-02, -2.15573741e-02,  2.20284869e-02,
        1.57867379e-02,  2.22486847e-02,  5.06547697e-02,  8.62925917e-02,
       -9.39821466e-02, -7.91854094e-03,  1.68046412e-04, -3.20470700e-02,
       -1.68092600e-02,  2.64799705e-02,  4.50703058e-02, -1.55982776e-02,
        4.50703058e-02, -6.67211171e-02, -2.87573287e-02,  2.84967520e-02,
       -4.91497256e-02,  2.64799705e-02,  9.48903511e-02,  1.68559823e-02,
        1.57867379e-02,  2.13047101e-02, -1.67897433e-01,  8.62925917e-02,
       -1.55982776e-02,  6.47541548e-02,  3.72922895e-03, -7.45610540e-02,
       -1.93915820e-02,  1.66450719e-02, -1.14402395e-01, -2.39392300e-02,
       -3.79041648e-02, -1.49224550e-01,  4.85380609e-02,  6.47541548e-02,
       -1.44477076e-01,  1.68046412e-04, -1.88578938e-01, -1.10036463e-02,
       -5.86292383e-02, -9.46845166e-02, -1.55982776e-02, -5.86292383e-02,
        4.25000803e-03, -7.50282901e-02, -1.55982776e-02,  2.90946875e-02,
        1.19300461e-02,  3.72922895e-03, -6.34884639e-02, -2.39392300e-02,
        1.61513776e-01, -1.93915820e-02, -6.19795305e-02,  1.51796378e-01,
       -1.24758229e-01,  2.27511074e-02,  2.64799705e-02,  3.07682041e-02,
       -4.63155287e-02]), array([-5.51609133e-02,  2.95684048e-02, -1.45593942e-02, -7.91134725e-03,
       -6.80607560e-02, -1.49215126e-02,  1.60528123e-04, -3.87243893e-02,
        9.43400124e-02,  6.30027899e-02, -4.10676053e-03,  6.95038119e-02,
       -5.51609133e-02,  6.66110408e-02, -2.97180461e-02, -1.26752808e-02,
        2.30634978e-01, -1.29210599e-01, -3.15656956e-02, -5.51609133e-02,
       -1.56586282e-02, -3.26290790e-02, -1.22589449e-02,  5.73899350e-02,
        4.12150972e-02, -7.91134725e-03,  1.94437247e-02, -8.15937826e-03,
        1.64023937e-01, -9.32681792e-02,  1.02100712e-01, -1.13520048e-01,
        1.94437247e-02, -1.74271447e-02, -4.10676053e-03, -5.01771462e-02,
        1.61748378e-02, -1.53188865e-02, -1.20778137e-02,  1.48526754e-02,
        3.07050786e-02,  2.95684048e-02,  4.93036747e-02,  5.72108589e-02,
        1.64023937e-01, -4.05140211e-02, -7.25648028e-02, -5.51609133e-02,
       -1.53188865e-02,  1.94437247e-02,  1.60528123e-04, -8.15937826e-03,
        3.09500254e-02,  3.58100101e-02,  3.63772048e-02, -1.08216635e-01,
       -7.25648028e-02,  4.12150972e-02,  4.06635970e-02, -7.25648028e-02,
       -6.74851161e-02, -1.16247256e-02, -1.87351352e-02,  3.07050786e-02,
        9.36595994e-03, -5.90723203e-02,  1.48526754e-02,  9.43400124e-02,
        2.64190351e-02,  1.64023937e-01,  2.95684048e-02,  2.64190351e-02,
       -3.87243893e-02, -1.45593942e-02,  1.64023937e-01,  2.61042028e-02,
        9.36595994e-03, -8.59018329e-03, -3.15656956e-02, -1.05757570e-02,
       -1.76531215e-02, -1.20662916e-02, -4.10676053e-03, -1.61012707e-02,
       -2.72575665e-02, -3.59424196e-02,  1.25045091e-01, -4.10676053e-03,
        3.63772048e-02,  3.63772048e-02, -6.74851161e-02,  6.23514931e-02,
       -6.80607560e-02, -3.59424196e-02,  3.01765424e-02, -7.91134725e-03,
       -8.59018329e-03, -3.46815955e-02,  1.94437247e-02, -7.91134725e-03,
        1.61748378e-02,  1.64023937e-01,  4.93036747e-02,  3.01765424e-02,
       -1.45593942e-02,  1.39376600e-01,  1.19176225e-02, -1.49215126e-02,
       -3.15656956e-02,  9.36595994e-03, -4.14733426e-02, -7.25648028e-02,
        1.62256728e-01,  1.60528123e-04, -1.61012707e-02, -1.53188865e-02,
        6.23514931e-02, -7.91098417e-02,  9.89798870e-02,  1.60528123e-04,
        2.95684048e-02,  3.34586791e-02, -1.22383419e-02,  1.64023937e-01,
       -2.97180461e-02,  6.30027899e-02,  6.30027899e-02, -2.72575665e-02,
       -1.76531215e-02, -3.15656956e-02,  1.19511625e-01, -3.15656956e-02,
       -1.22589449e-02,  1.42356458e-01, -1.49215126e-02, -1.62260273e-02,
       -3.87243893e-02, -1.53188865e-02, -2.97180461e-02, -7.01145878e-03,
       -3.15656956e-02, -8.19493343e-02,  1.47955923e-03, -8.15937826e-03,
       -8.59018329e-03, -8.26020257e-02, -1.26752808e-02, -6.74851161e-02,
        9.43400124e-02, -6.80607560e-02, -4.10676053e-03, -5.19686468e-02,
        1.79948975e-03, -6.74851161e-02, -4.10676053e-03, -1.74271447e-02,
        9.36595994e-03, -2.16688939e-02,  4.06635970e-02,  1.37991477e-01,
       -9.32681792e-02, -1.79918422e-01, -3.87243893e-02, -4.71458992e-02,
       -9.58265137e-02, -4.97063603e-02,  7.36201602e-02, -1.03427536e-01,
        6.30027899e-02, -1.16247256e-02, -4.10676053e-03, -2.97180461e-02,
        5.73899350e-02, -1.76531215e-02,  1.79948975e-03, -8.45122802e-02,
       -1.26752808e-02, -3.18147538e-02,  3.34586791e-02,  9.43400124e-02,
        3.34586791e-02,  1.17751678e-02,  3.58100101e-02, -3.59424196e-02,
       -9.80038228e-03, -3.18147538e-02, -9.38853025e-02, -1.00010038e-01,
        6.30027899e-02, -2.72575665e-02, -1.22621027e-01, -2.97180461e-02,
        9.43400124e-02, -3.87243893e-02, -1.61012707e-02,  3.90613319e-02,
        2.95684048e-02, -5.19686468e-02,  7.25688541e-02, -4.25721529e-03,
        3.90979226e-02,  5.80479826e-02, -7.66509393e-02, -3.87243893e-02,
       -1.26003042e-02,  1.79948975e-03,  7.42691156e-02, -9.32681792e-02,
        1.61748378e-02,  3.99354071e-02,  9.43400124e-02,  1.61748378e-02,
        2.26515468e-03,  4.93036747e-02,  9.43400124e-02,  1.89947030e-02,
       -1.49215126e-02, -1.61012707e-02,  2.11239520e-01, -4.25721529e-03,
        2.38697714e-01,  2.95684048e-02, -7.25648028e-02,  1.64023937e-01,
       -1.47663547e-01, -6.80607560e-02, -3.18147538e-02,  6.68455302e-02,
        3.63772048e-02]), array([-0.04999149, -0.01743359, -0.01232292,  0.01322677,  0.16116229,
       -0.02165704, -0.00643891, -0.10974007, -0.02912029,  0.02233812,
       -0.01207766,  0.01765239, -0.04999149,  0.08151095, -0.07786514,
        0.00075191,  0.0368118 , -0.08977827,  0.11444898, -0.04999149,
       -0.04116302, -0.00719675, -0.01122904, -0.11683122, -0.04287823,
        0.01322677, -0.00217586,  0.05499696, -0.04469914, -0.06339836,
        0.01705041, -0.0885004 , -0.00217586, -0.02284847, -0.01207766,
        0.12250011, -0.07395299,  0.01160637, -0.01855883,  0.00320022,
       -0.00552764, -0.01743359,  0.01861038,  0.04782653, -0.04469914,
       -0.08908212, -0.02782926, -0.04999149,  0.01160637, -0.00217586,
       -0.00643891,  0.05499696, -0.03801936,  0.01686735, -0.00431099,
        0.39629023, -0.02782926, -0.04287823,  0.0509853 , -0.02782926,
       -0.0212201 , -0.00772753,  0.07853946, -0.00552764,  0.03899648,
        0.03811097,  0.00320022, -0.02912029,  0.00549989, -0.04469914,
       -0.01743359,  0.00549989, -0.10974007, -0.01232292, -0.04469914,
        0.03866238,  0.03899648,  0.12067895,  0.11444898,  0.0235425 ,
        0.00674746,  0.06142558, -0.01207766, -0.01506143,  0.01600296,
       -0.02637992, -0.03464793, -0.01207766, -0.00431099, -0.00431099,
       -0.0212201 , -0.00216171,  0.16116229, -0.02637992,  0.03186611,
        0.01322677,  0.12067895, -0.03090882, -0.00217586,  0.01322677,
       -0.07395299, -0.04469914,  0.01861038,  0.03186611, -0.01232292,
       -0.0281726 , -0.08661334, -0.02165704,  0.11444898,  0.03899648,
       -0.16755396, -0.02782926,  0.03346728, -0.00643891, -0.01506143,
        0.01160637, -0.00216171, -0.02894763,  0.01720057, -0.00643891,
       -0.01743359, -0.02189959, -0.01211993, -0.04469914, -0.07786514,
        0.02233812,  0.02233812,  0.01600296,  0.00674746,  0.11444898,
        0.08935937,  0.11444898, -0.01122904,  0.13346428, -0.02165704,
       -0.01518401, -0.10974007,  0.01160637, -0.07786514,  0.01161915,
        0.11444898,  0.05943907, -0.00183539,  0.05499696,  0.12067895,
       -0.08146572,  0.00075191, -0.0212201 , -0.02912029,  0.16116229,
       -0.01207766, -0.0445922 ,  0.01795563, -0.0212201 , -0.01207766,
       -0.02284847,  0.03899648, -0.01234937,  0.0509853 ,  0.10030298,
       -0.06339836, -0.13889937, -0.10974007, -0.06747318,  0.04936306,
        0.07710744,  0.0321771 , -0.04760002,  0.02233812, -0.00772753,
       -0.01207766, -0.07786514, -0.11683122,  0.00674746,  0.01795563,
       -0.02483699,  0.00075191,  0.02210801, -0.02189959, -0.02912029,
       -0.02189959, -0.10361793,  0.01686735, -0.02637992,  0.04367644,
        0.02210801, -0.15973156, -0.06798816,  0.02233812,  0.01600296,
       -0.05787448, -0.07786514, -0.02912029, -0.10974007, -0.01506143,
        0.09537683, -0.01743359, -0.0445922 , -0.04494087, -0.01266036,
       -0.00528771, -0.03244717,  0.28184124, -0.10974007,  0.01956022,
        0.01795563, -0.08877506, -0.06339836, -0.07395299,  0.03508598,
       -0.02912029, -0.07395299,  0.00242418,  0.01861038, -0.02912029,
        0.03863594, -0.02165704, -0.01506143,  0.10428784, -0.01266036,
       -0.10947697, -0.01743359, -0.02782926, -0.04469914,  0.06875158,
        0.16116229,  0.02210801,  0.01531388, -0.00431099]), array([-9.67347965e-02,  2.45961177e-02,  1.30449307e-02,  5.10112066e-03,
       -4.68976394e-02,  1.50339394e-02, -1.03220998e-04, -1.05491243e-01,
       -1.21434594e-02, -5.02849029e-02,  2.96018977e-02, -1.56038951e-02,
       -9.67347965e-02, -2.45211447e-02,  2.02176376e-02, -4.02867598e-02,
        8.92849344e-03,  4.69514826e-03, -1.12534316e-02, -9.67347965e-02,
        1.07044933e-02,  3.72642142e-02,  1.30646830e-03, -8.44802500e-02,
       -4.43425707e-02,  5.10112066e-03,  5.69747451e-02,  4.51470105e-02,
        3.34496382e-02, -1.89534497e-02, -1.01866009e-01,  2.95727023e-02,
        5.69747451e-02,  1.19842062e-02,  2.96018977e-02, -2.31330036e-02,
       -4.01376793e-02,  4.73317216e-02,  1.18847017e-03, -2.12117541e-02,
        2.69468632e-03,  2.45961177e-02,  5.33339172e-02,  2.67869707e-01,
        3.34496382e-02, -5.71047394e-02,  2.93034663e-02, -9.67347965e-02,
        4.73317216e-02,  5.69747451e-02, -1.03220998e-04,  4.51470105e-02,
       -1.24392977e-01, -6.01829698e-02, -3.72354708e-02, -9.23588717e-02,
        2.93034663e-02, -4.43425707e-02, -2.33065743e-02,  2.93034663e-02,
        5.44322368e-02,  1.89129482e-02,  6.15060723e-02,  2.69468632e-03,
       -7.89171895e-02, -1.49714156e-01, -2.12117541e-02, -1.21434594e-02,
        3.19039335e-02,  3.34496382e-02,  2.45961177e-02,  3.19039335e-02,
       -1.05491243e-01,  1.30449307e-02,  3.34496382e-02, -1.02616436e-02,
       -7.89171895e-02, -3.42078007e-02, -1.12534316e-02,  1.63590619e-02,
        4.34409844e-03,  3.38112461e-01,  2.96018977e-02, -3.88442988e-03,
       -8.52488161e-02,  2.36485980e-02, -9.44877311e-03,  2.96018977e-02,
       -3.72354708e-02, -3.72354708e-02,  5.44322368e-02, -3.12607175e-02,
       -4.68976394e-02,  2.36485980e-02,  1.06542546e-01,  5.10112066e-03,
       -3.42078007e-02,  1.55720910e-02,  5.69747451e-02,  5.10112066e-03,
       -4.01376793e-02,  3.34496382e-02,  5.33339172e-02,  1.06542546e-01,
        1.30449307e-02, -1.35786258e-01,  3.80948814e-03,  1.50339394e-02,
       -1.12534316e-02, -7.89171895e-02, -1.71450257e-01,  2.93034663e-02,
       -2.13000737e-02, -1.03220998e-04, -3.88442988e-03,  4.73317216e-02,
       -3.12607175e-02,  7.33451850e-02, -1.82135601e-02, -1.03220998e-04,
        2.45961177e-02,  9.60292080e-03,  1.29169117e-03,  3.34496382e-02,
        2.02176376e-02, -5.02849029e-02, -5.02849029e-02, -8.52488161e-02,
        4.34409844e-03, -1.12534316e-02,  2.26675336e-01, -1.12534316e-02,
        1.30646830e-03, -1.24904127e-01,  1.50339394e-02,  2.84232294e-02,
       -1.05491243e-01,  4.73317216e-02,  2.02176376e-02,  4.46229766e-03,
       -1.12534316e-02, -8.70922243e-02, -2.13275684e-04,  4.51470105e-02,
       -3.42078007e-02, -2.21267104e-02, -4.02867598e-02,  5.44322368e-02,
       -1.21434594e-02, -4.68976394e-02,  2.96018977e-02,  3.93894220e-02,
        3.66210436e-02,  5.44322368e-02,  2.96018977e-02,  1.19842062e-02,
       -7.89171895e-02,  2.03073938e-02, -2.33065743e-02, -9.00410302e-02,
       -1.89534497e-02,  3.60080632e-02, -1.05491243e-01, -1.02646907e-02,
       -6.62568495e-02, -2.28631345e-01, -2.78143259e-02,  7.80808348e-02,
       -5.02849029e-02,  1.89129482e-02,  2.96018977e-02,  2.02176376e-02,
       -8.44802500e-02,  4.34409844e-03,  3.66210436e-02,  7.68195190e-02,
       -4.02867598e-02, -6.44653399e-02,  9.60292080e-03, -1.21434594e-02,
        9.60292080e-03,  1.66174922e-02, -6.01829698e-02,  2.36485980e-02,
        2.36766064e-01, -6.44653399e-02, -2.02226040e-01,  1.50796404e-01,
       -5.02849029e-02, -8.52488161e-02,  7.85518866e-02,  2.02176376e-02,
       -1.21434594e-02, -1.05491243e-01, -3.88442988e-03, -1.02889207e-02,
        2.45961177e-02,  3.93894220e-02, -5.12430926e-02,  4.39471674e-02,
       -5.15811066e-02, -7.68323712e-02, -8.11054401e-02, -1.05491243e-01,
        3.34918062e-02,  3.66210436e-02, -2.74512293e-02, -1.89534497e-02,
       -4.01376793e-02, -4.02000127e-02, -1.21434594e-02, -4.01376793e-02,
       -2.84905311e-02,  5.33339172e-02, -1.21434594e-02, -2.99918051e-03,
        1.50339394e-02, -3.88442988e-03, -1.57293979e-01,  4.39471674e-02,
       -1.29001175e-03,  2.45961177e-02,  2.93034663e-02,  3.34496382e-02,
       -9.59614358e-02, -4.68976394e-02, -6.44653399e-02,  6.18072788e-02,
       -3.72354708e-02]), array([ 0.00115163, -0.02693859,  0.03936162,  0.01981312, -0.03838959,
        0.00094662,  0.03705025, -0.06770811, -0.03445145,  0.05914077,
       -0.01812122, -0.0602252 ,  0.00115163, -0.00929365, -0.03301548,
        0.0146722 , -0.01656526,  0.04404239, -0.08471002,  0.00115163,
       -0.01752638, -0.04192789,  0.01793458, -0.02750016,  0.04035074,
        0.01981312, -0.05602407,  0.14864955, -0.00727161,  0.04600512,
        0.05340193,  0.19467562, -0.05602407,  0.01273813, -0.01812122,
        0.15986832, -0.0678509 , -0.01288584,  0.06059609,  0.04651597,
       -0.03322383, -0.02693859,  0.00352991, -0.0209938 , -0.00727161,
       -0.02484034, -0.10867343,  0.00115163, -0.01288584, -0.05602407,
        0.03705025,  0.14864955, -0.13783049, -0.0516781 ,  0.00886346,
       -0.19144135, -0.10867343,  0.04035074,  0.01554515, -0.10867343,
       -0.02403107, -0.00947314,  0.2469958 , -0.03322383,  0.06388164,
        0.0202082 ,  0.04651597, -0.03445145, -0.03497481, -0.00727161,
       -0.02693859, -0.03497481, -0.06770811,  0.03936162, -0.00727161,
        0.05490677,  0.06388164, -0.06834174, -0.08471002,  0.09834625,
        0.06980764, -0.10631202, -0.01812122,  0.03879716, -0.00219595,
       -0.00196273, -0.06767528, -0.01812122,  0.00886346,  0.00886346,
       -0.02403107, -0.03269368, -0.03838959, -0.00196273, -0.00530546,
        0.01981312, -0.06834174,  0.03761942, -0.05602407,  0.01981312,
       -0.0678509 , -0.00727161,  0.00352991, -0.00530546,  0.03936162,
       -0.04402105, -0.12292092,  0.00094662, -0.08471002,  0.06388164,
       -0.08063158, -0.10867343, -0.03357108,  0.03705025,  0.03879716,
       -0.01288584, -0.03269368, -0.03350421, -0.01449157,  0.03705025,
       -0.02693859,  0.00087634,  0.02354584, -0.00727161, -0.03301548,
        0.05914077,  0.05914077, -0.00219595,  0.06980764, -0.08471002,
        0.03864267, -0.08471002,  0.01793458, -0.09425836,  0.00094662,
       -0.00966244, -0.06770811, -0.01288584, -0.03301548,  0.0172071 ,
       -0.08471002,  0.0465063 ,  0.01446043,  0.14864955, -0.06834174,
        0.07488441,  0.0146722 , -0.02403107, -0.03445145, -0.03838959,
       -0.01812122,  0.0367598 ,  0.01068593, -0.02403107, -0.01812122,
        0.01273813,  0.06388164,  0.00678239,  0.01554515, -0.05568982,
        0.04600512,  0.12038434, -0.06770811, -0.13473857,  0.05027433,
        0.08408983, -0.08634134, -0.0259938 ,  0.05914077, -0.00947314,
       -0.01812122, -0.03301548, -0.02750016,  0.06980764,  0.01068593,
       -0.13639228,  0.0146722 ,  0.02240415,  0.00087634, -0.03445145,
        0.00087634,  0.09719032, -0.0516781 , -0.00196273, -0.06739821,
        0.02240415, -0.06655648, -0.04329534,  0.05914077, -0.00219595,
       -0.13786319, -0.03301548, -0.03445145, -0.06770811,  0.03879716,
       -0.06661132, -0.02693859,  0.0367598 , -0.09899576, -0.05507002,
       -0.00573884,  0.01586274, -0.10673133, -0.06770811,  0.36989231,
        0.01068593, -0.1556146 ,  0.04600512, -0.0678509 , -0.0332866 ,
       -0.03445145, -0.0678509 ,  0.060158  ,  0.00352991, -0.03445145,
        0.02232754,  0.00094662,  0.03879716,  0.18871836, -0.05507002,
        0.03395547, -0.02693859, -0.10867343, -0.00727161, -0.00935141,
       -0.03838959,  0.02240415, -0.10269988,  0.00886346]), array([ 0.01957606,  0.00548316,  0.02496458,  0.00641196, -0.01040886,
       -0.0243201 , -0.0009729 ,  0.01848708,  0.04104758,  0.10934036,
        0.03983315, -0.05097027,  0.01957606,  0.07747277,  0.02872662,
       -0.01801427, -0.06735031, -0.05305698,  0.03424047,  0.01957606,
        0.01529405, -0.0635687 , -0.01331304,  0.15805526,  0.00846987,
        0.00641196,  0.03490932,  0.04355647, -0.14482308, -0.05381954,
        0.12755714,  0.01216061,  0.03490932, -0.04695693,  0.03983315,
       -0.00858281,  0.14958539,  0.00028024, -0.01444245,  0.01494426,
        0.03301754,  0.00548316, -0.07428077, -0.09759718, -0.14482308,
        0.00073913, -0.07318197,  0.01957606,  0.00028024,  0.03490932,
       -0.0009729 ,  0.04355647, -0.05290914, -0.02404911,  0.01347359,
        0.02743936, -0.07318197,  0.00846987,  0.04465188, -0.07318197,
        0.007832  ,  0.0107882 ,  0.058691  ,  0.03301754, -0.01760495,
       -0.17184171,  0.01494426,  0.04104758,  0.02980846, -0.14482308,
        0.00548316,  0.02980846,  0.01848708,  0.02496458, -0.14482308,
        0.06961647, -0.01760495,  0.00360775,  0.03424047,  0.01513453,
       -0.00954029,  0.06216846,  0.03983315, -0.02044757, -0.0909926 ,
        0.00076257,  0.07406512,  0.03983315,  0.01347359,  0.01347359,
        0.007832  , -0.04540053, -0.01040886,  0.00076257,  0.02028542,
        0.00641196,  0.00360775,  0.00309877,  0.03490932,  0.00641196,
        0.14958539, -0.14482308, -0.07428077,  0.02028542,  0.02496458,
       -0.06097977,  0.2101897 , -0.0243201 ,  0.03424047, -0.01760495,
       -0.04553444, -0.07318197, -0.21505672, -0.0009729 , -0.02044757,
        0.00028024, -0.04540053,  0.0186202 , -0.13769556, -0.0009729 ,
        0.00548316, -0.02085192, -0.01346955, -0.14482308,  0.02872662,
        0.10934036,  0.10934036, -0.0909926 , -0.00954029,  0.03424047,
        0.06857281,  0.03424047, -0.01331304, -0.00302976, -0.0243201 ,
        0.025541  ,  0.01848708,  0.00028024,  0.02872662,  0.00552339,
        0.03424047,  0.04940908,  0.001433  ,  0.04355647,  0.00360775,
       -0.09274154, -0.01801427,  0.007832  ,  0.04104758, -0.01040886,
        0.03983315,  0.01248109,  0.00156177,  0.007832  ,  0.03983315,
       -0.04695693, -0.01760495,  0.01733726,  0.04465188, -0.05025999,
       -0.05381954, -0.03823969,  0.01848708, -0.15201722, -0.10886652,
       -0.18944666,  0.02785415,  0.00859457,  0.10934036,  0.0107882 ,
        0.03983315,  0.02872662,  0.15805526, -0.00954029,  0.00156177,
        0.00251718, -0.01801427, -0.08084912, -0.02085192,  0.04104758,
       -0.02085192, -0.0223283 , -0.02404911,  0.00076257, -0.06256502,
       -0.08084912,  0.03806314,  0.05522242,  0.10934036, -0.0909926 ,
       -0.1837076 ,  0.02872662,  0.04104758,  0.01848708, -0.02044757,
        0.02885135,  0.00548316,  0.01248109, -0.07312733,  0.06060432,
        0.01821678, -0.01526656, -0.00680111,  0.01848708,  0.01066365,
        0.00156177,  0.16478917, -0.05381954,  0.14958539, -0.05645343,
        0.04104758,  0.14958539, -0.00345363, -0.07428077,  0.04104758,
        0.06198915, -0.0243201 , -0.02044757,  0.1756494 ,  0.06060432,
       -0.15720513,  0.00548316, -0.07318197, -0.14482308, -0.10437995,
       -0.01040886, -0.08084912,  0.12118789,  0.01347359]), array([-3.97631507e-02,  1.91649096e-02,  2.54565369e-02,  2.15724648e-03,
       -7.96436840e-02, -7.13212987e-02,  4.55569025e-02,  6.67255468e-02,
       -1.19806321e-01,  1.54061025e-02,  1.66039292e-01,  3.85745858e-02,
       -3.97631507e-02, -5.21586818e-02, -4.89071557e-02,  1.70855681e-02,
       -7.43784369e-02, -1.15295751e-01,  5.92553577e-02, -3.97631507e-02,
       -2.61468051e-02, -1.70001192e-02,  1.24826750e-02, -7.64772640e-02,
       -5.14973877e-02,  2.15724648e-03,  7.07557903e-02,  8.66158564e-03,
       -2.22197551e-02, -1.21718445e-01, -9.79729102e-03, -3.73584743e-03,
        7.07557903e-02,  8.65694286e-03,  1.66039292e-01, -1.07372219e-01,
       -2.49798763e-02, -2.45189349e-02,  6.60026831e-02,  5.97234159e-04,
       -6.51861237e-02,  1.91649096e-02,  6.06177036e-02, -1.53966639e-01,
       -2.22197551e-02, -9.19195398e-02,  2.67341503e-03, -3.97631507e-02,
       -2.45189349e-02,  7.07557903e-02,  4.55569025e-02,  8.66158564e-03,
       -1.68886647e-01,  1.57995465e-03,  2.49718231e-03, -1.77355309e-02,
        2.67341503e-03, -5.14973877e-02, -2.12542765e-02,  2.67341503e-03,
        1.94807562e-02,  2.94841487e-02,  8.47118393e-03, -6.51861237e-02,
        2.43746878e-03, -5.42223245e-03,  5.97234159e-04, -1.19806321e-01,
       -8.51655679e-03, -2.22197551e-02,  1.91649096e-02, -8.51655679e-03,
        6.67255468e-02,  2.54565369e-02, -2.22197551e-02,  4.20226037e-03,
        2.43746878e-03,  2.65279538e-03,  5.92553577e-02, -1.90401709e-04,
        1.22767872e-02, -2.20323899e-01,  1.66039292e-01,  3.38403317e-02,
       -2.05978730e-02,  6.42269397e-03, -1.84992445e-01,  1.66039292e-01,
        2.49718231e-03,  2.49718231e-03,  1.94807562e-02,  8.59590605e-02,
       -7.96436840e-02,  6.42269397e-03, -8.43972579e-02,  2.15724648e-03,
        2.65279538e-03,  3.11200591e-03,  7.07557903e-02,  2.15724648e-03,
       -2.49798763e-02, -2.22197551e-02,  6.06177036e-02, -8.43972579e-02,
        2.54565369e-02,  3.60416275e-02, -5.30028618e-02, -7.13212987e-02,
        5.92553577e-02,  2.43746878e-03, -3.18417546e-02,  2.67341503e-03,
        1.90308181e-01,  4.55569025e-02,  3.38403317e-02, -2.45189349e-02,
        8.59590605e-02,  4.89649049e-02,  1.63662332e-01,  4.55569025e-02,
        1.91649096e-02,  1.23613853e-02,  2.04457806e-02, -2.22197551e-02,
       -4.89071557e-02,  1.54061025e-02,  1.54061025e-02, -2.05978730e-02,
        1.22767872e-02,  5.92553577e-02,  1.05672272e-01,  5.92553577e-02,
        1.24826750e-02, -3.11690509e-02, -7.13212987e-02, -6.15553848e-04,
        6.67255468e-02, -2.45189349e-02, -4.89071557e-02,  1.83627528e-03,
        5.92553577e-02, -6.35012637e-02,  1.54016453e-02,  8.66158564e-03,
        2.65279538e-03, -9.73967043e-02,  1.70855681e-02,  1.94807562e-02,
       -1.19806321e-01, -7.96436840e-02,  1.66039292e-01,  2.35442493e-02,
        3.93398732e-02,  1.94807562e-02,  1.66039292e-01,  8.65694286e-03,
        2.43746878e-03,  1.39540763e-02, -2.12542765e-02, -1.24635609e-02,
       -1.21718445e-01, -9.50621897e-02,  6.67255468e-02, -2.83759725e-02,
       -3.96626711e-02, -2.98476368e-03,  9.30018379e-02,  2.59034501e-02,
        1.54061025e-02,  2.94841487e-02,  1.66039292e-01, -4.89071557e-02,
       -7.64772640e-02,  1.22767872e-02,  3.93398732e-02, -1.48924678e-02,
        1.70855681e-02,  1.51756405e-02,  1.23613853e-02, -1.19806321e-01,
        1.23613853e-02, -8.63780271e-03,  1.57995465e-03,  6.42269397e-03,
       -1.60263163e-01,  1.51756405e-02,  2.69623962e-02,  1.13780796e-01,
        1.54061025e-02, -2.05978730e-02, -5.66976129e-03, -4.89071557e-02,
       -1.19806321e-01,  6.67255468e-02,  3.38403317e-02, -1.32682494e-02,
        1.91649096e-02,  2.35442493e-02,  5.64615811e-02, -2.80229856e-02,
       -2.52033935e-02, -1.40492684e-02, -7.69908886e-02,  6.67255468e-02,
       -2.20924737e-02,  3.93398732e-02,  3.29561987e-02, -1.21718445e-01,
       -2.49798763e-02,  1.94096763e-02, -1.19806321e-01, -2.49798763e-02,
        5.45064246e-02,  6.06177036e-02, -1.19806321e-01, -7.30020019e-03,
       -7.13212987e-02,  3.38403317e-02, -6.79965708e-02, -2.80229856e-02,
       -6.13557576e-02,  1.91649096e-02,  2.67341503e-03, -2.22197551e-02,
       -2.13969084e-01, -7.96436840e-02,  1.51756405e-02, -1.05222640e-01,
        2.49718231e-03])])
        whiten = False
        explained_variance = np.array([0.4288453795734833, 0.3721189228871177, 0.25383040370850474, 0.2384823571607103, 0.22492764966804676, 0.22028441755445777, 0.2025577877961529, 0.19179620044690676, 0.17852799084304827, 0.1665982998249642, 0.16445481443529833, 0.15542024300104537, 0.14646864799643725, 0.14262200479249856, 0.13655304713264277, 0.13041385502687441, 0.12255550674900666])
        X = X - mean

    X_transformed = np.dot(X, components.T)
    if whiten:
        X_transformed /= np.sqrt(explained_variance)
    return X_transformed

# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="Class"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="Class"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'1':0,'2':1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def single_classify(row):
    #inits
    x = row
    o = [0] * num_output_logits


    #Nueron Equations
    h_0 = max((((2.681161 * float(x[0]))+ (3.8000703 * float(x[1]))+ (-0.69910884 * float(x[2]))+ (1.7696617 * float(x[3]))+ (-3.8925574 * float(x[4]))+ (1.7799039 * float(x[5]))+ (3.3447232 * float(x[6]))+ (0.47186396 * float(x[7]))+ (-0.52580523 * float(x[8]))+ (-2.2755094 * float(x[9]))+ (0.3641922 * float(x[10]))+ (0.21963705 * float(x[11]))+ (1.9184672 * float(x[12]))+ (-0.41113463 * float(x[13]))+ (0.7808147 * float(x[14]))+ (2.7975302 * float(x[15]))+ (-0.69128644 * float(x[16]))) + 0.83212674), 0)
    h_1 = max((((0.0025613985 * float(x[0]))+ (1.4718877 * float(x[1]))+ (1.9698092 * float(x[2]))+ (-0.68494815 * float(x[3]))+ (0.8665745 * float(x[4]))+ (-1.0551792 * float(x[5]))+ (-0.37357584 * float(x[6]))+ (-0.7945387 * float(x[7]))+ (0.45131052 * float(x[8]))+ (-1.4365522 * float(x[9]))+ (1.0381119 * float(x[10]))+ (-0.97168046 * float(x[11]))+ (0.2925324 * float(x[12]))+ (1.5739851 * float(x[13]))+ (-0.8789945 * float(x[14]))+ (1.2099669 * float(x[15]))+ (-0.67533296 * float(x[16]))) + -0.80770385), 0)
    o[0] = (4.4356084 * h_0)+ (1.5314302 * h_1) + -6.133226

    

    #Output Decision Rule
    if num_output_logits==1:
        return o[0]>=0
    else:
        return argmax(o)


def classify(arr, transform=False):
    #apply transformation if necessary
    if transform:
        arr[:,:-1] = transform(arr[:,:-1])
    #init
    w_h = np.array([[2.6811609268188477, 3.800070285797119, -0.6991088390350342, 1.7696616649627686, -3.892557382583618, 1.7799038887023926, 3.3447232246398926, 0.4718639552593231, -0.5258052349090576, -2.2755093574523926, 0.3641921877861023, 0.21963705122470856, 1.9184671640396118, -0.41113463044166565, 0.7808147072792053, 2.797530174255371, -0.6912864446640015], [0.002561398549005389, 1.4718877077102661, 1.9698091745376587, -0.6849481463432312, 0.8665745258331299, -1.055179238319397, -0.3735758364200592, -0.794538676738739, 0.45131051540374756, -1.4365521669387817, 1.038111925125122, -0.9716804623603821, 0.29253241419792175, 1.5739850997924805, -0.8789945244789124, 1.2099668979644775, -0.6753329634666443]])
    b_h = np.array([0.8321267366409302, -0.8077038526535034])
    w_o = np.array([[4.435608386993408, 1.5314302444458008]])
    b_o = np.array(-6.133225917816162)

    #Hidden Layer
    h = np.dot(arr, w_h.T) + b_h
    
    relu = np.maximum(h, np.zeros_like(h))


    #Output
    out = np.dot(relu, w_o.T) + b_o
    if num_output_logits == 1:
        return (out >= 0).astype('int').reshape(-1)
    else:
        return (np.argmax(out, axis=1)).reshape(-1)



def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(reader, None) + ["Prediction"]))
        
        
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(single_classify(arr[i])), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            print(','.join(row))


def Validate(cleanarr):
    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs
    


# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile',action='store_true',help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()


    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')


    #Normalize
    cleanarr = Normalize(cleanarr)


    #Transform
    if transform_true:
        if args.validate:
            trans = transform(cleanarr[:, :-1])
            cleanarr = np.concatenate((trans, cleanarr[:, -1].reshape(-1, 1)), axis = 1)
        else:
            cleanarr = transform(cleanarr)


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile, get_key, classmapping)


    #Validate
    else:
        classifier_type = 'NN'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds = Validate(cleanarr)
        else:
            count, correct_count, numeachclass, preds = Validate(cleanarr)
        #Correct Labels
        true_labels = cleanarr[:, -1]


        #Report Metrics
        model_cap = 39
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


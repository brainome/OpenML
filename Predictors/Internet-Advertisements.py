#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is 
# licensed under GNU GPL v2.0 or higher. For details, please see: 
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.93 Table Compiler v0.94.
# Invocation: btc https://www.openml.org/data/get_csv/18140371/phpPIHVvG -o Predictors/Internet-Advertisements_NN.py -target class -stopat 98.05 -f NN -e 20 --yes
# Total compiler execution time: 0:02:44.23. Finished on: Apr-22-2020 04:14:13.
# This source code requires Python 3.
#
"""
System Type:                        Binary classifier
Best-guess accuracy:                86.00%
Model accuracy:                     98.47% (3229/3279 correct)
Improvement over best guess:        12.47% (of possible 14.0%)
Model capacity (MEC):               6241 bits
Generalization ratio:               0.51 bits/bit
Model efficiency:                   0.00%/parameter
System behavior
True Negatives:                     13.08% (429/3279)
True Positives:                     85.39% (2800/3279)
False Negatives:                    0.61% (20/3279)
False Positives:                    0.91% (30/3279)
True Pos. Rate/Sensitivity/Recall:  0.99
True Neg. Rate/Specificity:         0.93
Precision:                          0.99
F-1 Measure:                        0.99
False Negative Rate/Miss Rate:      0.01
Critical Success Index:             0.98

Warning: The prediction model overfits the training data.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "phpPIHVvG.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 1558
n_classes = 2


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="class"


    if (testfile):
        target=''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless==False):
                header=next(reader, None)
                try:
                    if (target!=''): 
                        hc=header.index(target)
                    else:
                        hc=len(header)-1
                        target=header[hc]
                except:
                    raise NameError("Target '"+target+"' not found! Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=header.index(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute '"+ignorecolumns[i]+"' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '"+ignorecolumns[i]+"' not found in header. Header must be same as in file passed to btc.")
                for i in range(0,len(header)):      
                    if (i==hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i]+",", end = '', file=outputfile)
                print(header[hc],file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"'+row[name]+'"'+",",end = '', file=outputfile)
                        else:
                            print (row[name]+",",end = '', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target!=""): 
                        hc=int(target)
                    else:
                        hc=-1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0,len(ignorecolumns)):
                    try:
                        col=int(ignorecolumns[i])
                        if (col==hc):
                            raise ValueError("Attribute "+str(col)+" is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc==-1):
                        hc=len(row)-1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0,len(row)):
                        if (i in il):
                            continue
                        if (i==hc):
                            continue
                        if (',' in row[i]):
                            print ('"'+row[i]+'"'+",",end = '', file=outputfile)
                        else:
                            print(row[i]+",",end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'ad': 0, 'noad': 1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def classify(row):
    x = row
    o = [0] * num_output_logits
    h_0 = max((((-0.029193504 * float(x[0]))+ (0.1284955 * float(x[1]))+ (0.11536044 * float(x[2]))+ (-0.10956672 * float(x[3]))+ (0.5385197 * float(x[4]))+ (0.008477323 * float(x[5]))+ (0.9532256 * float(x[6]))+ (1.2675457 * float(x[7]))+ (0.27181152 * float(x[8]))+ (-1.2177109 * float(x[9]))+ (0.27729258 * float(x[10]))+ (-0.22478615 * float(x[11]))+ (0.85119325 * float(x[12]))+ (0.13165207 * float(x[13]))+ (-1.186616 * float(x[14]))+ (-0.4546339 * float(x[15]))+ (1.1317086 * float(x[16]))+ (0.58605695 * float(x[17]))+ (0.89652616 * float(x[18]))+ (0.9572367 * float(x[19]))+ (0.32214993 * float(x[20]))+ (-0.35158986 * float(x[21]))+ (0.7980598 * float(x[22]))+ (-0.52307236 * float(x[23]))+ (0.27984205 * float(x[24]))+ (-0.4996111 * float(x[25]))+ (0.7375813 * float(x[26]))+ (0.043696642 * float(x[27]))+ (0.12857436 * float(x[28]))+ (0.3647799 * float(x[29]))+ (0.627235 * float(x[30]))+ (1.4813491 * float(x[31]))+ (1.5929168 * float(x[32]))+ (-0.30800003 * float(x[33]))+ (0.5239893 * float(x[34]))+ (0.3981408 * float(x[35]))+ (-0.05085608 * float(x[36]))+ (0.8874962 * float(x[37]))+ (1.3532206 * float(x[38]))+ (1.9948415 * float(x[39]))+ (0.6093476 * float(x[40]))+ (0.3952624 * float(x[41]))+ (-0.8439079 * float(x[42]))+ (0.6217161 * float(x[43]))+ (0.48479807 * float(x[44]))+ (-0.04858671 * float(x[45]))+ (-0.59862506 * float(x[46]))+ (0.14526129 * float(x[47]))+ (-0.08992704 * float(x[48]))+ (0.030949747 * float(x[49])))+ ((0.4046915 * float(x[50]))+ (1.3469806 * float(x[51]))+ (-0.57562697 * float(x[52]))+ (-0.5822465 * float(x[53]))+ (-0.13560426 * float(x[54]))+ (0.48082286 * float(x[55]))+ (-0.11453817 * float(x[56]))+ (-0.067378454 * float(x[57]))+ (-0.583256 * float(x[58]))+ (-0.76379055 * float(x[59]))+ (-0.98976946 * float(x[60]))+ (0.3183322 * float(x[61]))+ (-0.7236341 * float(x[62]))+ (-0.1149114 * float(x[63]))+ (-0.010271114 * float(x[64]))+ (0.36263222 * float(x[65]))+ (-0.6801265 * float(x[66]))+ (1.2548879 * float(x[67]))+ (-0.8078032 * float(x[68]))+ (0.5920438 * float(x[69]))+ (-0.3532502 * float(x[70]))+ (1.2536924 * float(x[71]))+ (0.9449751 * float(x[72]))+ (0.404304 * float(x[73]))+ (-0.3426237 * float(x[74]))+ (-0.14368278 * float(x[75]))+ (-0.20049334 * float(x[76]))+ (0.12292856 * float(x[77]))+ (-0.10812419 * float(x[78]))+ (0.03793599 * float(x[79]))+ (0.35601455 * float(x[80]))+ (-0.048102286 * float(x[81]))+ (0.91559243 * float(x[82]))+ (0.13320291 * float(x[83]))+ (-0.46922103 * float(x[84]))+ (0.04649611 * float(x[85]))+ (-1.1362728 * float(x[86]))+ (0.29541558 * float(x[87]))+ (1.07185 * float(x[88]))+ (-0.36286208 * float(x[89]))+ (1.1704894 * float(x[90]))+ (-1.3502936 * float(x[91]))+ (1.4222344 * float(x[92]))+ (-0.42118782 * float(x[93]))+ (-1.3717428 * float(x[94]))+ (-0.41342127 * float(x[95]))+ (-1.0409883 * float(x[96]))+ (0.65788007 * float(x[97]))+ (-0.99060905 * float(x[98]))+ (0.35563308 * float(x[99])))+ ((0.51851565 * float(x[100]))+ (1.1114843 * float(x[101]))+ (0.66569227 * float(x[102]))+ (-0.0988097 * float(x[103]))+ (-1.0155563 * float(x[104]))+ (0.56295925 * float(x[105]))+ (0.6508185 * float(x[106]))+ (-0.55383676 * float(x[107]))+ (0.905498 * float(x[108]))+ (0.05101971 * float(x[109]))+ (0.2567155 * float(x[110]))+ (1.3885385 * float(x[111]))+ (-0.10581125 * float(x[112]))+ (0.24988188 * float(x[113]))+ (0.4341077 * float(x[114]))+ (1.2928545 * float(x[115]))+ (0.16254574 * float(x[116]))+ (0.7634707 * float(x[117]))+ (0.99270165 * float(x[118]))+ (0.7506747 * float(x[119]))+ (0.34095782 * float(x[120]))+ (0.91216725 * float(x[121]))+ (0.2879804 * float(x[122]))+ (-0.14893465 * float(x[123]))+ (0.7177149 * float(x[124]))+ (-0.12594494 * float(x[125]))+ (-0.2510445 * float(x[126]))+ (0.10982565 * float(x[127]))+ (-0.3050663 * float(x[128]))+ (0.63800013 * float(x[129]))+ (0.22407489 * float(x[130]))+ (-0.7290519 * float(x[131]))+ (-0.40343535 * float(x[132]))+ (0.42864802 * float(x[133]))+ (-0.092803225 * float(x[134]))+ (0.32259998 * float(x[135]))+ (-0.23918204 * float(x[136]))+ (0.09368509 * float(x[137]))+ (-0.022381235 * float(x[138]))+ (-0.08252245 * float(x[139]))+ (-0.26487625 * float(x[140]))+ (-0.12827015 * float(x[141]))+ (0.9296522 * float(x[142]))+ (0.61238796 * float(x[143]))+ (0.6481557 * float(x[144]))+ (0.72516173 * float(x[145]))+ (0.93684494 * float(x[146]))+ (0.7362972 * float(x[147]))+ (0.997694 * float(x[148]))+ (-0.5956674 * float(x[149])))+ ((0.9499341 * float(x[150]))+ (-0.37570268 * float(x[151]))+ (0.36756343 * float(x[152]))+ (-0.82657945 * float(x[153]))+ (0.8216874 * float(x[154]))+ (0.05876381 * float(x[155]))+ (0.32554182 * float(x[156]))+ (0.3464913 * float(x[157]))+ (-1.1522173 * float(x[158]))+ (0.39485756 * float(x[159]))+ (0.08973681 * float(x[160]))+ (0.4441112 * float(x[161]))+ (0.7384369 * float(x[162]))+ (0.86983967 * float(x[163]))+ (1.5472753 * float(x[164]))+ (0.27813172 * float(x[165]))+ (-0.27910745 * float(x[166]))+ (-1.462457 * float(x[167]))+ (-1.3948662 * float(x[168]))+ (0.042073213 * float(x[169]))+ (-0.65817356 * float(x[170]))+ (-0.4705561 * float(x[171]))+ (-0.57389826 * float(x[172]))+ (1.3219138 * float(x[173]))+ (0.34214076 * float(x[174]))+ (-1.9099047 * float(x[175]))+ (0.9926066 * float(x[176]))+ (0.8354378 * float(x[177]))+ (-0.71603876 * float(x[178]))+ (-0.13996352 * float(x[179]))+ (0.076098904 * float(x[180]))+ (-0.120126784 * float(x[181]))+ (-0.3806921 * float(x[182]))+ (0.4433872 * float(x[183]))+ (0.8823523 * float(x[184]))+ (-0.3332286 * float(x[185]))+ (-0.34975857 * float(x[186]))+ (-0.08387904 * float(x[187]))+ (-0.2303041 * float(x[188]))+ (-0.7594317 * float(x[189]))+ (-0.8400577 * float(x[190]))+ (-0.35151502 * float(x[191]))+ (-0.33640802 * float(x[192]))+ (0.39988095 * float(x[193]))+ (-0.0039861305 * float(x[194]))+ (-0.26573846 * float(x[195]))+ (0.34438163 * float(x[196]))+ (-0.7474977 * float(x[197]))+ (-0.13116676 * float(x[198]))+ (0.20294443 * float(x[199])))+ ((0.549189 * float(x[200]))+ (0.09573157 * float(x[201]))+ (0.29409578 * float(x[202]))+ (-0.85563076 * float(x[203]))+ (-0.741756 * float(x[204]))+ (0.35878554 * float(x[205]))+ (0.19558592 * float(x[206]))+ (0.23063682 * float(x[207]))+ (0.7933426 * float(x[208]))+ (1.1171207 * float(x[209]))+ (-0.56620604 * float(x[210]))+ (0.7298349 * float(x[211]))+ (-0.8953526 * float(x[212]))+ (-0.8122513 * float(x[213]))+ (0.5167573 * float(x[214]))+ (0.029093223 * float(x[215]))+ (-0.2330722 * float(x[216]))+ (0.6781771 * float(x[217]))+ (0.96140176 * float(x[218]))+ (1.0936323 * float(x[219]))+ (1.2372266 * float(x[220]))+ (-0.45291594 * float(x[221]))+ (0.59609365 * float(x[222]))+ (-0.6287281 * float(x[223]))+ (0.6262293 * float(x[224]))+ (0.37497655 * float(x[225]))+ (-0.14162129 * float(x[226]))+ (0.8956768 * float(x[227]))+ (0.5226109 * float(x[228]))+ (-0.49211672 * float(x[229]))+ (-0.071830824 * float(x[230]))+ (1.5482897 * float(x[231]))+ (-1.1592003 * float(x[232]))+ (-0.28574833 * float(x[233]))+ (0.13808931 * float(x[234]))+ (-0.49657983 * float(x[235]))+ (0.083653614 * float(x[236]))+ (-1.0018593 * float(x[237]))+ (0.1735687 * float(x[238]))+ (0.97444105 * float(x[239]))+ (-0.48883438 * float(x[240]))+ (1.0030607 * float(x[241]))+ (-0.14808881 * float(x[242]))+ (1.254373 * float(x[243]))+ (-0.07457753 * float(x[244]))+ (-0.08916113 * float(x[245]))+ (-1.3418127 * float(x[246]))+ (-0.58087194 * float(x[247]))+ (-0.2984713 * float(x[248]))+ (0.29900047 * float(x[249])))+ ((0.8808639 * float(x[250]))+ (0.0017843094 * float(x[251]))+ (0.49732724 * float(x[252]))+ (1.6522495 * float(x[253]))+ (-0.83315516 * float(x[254]))+ (0.10438494 * float(x[255]))+ (0.4767673 * float(x[256]))+ (1.0476174 * float(x[257]))+ (-0.41570494 * float(x[258]))+ (0.13607794 * float(x[259]))+ (-0.66296816 * float(x[260]))+ (-0.869261 * float(x[261]))+ (0.9630485 * float(x[262]))+ (0.2772431 * float(x[263]))+ (0.8282302 * float(x[264]))+ (1.1609042 * float(x[265]))+ (-0.23167388 * float(x[266]))+ (-1.4279639 * float(x[267]))+ (-0.5846186 * float(x[268]))+ (0.3685432 * float(x[269]))+ (0.47365597 * float(x[270]))+ (0.06537679 * float(x[271]))+ (0.9231403 * float(x[272]))+ (0.3082132 * float(x[273]))+ (-0.32651514 * float(x[274]))+ (0.9183966 * float(x[275]))+ (1.3162193 * float(x[276]))+ (0.35877538 * float(x[277]))+ (0.055749822 * float(x[278]))+ (-0.40828642 * float(x[279]))+ (0.6978871 * float(x[280]))+ (0.24246305 * float(x[281]))+ (-0.36588636 * float(x[282]))+ (-0.20765364 * float(x[283]))+ (-1.534966 * float(x[284]))+ (1.2603688 * float(x[285]))+ (0.2969682 * float(x[286]))+ (-0.29577005 * float(x[287]))+ (0.27988145 * float(x[288]))+ (0.7267492 * float(x[289]))+ (-0.80201423 * float(x[290]))+ (0.6442355 * float(x[291]))+ (-0.11804919 * float(x[292]))+ (-0.059091885 * float(x[293]))+ (-0.4565829 * float(x[294]))+ (-0.59438425 * float(x[295]))+ (-0.013739082 * float(x[296]))+ (0.351075 * float(x[297]))+ (0.65721387 * float(x[298]))+ (1.1124003 * float(x[299])))+ ((0.5480947 * float(x[300]))+ (0.2700204 * float(x[301]))+ (-0.69199175 * float(x[302]))+ (0.113797165 * float(x[303]))+ (-0.8964068 * float(x[304]))+ (-0.49077705 * float(x[305]))+ (-0.75670165 * float(x[306]))+ (0.026148068 * float(x[307]))+ (-0.4464969 * float(x[308]))+ (0.68696696 * float(x[309]))+ (-0.8155122 * float(x[310]))+ (-0.10567185 * float(x[311]))+ (-1.1001483 * float(x[312]))+ (0.63227826 * float(x[313]))+ (0.14515479 * float(x[314]))+ (-0.15892106 * float(x[315]))+ (0.29738885 * float(x[316]))+ (0.36073682 * float(x[317]))+ (0.45408854 * float(x[318]))+ (-0.08046528 * float(x[319]))+ (-0.7370344 * float(x[320]))+ (-0.9636226 * float(x[321]))+ (-0.25035307 * float(x[322]))+ (-0.32931405 * float(x[323]))+ (0.06748982 * float(x[324]))+ (0.36656266 * float(x[325]))+ (0.39125088 * float(x[326]))+ (-0.41786632 * float(x[327]))+ (-0.24014609 * float(x[328]))+ (-0.92825127 * float(x[329]))+ (0.27990198 * float(x[330]))+ (-0.71662426 * float(x[331]))+ (0.39399448 * float(x[332]))+ (0.5573908 * float(x[333]))+ (0.658805 * float(x[334]))+ (0.5084251 * float(x[335]))+ (0.13668485 * float(x[336]))+ (0.6896029 * float(x[337]))+ (-0.17492285 * float(x[338]))+ (-0.2582944 * float(x[339]))+ (0.16099131 * float(x[340]))+ (-0.35964254 * float(x[341]))+ (-0.44430643 * float(x[342]))+ (0.6536131 * float(x[343]))+ (-0.8460871 * float(x[344]))+ (0.6254451 * float(x[345]))+ (-0.8511449 * float(x[346]))+ (1.1233904 * float(x[347]))+ (1.112914 * float(x[348]))+ (0.2911405 * float(x[349])))+ ((-1.0385886 * float(x[350]))+ (-4.2435317 * float(x[351]))+ (0.3602609 * float(x[352]))+ (0.60300314 * float(x[353]))+ (1.1632698 * float(x[354]))+ (-0.72953176 * float(x[355]))+ (-0.8214731 * float(x[356]))+ (-0.9969576 * float(x[357]))+ (1.4150649 * float(x[358]))+ (-0.23667976 * float(x[359]))+ (0.8354405 * float(x[360]))+ (0.46648896 * float(x[361]))+ (0.17682835 * float(x[362]))+ (0.76408285 * float(x[363]))+ (0.25743476 * float(x[364]))+ (1.2041078 * float(x[365]))+ (1.3954947 * float(x[366]))+ (0.6986849 * float(x[367]))+ (0.56270117 * float(x[368]))+ (0.7918669 * float(x[369]))+ (-0.7490534 * float(x[370]))+ (0.8924318 * float(x[371]))+ (-0.15291844 * float(x[372]))+ (-0.14972559 * float(x[373]))+ (-0.67892236 * float(x[374]))+ (1.4375929 * float(x[375]))+ (0.91833323 * float(x[376]))+ (0.5136935 * float(x[377]))+ (0.18196833 * float(x[378]))+ (-0.43688163 * float(x[379]))+ (0.23532793 * float(x[380]))+ (0.7947598 * float(x[381]))+ (0.97510505 * float(x[382]))+ (0.64153427 * float(x[383]))+ (0.5976814 * float(x[384]))+ (0.8443899 * float(x[385]))+ (-1.0265609 * float(x[386]))+ (1.3624592 * float(x[387]))+ (-0.60195345 * float(x[388]))+ (-1.1332599 * float(x[389]))+ (0.50248486 * float(x[390]))+ (-1.0303267 * float(x[391]))+ (1.4726875 * float(x[392]))+ (-0.93339074 * float(x[393]))+ (1.7627754 * float(x[394]))+ (-0.069759294 * float(x[395]))+ (-0.28658623 * float(x[396]))+ (-0.931831 * float(x[397]))+ (-0.8502863 * float(x[398]))+ (1.1009085 * float(x[399])))+ ((0.85858285 * float(x[400]))+ (-1.0112959 * float(x[401]))+ (0.89060307 * float(x[402]))+ (1.1055158 * float(x[403]))+ (0.5794776 * float(x[404]))+ (-0.45604452 * float(x[405]))+ (0.18330312 * float(x[406]))+ (0.41599828 * float(x[407]))+ (-0.996441 * float(x[408]))+ (-0.7948394 * float(x[409]))+ (-0.3529322 * float(x[410]))+ (-0.5844193 * float(x[411]))+ (-0.496118 * float(x[412]))+ (-0.55767816 * float(x[413]))+ (-0.33613992 * float(x[414]))+ (-0.50330037 * float(x[415]))+ (-0.47099808 * float(x[416]))+ (-0.093593806 * float(x[417]))+ (0.056382 * float(x[418]))+ (0.94851243 * float(x[419]))+ (-1.0454098 * float(x[420]))+ (-0.18189181 * float(x[421]))+ (-0.45458838 * float(x[422]))+ (0.08482966 * float(x[423]))+ (0.28842536 * float(x[424]))+ (1.0062919 * float(x[425]))+ (-2.4699988 * float(x[426]))+ (0.01059471 * float(x[427]))+ (0.37728187 * float(x[428]))+ (-0.42234042 * float(x[429]))+ (-0.23086503 * float(x[430]))+ (0.29261133 * float(x[431]))+ (-0.22415599 * float(x[432]))+ (-0.13482174 * float(x[433]))+ (0.2270561 * float(x[434]))+ (-0.07414273 * float(x[435]))+ (-0.636414 * float(x[436]))+ (0.54959345 * float(x[437]))+ (0.65331644 * float(x[438]))+ (0.36218733 * float(x[439]))+ (0.10143972 * float(x[440]))+ (1.6948776 * float(x[441]))+ (-0.9079854 * float(x[442]))+ (0.09106421 * float(x[443]))+ (-0.08345825 * float(x[444]))+ (0.62993294 * float(x[445]))+ (1.0966519 * float(x[446]))+ (0.9379434 * float(x[447]))+ (0.96666276 * float(x[448]))+ (0.019728648 * float(x[449])))+ ((0.9840225 * float(x[450]))+ (-0.76561534 * float(x[451]))+ (-0.61358327 * float(x[452]))+ (0.90190524 * float(x[453]))+ (-0.5331595 * float(x[454]))+ (0.6317898 * float(x[455]))+ (-0.70063365 * float(x[456]))+ (-0.16799366 * float(x[457]))+ (0.76344043 * float(x[458]))+ (-0.4497301 * float(x[459]))+ (0.345889 * float(x[460]))+ (0.73817235 * float(x[461]))+ (1.0282247 * float(x[462]))+ (-0.5243855 * float(x[463]))+ (-0.5468015 * float(x[464]))+ (-0.19461748 * float(x[465]))+ (0.2633572 * float(x[466]))+ (1.3327986 * float(x[467]))+ (-0.019587718 * float(x[468]))+ (0.010451567 * float(x[469]))+ (0.7757617 * float(x[470]))+ (0.50837326 * float(x[471]))+ (0.47466236 * float(x[472]))+ (1.1738371 * float(x[473]))+ (1.3371984 * float(x[474]))+ (0.39915013 * float(x[475]))+ (1.0257294 * float(x[476]))+ (0.693041 * float(x[477]))+ (-0.6681655 * float(x[478]))+ (-0.5821578 * float(x[479]))+ (-0.28874356 * float(x[480]))+ (-0.69529057 * float(x[481]))+ (-0.44975087 * float(x[482]))+ (-0.5615282 * float(x[483]))+ (0.13480188 * float(x[484]))+ (-0.20510897 * float(x[485]))+ (0.92407376 * float(x[486]))+ (1.7591921 * float(x[487]))+ (0.0937698 * float(x[488]))+ (-0.24349616 * float(x[489]))+ (0.18446083 * float(x[490]))+ (0.5830057 * float(x[491]))+ (-0.25996685 * float(x[492]))+ (0.04156648 * float(x[493]))+ (-0.35881495 * float(x[494]))+ (-0.0891117 * float(x[495]))+ (0.2603398 * float(x[496]))+ (-0.30912554 * float(x[497]))+ (0.011732767 * float(x[498]))+ (1.2642928 * float(x[499])))+ ((-0.31111705 * float(x[500]))+ (-0.012649212 * float(x[501]))+ (0.53670204 * float(x[502]))+ (0.037248373 * float(x[503]))+ (0.8483175 * float(x[504]))+ (0.8341294 * float(x[505]))+ (-2.5095294 * float(x[506]))+ (-0.3832225 * float(x[507]))+ (-1.2727262 * float(x[508]))+ (-0.481939 * float(x[509]))+ (-0.5135654 * float(x[510]))+ (0.29244602 * float(x[511]))+ (1.0021251 * float(x[512]))+ (0.7722586 * float(x[513]))+ (0.5675038 * float(x[514]))+ (-0.5901526 * float(x[515]))+ (-0.31660378 * float(x[516]))+ (0.57276917 * float(x[517]))+ (0.49855283 * float(x[518]))+ (0.30685887 * float(x[519]))+ (-1.1921511 * float(x[520]))+ (-0.560655 * float(x[521]))+ (0.5664791 * float(x[522]))+ (-0.98294437 * float(x[523]))+ (0.25028664 * float(x[524]))+ (-0.3003634 * float(x[525]))+ (1.0909545 * float(x[526]))+ (0.16856904 * float(x[527]))+ (-0.7439892 * float(x[528]))+ (-0.8939986 * float(x[529]))+ (0.06410079 * float(x[530]))+ (0.26470032 * float(x[531]))+ (0.145911 * float(x[532]))+ (-0.8404165 * float(x[533]))+ (-0.3116816 * float(x[534]))+ (0.611194 * float(x[535]))+ (0.42605278 * float(x[536]))+ (-0.39420822 * float(x[537]))+ (1.1771494 * float(x[538]))+ (-0.5926236 * float(x[539]))+ (0.6834519 * float(x[540]))+ (0.20078447 * float(x[541]))+ (-0.2613405 * float(x[542]))+ (1.0830163 * float(x[543]))+ (-0.8094906 * float(x[544]))+ (-1.0396657 * float(x[545]))+ (1.0310165 * float(x[546]))+ (-0.19090809 * float(x[547]))+ (1.3080739 * float(x[548]))+ (1.3285854 * float(x[549])))+ ((-0.5260816 * float(x[550]))+ (0.8600277 * float(x[551]))+ (0.13778383 * float(x[552]))+ (0.3136897 * float(x[553]))+ (-0.8977664 * float(x[554]))+ (-0.3074806 * float(x[555]))+ (0.20966175 * float(x[556]))+ (0.24658935 * float(x[557]))+ (0.8850245 * float(x[558]))+ (0.3841022 * float(x[559]))+ (-0.4242717 * float(x[560]))+ (0.9966722 * float(x[561]))+ (1.4904768 * float(x[562]))+ (-0.057040453 * float(x[563]))+ (0.7804103 * float(x[564]))+ (0.10300082 * float(x[565]))+ (0.9215221 * float(x[566]))+ (0.75767446 * float(x[567]))+ (0.93657285 * float(x[568]))+ (0.83956563 * float(x[569]))+ (-0.12744717 * float(x[570]))+ (-0.12296716 * float(x[571]))+ (-0.30346054 * float(x[572]))+ (0.14913839 * float(x[573]))+ (0.18783295 * float(x[574]))+ (-0.6790647 * float(x[575]))+ (0.4768486 * float(x[576]))+ (-0.009332062 * float(x[577]))+ (1.4701716 * float(x[578]))+ (-0.6438979 * float(x[579]))+ (0.621755 * float(x[580]))+ (-0.11379994 * float(x[581]))+ (-0.77211654 * float(x[582]))+ (0.59978336 * float(x[583]))+ (-0.1171802 * float(x[584]))+ (-0.49415863 * float(x[585]))+ (-1.1758716 * float(x[586]))+ (-0.8778429 * float(x[587]))+ (1.0095129 * float(x[588]))+ (1.0591115 * float(x[589]))+ (1.6197275 * float(x[590]))+ (0.3808064 * float(x[591]))+ (0.27816603 * float(x[592]))+ (-0.24758391 * float(x[593]))+ (0.99592453 * float(x[594]))+ (-0.14231889 * float(x[595]))+ (0.93087786 * float(x[596]))+ (-0.11784044 * float(x[597]))+ (0.88562024 * float(x[598]))+ (-0.45663556 * float(x[599])))+ ((-0.344024 * float(x[600]))+ (0.8322086 * float(x[601]))+ (-0.9592046 * float(x[602]))+ (0.34016705 * float(x[603]))+ (-0.11893562 * float(x[604]))+ (-0.2493485 * float(x[605]))+ (-0.36569577 * float(x[606]))+ (0.029025486 * float(x[607]))+ (-0.32133162 * float(x[608]))+ (-0.31826323 * float(x[609]))+ (-0.32504523 * float(x[610]))+ (0.9422748 * float(x[611]))+ (-0.7955856 * float(x[612]))+ (-0.6605866 * float(x[613]))+ (0.14369614 * float(x[614]))+ (0.36470515 * float(x[615]))+ (0.34762788 * float(x[616]))+ (-0.2626733 * float(x[617]))+ (1.168237 * float(x[618]))+ (0.2053311 * float(x[619]))+ (0.44281334 * float(x[620]))+ (0.8169399 * float(x[621]))+ (0.35453326 * float(x[622]))+ (0.95245135 * float(x[623]))+ (0.22247107 * float(x[624]))+ (0.25890014 * float(x[625]))+ (-0.14390133 * float(x[626]))+ (-0.6367659 * float(x[627]))+ (-0.38612184 * float(x[628]))+ (-0.05112527 * float(x[629]))+ (-0.13731815 * float(x[630]))+ (-0.13543704 * float(x[631]))+ (0.043992545 * float(x[632]))+ (0.54616714 * float(x[633]))+ (1.3743907 * float(x[634]))+ (-0.558502 * float(x[635]))+ (0.4169784 * float(x[636]))+ (0.24377185 * float(x[637]))+ (-1.4767894 * float(x[638]))+ (0.99555147 * float(x[639]))+ (0.87166417 * float(x[640]))+ (0.7563362 * float(x[641]))+ (0.56252795 * float(x[642]))+ (-0.47319302 * float(x[643]))+ (-0.6688707 * float(x[644]))+ (0.3126821 * float(x[645]))+ (-0.122581646 * float(x[646]))+ (0.1670096 * float(x[647]))+ (-0.51676565 * float(x[648]))+ (-0.06873222 * float(x[649])))+ ((0.7411622 * float(x[650]))+ (-0.13800748 * float(x[651]))+ (-0.73632485 * float(x[652]))+ (1.3069357 * float(x[653]))+ (-0.6459287 * float(x[654]))+ (1.3349141 * float(x[655]))+ (-0.8416129 * float(x[656]))+ (0.0252203 * float(x[657]))+ (-0.20507368 * float(x[658]))+ (-0.1525873 * float(x[659]))+ (1.1711587 * float(x[660]))+ (-1.0587714 * float(x[661]))+ (-0.45749584 * float(x[662]))+ (-0.80630887 * float(x[663]))+ (-0.6075329 * float(x[664]))+ (0.9838632 * float(x[665]))+ (-0.39229354 * float(x[666]))+ (0.43320677 * float(x[667]))+ (0.40404218 * float(x[668]))+ (-0.20167771 * float(x[669]))+ (-0.19442232 * float(x[670]))+ (0.8701516 * float(x[671]))+ (-0.8599156 * float(x[672]))+ (0.6448135 * float(x[673]))+ (0.5950251 * float(x[674]))+ (0.37925145 * float(x[675]))+ (0.011255923 * float(x[676]))+ (-0.13794959 * float(x[677]))+ (-0.16065386 * float(x[678]))+ (-1.7959487 * float(x[679]))+ (-0.078480415 * float(x[680]))+ (-0.63129455 * float(x[681]))+ (-0.507484 * float(x[682]))+ (-1.0403475 * float(x[683]))+ (0.41947263 * float(x[684]))+ (0.87290394 * float(x[685]))+ (1.016478 * float(x[686]))+ (0.9182845 * float(x[687]))+ (-1.089164 * float(x[688]))+ (1.2951928 * float(x[689]))+ (-0.7851176 * float(x[690]))+ (0.870319 * float(x[691]))+ (-0.18584017 * float(x[692]))+ (0.47497874 * float(x[693]))+ (-0.7189325 * float(x[694]))+ (-0.2786388 * float(x[695]))+ (-0.8868443 * float(x[696]))+ (0.42432168 * float(x[697]))+ (0.90505636 * float(x[698]))+ (-0.10711698 * float(x[699])))+ ((-0.26555386 * float(x[700]))+ (0.10371639 * float(x[701]))+ (-0.7198858 * float(x[702]))+ (-1.1130824 * float(x[703]))+ (-1.0745547 * float(x[704]))+ (-0.91283506 * float(x[705]))+ (-0.6980215 * float(x[706]))+ (-0.46511015 * float(x[707]))+ (0.8560747 * float(x[708]))+ (-1.11458 * float(x[709]))+ (-0.09115684 * float(x[710]))+ (0.10809101 * float(x[711]))+ (0.06958808 * float(x[712]))+ (-0.49921438 * float(x[713]))+ (-0.31261832 * float(x[714]))+ (0.14540192 * float(x[715]))+ (-0.37963414 * float(x[716]))+ (-0.24374555 * float(x[717]))+ (0.5629592 * float(x[718]))+ (0.77814597 * float(x[719]))+ (0.5586631 * float(x[720]))+ (-0.47562593 * float(x[721]))+ (0.7913826 * float(x[722]))+ (-0.4026115 * float(x[723]))+ (0.93069345 * float(x[724]))+ (0.6702878 * float(x[725]))+ (0.97469753 * float(x[726]))+ (0.8178156 * float(x[727]))+ (-0.27091074 * float(x[728]))+ (-0.25779033 * float(x[729]))+ (0.20969109 * float(x[730]))+ (-0.48069948 * float(x[731]))+ (0.10958393 * float(x[732]))+ (-0.008059409 * float(x[733]))+ (0.13632523 * float(x[734]))+ (0.14245562 * float(x[735]))+ (-0.35835543 * float(x[736]))+ (-0.7595672 * float(x[737]))+ (-0.94610244 * float(x[738]))+ (-0.3186123 * float(x[739]))+ (0.9414629 * float(x[740]))+ (-0.9024809 * float(x[741]))+ (-0.43598378 * float(x[742]))+ (0.2257335 * float(x[743]))+ (-1.1683252 * float(x[744]))+ (0.85880476 * float(x[745]))+ (0.6460975 * float(x[746]))+ (0.87441254 * float(x[747]))+ (0.66969144 * float(x[748]))+ (-0.32428253 * float(x[749])))+ ((-0.6391207 * float(x[750]))+ (0.8616374 * float(x[751]))+ (0.35032845 * float(x[752]))+ (-0.5280505 * float(x[753]))+ (0.7604698 * float(x[754]))+ (-0.2561625 * float(x[755]))+ (-0.8607893 * float(x[756]))+ (-0.038161 * float(x[757]))+ (0.5791184 * float(x[758]))+ (1.0062726 * float(x[759]))+ (-0.082993664 * float(x[760]))+ (-0.10953729 * float(x[761]))+ (-0.6235555 * float(x[762]))+ (0.76135623 * float(x[763]))+ (0.3329368 * float(x[764]))+ (1.262333 * float(x[765]))+ (1.3970138 * float(x[766]))+ (0.9322949 * float(x[767]))+ (0.3732361 * float(x[768]))+ (0.6698846 * float(x[769]))+ (1.3402121 * float(x[770]))+ (-0.78709155 * float(x[771]))+ (-0.96366495 * float(x[772]))+ (0.7637835 * float(x[773]))+ (-0.49357647 * float(x[774]))+ (0.05199392 * float(x[775]))+ (0.2813335 * float(x[776]))+ (0.17586893 * float(x[777]))+ (0.68846995 * float(x[778]))+ (-0.502352 * float(x[779]))+ (-0.03508861 * float(x[780]))+ (1.0876752 * float(x[781]))+ (0.79354364 * float(x[782]))+ (-0.8769022 * float(x[783]))+ (-0.03281293 * float(x[784]))+ (0.13904555 * float(x[785]))+ (-0.6925158 * float(x[786]))+ (0.49042222 * float(x[787]))+ (0.018295893 * float(x[788]))+ (0.41586736 * float(x[789]))+ (-0.5068861 * float(x[790]))+ (0.32931033 * float(x[791]))+ (-0.6074717 * float(x[792]))+ (1.7970301 * float(x[793]))+ (0.88021857 * float(x[794]))+ (-0.18713121 * float(x[795]))+ (-0.36983708 * float(x[796]))+ (-0.7192096 * float(x[797]))+ (-0.47614112 * float(x[798]))+ (-0.2789182 * float(x[799])))+ ((0.055080634 * float(x[800]))+ (-0.18339418 * float(x[801]))+ (-0.06253542 * float(x[802]))+ (1.3656352 * float(x[803]))+ (0.5748365 * float(x[804]))+ (0.9289053 * float(x[805]))+ (-1.2781707 * float(x[806]))+ (0.53812784 * float(x[807]))+ (0.5399344 * float(x[808]))+ (0.88926107 * float(x[809]))+ (0.17904478 * float(x[810]))+ (-0.4228601 * float(x[811]))+ (0.1929254 * float(x[812]))+ (-1.0709058 * float(x[813]))+ (-0.41765368 * float(x[814]))+ (-1.0144086 * float(x[815]))+ (-0.193948 * float(x[816]))+ (0.4904659 * float(x[817]))+ (-1.5528806 * float(x[818]))+ (-0.5253603 * float(x[819]))+ (-0.8162573 * float(x[820]))+ (0.30771554 * float(x[821]))+ (-0.07240704 * float(x[822]))+ (-0.64068073 * float(x[823]))+ (0.8647879 * float(x[824]))+ (-0.84378767 * float(x[825]))+ (1.0351816 * float(x[826]))+ (0.60578674 * float(x[827]))+ (-0.94608265 * float(x[828]))+ (0.21142392 * float(x[829]))+ (-0.6392437 * float(x[830]))+ (0.7275899 * float(x[831]))+ (0.27492455 * float(x[832]))+ (0.6238771 * float(x[833]))+ (-0.11540553 * float(x[834]))+ (0.767136 * float(x[835]))+ (-0.9003665 * float(x[836]))+ (-0.24027371 * float(x[837]))+ (0.7235228 * float(x[838]))+ (0.15495797 * float(x[839]))+ (-0.9498579 * float(x[840]))+ (-0.8597514 * float(x[841]))+ (0.74417055 * float(x[842]))+ (0.18328679 * float(x[843]))+ (0.94721806 * float(x[844]))+ (0.46657827 * float(x[845]))+ (-1.1625909 * float(x[846]))+ (1.7199645 * float(x[847]))+ (-0.34968725 * float(x[848]))+ (0.206311 * float(x[849])))+ ((0.62100327 * float(x[850]))+ (-0.047042035 * float(x[851]))+ (0.32994223 * float(x[852]))+ (0.7655812 * float(x[853]))+ (0.36253804 * float(x[854]))+ (-0.500183 * float(x[855]))+ (0.12353903 * float(x[856]))+ (-0.77655524 * float(x[857]))+ (-0.15255402 * float(x[858]))+ (0.8751697 * float(x[859]))+ (-0.5883533 * float(x[860]))+ (-0.8414833 * float(x[861]))+ (0.20991026 * float(x[862]))+ (-0.3554485 * float(x[863]))+ (0.9414907 * float(x[864]))+ (-1.1404855 * float(x[865]))+ (-0.56033975 * float(x[866]))+ (0.68282795 * float(x[867]))+ (-0.08050157 * float(x[868]))+ (0.93206185 * float(x[869]))+ (-0.88888055 * float(x[870]))+ (0.00816546 * float(x[871]))+ (-0.0072324597 * float(x[872]))+ (-0.6516389 * float(x[873]))+ (-0.7531043 * float(x[874]))+ (0.45392987 * float(x[875]))+ (-0.34959224 * float(x[876]))+ (0.61942506 * float(x[877]))+ (0.46348837 * float(x[878]))+ (0.45509398 * float(x[879]))+ (-0.9772905 * float(x[880]))+ (0.1052965 * float(x[881]))+ (0.86716366 * float(x[882]))+ (0.59657705 * float(x[883]))+ (0.6650176 * float(x[884]))+ (0.6881921 * float(x[885]))+ (0.47178778 * float(x[886]))+ (-0.7812727 * float(x[887]))+ (0.7318909 * float(x[888]))+ (0.19144867 * float(x[889]))+ (-0.13662246 * float(x[890]))+ (0.1371202 * float(x[891]))+ (0.45291954 * float(x[892]))+ (0.34021798 * float(x[893]))+ (-0.21416315 * float(x[894]))+ (0.46920007 * float(x[895]))+ (0.19287947 * float(x[896]))+ (0.82050157 * float(x[897]))+ (0.105197564 * float(x[898]))+ (0.7311695 * float(x[899])))+ ((-0.17794687 * float(x[900]))+ (-0.2889011 * float(x[901]))+ (-0.734787 * float(x[902]))+ (0.21213445 * float(x[903]))+ (1.3677411 * float(x[904]))+ (-1.2027136 * float(x[905]))+ (0.8718614 * float(x[906]))+ (-0.6492559 * float(x[907]))+ (-0.7108295 * float(x[908]))+ (0.83524543 * float(x[909]))+ (-0.42933324 * float(x[910]))+ (0.96190697 * float(x[911]))+ (-0.48835874 * float(x[912]))+ (1.2284874 * float(x[913]))+ (0.5220711 * float(x[914]))+ (0.014387555 * float(x[915]))+ (-0.026596058 * float(x[916]))+ (2.1548736 * float(x[917]))+ (-0.000620047 * float(x[918]))+ (0.60335624 * float(x[919]))+ (0.42267424 * float(x[920]))+ (0.24936457 * float(x[921]))+ (0.9598014 * float(x[922]))+ (-0.7219561 * float(x[923]))+ (0.5894375 * float(x[924]))+ (-0.09143437 * float(x[925]))+ (-0.9800728 * float(x[926]))+ (-0.0096541075 * float(x[927]))+ (-0.10934714 * float(x[928]))+ (0.749112 * float(x[929]))+ (-1.2099118 * float(x[930]))+ (-0.15120445 * float(x[931]))+ (-0.2215343 * float(x[932]))+ (0.049057458 * float(x[933]))+ (0.81399333 * float(x[934]))+ (0.34327987 * float(x[935]))+ (-0.6981302 * float(x[936]))+ (-0.10246557 * float(x[937]))+ (0.5421404 * float(x[938]))+ (-1.2596337 * float(x[939]))+ (-0.38779724 * float(x[940]))+ (-0.8267841 * float(x[941]))+ (0.08035545 * float(x[942]))+ (-0.49425715 * float(x[943]))+ (-0.70938444 * float(x[944]))+ (0.4372528 * float(x[945]))+ (-0.19160008 * float(x[946]))+ (0.10329202 * float(x[947]))+ (-0.4435843 * float(x[948]))+ (-0.48976424 * float(x[949])))+ ((1.2326957 * float(x[950]))+ (-1.068869 * float(x[951]))+ (-0.07808981 * float(x[952]))+ (-0.71478504 * float(x[953]))+ (-0.3674019 * float(x[954]))+ (-0.29979488 * float(x[955]))+ (0.15913041 * float(x[956]))+ (0.7072121 * float(x[957]))+ (1.372742 * float(x[958]))+ (-0.39011192 * float(x[959]))+ (-0.021708174 * float(x[960]))+ (-0.43678027 * float(x[961]))+ (0.09694784 * float(x[962]))+ (-0.6976193 * float(x[963]))+ (-0.36336216 * float(x[964]))+ (-0.034831516 * float(x[965]))+ (1.4492352 * float(x[966]))+ (-1.1291295 * float(x[967]))+ (0.03850147 * float(x[968]))+ (-0.1868533 * float(x[969]))+ (-0.6470012 * float(x[970]))+ (1.0348234 * float(x[971]))+ (-0.24777707 * float(x[972]))+ (0.7039538 * float(x[973]))+ (-0.36848018 * float(x[974]))+ (0.21006365 * float(x[975]))+ (-0.50123364 * float(x[976]))+ (-0.012774065 * float(x[977]))+ (0.2861844 * float(x[978]))+ (1.7706414 * float(x[979]))+ (1.2649481 * float(x[980]))+ (0.45151916 * float(x[981]))+ (0.7843381 * float(x[982]))+ (-0.082156666 * float(x[983]))+ (0.15867211 * float(x[984]))+ (1.3415105 * float(x[985]))+ (0.3832396 * float(x[986]))+ (-1.0195944 * float(x[987]))+ (1.5320309 * float(x[988]))+ (-0.877778 * float(x[989]))+ (-0.6881411 * float(x[990]))+ (0.1428539 * float(x[991]))+ (-0.16419965 * float(x[992]))+ (0.39806065 * float(x[993]))+ (-0.68090254 * float(x[994]))+ (0.06535748 * float(x[995]))+ (1.1641033 * float(x[996]))+ (1.4802761 * float(x[997]))+ (0.07580958 * float(x[998]))+ (0.32928297 * float(x[999])))+ ((-0.40791157 * float(x[1000]))+ (0.13430373 * float(x[1001]))+ (0.30809587 * float(x[1002]))+ (-0.3845604 * float(x[1003]))+ (0.759043 * float(x[1004]))+ (0.581937 * float(x[1005]))+ (-1.0142459 * float(x[1006]))+ (-1.2076535 * float(x[1007]))+ (0.37605134 * float(x[1008]))+ (0.124482065 * float(x[1009]))+ (-1.0162697 * float(x[1010]))+ (-1.0599315 * float(x[1011]))+ (-0.08092019 * float(x[1012]))+ (-0.6393603 * float(x[1013]))+ (-1.0649648 * float(x[1014]))+ (0.9137125 * float(x[1015]))+ (-0.59186494 * float(x[1016]))+ (0.09554805 * float(x[1017]))+ (2.9998608 * float(x[1018]))+ (0.048325837 * float(x[1019]))+ (0.2409998 * float(x[1020]))+ (1.0762982 * float(x[1021]))+ (-0.28935653 * float(x[1022]))+ (0.6073695 * float(x[1023]))+ (-0.2835329 * float(x[1024]))+ (-0.019160183 * float(x[1025]))+ (0.30549243 * float(x[1026]))+ (0.9916306 * float(x[1027]))+ (0.4408015 * float(x[1028]))+ (0.7894821 * float(x[1029]))+ (-0.017247025 * float(x[1030]))+ (1.4643646 * float(x[1031]))+ (1.4604981 * float(x[1032]))+ (0.9694263 * float(x[1033]))+ (0.35440606 * float(x[1034]))+ (-0.5951941 * float(x[1035]))+ (0.058095403 * float(x[1036]))+ (0.078190774 * float(x[1037]))+ (0.051617905 * float(x[1038]))+ (-0.27712572 * float(x[1039]))+ (-0.6262837 * float(x[1040]))+ (-0.04225018 * float(x[1041]))+ (0.37335742 * float(x[1042]))+ (-0.01665955 * float(x[1043]))+ (0.003755507 * float(x[1044]))+ (0.11295025 * float(x[1045]))+ (-0.4403352 * float(x[1046]))+ (-0.15247145 * float(x[1047]))+ (0.7071969 * float(x[1048]))+ (-0.70420045 * float(x[1049])))+ ((-0.709355 * float(x[1050]))+ (0.62845105 * float(x[1051]))+ (-0.73441917 * float(x[1052]))+ (0.23363627 * float(x[1053]))+ (-1.0111928 * float(x[1054]))+ (-0.45796221 * float(x[1055]))+ (0.58245486 * float(x[1056]))+ (0.16019191 * float(x[1057]))+ (-0.15180692 * float(x[1058]))+ (0.4073126 * float(x[1059]))+ (-1.5117562 * float(x[1060]))+ (-1.3938742 * float(x[1061]))+ (-0.59841526 * float(x[1062]))+ (1.2884859 * float(x[1063]))+ (-0.833418 * float(x[1064]))+ (-1.1290624 * float(x[1065]))+ (1.0878004 * float(x[1066]))+ (1.157253 * float(x[1067]))+ (0.2936344 * float(x[1068]))+ (-0.4680234 * float(x[1069]))+ (0.8833356 * float(x[1070]))+ (-0.4433494 * float(x[1071]))+ (-0.034358636 * float(x[1072]))+ (0.27356994 * float(x[1073]))+ (-0.2921574 * float(x[1074]))+ (-0.65844953 * float(x[1075]))+ (0.95018935 * float(x[1076]))+ (0.9398709 * float(x[1077]))+ (-0.59365916 * float(x[1078]))+ (-0.20416278 * float(x[1079]))+ (0.54900193 * float(x[1080]))+ (-1.9974071 * float(x[1081]))+ (0.93831104 * float(x[1082]))+ (1.0887846 * float(x[1083]))+ (-0.1661753 * float(x[1084]))+ (-0.74023914 * float(x[1085]))+ (-0.63107747 * float(x[1086]))+ (1.2207341 * float(x[1087]))+ (-0.022985294 * float(x[1088]))+ (-0.26907757 * float(x[1089]))+ (-0.47542998 * float(x[1090]))+ (1.3563671 * float(x[1091]))+ (0.688314 * float(x[1092]))+ (-0.6592508 * float(x[1093]))+ (0.51796913 * float(x[1094]))+ (-0.8679993 * float(x[1095]))+ (0.59200054 * float(x[1096]))+ (-0.4263649 * float(x[1097]))+ (0.24132292 * float(x[1098]))+ (0.77398944 * float(x[1099])))+ ((0.7491779 * float(x[1100]))+ (-0.27963364 * float(x[1101]))+ (0.4912291 * float(x[1102]))+ (0.97021735 * float(x[1103]))+ (0.7235593 * float(x[1104]))+ (0.22063127 * float(x[1105]))+ (-0.8678515 * float(x[1106]))+ (-0.049499746 * float(x[1107]))+ (-0.22261657 * float(x[1108]))+ (-1.3362834 * float(x[1109]))+ (-0.26227096 * float(x[1110]))+ (-0.28448424 * float(x[1111]))+ (-0.9749113 * float(x[1112]))+ (-0.11631444 * float(x[1113]))+ (0.002196775 * float(x[1114]))+ (-0.02565153 * float(x[1115]))+ (-1.8240209 * float(x[1116]))+ (0.6394741 * float(x[1117]))+ (0.5336009 * float(x[1118]))+ (0.21994133 * float(x[1119]))+ (0.70361716 * float(x[1120]))+ (0.874946 * float(x[1121]))+ (-0.3898972 * float(x[1122]))+ (0.15090388 * float(x[1123]))+ (0.90589124 * float(x[1124]))+ (0.6497792 * float(x[1125]))+ (0.633255 * float(x[1126]))+ (-0.2133101 * float(x[1127]))+ (0.08716487 * float(x[1128]))+ (-1.2704536 * float(x[1129]))+ (-0.83764297 * float(x[1130]))+ (0.25576523 * float(x[1131]))+ (0.83320594 * float(x[1132]))+ (0.42258608 * float(x[1133]))+ (-0.438281 * float(x[1134]))+ (0.593364 * float(x[1135]))+ (0.25968167 * float(x[1136]))+ (-0.16608326 * float(x[1137]))+ (0.598619 * float(x[1138]))+ (-0.14257275 * float(x[1139]))+ (-0.51814795 * float(x[1140]))+ (-0.631935 * float(x[1141]))+ (-0.037041314 * float(x[1142]))+ (-1.4112564 * float(x[1143]))+ (0.37340248 * float(x[1144]))+ (-0.044730578 * float(x[1145]))+ (-0.24705923 * float(x[1146]))+ (-0.1437019 * float(x[1147]))+ (-0.64720404 * float(x[1148]))+ (-1.2531242 * float(x[1149])))+ ((0.44696936 * float(x[1150]))+ (-0.44384554 * float(x[1151]))+ (-0.17530172 * float(x[1152]))+ (0.48500574 * float(x[1153]))+ (0.81033915 * float(x[1154]))+ (-0.2304548 * float(x[1155]))+ (0.6536105 * float(x[1156]))+ (-0.873748 * float(x[1157]))+ (-0.015383514 * float(x[1158]))+ (0.64851123 * float(x[1159]))+ (0.36371848 * float(x[1160]))+ (0.2410634 * float(x[1161]))+ (0.78541434 * float(x[1162]))+ (-0.29129732 * float(x[1163]))+ (-1.5354357 * float(x[1164]))+ (-0.12161587 * float(x[1165]))+ (-0.20852713 * float(x[1166]))+ (0.28225 * float(x[1167]))+ (0.8469111 * float(x[1168]))+ (-0.68104666 * float(x[1169]))+ (-0.22319177 * float(x[1170]))+ (-0.026518516 * float(x[1171]))+ (0.5375476 * float(x[1172]))+ (0.96770763 * float(x[1173]))+ (0.109936506 * float(x[1174]))+ (0.2806417 * float(x[1175]))+ (0.3741024 * float(x[1176]))+ (0.61466736 * float(x[1177]))+ (-1.0311823 * float(x[1178]))+ (0.5561722 * float(x[1179]))+ (-0.38041216 * float(x[1180]))+ (0.32933116 * float(x[1181]))+ (-0.15025438 * float(x[1182]))+ (-0.44551572 * float(x[1183]))+ (0.11382944 * float(x[1184]))+ (0.33201382 * float(x[1185]))+ (0.29906845 * float(x[1186]))+ (0.97073084 * float(x[1187]))+ (0.46622622 * float(x[1188]))+ (0.5739385 * float(x[1189]))+ (0.52062196 * float(x[1190]))+ (0.20198113 * float(x[1191]))+ (-0.26095292 * float(x[1192]))+ (0.18790488 * float(x[1193]))+ (0.32045084 * float(x[1194]))+ (1.2712309 * float(x[1195]))+ (-0.42656663 * float(x[1196]))+ (-1.2053567 * float(x[1197]))+ (-0.30235326 * float(x[1198]))+ (-0.43276566 * float(x[1199])))+ ((0.6097854 * float(x[1200]))+ (0.58878136 * float(x[1201]))+ (1.1487384 * float(x[1202]))+ (-0.059610795 * float(x[1203]))+ (-0.96790266 * float(x[1204]))+ (0.4422497 * float(x[1205]))+ (0.63045007 * float(x[1206]))+ (-0.7217796 * float(x[1207]))+ (0.29987025 * float(x[1208]))+ (-0.25669378 * float(x[1209]))+ (0.7307218 * float(x[1210]))+ (-0.027260123 * float(x[1211]))+ (-0.42138696 * float(x[1212]))+ (-0.1238231 * float(x[1213]))+ (0.10896163 * float(x[1214]))+ (-0.7229512 * float(x[1215]))+ (0.31450638 * float(x[1216]))+ (0.9130551 * float(x[1217]))+ (0.034588106 * float(x[1218]))+ (0.62371165 * float(x[1219]))+ (0.8827658 * float(x[1220]))+ (1.4909028 * float(x[1221]))+ (-1.1672632 * float(x[1222]))+ (0.5742325 * float(x[1223]))+ (-0.5864899 * float(x[1224]))+ (0.31839395 * float(x[1225]))+ (0.5148131 * float(x[1226]))+ (-1.1486331 * float(x[1227]))+ (0.17082036 * float(x[1228]))+ (-2.301152 * float(x[1229]))+ (-0.86616546 * float(x[1230]))+ (-0.7668828 * float(x[1231]))+ (-0.76146054 * float(x[1232]))+ (-0.70747596 * float(x[1233]))+ (-0.232022 * float(x[1234]))+ (-0.32808667 * float(x[1235]))+ (-0.39759892 * float(x[1236]))+ (-0.17256443 * float(x[1237]))+ (-0.4855644 * float(x[1238]))+ (-0.5049183 * float(x[1239]))+ (-0.8588108 * float(x[1240]))+ (0.96570194 * float(x[1241]))+ (-0.59965986 * float(x[1242]))+ (-1.8763869 * float(x[1243]))+ (0.17788847 * float(x[1244]))+ (0.13857384 * float(x[1245]))+ (0.12204051 * float(x[1246]))+ (-0.44504988 * float(x[1247]))+ (0.0679176 * float(x[1248]))+ (0.17133729 * float(x[1249])))+ ((-0.17939839 * float(x[1250]))+ (-0.2077956 * float(x[1251]))+ (0.5734683 * float(x[1252]))+ (0.41361526 * float(x[1253]))+ (-0.99077183 * float(x[1254]))+ (-0.1649216 * float(x[1255]))+ (0.5667989 * float(x[1256]))+ (0.30576426 * float(x[1257]))+ (0.76054084 * float(x[1258]))+ (-0.32447726 * float(x[1259]))+ (-0.055241603 * float(x[1260]))+ (-0.25323293 * float(x[1261]))+ (-0.117237635 * float(x[1262]))+ (0.8600651 * float(x[1263]))+ (1.1232474 * float(x[1264]))+ (0.6301157 * float(x[1265]))+ (-0.3635356 * float(x[1266]))+ (1.0196447 * float(x[1267]))+ (0.8078665 * float(x[1268]))+ (0.00579896 * float(x[1269]))+ (-1.2078683 * float(x[1270]))+ (-1.5407825 * float(x[1271]))+ (0.29149115 * float(x[1272]))+ (0.5808725 * float(x[1273]))+ (1.150466 * float(x[1274]))+ (0.7742025 * float(x[1275]))+ (-2.4956028 * float(x[1276]))+ (0.78424793 * float(x[1277]))+ (-0.45632255 * float(x[1278]))+ (0.09310334 * float(x[1279]))+ (0.49670148 * float(x[1280]))+ (-0.95728266 * float(x[1281]))+ (-0.7802702 * float(x[1282]))+ (-0.7061983 * float(x[1283]))+ (0.66370046 * float(x[1284]))+ (-0.5508289 * float(x[1285]))+ (0.13778935 * float(x[1286]))+ (-0.89789385 * float(x[1287]))+ (-0.6049581 * float(x[1288]))+ (0.029711485 * float(x[1289]))+ (0.89361435 * float(x[1290]))+ (0.56556153 * float(x[1291]))+ (0.2799327 * float(x[1292]))+ (-1.0975004 * float(x[1293]))+ (0.58995503 * float(x[1294]))+ (0.26270893 * float(x[1295]))+ (-0.97462505 * float(x[1296]))+ (1.6530887 * float(x[1297]))+ (-0.7995331 * float(x[1298]))+ (1.3092436 * float(x[1299])))+ ((-0.41146767 * float(x[1300]))+ (0.298824 * float(x[1301]))+ (-0.09640975 * float(x[1302]))+ (0.2966533 * float(x[1303]))+ (1.0697756 * float(x[1304]))+ (0.24228065 * float(x[1305]))+ (-1.3786856 * float(x[1306]))+ (0.6891159 * float(x[1307]))+ (0.53831106 * float(x[1308]))+ (0.1639958 * float(x[1309]))+ (-0.77775437 * float(x[1310]))+ (-0.49227816 * float(x[1311]))+ (-0.9674081 * float(x[1312]))+ (1.0328652 * float(x[1313]))+ (2.0445814 * float(x[1314]))+ (1.2872914 * float(x[1315]))+ (0.93315023 * float(x[1316]))+ (0.4400488 * float(x[1317]))+ (0.8756801 * float(x[1318]))+ (0.15397388 * float(x[1319]))+ (-0.5855133 * float(x[1320]))+ (-1.6279774 * float(x[1321]))+ (0.18977608 * float(x[1322]))+ (0.64694345 * float(x[1323]))+ (0.6228655 * float(x[1324]))+ (0.9216251 * float(x[1325]))+ (-1.5262374 * float(x[1326]))+ (-1.1787676 * float(x[1327]))+ (1.0054945 * float(x[1328]))+ (-0.38990662 * float(x[1329]))+ (-0.15438057 * float(x[1330]))+ (0.96488976 * float(x[1331]))+ (-0.19910292 * float(x[1332]))+ (-0.117591575 * float(x[1333]))+ (-0.023627676 * float(x[1334]))+ (0.39434072 * float(x[1335]))+ (1.0731891 * float(x[1336]))+ (-0.8096777 * float(x[1337]))+ (-0.7283716 * float(x[1338]))+ (-0.7560403 * float(x[1339]))+ (0.8882434 * float(x[1340]))+ (-0.66633624 * float(x[1341]))+ (0.82291436 * float(x[1342]))+ (0.14389005 * float(x[1343]))+ (-0.120838135 * float(x[1344]))+ (-0.9367318 * float(x[1345]))+ (-0.5541542 * float(x[1346]))+ (-0.5712615 * float(x[1347]))+ (0.1026658 * float(x[1348]))+ (0.146846 * float(x[1349])))+ ((-0.57105464 * float(x[1350]))+ (-0.0146155 * float(x[1351]))+ (0.5554243 * float(x[1352]))+ (0.49266744 * float(x[1353]))+ (-0.18849002 * float(x[1354]))+ (-1.1307293 * float(x[1355]))+ (-0.03792283 * float(x[1356]))+ (0.45145214 * float(x[1357]))+ (0.30451024 * float(x[1358]))+ (0.18173409 * float(x[1359]))+ (0.53442013 * float(x[1360]))+ (-0.99732363 * float(x[1361]))+ (0.12985726 * float(x[1362]))+ (0.1313068 * float(x[1363]))+ (-0.15575007 * float(x[1364]))+ (0.9137411 * float(x[1365]))+ (-0.06514128 * float(x[1366]))+ (2.7268322 * float(x[1367]))+ (0.24535716 * float(x[1368]))+ (0.097885735 * float(x[1369]))+ (0.72370803 * float(x[1370]))+ (0.25304982 * float(x[1371]))+ (0.09113117 * float(x[1372]))+ (-0.6827257 * float(x[1373]))+ (0.51257443 * float(x[1374]))+ (-0.8324173 * float(x[1375]))+ (-0.4358231 * float(x[1376]))+ (-0.5602785 * float(x[1377]))+ (-0.2939309 * float(x[1378]))+ (0.639507 * float(x[1379]))+ (-1.3058579 * float(x[1380]))+ (0.74663883 * float(x[1381]))+ (0.42830715 * float(x[1382]))+ (-0.07694328 * float(x[1383]))+ (0.29959875 * float(x[1384]))+ (0.038018227 * float(x[1385]))+ (-0.5029862 * float(x[1386]))+ (-0.7941496 * float(x[1387]))+ (1.280289 * float(x[1388]))+ (-0.34497622 * float(x[1389]))+ (0.77321166 * float(x[1390]))+ (-0.6236878 * float(x[1391]))+ (0.5738477 * float(x[1392]))+ (0.3755939 * float(x[1393]))+ (0.14112309 * float(x[1394]))+ (0.15326469 * float(x[1395]))+ (0.9707571 * float(x[1396]))+ (0.9616341 * float(x[1397]))+ (0.22786054 * float(x[1398]))+ (-2.24874 * float(x[1399])))+ ((-0.46989703 * float(x[1400]))+ (-0.59746647 * float(x[1401]))+ (-1.9393648 * float(x[1402]))+ (1.6467233 * float(x[1403]))+ (0.663097 * float(x[1404]))+ (-1.3983216 * float(x[1405]))+ (-0.12601669 * float(x[1406]))+ (1.2738755 * float(x[1407]))+ (-0.077542685 * float(x[1408]))+ (-0.5996202 * float(x[1409]))+ (-0.22432238 * float(x[1410]))+ (-0.053839684 * float(x[1411]))+ (-0.53632617 * float(x[1412]))+ (-1.0358936 * float(x[1413]))+ (-0.723078 * float(x[1414]))+ (-0.33303103 * float(x[1415]))+ (-0.9998483 * float(x[1416]))+ (-0.43837568 * float(x[1417]))+ (0.37093428 * float(x[1418]))+ (-0.9010005 * float(x[1419]))+ (-0.672546 * float(x[1420]))+ (-0.66242146 * float(x[1421]))+ (-0.46771562 * float(x[1422]))+ (-0.6704091 * float(x[1423]))+ (-0.59067005 * float(x[1424]))+ (0.5064696 * float(x[1425]))+ (1.4241626 * float(x[1426]))+ (-0.26584455 * float(x[1427]))+ (0.2912217 * float(x[1428]))+ (-1.302901 * float(x[1429]))+ (-0.83642864 * float(x[1430]))+ (-0.4101555 * float(x[1431]))+ (-0.041206665 * float(x[1432]))+ (-0.3784746 * float(x[1433]))+ (-0.45494527 * float(x[1434]))+ (0.33577448 * float(x[1435]))+ (0.7637818 * float(x[1436]))+ (0.68199265 * float(x[1437]))+ (-0.2730765 * float(x[1438]))+ (0.674181 * float(x[1439]))+ (-0.22473116 * float(x[1440]))+ (0.04783105 * float(x[1441]))+ (0.32729965 * float(x[1442]))+ (-0.25562274 * float(x[1443]))+ (-0.29598352 * float(x[1444]))+ (-0.3065991 * float(x[1445]))+ (0.5436331 * float(x[1446]))+ (0.23055285 * float(x[1447]))+ (1.0381755 * float(x[1448]))+ (0.8846337 * float(x[1449])))+ ((1.7009411 * float(x[1450]))+ (0.7623765 * float(x[1451]))+ (0.7934487 * float(x[1452]))+ (-0.18789159 * float(x[1453]))+ (-2.1406918 * float(x[1454]))+ (-0.5298334 * float(x[1455]))+ (0.19067022 * float(x[1456]))+ (0.9793161 * float(x[1457]))+ (0.15269978 * float(x[1458]))+ (1.4450722 * float(x[1459]))+ (0.9280072 * float(x[1460]))+ (-0.16861553 * float(x[1461]))+ (0.3623043 * float(x[1462]))+ (0.28610697 * float(x[1463]))+ (-1.0833198 * float(x[1464]))+ (-1.6760182 * float(x[1465]))+ (-0.50310814 * float(x[1466]))+ (0.048782106 * float(x[1467]))+ (-0.12823659 * float(x[1468]))+ (-1.8654969 * float(x[1469]))+ (0.26422098 * float(x[1470]))+ (-0.058113154 * float(x[1471]))+ (1.0707775 * float(x[1472]))+ (-0.16359407 * float(x[1473]))+ (1.583741 * float(x[1474]))+ (1.2500898 * float(x[1475]))+ (-0.54550266 * float(x[1476]))+ (0.066515855 * float(x[1477]))+ (0.7846974 * float(x[1478]))+ (0.34325117 * float(x[1479]))+ (-0.7910143 * float(x[1480]))+ (-0.6316495 * float(x[1481]))+ (0.36420026 * float(x[1482]))+ (-0.36584917 * float(x[1483]))+ (0.55066186 * float(x[1484]))+ (-0.0142219 * float(x[1485]))+ (0.7189156 * float(x[1486]))+ (-0.68327504 * float(x[1487]))+ (-0.56882477 * float(x[1488]))+ (-0.7176617 * float(x[1489]))+ (0.77909595 * float(x[1490]))+ (-0.78257275 * float(x[1491]))+ (1.0490558 * float(x[1492]))+ (0.89456683 * float(x[1493]))+ (-0.8390927 * float(x[1494]))+ (-0.63457745 * float(x[1495]))+ (-0.586944 * float(x[1496]))+ (-0.5706226 * float(x[1497]))+ (1.3077583 * float(x[1498]))+ (0.0681998 * float(x[1499])))+ ((-0.45678452 * float(x[1500]))+ (-0.36318818 * float(x[1501]))+ (-0.67599285 * float(x[1502]))+ (2.3541505 * float(x[1503]))+ (1.1154674 * float(x[1504]))+ (0.71990275 * float(x[1505]))+ (0.61388236 * float(x[1506]))+ (-1.457362 * float(x[1507]))+ (0.32630596 * float(x[1508]))+ (-0.7961591 * float(x[1509]))+ (-1.4572463 * float(x[1510]))+ (0.23622796 * float(x[1511]))+ (0.39703202 * float(x[1512]))+ (0.7544686 * float(x[1513]))+ (-0.24840026 * float(x[1514]))+ (-1.0392848 * float(x[1515]))+ (0.3283884 * float(x[1516]))+ (-0.1903185 * float(x[1517]))+ (-1.6341163 * float(x[1518]))+ (0.47344202 * float(x[1519]))+ (0.86598605 * float(x[1520]))+ (-0.36661223 * float(x[1521]))+ (0.65648395 * float(x[1522]))+ (0.5410881 * float(x[1523]))+ (0.93127525 * float(x[1524]))+ (-0.332763 * float(x[1525]))+ (-0.61207515 * float(x[1526]))+ (-0.07282737 * float(x[1527]))+ (0.84631807 * float(x[1528]))+ (0.8690266 * float(x[1529]))+ (0.8668918 * float(x[1530]))+ (1.3538626 * float(x[1531]))+ (-0.63276607 * float(x[1532]))+ (0.0874385 * float(x[1533]))+ (0.8163546 * float(x[1534]))+ (0.42876238 * float(x[1535]))+ (0.2077159 * float(x[1536]))+ (0.7517001 * float(x[1537]))+ (-0.22689708 * float(x[1538]))+ (-0.06834454 * float(x[1539]))+ (0.430302 * float(x[1540]))+ (-1.0420504 * float(x[1541]))+ (1.1428452 * float(x[1542]))+ (0.61650527 * float(x[1543]))+ (0.75747716 * float(x[1544]))+ (0.8465157 * float(x[1545]))+ (0.5777829 * float(x[1546]))+ (-0.48893616 * float(x[1547]))+ (0.7939781 * float(x[1548]))+ (0.63648796 * float(x[1549])))+ ((1.0989114 * float(x[1550]))+ (-0.04899415 * float(x[1551]))+ (-0.2179449 * float(x[1552]))+ (-0.59855556 * float(x[1553]))+ (0.35996947 * float(x[1554]))+ (-1.2046607 * float(x[1555]))+ (-1.1881053 * float(x[1556]))+ (0.839476 * float(x[1557]))) + 2.5529091), 0)
    h_1 = max((((-30.652733 * float(x[0]))+ (-18.378103 * float(x[1]))+ (-0.7531512 * float(x[2]))+ (1.7687366 * float(x[3]))+ (-0.51650125 * float(x[4]))+ (-0.011576864 * float(x[5]))+ (0.64643496 * float(x[6]))+ (0.740006 * float(x[7]))+ (-0.17698409 * float(x[8]))+ (-0.69105124 * float(x[9]))+ (-0.88143826 * float(x[10]))+ (0.78723127 * float(x[11]))+ (0.5301593 * float(x[12]))+ (-0.20139554 * float(x[13]))+ (-0.13410042 * float(x[14]))+ (-0.85353917 * float(x[15]))+ (0.62403446 * float(x[16]))+ (0.17547193 * float(x[17]))+ (0.1595006 * float(x[18]))+ (0.43123907 * float(x[19]))+ (0.7060153 * float(x[20]))+ (-0.9908688 * float(x[21]))+ (-0.79421115 * float(x[22]))+ (0.13468215 * float(x[23]))+ (-0.22794238 * float(x[24]))+ (-0.6448891 * float(x[25]))+ (0.74600047 * float(x[26]))+ (0.91192734 * float(x[27]))+ (-0.6857105 * float(x[28]))+ (0.7058727 * float(x[29]))+ (-0.5271368 * float(x[30]))+ (0.9333676 * float(x[31]))+ (0.9181087 * float(x[32]))+ (0.13707513 * float(x[33]))+ (0.41193 * float(x[34]))+ (0.52009237 * float(x[35]))+ (0.32473642 * float(x[36]))+ (0.29402447 * float(x[37]))+ (-0.4944876 * float(x[38]))+ (0.17121665 * float(x[39]))+ (0.4939754 * float(x[40]))+ (0.90577286 * float(x[41]))+ (-0.4549532 * float(x[42]))+ (0.5090189 * float(x[43]))+ (-0.59983224 * float(x[44]))+ (0.97987616 * float(x[45]))+ (-0.15559626 * float(x[46]))+ (0.47729686 * float(x[47]))+ (-0.5588722 * float(x[48]))+ (0.13507172 * float(x[49])))+ ((0.50106484 * float(x[50]))+ (0.50279826 * float(x[51]))+ (0.405823 * float(x[52]))+ (-0.36605906 * float(x[53]))+ (-0.12751602 * float(x[54]))+ (-0.7466578 * float(x[55]))+ (0.09979232 * float(x[56]))+ (-0.16550149 * float(x[57]))+ (-0.9421624 * float(x[58]))+ (-0.57352686 * float(x[59]))+ (-0.44375017 * float(x[60]))+ (-0.8292707 * float(x[61]))+ (-0.9266465 * float(x[62]))+ (0.082113944 * float(x[63]))+ (0.6420291 * float(x[64]))+ (0.613593 * float(x[65]))+ (-0.91597044 * float(x[66]))+ (-0.6197973 * float(x[67]))+ (-0.77467126 * float(x[68]))+ (-0.48624942 * float(x[69]))+ (-0.42439017 * float(x[70]))+ (-0.6354347 * float(x[71]))+ (0.39840293 * float(x[72]))+ (0.10234825 * float(x[73]))+ (-0.8934984 * float(x[74]))+ (-0.17230327 * float(x[75]))+ (0.63631505 * float(x[76]))+ (-0.44520804 * float(x[77]))+ (-0.23588225 * float(x[78]))+ (-0.9082331 * float(x[79]))+ (-0.87019014 * float(x[80]))+ (0.78541756 * float(x[81]))+ (-0.91914636 * float(x[82]))+ (0.11679534 * float(x[83]))+ (-0.8996987 * float(x[84]))+ (0.91837716 * float(x[85]))+ (-0.7171625 * float(x[86]))+ (-0.7821143 * float(x[87]))+ (0.7717438 * float(x[88]))+ (-0.44831282 * float(x[89]))+ (-0.2231094 * float(x[90]))+ (0.6223283 * float(x[91]))+ (0.024148716 * float(x[92]))+ (-0.0732333 * float(x[93]))+ (-0.6595904 * float(x[94]))+ (0.5730174 * float(x[95]))+ (-0.5499822 * float(x[96]))+ (0.35878184 * float(x[97]))+ (0.9282324 * float(x[98]))+ (0.82349783 * float(x[99])))+ ((0.16550921 * float(x[100]))+ (-0.77509826 * float(x[101]))+ (-0.06362332 * float(x[102]))+ (0.46425408 * float(x[103]))+ (-0.5673088 * float(x[104]))+ (-0.821591 * float(x[105]))+ (0.87488943 * float(x[106]))+ (-0.7021222 * float(x[107]))+ (-0.83432287 * float(x[108]))+ (0.0649119 * float(x[109]))+ (-0.23032291 * float(x[110]))+ (0.7538418 * float(x[111]))+ (-0.30269387 * float(x[112]))+ (-0.4643022 * float(x[113]))+ (0.4953822 * float(x[114]))+ (-0.86627316 * float(x[115]))+ (0.7577901 * float(x[116]))+ (0.7440072 * float(x[117]))+ (0.78079396 * float(x[118]))+ (0.6243869 * float(x[119]))+ (1.9720362 * float(x[120]))+ (-0.81266737 * float(x[121]))+ (-0.12972161 * float(x[122]))+ (-0.6488324 * float(x[123]))+ (0.29849836 * float(x[124]))+ (-0.44319704 * float(x[125]))+ (0.91878366 * float(x[126]))+ (1.1378835 * float(x[127]))+ (-0.45169204 * float(x[128]))+ (-0.7636756 * float(x[129]))+ (0.6028406 * float(x[130]))+ (-0.004678151 * float(x[131]))+ (0.8310025 * float(x[132]))+ (0.9475291 * float(x[133]))+ (0.25310755 * float(x[134]))+ (1.0149785 * float(x[135]))+ (1.9713179 * float(x[136]))+ (1.243219 * float(x[137]))+ (-0.96763957 * float(x[138]))+ (-0.48147956 * float(x[139]))+ (-0.97615093 * float(x[140]))+ (-0.33718178 * float(x[141]))+ (-0.33798587 * float(x[142]))+ (0.124096006 * float(x[143]))+ (0.924129 * float(x[144]))+ (0.3796702 * float(x[145]))+ (-0.09727547 * float(x[146]))+ (0.03105122 * float(x[147]))+ (-0.7820171 * float(x[148]))+ (0.5712649 * float(x[149])))+ ((0.26740113 * float(x[150]))+ (-0.26147875 * float(x[151]))+ (0.22758995 * float(x[152]))+ (1.1531528 * float(x[153]))+ (-0.383036 * float(x[154]))+ (0.56328005 * float(x[155]))+ (-0.56013495 * float(x[156]))+ (0.77562326 * float(x[157]))+ (0.17178863 * float(x[158]))+ (0.1098908 * float(x[159]))+ (-0.24462453 * float(x[160]))+ (-0.93258905 * float(x[161]))+ (-0.0758262 * float(x[162]))+ (-0.06441144 * float(x[163]))+ (-0.7166324 * float(x[164]))+ (0.48620433 * float(x[165]))+ (-0.20593783 * float(x[166]))+ (0.3120429 * float(x[167]))+ (-0.40199175 * float(x[168]))+ (-0.41675058 * float(x[169]))+ (-0.5853208 * float(x[170]))+ (0.49197307 * float(x[171]))+ (0.8572339 * float(x[172]))+ (-0.20637248 * float(x[173]))+ (-0.6277245 * float(x[174]))+ (-0.56107366 * float(x[175]))+ (-0.34539276 * float(x[176]))+ (-0.6306971 * float(x[177]))+ (-0.12089932 * float(x[178]))+ (-0.6624825 * float(x[179]))+ (0.45132193 * float(x[180]))+ (-0.69301134 * float(x[181]))+ (0.48629126 * float(x[182]))+ (-0.28160703 * float(x[183]))+ (-0.59810674 * float(x[184]))+ (-0.31220716 * float(x[185]))+ (2.6934037 * float(x[186]))+ (-1.1286072 * float(x[187]))+ (-0.9187621 * float(x[188]))+ (-0.1705258 * float(x[189]))+ (0.69290894 * float(x[190]))+ (0.55239075 * float(x[191]))+ (-0.67164564 * float(x[192]))+ (-0.67054576 * float(x[193]))+ (0.90499085 * float(x[194]))+ (0.2300392 * float(x[195]))+ (-0.39896035 * float(x[196]))+ (-0.22730587 * float(x[197]))+ (-0.90705806 * float(x[198]))+ (-0.81197345 * float(x[199])))+ ((-0.9571506 * float(x[200]))+ (-0.5941089 * float(x[201]))+ (-0.8131487 * float(x[202]))+ (-0.5753415 * float(x[203]))+ (0.31917235 * float(x[204]))+ (0.22684933 * float(x[205]))+ (-0.18974039 * float(x[206]))+ (0.89712477 * float(x[207]))+ (0.82820314 * float(x[208]))+ (0.049057215 * float(x[209]))+ (0.5482201 * float(x[210]))+ (-0.8018495 * float(x[211]))+ (-0.06724564 * float(x[212]))+ (0.36009586 * float(x[213]))+ (0.79398865 * float(x[214]))+ (-0.91213465 * float(x[215]))+ (-0.6974736 * float(x[216]))+ (0.75044984 * float(x[217]))+ (0.9839687 * float(x[218]))+ (-0.22665109 * float(x[219]))+ (0.66649723 * float(x[220]))+ (0.87376076 * float(x[221]))+ (0.62225515 * float(x[222]))+ (0.01148476 * float(x[223]))+ (0.7749112 * float(x[224]))+ (-0.10043359 * float(x[225]))+ (0.28334022 * float(x[226]))+ (-0.90202856 * float(x[227]))+ (0.384787 * float(x[228]))+ (0.0418625 * float(x[229]))+ (-0.06125875 * float(x[230]))+ (-0.25820044 * float(x[231]))+ (1.1285838 * float(x[232]))+ (-0.06714485 * float(x[233]))+ (0.80430835 * float(x[234]))+ (-1.3537977 * float(x[235]))+ (0.846153 * float(x[236]))+ (-0.37686718 * float(x[237]))+ (0.36985502 * float(x[238]))+ (-0.074232146 * float(x[239]))+ (-0.7071897 * float(x[240]))+ (0.5831103 * float(x[241]))+ (-0.36989185 * float(x[242]))+ (0.16105829 * float(x[243]))+ (0.07034631 * float(x[244]))+ (-0.6049706 * float(x[245]))+ (2.581017 * float(x[246]))+ (0.7855591 * float(x[247]))+ (0.39603516 * float(x[248]))+ (0.26444536 * float(x[249])))+ ((-0.5001597 * float(x[250]))+ (-0.5523695 * float(x[251]))+ (-0.34578657 * float(x[252]))+ (-0.64627814 * float(x[253]))+ (0.54101527 * float(x[254]))+ (-0.83964795 * float(x[255]))+ (0.32991716 * float(x[256]))+ (0.7859264 * float(x[257]))+ (0.5951905 * float(x[258]))+ (-0.02944168 * float(x[259]))+ (0.5346516 * float(x[260]))+ (0.9029923 * float(x[261]))+ (-0.58775425 * float(x[262]))+ (-0.119269 * float(x[263]))+ (0.017034514 * float(x[264]))+ (0.3714293 * float(x[265]))+ (0.7922569 * float(x[266]))+ (-0.5838787 * float(x[267]))+ (-1.0161256 * float(x[268]))+ (0.29873067 * float(x[269]))+ (0.17053959 * float(x[270]))+ (-0.033112004 * float(x[271]))+ (0.07418153 * float(x[272]))+ (0.083964445 * float(x[273]))+ (0.19352338 * float(x[274]))+ (-0.39105523 * float(x[275]))+ (0.30502424 * float(x[276]))+ (0.08227397 * float(x[277]))+ (-0.68495506 * float(x[278]))+ (-0.08081271 * float(x[279]))+ (0.52216923 * float(x[280]))+ (-0.3197378 * float(x[281]))+ (-0.48435396 * float(x[282]))+ (-0.64832294 * float(x[283]))+ (0.3260294 * float(x[284]))+ (0.9805072 * float(x[285]))+ (0.030432517 * float(x[286]))+ (-0.29820403 * float(x[287]))+ (0.19302508 * float(x[288]))+ (-0.643523 * float(x[289]))+ (0.29609114 * float(x[290]))+ (-0.20162751 * float(x[291]))+ (-0.54167783 * float(x[292]))+ (0.3081239 * float(x[293]))+ (-0.31883934 * float(x[294]))+ (-0.848608 * float(x[295]))+ (-0.2987963 * float(x[296]))+ (-0.3070246 * float(x[297]))+ (0.13212332 * float(x[298]))+ (0.9857229 * float(x[299])))+ ((-0.8370503 * float(x[300]))+ (0.26074025 * float(x[301]))+ (-0.97849107 * float(x[302]))+ (0.4717096 * float(x[303]))+ (-0.5047972 * float(x[304]))+ (0.7918658 * float(x[305]))+ (-0.51073587 * float(x[306]))+ (-0.465579 * float(x[307]))+ (-0.84243435 * float(x[308]))+ (-0.8249306 * float(x[309]))+ (-0.4436627 * float(x[310]))+ (0.4826383 * float(x[311]))+ (0.47383526 * float(x[312]))+ (-0.10975989 * float(x[313]))+ (0.82535154 * float(x[314]))+ (0.19032408 * float(x[315]))+ (-0.08290985 * float(x[316]))+ (0.9107835 * float(x[317]))+ (-0.79162693 * float(x[318]))+ (-0.8054094 * float(x[319]))+ (-0.7291644 * float(x[320]))+ (-0.0055763363 * float(x[321]))+ (-0.16475272 * float(x[322]))+ (0.32892215 * float(x[323]))+ (0.3958108 * float(x[324]))+ (0.568138 * float(x[325]))+ (-0.8602738 * float(x[326]))+ (-0.3847598 * float(x[327]))+ (0.2487779 * float(x[328]))+ (-0.4325616 * float(x[329]))+ (0.084611386 * float(x[330]))+ (-0.28226 * float(x[331]))+ (-0.31120956 * float(x[332]))+ (0.8278197 * float(x[333]))+ (-0.64784664 * float(x[334]))+ (-0.6209994 * float(x[335]))+ (-0.9674735 * float(x[336]))+ (-0.7749947 * float(x[337]))+ (-0.6840883 * float(x[338]))+ (0.55755526 * float(x[339]))+ (-0.54211986 * float(x[340]))+ (0.7714518 * float(x[341]))+ (0.3661192 * float(x[342]))+ (-0.80063796 * float(x[343]))+ (0.4535459 * float(x[344]))+ (-0.034224223 * float(x[345]))+ (0.59064555 * float(x[346]))+ (0.1471225 * float(x[347]))+ (-0.17180243 * float(x[348]))+ (-0.9760424 * float(x[349])))+ ((-0.9278826 * float(x[350]))+ (0.044040844 * float(x[351]))+ (-0.90120596 * float(x[352]))+ (-0.34639972 * float(x[353]))+ (-0.70009214 * float(x[354]))+ (-0.111843206 * float(x[355]))+ (0.5573222 * float(x[356]))+ (-0.68040204 * float(x[357]))+ (0.22224264 * float(x[358]))+ (-0.80338806 * float(x[359]))+ (0.49314585 * float(x[360]))+ (0.64896125 * float(x[361]))+ (-0.51418746 * float(x[362]))+ (-0.5130507 * float(x[363]))+ (0.15047227 * float(x[364]))+ (-0.24643955 * float(x[365]))+ (0.6878239 * float(x[366]))+ (-0.6811398 * float(x[367]))+ (-0.8851882 * float(x[368]))+ (0.33439687 * float(x[369]))+ (-0.6540249 * float(x[370]))+ (-0.72769266 * float(x[371]))+ (0.38678735 * float(x[372]))+ (0.72665316 * float(x[373]))+ (0.5465919 * float(x[374]))+ (-0.7023108 * float(x[375]))+ (0.15058789 * float(x[376]))+ (-0.095392324 * float(x[377]))+ (-0.81868935 * float(x[378]))+ (-0.4189916 * float(x[379]))+ (-0.05518641 * float(x[380]))+ (-0.5899839 * float(x[381]))+ (0.577409 * float(x[382]))+ (0.5538828 * float(x[383]))+ (-0.5100308 * float(x[384]))+ (0.5133688 * float(x[385]))+ (-0.3194122 * float(x[386]))+ (0.28690296 * float(x[387]))+ (0.06414209 * float(x[388]))+ (0.10259008 * float(x[389]))+ (-0.61190534 * float(x[390]))+ (-0.67542654 * float(x[391]))+ (-0.03251639 * float(x[392]))+ (0.78057724 * float(x[393]))+ (-0.9039204 * float(x[394]))+ (0.12820642 * float(x[395]))+ (-0.9244548 * float(x[396]))+ (-0.702901 * float(x[397]))+ (-0.99697465 * float(x[398]))+ (0.0031278268 * float(x[399])))+ ((0.9176949 * float(x[400]))+ (0.4626908 * float(x[401]))+ (0.8960354 * float(x[402]))+ (-0.5942287 * float(x[403]))+ (-1.2555413 * float(x[404]))+ (-0.13554977 * float(x[405]))+ (-0.23839876 * float(x[406]))+ (0.8840694 * float(x[407]))+ (0.5885772 * float(x[408]))+ (1.0893272 * float(x[409]))+ (0.17990881 * float(x[410]))+ (-0.9439991 * float(x[411]))+ (-0.89142793 * float(x[412]))+ (-0.49714342 * float(x[413]))+ (-0.2745372 * float(x[414]))+ (-0.83210105 * float(x[415]))+ (0.124549456 * float(x[416]))+ (0.49604166 * float(x[417]))+ (0.10982293 * float(x[418]))+ (-0.4622153 * float(x[419]))+ (-0.6030124 * float(x[420]))+ (0.5950125 * float(x[421]))+ (-0.27686962 * float(x[422]))+ (0.3791742 * float(x[423]))+ (0.55471116 * float(x[424]))+ (-0.5402299 * float(x[425]))+ (-0.85118717 * float(x[426]))+ (0.3397337 * float(x[427]))+ (0.005568188 * float(x[428]))+ (0.56424534 * float(x[429]))+ (-0.5733716 * float(x[430]))+ (0.8375745 * float(x[431]))+ (-0.074318945 * float(x[432]))+ (0.9364412 * float(x[433]))+ (-0.5706875 * float(x[434]))+ (0.067780025 * float(x[435]))+ (-0.35836118 * float(x[436]))+ (-0.7333333 * float(x[437]))+ (0.38302684 * float(x[438]))+ (-0.55856353 * float(x[439]))+ (0.2473365 * float(x[440]))+ (0.060179196 * float(x[441]))+ (0.675512 * float(x[442]))+ (-0.38593665 * float(x[443]))+ (0.121940546 * float(x[444]))+ (0.16586614 * float(x[445]))+ (-0.52650267 * float(x[446]))+ (0.45482457 * float(x[447]))+ (0.38786873 * float(x[448]))+ (0.6469126 * float(x[449])))+ ((0.10369331 * float(x[450]))+ (-0.05573274 * float(x[451]))+ (-0.36969665 * float(x[452]))+ (-0.14016981 * float(x[453]))+ (0.18274803 * float(x[454]))+ (-0.43678463 * float(x[455]))+ (0.015400087 * float(x[456]))+ (2.2885911 * float(x[457]))+ (-0.12396265 * float(x[458]))+ (-0.55152583 * float(x[459]))+ (-0.06860892 * float(x[460]))+ (0.70653135 * float(x[461]))+ (0.13398685 * float(x[462]))+ (0.41291332 * float(x[463]))+ (-0.60416603 * float(x[464]))+ (-0.7124382 * float(x[465]))+ (-0.57869464 * float(x[466]))+ (0.41736704 * float(x[467]))+ (0.75306624 * float(x[468]))+ (0.9740489 * float(x[469]))+ (0.7549402 * float(x[470]))+ (0.7270848 * float(x[471]))+ (0.5327772 * float(x[472]))+ (0.97708994 * float(x[473]))+ (-0.87883615 * float(x[474]))+ (0.40339878 * float(x[475]))+ (0.4901929 * float(x[476]))+ (-0.03920874 * float(x[477]))+ (0.927325 * float(x[478]))+ (0.36560723 * float(x[479]))+ (-0.024622204 * float(x[480]))+ (0.06840014 * float(x[481]))+ (0.75846297 * float(x[482]))+ (0.0069441176 * float(x[483]))+ (0.20495611 * float(x[484]))+ (0.7337355 * float(x[485]))+ (0.1770837 * float(x[486]))+ (0.84467703 * float(x[487]))+ (-0.45006925 * float(x[488]))+ (-0.21812294 * float(x[489]))+ (-0.7507724 * float(x[490]))+ (-0.10239272 * float(x[491]))+ (0.17943127 * float(x[492]))+ (0.49392164 * float(x[493]))+ (-0.61450464 * float(x[494]))+ (-0.8603025 * float(x[495]))+ (-0.0051880153 * float(x[496]))+ (-0.0867604 * float(x[497]))+ (-0.06784382 * float(x[498]))+ (-0.24448267 * float(x[499])))+ ((-0.87202245 * float(x[500]))+ (0.35451424 * float(x[501]))+ (-0.70942384 * float(x[502]))+ (-0.3442019 * float(x[503]))+ (0.68522274 * float(x[504]))+ (0.8634698 * float(x[505]))+ (-0.824467 * float(x[506]))+ (-0.51389927 * float(x[507]))+ (0.65698814 * float(x[508]))+ (-0.41921082 * float(x[509]))+ (-0.5485902 * float(x[510]))+ (0.76678604 * float(x[511]))+ (-0.2138519 * float(x[512]))+ (-0.8715928 * float(x[513]))+ (-0.62913036 * float(x[514]))+ (0.54339725 * float(x[515]))+ (0.032624807 * float(x[516]))+ (0.38196856 * float(x[517]))+ (0.25929308 * float(x[518]))+ (0.2436602 * float(x[519]))+ (-1.4589659 * float(x[520]))+ (0.11220719 * float(x[521]))+ (-0.40229803 * float(x[522]))+ (-0.8319779 * float(x[523]))+ (0.08506908 * float(x[524]))+ (-2.1655972 * float(x[525]))+ (0.9744585 * float(x[526]))+ (0.8616052 * float(x[527]))+ (-1.0403947 * float(x[528]))+ (-0.13811201 * float(x[529]))+ (-0.90770644 * float(x[530]))+ (-0.05586082 * float(x[531]))+ (-0.783183 * float(x[532]))+ (0.9262435 * float(x[533]))+ (0.21075648 * float(x[534]))+ (-0.35336387 * float(x[535]))+ (-0.25087735 * float(x[536]))+ (-0.6257794 * float(x[537]))+ (0.32287621 * float(x[538]))+ (-0.36223853 * float(x[539]))+ (0.7751901 * float(x[540]))+ (0.6780962 * float(x[541]))+ (-1.1883804 * float(x[542]))+ (-0.8868322 * float(x[543]))+ (0.6416641 * float(x[544]))+ (-0.06758838 * float(x[545]))+ (-0.9730266 * float(x[546]))+ (-0.5007947 * float(x[547]))+ (1.3693777 * float(x[548]))+ (0.62887025 * float(x[549])))+ ((0.47124684 * float(x[550]))+ (-0.06454514 * float(x[551]))+ (-0.4545225 * float(x[552]))+ (1.0576912 * float(x[553]))+ (-0.66746193 * float(x[554]))+ (-0.14749439 * float(x[555]))+ (0.7529763 * float(x[556]))+ (-0.0649865 * float(x[557]))+ (-0.2859803 * float(x[558]))+ (0.0562339 * float(x[559]))+ (0.63739496 * float(x[560]))+ (-0.042315822 * float(x[561]))+ (0.14929776 * float(x[562]))+ (-0.21527764 * float(x[563]))+ (0.072722256 * float(x[564]))+ (0.6132944 * float(x[565]))+ (0.09565957 * float(x[566]))+ (0.029698174 * float(x[567]))+ (-0.057948977 * float(x[568]))+ (0.55293494 * float(x[569]))+ (-0.54365396 * float(x[570]))+ (-0.15074006 * float(x[571]))+ (-0.38478446 * float(x[572]))+ (-0.8227323 * float(x[573]))+ (0.29165137 * float(x[574]))+ (0.3242435 * float(x[575]))+ (-0.8056403 * float(x[576]))+ (0.8877552 * float(x[577]))+ (0.18264322 * float(x[578]))+ (-0.4383784 * float(x[579]))+ (-0.9589212 * float(x[580]))+ (0.083609715 * float(x[581]))+ (-0.33467275 * float(x[582]))+ (0.95853543 * float(x[583]))+ (0.9329773 * float(x[584]))+ (-0.03914733 * float(x[585]))+ (0.3702552 * float(x[586]))+ (0.15979573 * float(x[587]))+ (-0.79577875 * float(x[588]))+ (-0.45136616 * float(x[589]))+ (-0.6499081 * float(x[590]))+ (-0.35490215 * float(x[591]))+ (-0.46180493 * float(x[592]))+ (-0.52186555 * float(x[593]))+ (0.5092116 * float(x[594]))+ (0.69894195 * float(x[595]))+ (-0.08575821 * float(x[596]))+ (0.5528738 * float(x[597]))+ (-0.7908769 * float(x[598]))+ (0.6137434 * float(x[599])))+ ((0.23904873 * float(x[600]))+ (0.41998738 * float(x[601]))+ (-0.6442242 * float(x[602]))+ (0.8138181 * float(x[603]))+ (0.118453324 * float(x[604]))+ (-0.72576296 * float(x[605]))+ (0.54949373 * float(x[606]))+ (0.57552695 * float(x[607]))+ (0.02833678 * float(x[608]))+ (-0.45244697 * float(x[609]))+ (-0.8253387 * float(x[610]))+ (-0.3262382 * float(x[611]))+ (0.19056444 * float(x[612]))+ (0.49542668 * float(x[613]))+ (0.777192 * float(x[614]))+ (0.13993192 * float(x[615]))+ (-0.78755546 * float(x[616]))+ (0.3941103 * float(x[617]))+ (-0.9443626 * float(x[618]))+ (0.5270846 * float(x[619]))+ (-0.055105094 * float(x[620]))+ (0.37453687 * float(x[621]))+ (0.6738577 * float(x[622]))+ (-0.40537554 * float(x[623]))+ (0.10744685 * float(x[624]))+ (-0.4546554 * float(x[625]))+ (0.42563316 * float(x[626]))+ (-0.16723152 * float(x[627]))+ (-0.3882351 * float(x[628]))+ (0.8185275 * float(x[629]))+ (-0.7424339 * float(x[630]))+ (-0.7227982 * float(x[631]))+ (-0.035093147 * float(x[632]))+ (0.51722795 * float(x[633]))+ (-0.84309685 * float(x[634]))+ (0.73906446 * float(x[635]))+ (-0.9146658 * float(x[636]))+ (-0.8083199 * float(x[637]))+ (-0.35305503 * float(x[638]))+ (-0.09377385 * float(x[639]))+ (-0.4265075 * float(x[640]))+ (1.1834269 * float(x[641]))+ (0.16273491 * float(x[642]))+ (-0.93066657 * float(x[643]))+ (0.48312515 * float(x[644]))+ (-0.59895045 * float(x[645]))+ (0.4984672 * float(x[646]))+ (0.112271704 * float(x[647]))+ (-0.98509985 * float(x[648]))+ (0.6647981 * float(x[649])))+ ((0.026056278 * float(x[650]))+ (0.57838655 * float(x[651]))+ (-0.10912385 * float(x[652]))+ (0.7493847 * float(x[653]))+ (0.70445967 * float(x[654]))+ (0.06613523 * float(x[655]))+ (0.43604723 * float(x[656]))+ (-0.27815172 * float(x[657]))+ (0.5380188 * float(x[658]))+ (-0.53121084 * float(x[659]))+ (0.88308614 * float(x[660]))+ (-0.3402248 * float(x[661]))+ (0.3989602 * float(x[662]))+ (-0.59786123 * float(x[663]))+ (-0.9064192 * float(x[664]))+ (-0.5807603 * float(x[665]))+ (0.9972514 * float(x[666]))+ (0.95339924 * float(x[667]))+ (-0.9383174 * float(x[668]))+ (-0.0356413 * float(x[669]))+ (0.33698854 * float(x[670]))+ (-0.7568064 * float(x[671]))+ (-0.25377762 * float(x[672]))+ (-0.45071584 * float(x[673]))+ (0.033539675 * float(x[674]))+ (-0.4206543 * float(x[675]))+ (-0.129897 * float(x[676]))+ (-0.40855354 * float(x[677]))+ (-0.96865153 * float(x[678]))+ (0.6295267 * float(x[679]))+ (0.7173515 * float(x[680]))+ (0.9308173 * float(x[681]))+ (0.42527577 * float(x[682]))+ (0.6244247 * float(x[683]))+ (-0.87445515 * float(x[684]))+ (0.9210352 * float(x[685]))+ (-0.38833705 * float(x[686]))+ (-0.90545064 * float(x[687]))+ (0.18238077 * float(x[688]))+ (-0.8975574 * float(x[689]))+ (-0.61248016 * float(x[690]))+ (0.94315237 * float(x[691]))+ (0.19948862 * float(x[692]))+ (0.5678945 * float(x[693]))+ (0.7285467 * float(x[694]))+ (-0.122537054 * float(x[695]))+ (-0.15594864 * float(x[696]))+ (0.569895 * float(x[697]))+ (-0.5281872 * float(x[698]))+ (-0.17423096 * float(x[699])))+ ((-0.909287 * float(x[700]))+ (-0.0020750032 * float(x[701]))+ (-0.69030094 * float(x[702]))+ (0.44516668 * float(x[703]))+ (0.8216303 * float(x[704]))+ (1.6749402 * float(x[705]))+ (-0.36079335 * float(x[706]))+ (-0.25597355 * float(x[707]))+ (0.4340774 * float(x[708]))+ (0.057774585 * float(x[709]))+ (0.38379744 * float(x[710]))+ (-0.26154527 * float(x[711]))+ (-0.55749416 * float(x[712]))+ (-0.5436091 * float(x[713]))+ (-0.097325504 * float(x[714]))+ (-0.9261489 * float(x[715]))+ (-0.060683724 * float(x[716]))+ (0.39112192 * float(x[717]))+ (-0.09064266 * float(x[718]))+ (-0.4711995 * float(x[719]))+ (0.43129462 * float(x[720]))+ (-0.8855237 * float(x[721]))+ (0.5891488 * float(x[722]))+ (-0.2516306 * float(x[723]))+ (-0.21788113 * float(x[724]))+ (0.7600194 * float(x[725]))+ (0.36898828 * float(x[726]))+ (-0.14513917 * float(x[727]))+ (0.27690884 * float(x[728]))+ (-0.7011639 * float(x[729]))+ (0.67586946 * float(x[730]))+ (0.25832522 * float(x[731]))+ (0.7304942 * float(x[732]))+ (-0.52045614 * float(x[733]))+ (-0.3992492 * float(x[734]))+ (0.011522012 * float(x[735]))+ (0.6660028 * float(x[736]))+ (-0.12732975 * float(x[737]))+ (0.5858366 * float(x[738]))+ (0.51820356 * float(x[739]))+ (-0.18576464 * float(x[740]))+ (-0.68258995 * float(x[741]))+ (-0.59539 * float(x[742]))+ (-0.42649093 * float(x[743]))+ (0.98410785 * float(x[744]))+ (-0.8811502 * float(x[745]))+ (-0.16688578 * float(x[746]))+ (0.72330284 * float(x[747]))+ (-0.39191014 * float(x[748]))+ (-0.50792664 * float(x[749])))+ ((-0.3123834 * float(x[750]))+ (0.7946669 * float(x[751]))+ (-0.83388156 * float(x[752]))+ (-0.7353058 * float(x[753]))+ (0.9760445 * float(x[754]))+ (0.019027725 * float(x[755]))+ (-0.92907995 * float(x[756]))+ (-0.27224335 * float(x[757]))+ (0.5868138 * float(x[758]))+ (-0.70209026 * float(x[759]))+ (-0.98445624 * float(x[760]))+ (-0.25238886 * float(x[761]))+ (-0.30100432 * float(x[762]))+ (0.96583354 * float(x[763]))+ (0.7448314 * float(x[764]))+ (0.46076143 * float(x[765]))+ (0.7903444 * float(x[766]))+ (0.5422377 * float(x[767]))+ (0.8203162 * float(x[768]))+ (-0.100014046 * float(x[769]))+ (0.31241813 * float(x[770]))+ (0.021819435 * float(x[771]))+ (0.6888457 * float(x[772]))+ (0.86314183 * float(x[773]))+ (-0.76678777 * float(x[774]))+ (-0.47836438 * float(x[775]))+ (0.58367616 * float(x[776]))+ (0.34827048 * float(x[777]))+ (-0.21275204 * float(x[778]))+ (0.42736042 * float(x[779]))+ (-0.5815249 * float(x[780]))+ (-0.8661177 * float(x[781]))+ (-0.3005219 * float(x[782]))+ (0.8075726 * float(x[783]))+ (0.6157768 * float(x[784]))+ (0.6090086 * float(x[785]))+ (0.9429217 * float(x[786]))+ (0.86514014 * float(x[787]))+ (-0.19460313 * float(x[788]))+ (-0.53936285 * float(x[789]))+ (-0.99740636 * float(x[790]))+ (0.26443538 * float(x[791]))+ (0.33004543 * float(x[792]))+ (0.8674962 * float(x[793]))+ (-0.07089908 * float(x[794]))+ (-0.79876393 * float(x[795]))+ (0.6519663 * float(x[796]))+ (-0.26185113 * float(x[797]))+ (0.06025717 * float(x[798]))+ (-0.09656878 * float(x[799])))+ ((0.112582475 * float(x[800]))+ (0.2598549 * float(x[801]))+ (-0.52285 * float(x[802]))+ (0.065087296 * float(x[803]))+ (0.6085153 * float(x[804]))+ (-0.49239787 * float(x[805]))+ (-0.7216498 * float(x[806]))+ (0.52500695 * float(x[807]))+ (-0.4382193 * float(x[808]))+ (0.38425097 * float(x[809]))+ (0.0859398 * float(x[810]))+ (-0.9648377 * float(x[811]))+ (-0.6370413 * float(x[812]))+ (-0.5318305 * float(x[813]))+ (0.6842713 * float(x[814]))+ (-0.96017927 * float(x[815]))+ (0.12526605 * float(x[816]))+ (-0.6592505 * float(x[817]))+ (0.010233221 * float(x[818]))+ (0.5673091 * float(x[819]))+ (-0.509464 * float(x[820]))+ (0.43685114 * float(x[821]))+ (0.3532144 * float(x[822]))+ (0.47910365 * float(x[823]))+ (-0.18047538 * float(x[824]))+ (-0.93798125 * float(x[825]))+ (-0.99999195 * float(x[826]))+ (0.79967064 * float(x[827]))+ (0.059733715 * float(x[828]))+ (-0.36514592 * float(x[829]))+ (0.43108594 * float(x[830]))+ (-0.91216457 * float(x[831]))+ (0.2867411 * float(x[832]))+ (-0.25053212 * float(x[833]))+ (0.7730785 * float(x[834]))+ (-0.48763877 * float(x[835]))+ (-0.27562046 * float(x[836]))+ (-0.15739912 * float(x[837]))+ (-0.99143666 * float(x[838]))+ (-0.13577965 * float(x[839]))+ (-0.030536177 * float(x[840]))+ (0.90468264 * float(x[841]))+ (0.8535338 * float(x[842]))+ (0.3100187 * float(x[843]))+ (-0.28799883 * float(x[844]))+ (-0.057375684 * float(x[845]))+ (0.2706705 * float(x[846]))+ (1.2932405 * float(x[847]))+ (-0.901297 * float(x[848]))+ (0.46428302 * float(x[849])))+ ((0.7183154 * float(x[850]))+ (0.303718 * float(x[851]))+ (-0.8783585 * float(x[852]))+ (-0.047969762 * float(x[853]))+ (-0.83901054 * float(x[854]))+ (-0.90918255 * float(x[855]))+ (0.3891972 * float(x[856]))+ (0.20622239 * float(x[857]))+ (-0.3754051 * float(x[858]))+ (0.09365879 * float(x[859]))+ (0.35478744 * float(x[860]))+ (0.37961236 * float(x[861]))+ (0.031183159 * float(x[862]))+ (0.10305145 * float(x[863]))+ (-0.15878338 * float(x[864]))+ (-0.06063492 * float(x[865]))+ (0.12979802 * float(x[866]))+ (0.4334567 * float(x[867]))+ (-0.57534486 * float(x[868]))+ (-0.68396175 * float(x[869]))+ (0.59681743 * float(x[870]))+ (-0.3741178 * float(x[871]))+ (-0.13341974 * float(x[872]))+ (-0.5578304 * float(x[873]))+ (-0.85975695 * float(x[874]))+ (0.64185643 * float(x[875]))+ (-0.33680665 * float(x[876]))+ (0.7966233 * float(x[877]))+ (0.44746432 * float(x[878]))+ (-0.016534377 * float(x[879]))+ (-0.04691773 * float(x[880]))+ (0.5203082 * float(x[881]))+ (-0.16959667 * float(x[882]))+ (0.38911012 * float(x[883]))+ (0.280765 * float(x[884]))+ (0.7110087 * float(x[885]))+ (0.8239477 * float(x[886]))+ (0.5050348 * float(x[887]))+ (-0.59147257 * float(x[888]))+ (0.7636794 * float(x[889]))+ (0.38296026 * float(x[890]))+ (0.6710427 * float(x[891]))+ (1.5270343 * float(x[892]))+ (0.43366706 * float(x[893]))+ (1.1088442 * float(x[894]))+ (0.18979529 * float(x[895]))+ (0.33958253 * float(x[896]))+ (-0.58880496 * float(x[897]))+ (-0.5268629 * float(x[898]))+ (-0.7126066 * float(x[899])))+ ((0.22133055 * float(x[900]))+ (-0.95636296 * float(x[901]))+ (0.7467153 * float(x[902]))+ (0.6067821 * float(x[903]))+ (-0.22550374 * float(x[904]))+ (0.44300392 * float(x[905]))+ (-0.13437845 * float(x[906]))+ (0.1684913 * float(x[907]))+ (0.046661764 * float(x[908]))+ (0.3623503 * float(x[909]))+ (-0.6047864 * float(x[910]))+ (-0.2683561 * float(x[911]))+ (-0.27331936 * float(x[912]))+ (0.87634355 * float(x[913]))+ (0.84705687 * float(x[914]))+ (-0.18676886 * float(x[915]))+ (-0.7238795 * float(x[916]))+ (0.4258972 * float(x[917]))+ (-0.42028373 * float(x[918]))+ (0.6598529 * float(x[919]))+ (0.94328475 * float(x[920]))+ (0.62868434 * float(x[921]))+ (-0.97792655 * float(x[922]))+ (0.7334173 * float(x[923]))+ (0.25696614 * float(x[924]))+ (-0.055254947 * float(x[925]))+ (0.86768055 * float(x[926]))+ (-0.09318897 * float(x[927]))+ (0.082245 * float(x[928]))+ (0.6403991 * float(x[929]))+ (0.72626483 * float(x[930]))+ (0.7809826 * float(x[931]))+ (-0.09003344 * float(x[932]))+ (-0.3834059 * float(x[933]))+ (0.51920164 * float(x[934]))+ (-0.6085112 * float(x[935]))+ (-0.011497677 * float(x[936]))+ (-0.11740727 * float(x[937]))+ (-0.10645 * float(x[938]))+ (-0.20387882 * float(x[939]))+ (0.1750073 * float(x[940]))+ (0.9908304 * float(x[941]))+ (-0.9996738 * float(x[942]))+ (-0.35186866 * float(x[943]))+ (-0.15030545 * float(x[944]))+ (-0.146253 * float(x[945]))+ (0.4551223 * float(x[946]))+ (-0.20434839 * float(x[947]))+ (-0.697008 * float(x[948]))+ (0.12648797 * float(x[949])))+ ((-0.49044427 * float(x[950]))+ (0.96092933 * float(x[951]))+ (-0.32688633 * float(x[952]))+ (0.9229809 * float(x[953]))+ (0.8185981 * float(x[954]))+ (0.44242644 * float(x[955]))+ (0.29873878 * float(x[956]))+ (0.8624846 * float(x[957]))+ (0.7838076 * float(x[958]))+ (0.36372638 * float(x[959]))+ (-0.031966526 * float(x[960]))+ (0.11022938 * float(x[961]))+ (-0.28803685 * float(x[962]))+ (-0.57160944 * float(x[963]))+ (-0.44640517 * float(x[964]))+ (-0.99067277 * float(x[965]))+ (0.48345277 * float(x[966]))+ (-0.57263446 * float(x[967]))+ (-0.83033764 * float(x[968]))+ (-0.33712852 * float(x[969]))+ (-0.27925494 * float(x[970]))+ (0.4795194 * float(x[971]))+ (-0.56317216 * float(x[972]))+ (-0.36146685 * float(x[973]))+ (0.12293447 * float(x[974]))+ (-0.082819834 * float(x[975]))+ (0.23605783 * float(x[976]))+ (0.40363565 * float(x[977]))+ (0.26968032 * float(x[978]))+ (0.37936336 * float(x[979]))+ (-0.92221427 * float(x[980]))+ (0.2639687 * float(x[981]))+ (0.45307654 * float(x[982]))+ (-0.4311614 * float(x[983]))+ (0.2343381 * float(x[984]))+ (-0.86848533 * float(x[985]))+ (-0.9243635 * float(x[986]))+ (0.2683815 * float(x[987]))+ (0.3439307 * float(x[988]))+ (0.42411494 * float(x[989]))+ (-0.025433518 * float(x[990]))+ (0.809134 * float(x[991]))+ (-0.71217674 * float(x[992]))+ (-0.34598818 * float(x[993]))+ (0.0045597856 * float(x[994]))+ (-0.7466369 * float(x[995]))+ (-0.31649682 * float(x[996]))+ (-0.7591467 * float(x[997]))+ (2.436154 * float(x[998]))+ (0.6639117 * float(x[999])))+ ((-0.5984076 * float(x[1000]))+ (0.7874333 * float(x[1001]))+ (0.08101356 * float(x[1002]))+ (-0.7986188 * float(x[1003]))+ (0.5997991 * float(x[1004]))+ (0.22065246 * float(x[1005]))+ (0.11461903 * float(x[1006]))+ (0.6314093 * float(x[1007]))+ (-0.8696497 * float(x[1008]))+ (0.5955674 * float(x[1009]))+ (-0.71834326 * float(x[1010]))+ (-0.3297716 * float(x[1011]))+ (0.07678738 * float(x[1012]))+ (0.75547504 * float(x[1013]))+ (-0.6270726 * float(x[1014]))+ (0.5741854 * float(x[1015]))+ (-0.16859253 * float(x[1016]))+ (-0.20445293 * float(x[1017]))+ (-0.79872423 * float(x[1018]))+ (0.6936332 * float(x[1019]))+ (0.09726312 * float(x[1020]))+ (-0.27303103 * float(x[1021]))+ (-0.6579946 * float(x[1022]))+ (0.02648702 * float(x[1023]))+ (-0.6379008 * float(x[1024]))+ (-0.59422463 * float(x[1025]))+ (0.065637626 * float(x[1026]))+ (0.7253139 * float(x[1027]))+ (0.95562273 * float(x[1028]))+ (0.24762096 * float(x[1029]))+ (-0.34577996 * float(x[1030]))+ (-0.49321273 * float(x[1031]))+ (0.14186259 * float(x[1032]))+ (0.24512826 * float(x[1033]))+ (0.867238 * float(x[1034]))+ (0.86685646 * float(x[1035]))+ (-0.34924403 * float(x[1036]))+ (-0.677574 * float(x[1037]))+ (0.9409188 * float(x[1038]))+ (0.6868428 * float(x[1039]))+ (-0.92035025 * float(x[1040]))+ (0.44552308 * float(x[1041]))+ (-0.6491449 * float(x[1042]))+ (-0.15530793 * float(x[1043]))+ (0.15541352 * float(x[1044]))+ (-0.2612358 * float(x[1045]))+ (0.022061538 * float(x[1046]))+ (-0.6844815 * float(x[1047]))+ (-0.073441066 * float(x[1048]))+ (0.09706525 * float(x[1049])))+ ((-0.72507685 * float(x[1050]))+ (0.33251414 * float(x[1051]))+ (-0.49622667 * float(x[1052]))+ (-0.63574517 * float(x[1053]))+ (-0.9460672 * float(x[1054]))+ (0.5122891 * float(x[1055]))+ (0.073570415 * float(x[1056]))+ (-0.39632413 * float(x[1057]))+ (-0.97068906 * float(x[1058]))+ (-0.45269477 * float(x[1059]))+ (1.0475551 * float(x[1060]))+ (0.28211233 * float(x[1061]))+ (-0.03740988 * float(x[1062]))+ (-0.41018948 * float(x[1063]))+ (-0.72532856 * float(x[1064]))+ (-0.45801508 * float(x[1065]))+ (0.47831988 * float(x[1066]))+ (0.09329089 * float(x[1067]))+ (-0.9531218 * float(x[1068]))+ (-0.040244076 * float(x[1069]))+ (-0.8003095 * float(x[1070]))+ (-0.21269281 * float(x[1071]))+ (-0.6278474 * float(x[1072]))+ (-0.56669545 * float(x[1073]))+ (1.092986 * float(x[1074]))+ (0.4571991 * float(x[1075]))+ (0.5993757 * float(x[1076]))+ (0.25211704 * float(x[1077]))+ (-0.46838722 * float(x[1078]))+ (0.62704164 * float(x[1079]))+ (-0.027185235 * float(x[1080]))+ (-0.7176397 * float(x[1081]))+ (0.27502277 * float(x[1082]))+ (-0.7003924 * float(x[1083]))+ (0.66513157 * float(x[1084]))+ (-0.3843019 * float(x[1085]))+ (0.32657012 * float(x[1086]))+ (3.8480117 * float(x[1087]))+ (0.29269958 * float(x[1088]))+ (0.014696072 * float(x[1089]))+ (-0.5733327 * float(x[1090]))+ (0.8738115 * float(x[1091]))+ (-0.8195894 * float(x[1092]))+ (-0.051156085 * float(x[1093]))+ (0.3713853 * float(x[1094]))+ (-0.7063063 * float(x[1095]))+ (-0.34396654 * float(x[1096]))+ (0.65688163 * float(x[1097]))+ (-0.32614812 * float(x[1098]))+ (-0.17977358 * float(x[1099])))+ ((0.54392016 * float(x[1100]))+ (-0.56619924 * float(x[1101]))+ (-0.40618625 * float(x[1102]))+ (0.8036856 * float(x[1103]))+ (0.9485236 * float(x[1104]))+ (0.5238228 * float(x[1105]))+ (-0.9953151 * float(x[1106]))+ (-0.69942963 * float(x[1107]))+ (0.24425416 * float(x[1108]))+ (0.37101728 * float(x[1109]))+ (0.052622233 * float(x[1110]))+ (0.21070148 * float(x[1111]))+ (-0.84601665 * float(x[1112]))+ (-0.25027892 * float(x[1113]))+ (1.0393785 * float(x[1114]))+ (-0.11119611 * float(x[1115]))+ (0.1137332 * float(x[1116]))+ (-0.14336927 * float(x[1117]))+ (-0.45788178 * float(x[1118]))+ (0.14363271 * float(x[1119]))+ (0.09955344 * float(x[1120]))+ (0.91145915 * float(x[1121]))+ (0.8852728 * float(x[1122]))+ (0.41943133 * float(x[1123]))+ (-0.496216 * float(x[1124]))+ (-0.3773964 * float(x[1125]))+ (-0.15237407 * float(x[1126]))+ (-0.3423997 * float(x[1127]))+ (-0.8772619 * float(x[1128]))+ (-0.056839097 * float(x[1129]))+ (0.020440858 * float(x[1130]))+ (-1.0294237 * float(x[1131]))+ (0.26702067 * float(x[1132]))+ (-0.7681479 * float(x[1133]))+ (-0.770976 * float(x[1134]))+ (-0.7104634 * float(x[1135]))+ (-1.070616 * float(x[1136]))+ (-0.24008852 * float(x[1137]))+ (-0.64909136 * float(x[1138]))+ (-0.5369993 * float(x[1139]))+ (-0.6549848 * float(x[1140]))+ (-0.8239725 * float(x[1141]))+ (-0.44553068 * float(x[1142]))+ (-0.9036958 * float(x[1143]))+ (0.19719048 * float(x[1144]))+ (-0.21772875 * float(x[1145]))+ (-0.81124675 * float(x[1146]))+ (-0.40627834 * float(x[1147]))+ (-0.90259105 * float(x[1148]))+ (0.5212718 * float(x[1149])))+ ((0.32585555 * float(x[1150]))+ (-0.4777812 * float(x[1151]))+ (0.16172743 * float(x[1152]))+ (0.4257996 * float(x[1153]))+ (-0.4616275 * float(x[1154]))+ (0.8420641 * float(x[1155]))+ (0.8900703 * float(x[1156]))+ (0.29688647 * float(x[1157]))+ (-0.4680412 * float(x[1158]))+ (0.51179075 * float(x[1159]))+ (1.543903 * float(x[1160]))+ (0.39652082 * float(x[1161]))+ (0.2527438 * float(x[1162]))+ (0.13880396 * float(x[1163]))+ (-0.80712545 * float(x[1164]))+ (-0.45909932 * float(x[1165]))+ (-0.059941392 * float(x[1166]))+ (1.0683804 * float(x[1167]))+ (-0.8463359 * float(x[1168]))+ (-0.19303538 * float(x[1169]))+ (-0.9819112 * float(x[1170]))+ (0.009748872 * float(x[1171]))+ (0.945711 * float(x[1172]))+ (0.43487048 * float(x[1173]))+ (0.90633583 * float(x[1174]))+ (0.104640074 * float(x[1175]))+ (0.6481932 * float(x[1176]))+ (0.22627507 * float(x[1177]))+ (0.68154323 * float(x[1178]))+ (4.0209856 * float(x[1179]))+ (-0.637475 * float(x[1180]))+ (0.99139935 * float(x[1181]))+ (0.70152104 * float(x[1182]))+ (-0.7182095 * float(x[1183]))+ (0.74859494 * float(x[1184]))+ (-0.7079713 * float(x[1185]))+ (0.70106953 * float(x[1186]))+ (-0.6773534 * float(x[1187]))+ (0.1978508 * float(x[1188]))+ (0.5938728 * float(x[1189]))+ (-0.01693515 * float(x[1190]))+ (-0.5268492 * float(x[1191]))+ (0.011700837 * float(x[1192]))+ (0.744687 * float(x[1193]))+ (0.7190017 * float(x[1194]))+ (-0.5384773 * float(x[1195]))+ (-0.064364895 * float(x[1196]))+ (-0.4070343 * float(x[1197]))+ (0.615166 * float(x[1198]))+ (0.7078779 * float(x[1199])))+ ((-0.9625322 * float(x[1200]))+ (0.36671427 * float(x[1201]))+ (0.12203412 * float(x[1202]))+ (-0.99990743 * float(x[1203]))+ (-0.33421394 * float(x[1204]))+ (-0.8104688 * float(x[1205]))+ (-0.67155963 * float(x[1206]))+ (-0.7073883 * float(x[1207]))+ (0.6822656 * float(x[1208]))+ (0.84128064 * float(x[1209]))+ (0.1302583 * float(x[1210]))+ (0.82271874 * float(x[1211]))+ (0.7325813 * float(x[1212]))+ (-0.37727854 * float(x[1213]))+ (0.5950223 * float(x[1214]))+ (0.67175454 * float(x[1215]))+ (0.024369912 * float(x[1216]))+ (-0.6132141 * float(x[1217]))+ (-0.857919 * float(x[1218]))+ (0.279516 * float(x[1219]))+ (-0.6346323 * float(x[1220]))+ (0.79663455 * float(x[1221]))+ (0.03316733 * float(x[1222]))+ (-0.50566655 * float(x[1223]))+ (-0.8732661 * float(x[1224]))+ (0.2272447 * float(x[1225]))+ (-0.18828647 * float(x[1226]))+ (-0.83629566 * float(x[1227]))+ (-0.14605731 * float(x[1228]))+ (-0.20476615 * float(x[1229]))+ (0.3350618 * float(x[1230]))+ (-0.83530545 * float(x[1231]))+ (0.38386554 * float(x[1232]))+ (0.88163006 * float(x[1233]))+ (0.91353035 * float(x[1234]))+ (-0.5916398 * float(x[1235]))+ (0.18248276 * float(x[1236]))+ (0.33654755 * float(x[1237]))+ (0.6093559 * float(x[1238]))+ (0.26474118 * float(x[1239]))+ (-0.6701535 * float(x[1240]))+ (0.41205934 * float(x[1241]))+ (0.6588205 * float(x[1242]))+ (-1.132966 * float(x[1243]))+ (0.9268572 * float(x[1244]))+ (-0.92178255 * float(x[1245]))+ (0.61840564 * float(x[1246]))+ (-0.39128214 * float(x[1247]))+ (-0.3320499 * float(x[1248]))+ (0.13705634 * float(x[1249])))+ ((2.2767732 * float(x[1250]))+ (0.8564141 * float(x[1251]))+ (-0.32378265 * float(x[1252]))+ (1.9619784 * float(x[1253]))+ (0.4379214 * float(x[1254]))+ (0.46868736 * float(x[1255]))+ (-0.6970207 * float(x[1256]))+ (0.6306795 * float(x[1257]))+ (-0.13370454 * float(x[1258]))+ (0.33940446 * float(x[1259]))+ (-0.77417845 * float(x[1260]))+ (-0.81639546 * float(x[1261]))+ (0.43548417 * float(x[1262]))+ (-0.6024024 * float(x[1263]))+ (-0.75021434 * float(x[1264]))+ (0.4439572 * float(x[1265]))+ (0.64789766 * float(x[1266]))+ (-0.31677684 * float(x[1267]))+ (0.73020667 * float(x[1268]))+ (0.58748835 * float(x[1269]))+ (0.9744515 * float(x[1270]))+ (-0.32862896 * float(x[1271]))+ (-0.07835173 * float(x[1272]))+ (0.20755714 * float(x[1273]))+ (0.46613303 * float(x[1274]))+ (0.63608795 * float(x[1275]))+ (0.5993989 * float(x[1276]))+ (-0.054984525 * float(x[1277]))+ (-0.91305274 * float(x[1278]))+ (0.38244838 * float(x[1279]))+ (0.3434241 * float(x[1280]))+ (-0.7144268 * float(x[1281]))+ (0.35042363 * float(x[1282]))+ (-0.36615413 * float(x[1283]))+ (0.8420513 * float(x[1284]))+ (-0.6802677 * float(x[1285]))+ (0.1590072 * float(x[1286]))+ (0.67406833 * float(x[1287]))+ (-0.8330397 * float(x[1288]))+ (-0.12338907 * float(x[1289]))+ (-0.37251633 * float(x[1290]))+ (0.63201374 * float(x[1291]))+ (0.17207244 * float(x[1292]))+ (-0.13530101 * float(x[1293]))+ (-0.28952175 * float(x[1294]))+ (0.41614527 * float(x[1295]))+ (-0.85335815 * float(x[1296]))+ (0.5903176 * float(x[1297]))+ (0.54503644 * float(x[1298]))+ (-0.18005772 * float(x[1299])))+ ((0.023112176 * float(x[1300]))+ (0.98711824 * float(x[1301]))+ (-0.72796416 * float(x[1302]))+ (-0.6410451 * float(x[1303]))+ (0.40969363 * float(x[1304]))+ (-0.6406031 * float(x[1305]))+ (0.5013734 * float(x[1306]))+ (0.4476769 * float(x[1307]))+ (-0.5368686 * float(x[1308]))+ (-0.2702811 * float(x[1309]))+ (-0.7227823 * float(x[1310]))+ (0.8878584 * float(x[1311]))+ (0.3750822 * float(x[1312]))+ (-0.51701504 * float(x[1313]))+ (-0.71324164 * float(x[1314]))+ (-0.8343112 * float(x[1315]))+ (-0.47805542 * float(x[1316]))+ (0.006691653 * float(x[1317]))+ (-0.9562114 * float(x[1318]))+ (0.1052306 * float(x[1319]))+ (0.12172787 * float(x[1320]))+ (-0.6274766 * float(x[1321]))+ (-0.9804306 * float(x[1322]))+ (-0.089312755 * float(x[1323]))+ (0.036005184 * float(x[1324]))+ (0.8843827 * float(x[1325]))+ (-0.99526435 * float(x[1326]))+ (0.14677143 * float(x[1327]))+ (0.99908024 * float(x[1328]))+ (-0.76025975 * float(x[1329]))+ (-0.33633354 * float(x[1330]))+ (0.056024242 * float(x[1331]))+ (-0.9587002 * float(x[1332]))+ (0.53040695 * float(x[1333]))+ (0.9125193 * float(x[1334]))+ (-0.33379242 * float(x[1335]))+ (0.3143363 * float(x[1336]))+ (-0.35114783 * float(x[1337]))+ (-0.23807418 * float(x[1338]))+ (-0.03367274 * float(x[1339]))+ (-0.3160892 * float(x[1340]))+ (-0.32652214 * float(x[1341]))+ (-0.89080817 * float(x[1342]))+ (0.10998443 * float(x[1343]))+ (-0.96106106 * float(x[1344]))+ (0.70663047 * float(x[1345]))+ (-0.46669462 * float(x[1346]))+ (0.41516402 * float(x[1347]))+ (-0.92544377 * float(x[1348]))+ (-0.0044769 * float(x[1349])))+ ((0.43620846 * float(x[1350]))+ (-0.7282913 * float(x[1351]))+ (1.0049965 * float(x[1352]))+ (-0.031505063 * float(x[1353]))+ (0.68323433 * float(x[1354]))+ (-0.6787191 * float(x[1355]))+ (-0.19440956 * float(x[1356]))+ (-0.68423045 * float(x[1357]))+ (0.081690684 * float(x[1358]))+ (-0.72898763 * float(x[1359]))+ (-0.036386188 * float(x[1360]))+ (-0.2070677 * float(x[1361]))+ (-0.12986708 * float(x[1362]))+ (0.40380034 * float(x[1363]))+ (0.22959304 * float(x[1364]))+ (0.12640266 * float(x[1365]))+ (-0.55556744 * float(x[1366]))+ (0.92020446 * float(x[1367]))+ (-0.38774845 * float(x[1368]))+ (-0.19184312 * float(x[1369]))+ (-0.00032549916 * float(x[1370]))+ (1.0257025 * float(x[1371]))+ (0.96502113 * float(x[1372]))+ (0.82084674 * float(x[1373]))+ (-0.13084568 * float(x[1374]))+ (0.27768186 * float(x[1375]))+ (-0.0469186 * float(x[1376]))+ (-0.6317963 * float(x[1377]))+ (-0.7999611 * float(x[1378]))+ (-0.2925375 * float(x[1379]))+ (0.7436785 * float(x[1380]))+ (0.12333264 * float(x[1381]))+ (-0.64372194 * float(x[1382]))+ (0.14003883 * float(x[1383]))+ (-0.22054632 * float(x[1384]))+ (0.20937192 * float(x[1385]))+ (0.15454818 * float(x[1386]))+ (-0.84421545 * float(x[1387]))+ (-0.7219608 * float(x[1388]))+ (0.9722951 * float(x[1389]))+ (-0.14572509 * float(x[1390]))+ (-0.7624074 * float(x[1391]))+ (-0.84435654 * float(x[1392]))+ (-0.6674467 * float(x[1393]))+ (0.025818441 * float(x[1394]))+ (0.59855324 * float(x[1395]))+ (-0.6367079 * float(x[1396]))+ (-0.691587 * float(x[1397]))+ (0.052391555 * float(x[1398]))+ (-0.8207877 * float(x[1399])))+ ((0.39423615 * float(x[1400]))+ (-0.7210677 * float(x[1401]))+ (-0.3525798 * float(x[1402]))+ (0.8811744 * float(x[1403]))+ (-0.19875374 * float(x[1404]))+ (-0.43241712 * float(x[1405]))+ (0.9616683 * float(x[1406]))+ (0.35701495 * float(x[1407]))+ (0.2635352 * float(x[1408]))+ (0.64160454 * float(x[1409]))+ (0.04492577 * float(x[1410]))+ (-0.11945161 * float(x[1411]))+ (0.029125113 * float(x[1412]))+ (-0.23178953 * float(x[1413]))+ (-0.10927918 * float(x[1414]))+ (0.4195722 * float(x[1415]))+ (-0.07122209 * float(x[1416]))+ (-0.54440004 * float(x[1417]))+ (-0.4725352 * float(x[1418]))+ (0.70730615 * float(x[1419]))+ (-0.709728 * float(x[1420]))+ (-0.47585303 * float(x[1421]))+ (0.390348 * float(x[1422]))+ (-0.957888 * float(x[1423]))+ (0.6011975 * float(x[1424]))+ (0.17443438 * float(x[1425]))+ (-0.4858725 * float(x[1426]))+ (-0.23131977 * float(x[1427]))+ (0.12049076 * float(x[1428]))+ (-0.095288225 * float(x[1429]))+ (0.90643394 * float(x[1430]))+ (0.90547025 * float(x[1431]))+ (-0.43353033 * float(x[1432]))+ (-0.8808023 * float(x[1433]))+ (-1.8337384 * float(x[1434]))+ (0.30986476 * float(x[1435]))+ (-0.9785091 * float(x[1436]))+ (0.35230184 * float(x[1437]))+ (0.83088875 * float(x[1438]))+ (0.7871635 * float(x[1439]))+ (0.10747079 * float(x[1440]))+ (0.022262096 * float(x[1441]))+ (0.3114601 * float(x[1442]))+ (-0.51983327 * float(x[1443]))+ (0.020483866 * float(x[1444]))+ (-0.7864619 * float(x[1445]))+ (0.7122212 * float(x[1446]))+ (0.24299447 * float(x[1447]))+ (0.8847508 * float(x[1448]))+ (-0.95576835 * float(x[1449])))+ ((0.19572662 * float(x[1450]))+ (-0.03781337 * float(x[1451]))+ (0.92316175 * float(x[1452]))+ (-0.35672662 * float(x[1453]))+ (-0.0034647258 * float(x[1454]))+ (2.1307576 * float(x[1455]))+ (0.33786607 * float(x[1456]))+ (0.3201627 * float(x[1457]))+ (0.37026548 * float(x[1458]))+ (0.99803793 * float(x[1459]))+ (0.7856756 * float(x[1460]))+ (0.41228235 * float(x[1461]))+ (0.78248 * float(x[1462]))+ (0.44725353 * float(x[1463]))+ (0.5071529 * float(x[1464]))+ (-0.3240336 * float(x[1465]))+ (-0.4961607 * float(x[1466]))+ (-0.005035072 * float(x[1467]))+ (-0.17211814 * float(x[1468]))+ (0.7285027 * float(x[1469]))+ (0.07100805 * float(x[1470]))+ (0.96150094 * float(x[1471]))+ (0.626962 * float(x[1472]))+ (1.6592056 * float(x[1473]))+ (1.3530333 * float(x[1474]))+ (-0.75263953 * float(x[1475]))+ (0.39452976 * float(x[1476]))+ (0.62668604 * float(x[1477]))+ (-0.256936 * float(x[1478]))+ (0.2454012 * float(x[1479]))+ (-0.04916519 * float(x[1480]))+ (0.5357782 * float(x[1481]))+ (-1.3192859 * float(x[1482]))+ (0.24451195 * float(x[1483]))+ (-0.054094587 * float(x[1484]))+ (0.26821443 * float(x[1485]))+ (-0.8530221 * float(x[1486]))+ (0.4318106 * float(x[1487]))+ (0.27688345 * float(x[1488]))+ (0.060071427 * float(x[1489]))+ (0.040579997 * float(x[1490]))+ (0.3736983 * float(x[1491]))+ (0.057165213 * float(x[1492]))+ (0.33568332 * float(x[1493]))+ (-0.20117426 * float(x[1494]))+ (0.30269516 * float(x[1495]))+ (-0.3349798 * float(x[1496]))+ (0.94488746 * float(x[1497]))+ (0.77096695 * float(x[1498]))+ (-0.10971299 * float(x[1499])))+ ((1.3887277 * float(x[1500]))+ (0.4462981 * float(x[1501]))+ (0.7010703 * float(x[1502]))+ (0.79251665 * float(x[1503]))+ (-0.76606715 * float(x[1504]))+ (-0.27933234 * float(x[1505]))+ (0.71890527 * float(x[1506]))+ (0.45779154 * float(x[1507]))+ (0.020936383 * float(x[1508]))+ (1.7891616 * float(x[1509]))+ (0.9291622 * float(x[1510]))+ (-0.093495525 * float(x[1511]))+ (0.03324407 * float(x[1512]))+ (-0.8380873 * float(x[1513]))+ (0.5117927 * float(x[1514]))+ (-0.4063084 * float(x[1515]))+ (0.4368396 * float(x[1516]))+ (-0.7784504 * float(x[1517]))+ (2.5566401 * float(x[1518]))+ (-0.74806726 * float(x[1519]))+ (0.9538293 * float(x[1520]))+ (-0.27549255 * float(x[1521]))+ (0.43893215 * float(x[1522]))+ (-0.38393903 * float(x[1523]))+ (-0.44659233 * float(x[1524]))+ (0.15151297 * float(x[1525]))+ (-0.6168868 * float(x[1526]))+ (0.80748165 * float(x[1527]))+ (0.989109 * float(x[1528]))+ (0.003216328 * float(x[1529]))+ (-0.07498485 * float(x[1530]))+ (0.5043493 * float(x[1531]))+ (0.35924304 * float(x[1532]))+ (-0.5031726 * float(x[1533]))+ (-0.06137938 * float(x[1534]))+ (0.517097 * float(x[1535]))+ (0.15178737 * float(x[1536]))+ (-0.968703 * float(x[1537]))+ (0.59491354 * float(x[1538]))+ (0.7460971 * float(x[1539]))+ (-0.29731017 * float(x[1540]))+ (1.1403936 * float(x[1541]))+ (0.14321259 * float(x[1542]))+ (0.2042797 * float(x[1543]))+ (2.8367858 * float(x[1544]))+ (0.12670344 * float(x[1545]))+ (-0.93957055 * float(x[1546]))+ (1.2119805 * float(x[1547]))+ (0.082353376 * float(x[1548]))+ (-0.90320563 * float(x[1549])))+ ((-0.2595289 * float(x[1550]))+ (-1.0076207 * float(x[1551]))+ (0.24147424 * float(x[1552]))+ (-0.14035685 * float(x[1553]))+ (0.4802459 * float(x[1554]))+ (-0.047188066 * float(x[1555]))+ (-0.3344968 * float(x[1556]))+ (0.9442396 * float(x[1557]))) + -1.0594181), 0)
    h_2 = max((((-0.086286545 * float(x[0]))+ (0.13175803 * float(x[1]))+ (-0.3742484 * float(x[2]))+ (0.7417016 * float(x[3]))+ (-0.5850986 * float(x[4]))+ (0.81568193 * float(x[5]))+ (-0.43824404 * float(x[6]))+ (-0.70981735 * float(x[7]))+ (-0.79500115 * float(x[8]))+ (0.43468016 * float(x[9]))+ (-0.6122326 * float(x[10]))+ (0.41742593 * float(x[11]))+ (0.8203341 * float(x[12]))+ (0.99389696 * float(x[13]))+ (0.16290785 * float(x[14]))+ (0.29785416 * float(x[15]))+ (0.99805707 * float(x[16]))+ (-0.69469917 * float(x[17]))+ (0.42720896 * float(x[18]))+ (-0.3390521 * float(x[19]))+ (0.29126555 * float(x[20]))+ (0.5992971 * float(x[21]))+ (-0.36513886 * float(x[22]))+ (0.15301341 * float(x[23]))+ (-0.85764635 * float(x[24]))+ (0.7306286 * float(x[25]))+ (-0.3746907 * float(x[26]))+ (0.6176004 * float(x[27]))+ (-0.5593363 * float(x[28]))+ (-0.0127923 * float(x[29]))+ (-0.5126706 * float(x[30]))+ (-0.29871166 * float(x[31]))+ (-0.76558167 * float(x[32]))+ (-0.6753003 * float(x[33]))+ (-0.3771303 * float(x[34]))+ (0.8259886 * float(x[35]))+ (-0.69483703 * float(x[36]))+ (-0.36848387 * float(x[37]))+ (-0.8898659 * float(x[38]))+ (1.0837119 * float(x[39]))+ (0.7924136 * float(x[40]))+ (0.4239009 * float(x[41]))+ (0.46081793 * float(x[42]))+ (0.5333149 * float(x[43]))+ (-0.07706025 * float(x[44]))+ (0.9024656 * float(x[45]))+ (-0.28075245 * float(x[46]))+ (0.73649365 * float(x[47]))+ (0.78767973 * float(x[48]))+ (-0.15990266 * float(x[49])))+ ((0.040248964 * float(x[50]))+ (-0.7318532 * float(x[51]))+ (1.0596312 * float(x[52]))+ (-0.14218166 * float(x[53]))+ (-0.54980516 * float(x[54]))+ (0.7279632 * float(x[55]))+ (-0.03610806 * float(x[56]))+ (-0.22984855 * float(x[57]))+ (0.7159023 * float(x[58]))+ (0.95553833 * float(x[59]))+ (0.71048176 * float(x[60]))+ (-0.61268675 * float(x[61]))+ (0.2276808 * float(x[62]))+ (-0.5674843 * float(x[63]))+ (0.052607115 * float(x[64]))+ (0.7483897 * float(x[65]))+ (-0.21242477 * float(x[66]))+ (-0.99648565 * float(x[67]))+ (-0.57276237 * float(x[68]))+ (0.45797426 * float(x[69]))+ (-0.6772437 * float(x[70]))+ (0.56171244 * float(x[71]))+ (0.2090574 * float(x[72]))+ (-0.3614926 * float(x[73]))+ (-0.09843555 * float(x[74]))+ (2.1814685 * float(x[75]))+ (0.38157648 * float(x[76]))+ (-0.12801874 * float(x[77]))+ (-0.5429393 * float(x[78]))+ (0.8110104 * float(x[79]))+ (0.518353 * float(x[80]))+ (-0.31771433 * float(x[81]))+ (-0.90469074 * float(x[82]))+ (0.16338773 * float(x[83]))+ (-0.4424219 * float(x[84]))+ (-0.89952916 * float(x[85]))+ (-0.2795394 * float(x[86]))+ (-0.8019368 * float(x[87]))+ (1.2648855 * float(x[88]))+ (0.5183545 * float(x[89]))+ (-0.24670753 * float(x[90]))+ (-0.5509607 * float(x[91]))+ (-0.5177151 * float(x[92]))+ (-0.85382736 * float(x[93]))+ (0.06960015 * float(x[94]))+ (0.1542847 * float(x[95]))+ (-0.33547145 * float(x[96]))+ (0.49373475 * float(x[97]))+ (0.71184665 * float(x[98]))+ (-0.121002175 * float(x[99])))+ ((-0.16499545 * float(x[100]))+ (-0.6938858 * float(x[101]))+ (0.048314475 * float(x[102]))+ (-0.310749 * float(x[103]))+ (-0.46163276 * float(x[104]))+ (-0.36292005 * float(x[105]))+ (0.81264126 * float(x[106]))+ (-0.8117063 * float(x[107]))+ (0.43489876 * float(x[108]))+ (-0.36801395 * float(x[109]))+ (-0.9386096 * float(x[110]))+ (-0.0036008004 * float(x[111]))+ (0.4860043 * float(x[112]))+ (0.34901723 * float(x[113]))+ (-0.046649136 * float(x[114]))+ (0.326486 * float(x[115]))+ (0.37228093 * float(x[116]))+ (-0.665758 * float(x[117]))+ (0.86784315 * float(x[118]))+ (-0.473227 * float(x[119]))+ (-0.23356079 * float(x[120]))+ (0.0773513 * float(x[121]))+ (0.10592389 * float(x[122]))+ (0.049701836 * float(x[123]))+ (0.46290886 * float(x[124]))+ (-0.46086273 * float(x[125]))+ (-0.49110433 * float(x[126]))+ (-0.5498922 * float(x[127]))+ (0.26965052 * float(x[128]))+ (-0.25093538 * float(x[129]))+ (0.5283246 * float(x[130]))+ (-0.80516803 * float(x[131]))+ (0.9675034 * float(x[132]))+ (-0.7001919 * float(x[133]))+ (-0.29477608 * float(x[134]))+ (-0.7705091 * float(x[135]))+ (1.4560298 * float(x[136]))+ (0.39074606 * float(x[137]))+ (0.56225103 * float(x[138]))+ (-0.28053558 * float(x[139]))+ (-0.08788513 * float(x[140]))+ (-0.30203572 * float(x[141]))+ (0.24313413 * float(x[142]))+ (-0.39393046 * float(x[143]))+ (-0.50713634 * float(x[144]))+ (1.677322 * float(x[145]))+ (-0.111852445 * float(x[146]))+ (0.071606606 * float(x[147]))+ (0.8880939 * float(x[148]))+ (-0.4948609 * float(x[149])))+ ((0.80812377 * float(x[150]))+ (-0.27047074 * float(x[151]))+ (0.94289976 * float(x[152]))+ (0.9115631 * float(x[153]))+ (-0.32860756 * float(x[154]))+ (0.944281 * float(x[155]))+ (0.5674459 * float(x[156]))+ (-0.6752558 * float(x[157]))+ (0.26259318 * float(x[158]))+ (-0.107577264 * float(x[159]))+ (0.34571695 * float(x[160]))+ (-0.24919155 * float(x[161]))+ (0.2526498 * float(x[162]))+ (-0.28726405 * float(x[163]))+ (0.41329515 * float(x[164]))+ (-0.0070642317 * float(x[165]))+ (-0.874981 * float(x[166]))+ (-0.852003 * float(x[167]))+ (0.96562505 * float(x[168]))+ (-0.65912026 * float(x[169]))+ (0.688272 * float(x[170]))+ (0.22360122 * float(x[171]))+ (0.824542 * float(x[172]))+ (0.009823887 * float(x[173]))+ (0.152415 * float(x[174]))+ (-0.7200646 * float(x[175]))+ (-0.84091556 * float(x[176]))+ (0.7848396 * float(x[177]))+ (0.8694615 * float(x[178]))+ (0.70344275 * float(x[179]))+ (1.2506406 * float(x[180]))+ (-0.82361734 * float(x[181]))+ (-0.83050096 * float(x[182]))+ (0.26477793 * float(x[183]))+ (-0.9378626 * float(x[184]))+ (-0.97324693 * float(x[185]))+ (-0.3396579 * float(x[186]))+ (0.9413957 * float(x[187]))+ (0.41580248 * float(x[188]))+ (0.07049255 * float(x[189]))+ (-0.17138343 * float(x[190]))+ (1.3195449 * float(x[191]))+ (-0.86883825 * float(x[192]))+ (-0.58942175 * float(x[193]))+ (-0.05692603 * float(x[194]))+ (-0.11446995 * float(x[195]))+ (-0.033020932 * float(x[196]))+ (0.2873071 * float(x[197]))+ (0.4884098 * float(x[198]))+ (-0.3699656 * float(x[199])))+ ((0.7689894 * float(x[200]))+ (0.8660196 * float(x[201]))+ (-0.3184228 * float(x[202]))+ (0.42739877 * float(x[203]))+ (0.3919806 * float(x[204]))+ (-0.6486159 * float(x[205]))+ (-0.18130496 * float(x[206]))+ (1.0190425 * float(x[207]))+ (-0.3538834 * float(x[208]))+ (-0.344532 * float(x[209]))+ (-0.42674124 * float(x[210]))+ (0.9455945 * float(x[211]))+ (1.0146097 * float(x[212]))+ (0.7981063 * float(x[213]))+ (0.100720875 * float(x[214]))+ (0.11981023 * float(x[215]))+ (0.5900174 * float(x[216]))+ (0.53380674 * float(x[217]))+ (0.43022415 * float(x[218]))+ (-0.16348326 * float(x[219]))+ (0.48300195 * float(x[220]))+ (0.59384376 * float(x[221]))+ (0.4194116 * float(x[222]))+ (0.14044663 * float(x[223]))+ (-0.57554764 * float(x[224]))+ (0.85655564 * float(x[225]))+ (-0.5592101 * float(x[226]))+ (0.18465076 * float(x[227]))+ (-0.883873 * float(x[228]))+ (-0.9516706 * float(x[229]))+ (-0.5629769 * float(x[230]))+ (2.126777 * float(x[231]))+ (-0.29258958 * float(x[232]))+ (0.17460118 * float(x[233]))+ (0.87935245 * float(x[234]))+ (0.23334484 * float(x[235]))+ (0.018270819 * float(x[236]))+ (0.28200904 * float(x[237]))+ (-0.251359 * float(x[238]))+ (0.05363065 * float(x[239]))+ (0.16661792 * float(x[240]))+ (0.7653704 * float(x[241]))+ (0.058078267 * float(x[242]))+ (0.7764492 * float(x[243]))+ (-0.0015439942 * float(x[244]))+ (0.8074894 * float(x[245]))+ (-0.98531455 * float(x[246]))+ (-0.9000671 * float(x[247]))+ (-0.87800074 * float(x[248]))+ (0.68723667 * float(x[249])))+ ((-0.9082962 * float(x[250]))+ (-0.8260766 * float(x[251]))+ (-0.38387004 * float(x[252]))+ (0.8144995 * float(x[253]))+ (0.013102322 * float(x[254]))+ (0.9382838 * float(x[255]))+ (-0.45374867 * float(x[256]))+ (0.2864093 * float(x[257]))+ (-0.9185749 * float(x[258]))+ (0.5352132 * float(x[259]))+ (0.72435796 * float(x[260]))+ (-0.47653928 * float(x[261]))+ (0.673262 * float(x[262]))+ (0.13728727 * float(x[263]))+ (0.66367096 * float(x[264]))+ (-0.21419546 * float(x[265]))+ (0.057597257 * float(x[266]))+ (-0.30669743 * float(x[267]))+ (-0.14006172 * float(x[268]))+ (-0.33987772 * float(x[269]))+ (-0.5425471 * float(x[270]))+ (-0.41846538 * float(x[271]))+ (0.9921397 * float(x[272]))+ (0.61745876 * float(x[273]))+ (-0.9593033 * float(x[274]))+ (-0.36942863 * float(x[275]))+ (0.40143323 * float(x[276]))+ (-0.6694031 * float(x[277]))+ (-0.9200226 * float(x[278]))+ (0.29103652 * float(x[279]))+ (0.48746842 * float(x[280]))+ (-0.66857785 * float(x[281]))+ (1.2174709 * float(x[282]))+ (0.81204045 * float(x[283]))+ (0.07565351 * float(x[284]))+ (0.14328644 * float(x[285]))+ (-0.5451463 * float(x[286]))+ (-0.12761208 * float(x[287]))+ (-0.037783947 * float(x[288]))+ (-0.07658137 * float(x[289]))+ (1.1720247 * float(x[290]))+ (0.57391524 * float(x[291]))+ (-0.17037763 * float(x[292]))+ (-0.65097964 * float(x[293]))+ (0.40115473 * float(x[294]))+ (0.20369981 * float(x[295]))+ (-0.86890537 * float(x[296]))+ (0.5698647 * float(x[297]))+ (1.3080277 * float(x[298]))+ (-0.25122613 * float(x[299])))+ ((-0.52245706 * float(x[300]))+ (-0.3632668 * float(x[301]))+ (0.8832295 * float(x[302]))+ (-0.047471724 * float(x[303]))+ (-0.109131075 * float(x[304]))+ (0.85545796 * float(x[305]))+ (-0.7398588 * float(x[306]))+ (-0.93640274 * float(x[307]))+ (-0.4524741 * float(x[308]))+ (0.077168904 * float(x[309]))+ (0.44834384 * float(x[310]))+ (1.586293 * float(x[311]))+ (-0.20749131 * float(x[312]))+ (0.49366027 * float(x[313]))+ (0.47878996 * float(x[314]))+ (0.74537086 * float(x[315]))+ (-0.91631585 * float(x[316]))+ (-1.0467497 * float(x[317]))+ (0.2832191 * float(x[318]))+ (0.7484595 * float(x[319]))+ (-0.54993284 * float(x[320]))+ (0.62793785 * float(x[321]))+ (-0.9267366 * float(x[322]))+ (-0.8923679 * float(x[323]))+ (0.062148873 * float(x[324]))+ (-0.42466992 * float(x[325]))+ (0.04553344 * float(x[326]))+ (0.3709157 * float(x[327]))+ (0.8733484 * float(x[328]))+ (-0.3283525 * float(x[329]))+ (0.8108649 * float(x[330]))+ (0.7050321 * float(x[331]))+ (0.6537376 * float(x[332]))+ (0.96143305 * float(x[333]))+ (1.0965955 * float(x[334]))+ (-0.8532273 * float(x[335]))+ (-0.8520416 * float(x[336]))+ (-0.12351384 * float(x[337]))+ (0.88898534 * float(x[338]))+ (0.53435147 * float(x[339]))+ (0.7389681 * float(x[340]))+ (-0.99067754 * float(x[341]))+ (-0.65780205 * float(x[342]))+ (-0.9330646 * float(x[343]))+ (0.37847 * float(x[344]))+ (-0.07200416 * float(x[345]))+ (-1.0090296 * float(x[346]))+ (1.3584638 * float(x[347]))+ (0.367912 * float(x[348]))+ (-0.066755734 * float(x[349])))+ ((-0.99097973 * float(x[350]))+ (1.0808471 * float(x[351]))+ (0.69020855 * float(x[352]))+ (-0.98219603 * float(x[353]))+ (0.7138385 * float(x[354]))+ (-0.43112466 * float(x[355]))+ (0.78352684 * float(x[356]))+ (0.0117665585 * float(x[357]))+ (1.0583634 * float(x[358]))+ (-0.69262636 * float(x[359]))+ (0.1755397 * float(x[360]))+ (0.65180475 * float(x[361]))+ (0.03592724 * float(x[362]))+ (0.3606407 * float(x[363]))+ (-0.1663294 * float(x[364]))+ (-0.092154324 * float(x[365]))+ (-0.68704844 * float(x[366]))+ (-1.2645941 * float(x[367]))+ (0.8172153 * float(x[368]))+ (0.63624257 * float(x[369]))+ (-0.1840168 * float(x[370]))+ (-0.49689868 * float(x[371]))+ (-0.33665556 * float(x[372]))+ (0.41078454 * float(x[373]))+ (-0.48274803 * float(x[374]))+ (-0.9708971 * float(x[375]))+ (-0.16387597 * float(x[376]))+ (0.9802571 * float(x[377]))+ (-0.40498275 * float(x[378]))+ (-1.9812186 * float(x[379]))+ (0.59392446 * float(x[380]))+ (0.37461784 * float(x[381]))+ (-0.5305074 * float(x[382]))+ (-0.95799845 * float(x[383]))+ (-0.20714462 * float(x[384]))+ (1.4831928 * float(x[385]))+ (0.96599346 * float(x[386]))+ (1.5823911 * float(x[387]))+ (0.6178703 * float(x[388]))+ (0.54987377 * float(x[389]))+ (-0.71500236 * float(x[390]))+ (0.88158673 * float(x[391]))+ (-0.47976923 * float(x[392]))+ (-0.6643096 * float(x[393]))+ (-0.16179296 * float(x[394]))+ (0.88778245 * float(x[395]))+ (-0.28008622 * float(x[396]))+ (0.45829082 * float(x[397]))+ (-1.0523818 * float(x[398]))+ (1.4625424 * float(x[399])))+ ((0.57130593 * float(x[400]))+ (0.38707617 * float(x[401]))+ (0.24001527 * float(x[402]))+ (0.89036405 * float(x[403]))+ (0.49699336 * float(x[404]))+ (0.58843005 * float(x[405]))+ (-0.85544395 * float(x[406]))+ (2.3993 * float(x[407]))+ (-0.839948 * float(x[408]))+ (0.49846485 * float(x[409]))+ (0.15866472 * float(x[410]))+ (0.47088072 * float(x[411]))+ (0.26550594 * float(x[412]))+ (-0.11579254 * float(x[413]))+ (0.605688 * float(x[414]))+ (0.6115838 * float(x[415]))+ (0.52004075 * float(x[416]))+ (1.1213534 * float(x[417]))+ (-1.109707 * float(x[418]))+ (-0.80362433 * float(x[419]))+ (0.4826023 * float(x[420]))+ (0.23683585 * float(x[421]))+ (-0.6454362 * float(x[422]))+ (-0.233218 * float(x[423]))+ (0.6208075 * float(x[424]))+ (0.8263255 * float(x[425]))+ (-0.3805957 * float(x[426]))+ (-0.443943 * float(x[427]))+ (0.3481624 * float(x[428]))+ (-0.17094573 * float(x[429]))+ (0.94071835 * float(x[430]))+ (0.97985023 * float(x[431]))+ (0.3852233 * float(x[432]))+ (-0.68974435 * float(x[433]))+ (-0.6366941 * float(x[434]))+ (0.6249369 * float(x[435]))+ (-0.27033103 * float(x[436]))+ (-0.77956885 * float(x[437]))+ (-0.27511227 * float(x[438]))+ (0.56648314 * float(x[439]))+ (0.4879259 * float(x[440]))+ (0.7711446 * float(x[441]))+ (0.77018267 * float(x[442]))+ (0.47222084 * float(x[443]))+ (0.45292157 * float(x[444]))+ (-0.76122046 * float(x[445]))+ (0.7839029 * float(x[446]))+ (-0.2891128 * float(x[447]))+ (-0.90739197 * float(x[448]))+ (-0.39675653 * float(x[449])))+ ((-0.52897716 * float(x[450]))+ (-0.21514565 * float(x[451]))+ (0.88004416 * float(x[452]))+ (0.5235904 * float(x[453]))+ (0.59120923 * float(x[454]))+ (1.6734707 * float(x[455]))+ (-0.39176032 * float(x[456]))+ (-1.3426222 * float(x[457]))+ (0.8058781 * float(x[458]))+ (-0.029511914 * float(x[459]))+ (-0.19825533 * float(x[460]))+ (0.6864759 * float(x[461]))+ (-0.8695913 * float(x[462]))+ (0.6755214 * float(x[463]))+ (1.7849292 * float(x[464]))+ (-0.75068194 * float(x[465]))+ (-0.21510252 * float(x[466]))+ (-0.8371054 * float(x[467]))+ (-0.05870545 * float(x[468]))+ (0.088107325 * float(x[469]))+ (-0.98658115 * float(x[470]))+ (-0.42350847 * float(x[471]))+ (-0.30244943 * float(x[472]))+ (0.17186093 * float(x[473]))+ (-0.99927175 * float(x[474]))+ (0.9197781 * float(x[475]))+ (0.6152779 * float(x[476]))+ (0.83179766 * float(x[477]))+ (-1.0276937 * float(x[478]))+ (0.7615103 * float(x[479]))+ (0.72889376 * float(x[480]))+ (-0.717197 * float(x[481]))+ (0.50438905 * float(x[482]))+ (0.20999596 * float(x[483]))+ (-0.13648108 * float(x[484]))+ (-0.49326646 * float(x[485]))+ (-0.29145226 * float(x[486]))+ (-0.4515753 * float(x[487]))+ (0.7136586 * float(x[488]))+ (-0.33733687 * float(x[489]))+ (-0.33739117 * float(x[490]))+ (-0.7742119 * float(x[491]))+ (-0.25934824 * float(x[492]))+ (-0.022601407 * float(x[493]))+ (-0.82210153 * float(x[494]))+ (-0.030663008 * float(x[495]))+ (-0.24078912 * float(x[496]))+ (-0.3036617 * float(x[497]))+ (0.027353272 * float(x[498]))+ (1.8998262 * float(x[499])))+ ((-0.21588379 * float(x[500]))+ (0.31482884 * float(x[501]))+ (0.060451515 * float(x[502]))+ (0.6142024 * float(x[503]))+ (-0.6103659 * float(x[504]))+ (1.9389906 * float(x[505]))+ (-0.82086325 * float(x[506]))+ (1.8007624 * float(x[507]))+ (0.34288353 * float(x[508]))+ (0.12122337 * float(x[509]))+ (-0.27273113 * float(x[510]))+ (-0.51585555 * float(x[511]))+ (-0.9295011 * float(x[512]))+ (-0.6375062 * float(x[513]))+ (0.98779565 * float(x[514]))+ (-0.0059886845 * float(x[515]))+ (0.72199637 * float(x[516]))+ (-0.11059283 * float(x[517]))+ (0.8957421 * float(x[518]))+ (0.2223457 * float(x[519]))+ (-0.6823222 * float(x[520]))+ (-0.9205459 * float(x[521]))+ (-0.5542566 * float(x[522]))+ (0.18746184 * float(x[523]))+ (-0.39203048 * float(x[524]))+ (-0.91932684 * float(x[525]))+ (0.464003 * float(x[526]))+ (-0.68358094 * float(x[527]))+ (-0.0016287905 * float(x[528]))+ (-0.5428823 * float(x[529]))+ (-0.7350774 * float(x[530]))+ (0.09443844 * float(x[531]))+ (0.4391215 * float(x[532]))+ (0.5184884 * float(x[533]))+ (0.12306105 * float(x[534]))+ (-1.4094411 * float(x[535]))+ (-0.4101896 * float(x[536]))+ (0.67990416 * float(x[537]))+ (-0.6635125 * float(x[538]))+ (-0.18806618 * float(x[539]))+ (0.63493174 * float(x[540]))+ (-0.60256696 * float(x[541]))+ (0.41927838 * float(x[542]))+ (-0.2410826 * float(x[543]))+ (-0.7093122 * float(x[544]))+ (-0.7048474 * float(x[545]))+ (-0.13711849 * float(x[546]))+ (0.81985027 * float(x[547]))+ (-0.68663394 * float(x[548]))+ (-0.34766468 * float(x[549])))+ ((0.65954745 * float(x[550]))+ (-0.4037241 * float(x[551]))+ (-0.6712738 * float(x[552]))+ (0.80194664 * float(x[553]))+ (-0.39356485 * float(x[554]))+ (-0.82792276 * float(x[555]))+ (-0.84155583 * float(x[556]))+ (-0.5528959 * float(x[557]))+ (-0.74740833 * float(x[558]))+ (-0.4781117 * float(x[559]))+ (-0.019511731 * float(x[560]))+ (0.12538259 * float(x[561]))+ (-0.3688535 * float(x[562]))+ (-0.010394108 * float(x[563]))+ (0.037353985 * float(x[564]))+ (-0.104272604 * float(x[565]))+ (-0.55148333 * float(x[566]))+ (0.29864666 * float(x[567]))+ (0.56655097 * float(x[568]))+ (0.07176727 * float(x[569]))+ (-0.47604862 * float(x[570]))+ (0.10622151 * float(x[571]))+ (-0.50071645 * float(x[572]))+ (-0.8616731 * float(x[573]))+ (-0.91303104 * float(x[574]))+ (0.3116455 * float(x[575]))+ (0.07701809 * float(x[576]))+ (-0.31144458 * float(x[577]))+ (0.8565231 * float(x[578]))+ (0.3443105 * float(x[579]))+ (-0.8699359 * float(x[580]))+ (0.7929891 * float(x[581]))+ (-0.52584016 * float(x[582]))+ (1.0174556 * float(x[583]))+ (0.16367815 * float(x[584]))+ (-0.22101966 * float(x[585]))+ (-0.55604994 * float(x[586]))+ (0.6655384 * float(x[587]))+ (0.5887229 * float(x[588]))+ (-0.5892101 * float(x[589]))+ (-0.7168959 * float(x[590]))+ (-0.2439321 * float(x[591]))+ (0.6371259 * float(x[592]))+ (0.011193991 * float(x[593]))+ (-0.051778596 * float(x[594]))+ (0.14694358 * float(x[595]))+ (-0.9981002 * float(x[596]))+ (-0.12873316 * float(x[597]))+ (-0.7433996 * float(x[598]))+ (0.73334277 * float(x[599])))+ ((-0.06813246 * float(x[600]))+ (-0.2500192 * float(x[601]))+ (-0.40040737 * float(x[602]))+ (0.239293 * float(x[603]))+ (0.83603954 * float(x[604]))+ (0.027519982 * float(x[605]))+ (0.35074088 * float(x[606]))+ (0.64352417 * float(x[607]))+ (-0.6102445 * float(x[608]))+ (-1.2747567 * float(x[609]))+ (0.84666735 * float(x[610]))+ (-0.7510516 * float(x[611]))+ (-1.3586525 * float(x[612]))+ (-0.49198654 * float(x[613]))+ (-1.328606 * float(x[614]))+ (0.59099805 * float(x[615]))+ (-0.98876154 * float(x[616]))+ (0.6313832 * float(x[617]))+ (-0.31650704 * float(x[618]))+ (-0.47269347 * float(x[619]))+ (0.50495785 * float(x[620]))+ (0.09177707 * float(x[621]))+ (0.18161854 * float(x[622]))+ (-0.12745795 * float(x[623]))+ (-1.49701 * float(x[624]))+ (0.39442766 * float(x[625]))+ (-0.40523258 * float(x[626]))+ (-0.98795277 * float(x[627]))+ (0.57449925 * float(x[628]))+ (-0.7486337 * float(x[629]))+ (0.5123257 * float(x[630]))+ (-0.5293531 * float(x[631]))+ (-0.33218658 * float(x[632]))+ (-0.6078905 * float(x[633]))+ (-1.081763 * float(x[634]))+ (0.89951754 * float(x[635]))+ (0.90746653 * float(x[636]))+ (-0.19747536 * float(x[637]))+ (-0.20261587 * float(x[638]))+ (-0.453276 * float(x[639]))+ (0.88449806 * float(x[640]))+ (0.73827875 * float(x[641]))+ (0.9686097 * float(x[642]))+ (-0.62732506 * float(x[643]))+ (-0.5021506 * float(x[644]))+ (-0.38760898 * float(x[645]))+ (0.20672445 * float(x[646]))+ (-0.061238464 * float(x[647]))+ (-0.083721906 * float(x[648]))+ (0.5705995 * float(x[649])))+ ((-0.5405702 * float(x[650]))+ (0.89238065 * float(x[651]))+ (2.3195276 * float(x[652]))+ (0.9161806 * float(x[653]))+ (-0.5370214 * float(x[654]))+ (-0.025361588 * float(x[655]))+ (0.5577289 * float(x[656]))+ (-0.5524971 * float(x[657]))+ (-0.99918824 * float(x[658]))+ (0.21391322 * float(x[659]))+ (-1.0837523 * float(x[660]))+ (0.2710447 * float(x[661]))+ (-0.1772672 * float(x[662]))+ (-0.024377491 * float(x[663]))+ (-0.13653976 * float(x[664]))+ (-0.7688388 * float(x[665]))+ (0.6044432 * float(x[666]))+ (0.5320471 * float(x[667]))+ (-0.32231534 * float(x[668]))+ (0.22781771 * float(x[669]))+ (-0.12192504 * float(x[670]))+ (0.22828826 * float(x[671]))+ (-0.7705402 * float(x[672]))+ (0.4683754 * float(x[673]))+ (-0.3269882 * float(x[674]))+ (0.6374334 * float(x[675]))+ (-0.010498469 * float(x[676]))+ (0.3217751 * float(x[677]))+ (0.4793363 * float(x[678]))+ (0.5714251 * float(x[679]))+ (1.028875 * float(x[680]))+ (0.39508754 * float(x[681]))+ (0.015095913 * float(x[682]))+ (0.8168395 * float(x[683]))+ (-0.29053858 * float(x[684]))+ (0.9064634 * float(x[685]))+ (-0.09739705 * float(x[686]))+ (0.07816174 * float(x[687]))+ (0.77004004 * float(x[688]))+ (0.38696864 * float(x[689]))+ (-0.58297867 * float(x[690]))+ (0.20280768 * float(x[691]))+ (-0.0985223 * float(x[692]))+ (0.14566696 * float(x[693]))+ (0.6786717 * float(x[694]))+ (-0.27333292 * float(x[695]))+ (-0.77480537 * float(x[696]))+ (-0.9651971 * float(x[697]))+ (0.29185122 * float(x[698]))+ (1.0565164 * float(x[699])))+ ((0.11794017 * float(x[700]))+ (-0.0050986484 * float(x[701]))+ (0.27157214 * float(x[702]))+ (-0.39010718 * float(x[703]))+ (-0.50699085 * float(x[704]))+ (0.25454906 * float(x[705]))+ (-0.30735248 * float(x[706]))+ (-0.093599185 * float(x[707]))+ (-0.24593633 * float(x[708]))+ (-0.8615371 * float(x[709]))+ (-1.0707802 * float(x[710]))+ (-0.63554984 * float(x[711]))+ (0.7532104 * float(x[712]))+ (-0.24435312 * float(x[713]))+ (-0.82447624 * float(x[714]))+ (0.57414955 * float(x[715]))+ (-1.0475161 * float(x[716]))+ (0.03990938 * float(x[717]))+ (0.5767596 * float(x[718]))+ (-0.46961036 * float(x[719]))+ (0.39244053 * float(x[720]))+ (-0.14086649 * float(x[721]))+ (0.118180335 * float(x[722]))+ (-0.7612575 * float(x[723]))+ (0.9044423 * float(x[724]))+ (0.623676 * float(x[725]))+ (0.2888078 * float(x[726]))+ (-0.40040496 * float(x[727]))+ (-0.2071363 * float(x[728]))+ (0.8943888 * float(x[729]))+ (-0.9350879 * float(x[730]))+ (0.42438197 * float(x[731]))+ (0.13406542 * float(x[732]))+ (-0.81251 * float(x[733]))+ (0.82941896 * float(x[734]))+ (0.95440817 * float(x[735]))+ (0.494601 * float(x[736]))+ (0.57940596 * float(x[737]))+ (-0.06028658 * float(x[738]))+ (-0.0418419 * float(x[739]))+ (-0.8263991 * float(x[740]))+ (-0.38265428 * float(x[741]))+ (-0.3359624 * float(x[742]))+ (-0.55176765 * float(x[743]))+ (-0.5970854 * float(x[744]))+ (0.79425716 * float(x[745]))+ (0.8343216 * float(x[746]))+ (0.014452686 * float(x[747]))+ (0.48662984 * float(x[748]))+ (-0.64571965 * float(x[749])))+ ((-0.09535177 * float(x[750]))+ (0.11435726 * float(x[751]))+ (0.48490638 * float(x[752]))+ (-0.30316183 * float(x[753]))+ (-0.77390873 * float(x[754]))+ (0.73457515 * float(x[755]))+ (0.17442359 * float(x[756]))+ (-0.8948575 * float(x[757]))+ (-0.061572954 * float(x[758]))+ (-0.9048199 * float(x[759]))+ (0.13635416 * float(x[760]))+ (-0.20878038 * float(x[761]))+ (0.80413723 * float(x[762]))+ (0.9722239 * float(x[763]))+ (0.3467 * float(x[764]))+ (-1.4875181 * float(x[765]))+ (0.7364344 * float(x[766]))+ (0.80033475 * float(x[767]))+ (0.7959034 * float(x[768]))+ (-0.2750408 * float(x[769]))+ (0.067853525 * float(x[770]))+ (0.3706277 * float(x[771]))+ (0.64848465 * float(x[772]))+ (0.7568349 * float(x[773]))+ (-0.7893037 * float(x[774]))+ (-0.44963264 * float(x[775]))+ (-0.16114144 * float(x[776]))+ (-1.1909499 * float(x[777]))+ (-0.5805861 * float(x[778]))+ (-0.5998635 * float(x[779]))+ (-0.538963 * float(x[780]))+ (-0.23404665 * float(x[781]))+ (-0.87803066 * float(x[782]))+ (0.74041873 * float(x[783]))+ (0.78383785 * float(x[784]))+ (0.86407024 * float(x[785]))+ (-0.69623387 * float(x[786]))+ (-0.7296362 * float(x[787]))+ (0.32372928 * float(x[788]))+ (-0.23355347 * float(x[789]))+ (-0.061803818 * float(x[790]))+ (0.8880216 * float(x[791]))+ (-0.86028993 * float(x[792]))+ (0.5034402 * float(x[793]))+ (0.42187548 * float(x[794]))+ (-0.2656403 * float(x[795]))+ (1.0817094 * float(x[796]))+ (1.4751234 * float(x[797]))+ (-0.30207703 * float(x[798]))+ (0.8428296 * float(x[799])))+ ((-0.8226364 * float(x[800]))+ (0.45428875 * float(x[801]))+ (0.27537185 * float(x[802]))+ (1.2786088 * float(x[803]))+ (-0.3061042 * float(x[804]))+ (-0.8309039 * float(x[805]))+ (-0.48013148 * float(x[806]))+ (0.7790581 * float(x[807]))+ (-0.7516681 * float(x[808]))+ (0.38648656 * float(x[809]))+ (-0.325274 * float(x[810]))+ (-0.62288976 * float(x[811]))+ (0.26260525 * float(x[812]))+ (-0.12595844 * float(x[813]))+ (0.6357696 * float(x[814]))+ (-0.95400226 * float(x[815]))+ (0.34044006 * float(x[816]))+ (-0.39585927 * float(x[817]))+ (0.7059279 * float(x[818]))+ (-0.30948907 * float(x[819]))+ (0.093320064 * float(x[820]))+ (0.22783329 * float(x[821]))+ (0.42470562 * float(x[822]))+ (-0.3705527 * float(x[823]))+ (-0.12770472 * float(x[824]))+ (-0.02019522 * float(x[825]))+ (-0.8483903 * float(x[826]))+ (0.20019737 * float(x[827]))+ (0.8843615 * float(x[828]))+ (-0.16435489 * float(x[829]))+ (-0.10288332 * float(x[830]))+ (-0.2445086 * float(x[831]))+ (-0.45304632 * float(x[832]))+ (-0.75564694 * float(x[833]))+ (0.39547136 * float(x[834]))+ (-0.22836345 * float(x[835]))+ (-0.9579756 * float(x[836]))+ (0.1357699 * float(x[837]))+ (-0.4095411 * float(x[838]))+ (-0.85034543 * float(x[839]))+ (0.37439945 * float(x[840]))+ (-0.039934907 * float(x[841]))+ (1.9296899 * float(x[842]))+ (-0.8717442 * float(x[843]))+ (-0.3355509 * float(x[844]))+ (0.6453824 * float(x[845]))+ (0.8720355 * float(x[846]))+ (2.5906837 * float(x[847]))+ (-0.77394813 * float(x[848]))+ (-0.31884146 * float(x[849])))+ ((-0.4549775 * float(x[850]))+ (1.6861829 * float(x[851]))+ (0.43099537 * float(x[852]))+ (-0.74623585 * float(x[853]))+ (0.6733042 * float(x[854]))+ (0.3295247 * float(x[855]))+ (-0.33371007 * float(x[856]))+ (0.6757347 * float(x[857]))+ (0.8601343 * float(x[858]))+ (-0.96058404 * float(x[859]))+ (-1.3507081 * float(x[860]))+ (0.042025544 * float(x[861]))+ (-0.81220067 * float(x[862]))+ (0.24854918 * float(x[863]))+ (0.6656507 * float(x[864]))+ (0.59825474 * float(x[865]))+ (-0.6540013 * float(x[866]))+ (-0.21556944 * float(x[867]))+ (-0.895256 * float(x[868]))+ (-0.0127170095 * float(x[869]))+ (-0.586389 * float(x[870]))+ (0.0029940286 * float(x[871]))+ (-0.71214694 * float(x[872]))+ (-0.37787908 * float(x[873]))+ (-0.6755458 * float(x[874]))+ (-0.84213626 * float(x[875]))+ (0.0092420485 * float(x[876]))+ (0.3320967 * float(x[877]))+ (-0.08571461 * float(x[878]))+ (0.94245183 * float(x[879]))+ (0.10179161 * float(x[880]))+ (0.65802896 * float(x[881]))+ (0.34836307 * float(x[882]))+ (0.009462429 * float(x[883]))+ (0.4433851 * float(x[884]))+ (-0.69411427 * float(x[885]))+ (-0.84796655 * float(x[886]))+ (-0.26796272 * float(x[887]))+ (-0.6992759 * float(x[888]))+ (0.24096066 * float(x[889]))+ (-1.0901366 * float(x[890]))+ (-0.7252196 * float(x[891]))+ (0.68267417 * float(x[892]))+ (-0.21892916 * float(x[893]))+ (-0.8882255 * float(x[894]))+ (0.4890419 * float(x[895]))+ (0.0456424 * float(x[896]))+ (0.95912224 * float(x[897]))+ (-0.8720501 * float(x[898]))+ (1.4586761 * float(x[899])))+ ((-0.41156134 * float(x[900]))+ (-0.20886406 * float(x[901]))+ (1.0166152 * float(x[902]))+ (-0.5399115 * float(x[903]))+ (-0.3347798 * float(x[904]))+ (1.2139046 * float(x[905]))+ (1.584065 * float(x[906]))+ (0.7898929 * float(x[907]))+ (0.45471525 * float(x[908]))+ (-0.8419514 * float(x[909]))+ (-1.4436381 * float(x[910]))+ (0.77479434 * float(x[911]))+ (-0.89041233 * float(x[912]))+ (0.25140598 * float(x[913]))+ (0.87872136 * float(x[914]))+ (0.030865174 * float(x[915]))+ (-0.20375228 * float(x[916]))+ (-0.086556 * float(x[917]))+ (0.02109025 * float(x[918]))+ (0.7433514 * float(x[919]))+ (0.24949642 * float(x[920]))+ (-0.5458808 * float(x[921]))+ (0.24318378 * float(x[922]))+ (-0.3079717 * float(x[923]))+ (-0.6672096 * float(x[924]))+ (-0.66037554 * float(x[925]))+ (1.1144598 * float(x[926]))+ (0.35469037 * float(x[927]))+ (-0.07411535 * float(x[928]))+ (0.37827355 * float(x[929]))+ (-0.5739274 * float(x[930]))+ (-0.60267174 * float(x[931]))+ (0.21766047 * float(x[932]))+ (-0.5558812 * float(x[933]))+ (-0.27509016 * float(x[934]))+ (0.407586 * float(x[935]))+ (-0.6639143 * float(x[936]))+ (-0.54069537 * float(x[937]))+ (-1.1192651 * float(x[938]))+ (-1.4151804 * float(x[939]))+ (0.9195687 * float(x[940]))+ (-0.5852898 * float(x[941]))+ (-0.31251395 * float(x[942]))+ (0.6557933 * float(x[943]))+ (-0.6258638 * float(x[944]))+ (0.75224906 * float(x[945]))+ (-0.91495174 * float(x[946]))+ (0.12124341 * float(x[947]))+ (-0.8749077 * float(x[948]))+ (-0.25869328 * float(x[949])))+ ((-0.67354447 * float(x[950]))+ (-0.7405709 * float(x[951]))+ (-0.6557168 * float(x[952]))+ (1.212154 * float(x[953]))+ (2.396303 * float(x[954]))+ (0.023217127 * float(x[955]))+ (-0.14293414 * float(x[956]))+ (0.8487363 * float(x[957]))+ (0.5842632 * float(x[958]))+ (0.4002904 * float(x[959]))+ (-0.3351777 * float(x[960]))+ (-0.18214634 * float(x[961]))+ (0.4838284 * float(x[962]))+ (-0.23739438 * float(x[963]))+ (-0.87506896 * float(x[964]))+ (0.124821916 * float(x[965]))+ (0.15653351 * float(x[966]))+ (0.60331786 * float(x[967]))+ (-0.011333651 * float(x[968]))+ (0.19592749 * float(x[969]))+ (0.34378546 * float(x[970]))+ (0.43302697 * float(x[971]))+ (-0.7624405 * float(x[972]))+ (-0.18929191 * float(x[973]))+ (-0.07021845 * float(x[974]))+ (0.5902993 * float(x[975]))+ (-0.65170896 * float(x[976]))+ (0.33435532 * float(x[977]))+ (0.44560045 * float(x[978]))+ (-1.2115359 * float(x[979]))+ (0.40429658 * float(x[980]))+ (-0.56162006 * float(x[981]))+ (1.3093225 * float(x[982]))+ (-0.9811753 * float(x[983]))+ (-0.4671946 * float(x[984]))+ (0.52536285 * float(x[985]))+ (-0.28595808 * float(x[986]))+ (0.23938558 * float(x[987]))+ (0.21935801 * float(x[988]))+ (0.17878747 * float(x[989]))+ (-0.20406413 * float(x[990]))+ (-0.05221849 * float(x[991]))+ (0.13384955 * float(x[992]))+ (0.09385632 * float(x[993]))+ (0.92477804 * float(x[994]))+ (0.8294652 * float(x[995]))+ (-0.17555423 * float(x[996]))+ (0.34386402 * float(x[997]))+ (-0.537957 * float(x[998]))+ (0.39065495 * float(x[999])))+ ((0.8382924 * float(x[1000]))+ (0.9273829 * float(x[1001]))+ (-0.25344488 * float(x[1002]))+ (0.55920887 * float(x[1003]))+ (-0.20832919 * float(x[1004]))+ (0.16102631 * float(x[1005]))+ (-0.11799962 * float(x[1006]))+ (0.096585646 * float(x[1007]))+ (-0.6807139 * float(x[1008]))+ (1.3420924 * float(x[1009]))+ (-0.4265751 * float(x[1010]))+ (0.5419083 * float(x[1011]))+ (-0.15142636 * float(x[1012]))+ (-0.1535866 * float(x[1013]))+ (-0.19973801 * float(x[1014]))+ (0.52272046 * float(x[1015]))+ (-0.92171437 * float(x[1016]))+ (-0.47401273 * float(x[1017]))+ (2.1638455 * float(x[1018]))+ (-0.8358711 * float(x[1019]))+ (0.7757038 * float(x[1020]))+ (1.7135897 * float(x[1021]))+ (0.18482463 * float(x[1022]))+ (0.6483316 * float(x[1023]))+ (-0.8257351 * float(x[1024]))+ (-0.6662595 * float(x[1025]))+ (0.39571908 * float(x[1026]))+ (-0.38963017 * float(x[1027]))+ (0.4598307 * float(x[1028]))+ (-0.26846895 * float(x[1029]))+ (0.4627378 * float(x[1030]))+ (-1.0631927 * float(x[1031]))+ (0.37465307 * float(x[1032]))+ (0.7255257 * float(x[1033]))+ (0.9851533 * float(x[1034]))+ (0.15751147 * float(x[1035]))+ (-0.24425894 * float(x[1036]))+ (0.54463786 * float(x[1037]))+ (0.54155064 * float(x[1038]))+ (0.3438986 * float(x[1039]))+ (-0.3964981 * float(x[1040]))+ (0.85191524 * float(x[1041]))+ (0.03597258 * float(x[1042]))+ (-0.6963762 * float(x[1043]))+ (0.5171081 * float(x[1044]))+ (0.6072408 * float(x[1045]))+ (0.46013486 * float(x[1046]))+ (0.9999697 * float(x[1047]))+ (-0.13396326 * float(x[1048]))+ (0.1686169 * float(x[1049])))+ ((-1.0310028 * float(x[1050]))+ (0.4936775 * float(x[1051]))+ (-1.8338528 * float(x[1052]))+ (-1.5695997 * float(x[1053]))+ (-0.31083488 * float(x[1054]))+ (0.38036174 * float(x[1055]))+ (0.4493105 * float(x[1056]))+ (-0.64558333 * float(x[1057]))+ (-0.7813314 * float(x[1058]))+ (0.34049374 * float(x[1059]))+ (-0.48489282 * float(x[1060]))+ (0.46029392 * float(x[1061]))+ (0.030464157 * float(x[1062]))+ (3.2440763 * float(x[1063]))+ (0.6147419 * float(x[1064]))+ (-0.7919642 * float(x[1065]))+ (0.902684 * float(x[1066]))+ (0.7951656 * float(x[1067]))+ (0.062102184 * float(x[1068]))+ (-0.9937582 * float(x[1069]))+ (-0.88679606 * float(x[1070]))+ (0.045313325 * float(x[1071]))+ (0.8973352 * float(x[1072]))+ (0.6730285 * float(x[1073]))+ (-1.118596 * float(x[1074]))+ (-0.7602203 * float(x[1075]))+ (-0.4698792 * float(x[1076]))+ (0.2699528 * float(x[1077]))+ (0.040883534 * float(x[1078]))+ (0.9594753 * float(x[1079]))+ (-0.527343 * float(x[1080]))+ (-1.1827806 * float(x[1081]))+ (-0.6475525 * float(x[1082]))+ (-0.814092 * float(x[1083]))+ (-0.51998353 * float(x[1084]))+ (0.08779961 * float(x[1085]))+ (-0.07351484 * float(x[1086]))+ (0.04399126 * float(x[1087]))+ (-0.9808535 * float(x[1088]))+ (-0.58001757 * float(x[1089]))+ (1.0100889 * float(x[1090]))+ (-0.15340197 * float(x[1091]))+ (-0.68619215 * float(x[1092]))+ (-0.100796066 * float(x[1093]))+ (-0.020400077 * float(x[1094]))+ (-0.8255972 * float(x[1095]))+ (-1.939909 * float(x[1096]))+ (0.20299451 * float(x[1097]))+ (-0.2491417 * float(x[1098]))+ (-0.28161463 * float(x[1099])))+ ((-0.49332806 * float(x[1100]))+ (0.9858038 * float(x[1101]))+ (-1.705057 * float(x[1102]))+ (0.106998 * float(x[1103]))+ (0.7526705 * float(x[1104]))+ (0.46875915 * float(x[1105]))+ (-0.108648874 * float(x[1106]))+ (-0.9263566 * float(x[1107]))+ (-0.112624355 * float(x[1108]))+ (2.2052906 * float(x[1109]))+ (-0.12769932 * float(x[1110]))+ (0.23181921 * float(x[1111]))+ (0.29272825 * float(x[1112]))+ (0.8432531 * float(x[1113]))+ (1.1428146 * float(x[1114]))+ (0.606837 * float(x[1115]))+ (-1.0438128 * float(x[1116]))+ (0.12808813 * float(x[1117]))+ (-0.03274434 * float(x[1118]))+ (-0.7082072 * float(x[1119]))+ (-0.5476717 * float(x[1120]))+ (0.8188284 * float(x[1121]))+ (0.61521995 * float(x[1122]))+ (0.30272117 * float(x[1123]))+ (0.06599361 * float(x[1124]))+ (-0.79360926 * float(x[1125]))+ (0.038819127 * float(x[1126]))+ (0.1740001 * float(x[1127]))+ (-0.9374285 * float(x[1128]))+ (0.9930396 * float(x[1129]))+ (-0.5549922 * float(x[1130]))+ (-0.39331526 * float(x[1131]))+ (0.69131434 * float(x[1132]))+ (-0.7306304 * float(x[1133]))+ (-0.69570863 * float(x[1134]))+ (0.23474197 * float(x[1135]))+ (-0.5682641 * float(x[1136]))+ (-0.16845523 * float(x[1137]))+ (-0.024128536 * float(x[1138]))+ (0.8197965 * float(x[1139]))+ (-0.67933893 * float(x[1140]))+ (-0.97746605 * float(x[1141]))+ (-0.67789805 * float(x[1142]))+ (-0.88562447 * float(x[1143]))+ (-0.5771772 * float(x[1144]))+ (-0.34368175 * float(x[1145]))+ (-0.20810205 * float(x[1146]))+ (-0.7966289 * float(x[1147]))+ (-0.8917978 * float(x[1148]))+ (0.38969904 * float(x[1149])))+ ((0.057814654 * float(x[1150]))+ (0.5852932 * float(x[1151]))+ (0.69731003 * float(x[1152]))+ (-0.03433885 * float(x[1153]))+ (0.36330044 * float(x[1154]))+ (-0.18956408 * float(x[1155]))+ (-0.119954854 * float(x[1156]))+ (-0.6332865 * float(x[1157]))+ (0.7309044 * float(x[1158]))+ (-0.58028316 * float(x[1159]))+ (-0.15147208 * float(x[1160]))+ (0.26385513 * float(x[1161]))+ (0.842442 * float(x[1162]))+ (-0.2839316 * float(x[1163]))+ (0.6592748 * float(x[1164]))+ (-0.6960518 * float(x[1165]))+ (1.3131462 * float(x[1166]))+ (-2.035935 * float(x[1167]))+ (0.13146485 * float(x[1168]))+ (-0.26459515 * float(x[1169]))+ (0.57304704 * float(x[1170]))+ (0.20096034 * float(x[1171]))+ (1.1854892 * float(x[1172]))+ (0.68072057 * float(x[1173]))+ (-0.29165384 * float(x[1174]))+ (-0.22967586 * float(x[1175]))+ (0.87279207 * float(x[1176]))+ (-0.30326787 * float(x[1177]))+ (-0.2379947 * float(x[1178]))+ (-1.5409427 * float(x[1179]))+ (-0.2892456 * float(x[1180]))+ (0.58062994 * float(x[1181]))+ (-0.69285154 * float(x[1182]))+ (-0.109647416 * float(x[1183]))+ (0.28088963 * float(x[1184]))+ (0.76602536 * float(x[1185]))+ (0.45861927 * float(x[1186]))+ (-0.27045295 * float(x[1187]))+ (-0.98000413 * float(x[1188]))+ (0.34838048 * float(x[1189]))+ (0.88577807 * float(x[1190]))+ (1.0656973 * float(x[1191]))+ (-0.21668525 * float(x[1192]))+ (0.26986516 * float(x[1193]))+ (-0.5818065 * float(x[1194]))+ (-0.81787574 * float(x[1195]))+ (-0.34632573 * float(x[1196]))+ (1.212857 * float(x[1197]))+ (0.19549567 * float(x[1198]))+ (-0.019622292 * float(x[1199])))+ ((0.27448428 * float(x[1200]))+ (-0.23210762 * float(x[1201]))+ (-0.6785145 * float(x[1202]))+ (0.14593312 * float(x[1203]))+ (0.42020604 * float(x[1204]))+ (0.1400293 * float(x[1205]))+ (-0.5627867 * float(x[1206]))+ (-0.56240106 * float(x[1207]))+ (-0.4637938 * float(x[1208]))+ (1.0818554 * float(x[1209]))+ (-0.106728464 * float(x[1210]))+ (0.094792254 * float(x[1211]))+ (0.3366617 * float(x[1212]))+ (0.9622109 * float(x[1213]))+ (0.61458886 * float(x[1214]))+ (0.4822089 * float(x[1215]))+ (0.65701675 * float(x[1216]))+ (-0.31586316 * float(x[1217]))+ (-0.28431138 * float(x[1218]))+ (-0.21587601 * float(x[1219]))+ (-0.7618454 * float(x[1220]))+ (-0.07071547 * float(x[1221]))+ (-0.48090234 * float(x[1222]))+ (0.55850327 * float(x[1223]))+ (1.456218 * float(x[1224]))+ (1.111916 * float(x[1225]))+ (-0.52014136 * float(x[1226]))+ (-0.79841405 * float(x[1227]))+ (-1.6979612 * float(x[1228]))+ (-0.5611813 * float(x[1229]))+ (1.8617935 * float(x[1230]))+ (0.53573024 * float(x[1231]))+ (-0.53231734 * float(x[1232]))+ (-0.47339746 * float(x[1233]))+ (0.162561 * float(x[1234]))+ (-0.05745766 * float(x[1235]))+ (0.5546585 * float(x[1236]))+ (-0.33309412 * float(x[1237]))+ (-0.71252745 * float(x[1238]))+ (2.1115232 * float(x[1239]))+ (-0.8134389 * float(x[1240]))+ (0.117167555 * float(x[1241]))+ (-0.31396854 * float(x[1242]))+ (0.9373162 * float(x[1243]))+ (-0.53796375 * float(x[1244]))+ (-0.29621902 * float(x[1245]))+ (0.6036468 * float(x[1246]))+ (-0.5219723 * float(x[1247]))+ (1.194989 * float(x[1248]))+ (0.6689391 * float(x[1249])))+ ((-1.309932 * float(x[1250]))+ (0.23286003 * float(x[1251]))+ (-0.57054096 * float(x[1252]))+ (0.63212764 * float(x[1253]))+ (0.938578 * float(x[1254]))+ (-0.46466422 * float(x[1255]))+ (0.07961204 * float(x[1256]))+ (-0.06704483 * float(x[1257]))+ (-0.38590607 * float(x[1258]))+ (-0.6832153 * float(x[1259]))+ (0.13371235 * float(x[1260]))+ (0.5031443 * float(x[1261]))+ (0.42497206 * float(x[1262]))+ (0.363858 * float(x[1263]))+ (-0.42422062 * float(x[1264]))+ (-1.5982217 * float(x[1265]))+ (0.2619262 * float(x[1266]))+ (-0.10079889 * float(x[1267]))+ (0.83966994 * float(x[1268]))+ (-0.2447399 * float(x[1269]))+ (-0.46159256 * float(x[1270]))+ (-1.3817096 * float(x[1271]))+ (-0.3134398 * float(x[1272]))+ (-0.9639295 * float(x[1273]))+ (-0.3861206 * float(x[1274]))+ (1.3135091 * float(x[1275]))+ (0.37336925 * float(x[1276]))+ (0.29618236 * float(x[1277]))+ (1.0683063 * float(x[1278]))+ (-0.83521104 * float(x[1279]))+ (-0.68420434 * float(x[1280]))+ (-0.85504687 * float(x[1281]))+ (0.28052422 * float(x[1282]))+ (-0.95658666 * float(x[1283]))+ (0.32272616 * float(x[1284]))+ (0.7450705 * float(x[1285]))+ (-0.3936466 * float(x[1286]))+ (0.485704 * float(x[1287]))+ (0.6820876 * float(x[1288]))+ (0.71932703 * float(x[1289]))+ (0.073294915 * float(x[1290]))+ (0.9935937 * float(x[1291]))+ (-0.07175763 * float(x[1292]))+ (-0.36256558 * float(x[1293]))+ (-0.10507393 * float(x[1294]))+ (-0.18452185 * float(x[1295]))+ (0.37149897 * float(x[1296]))+ (0.34621504 * float(x[1297]))+ (-0.23113304 * float(x[1298]))+ (-0.7991477 * float(x[1299])))+ ((0.16261816 * float(x[1300]))+ (0.53311205 * float(x[1301]))+ (-0.48803446 * float(x[1302]))+ (0.87696403 * float(x[1303]))+ (-0.09095581 * float(x[1304]))+ (-0.024879616 * float(x[1305]))+ (0.81911385 * float(x[1306]))+ (0.09917279 * float(x[1307]))+ (0.093852095 * float(x[1308]))+ (0.6292053 * float(x[1309]))+ (0.048310846 * float(x[1310]))+ (-0.40105328 * float(x[1311]))+ (0.14217104 * float(x[1312]))+ (0.98120695 * float(x[1313]))+ (1.1579436 * float(x[1314]))+ (-0.34385055 * float(x[1315]))+ (-0.3357212 * float(x[1316]))+ (-0.40442944 * float(x[1317]))+ (-0.8210783 * float(x[1318]))+ (-0.6548111 * float(x[1319]))+ (0.31754965 * float(x[1320]))+ (0.81122476 * float(x[1321]))+ (-0.2711484 * float(x[1322]))+ (0.10363434 * float(x[1323]))+ (-0.79117894 * float(x[1324]))+ (-0.8640937 * float(x[1325]))+ (-1.0519968 * float(x[1326]))+ (0.43324816 * float(x[1327]))+ (0.60787195 * float(x[1328]))+ (0.85396546 * float(x[1329]))+ (-0.69382757 * float(x[1330]))+ (-0.31689772 * float(x[1331]))+ (-0.1668609 * float(x[1332]))+ (0.6258607 * float(x[1333]))+ (0.06431786 * float(x[1334]))+ (-0.13573407 * float(x[1335]))+ (0.55635923 * float(x[1336]))+ (-0.79701763 * float(x[1337]))+ (-0.7006983 * float(x[1338]))+ (-0.8479425 * float(x[1339]))+ (-0.25669456 * float(x[1340]))+ (-1.0426669 * float(x[1341]))+ (-0.34398216 * float(x[1342]))+ (1.1012658 * float(x[1343]))+ (1.1430299 * float(x[1344]))+ (0.46669957 * float(x[1345]))+ (0.4860644 * float(x[1346]))+ (-0.5877229 * float(x[1347]))+ (0.45444098 * float(x[1348]))+ (-0.06308305 * float(x[1349])))+ ((1.1672317 * float(x[1350]))+ (-1.0574516 * float(x[1351]))+ (-0.034845173 * float(x[1352]))+ (1.5664715 * float(x[1353]))+ (1.1158409 * float(x[1354]))+ (0.7001734 * float(x[1355]))+ (-0.31650892 * float(x[1356]))+ (-0.3757842 * float(x[1357]))+ (-0.2972672 * float(x[1358]))+ (0.7064115 * float(x[1359]))+ (0.20489569 * float(x[1360]))+ (-0.23701596 * float(x[1361]))+ (-0.31277072 * float(x[1362]))+ (0.9418182 * float(x[1363]))+ (-1.0672807 * float(x[1364]))+ (0.46495974 * float(x[1365]))+ (0.7631378 * float(x[1366]))+ (0.084881745 * float(x[1367]))+ (-0.7444431 * float(x[1368]))+ (0.317057 * float(x[1369]))+ (0.4259312 * float(x[1370]))+ (-0.42688307 * float(x[1371]))+ (-0.019180724 * float(x[1372]))+ (1.0776836 * float(x[1373]))+ (0.3774594 * float(x[1374]))+ (-0.64291227 * float(x[1375]))+ (-0.5748298 * float(x[1376]))+ (0.73914367 * float(x[1377]))+ (0.8888216 * float(x[1378]))+ (0.99250007 * float(x[1379]))+ (-1.2693331 * float(x[1380]))+ (-0.33046377 * float(x[1381]))+ (0.15477458 * float(x[1382]))+ (-0.46932828 * float(x[1383]))+ (-0.1497297 * float(x[1384]))+ (-0.21147592 * float(x[1385]))+ (-1.1292958 * float(x[1386]))+ (-0.9449662 * float(x[1387]))+ (0.7615429 * float(x[1388]))+ (-0.8330701 * float(x[1389]))+ (0.27254623 * float(x[1390]))+ (0.6803435 * float(x[1391]))+ (0.3791878 * float(x[1392]))+ (0.2045153 * float(x[1393]))+ (0.009169303 * float(x[1394]))+ (0.18318827 * float(x[1395]))+ (-0.08491161 * float(x[1396]))+ (1.2594451 * float(x[1397]))+ (-0.72120035 * float(x[1398]))+ (1.0500524 * float(x[1399])))+ ((0.18696515 * float(x[1400]))+ (0.55390626 * float(x[1401]))+ (0.01883957 * float(x[1402]))+ (1.3797225 * float(x[1403]))+ (-0.53400475 * float(x[1404]))+ (-0.28150827 * float(x[1405]))+ (0.59041834 * float(x[1406]))+ (-0.40771386 * float(x[1407]))+ (-2.0587049 * float(x[1408]))+ (-0.82416236 * float(x[1409]))+ (-0.058490336 * float(x[1410]))+ (0.67890525 * float(x[1411]))+ (-0.71579164 * float(x[1412]))+ (-0.18888353 * float(x[1413]))+ (-0.7656798 * float(x[1414]))+ (-0.6865491 * float(x[1415]))+ (1.3520365 * float(x[1416]))+ (0.11726068 * float(x[1417]))+ (0.9824467 * float(x[1418]))+ (0.62039477 * float(x[1419]))+ (-0.83910847 * float(x[1420]))+ (1.56445 * float(x[1421]))+ (0.43993095 * float(x[1422]))+ (-0.78754586 * float(x[1423]))+ (0.886784 * float(x[1424]))+ (0.24088694 * float(x[1425]))+ (0.6424183 * float(x[1426]))+ (-0.29727307 * float(x[1427]))+ (1.0506442 * float(x[1428]))+ (0.84626853 * float(x[1429]))+ (1.1558505 * float(x[1430]))+ (1.9129121 * float(x[1431]))+ (-0.3637768 * float(x[1432]))+ (1.4976021 * float(x[1433]))+ (-0.794322 * float(x[1434]))+ (-0.7898009 * float(x[1435]))+ (-1.7090001 * float(x[1436]))+ (0.6189298 * float(x[1437]))+ (-1.3913668 * float(x[1438]))+ (0.50331277 * float(x[1439]))+ (0.63917345 * float(x[1440]))+ (0.21169734 * float(x[1441]))+ (-0.7808971 * float(x[1442]))+ (1.3615798 * float(x[1443]))+ (1.3439934 * float(x[1444]))+ (-0.33119026 * float(x[1445]))+ (1.9345416 * float(x[1446]))+ (0.4436791 * float(x[1447]))+ (1.1079718 * float(x[1448]))+ (1.9275205 * float(x[1449])))+ ((1.4450854 * float(x[1450]))+ (0.9277549 * float(x[1451]))+ (0.7972538 * float(x[1452]))+ (0.23911805 * float(x[1453]))+ (0.6401837 * float(x[1454]))+ (-0.978863 * float(x[1455]))+ (-0.43121886 * float(x[1456]))+ (0.3387557 * float(x[1457]))+ (1.5560336 * float(x[1458]))+ (-0.35892984 * float(x[1459]))+ (0.36310765 * float(x[1460]))+ (0.3162461 * float(x[1461]))+ (0.3311847 * float(x[1462]))+ (-0.1951073 * float(x[1463]))+ (0.0060499557 * float(x[1464]))+ (0.42745078 * float(x[1465]))+ (1.2006271 * float(x[1466]))+ (4.0887794 * float(x[1467]))+ (0.32691938 * float(x[1468]))+ (-1.4476836 * float(x[1469]))+ (1.4613355 * float(x[1470]))+ (0.56707644 * float(x[1471]))+ (-0.41238645 * float(x[1472]))+ (0.499602 * float(x[1473]))+ (0.3801742 * float(x[1474]))+ (0.74404 * float(x[1475]))+ (0.90135276 * float(x[1476]))+ (1.0136857 * float(x[1477]))+ (-0.28296635 * float(x[1478]))+ (0.161317 * float(x[1479]))+ (0.68730646 * float(x[1480]))+ (0.75850755 * float(x[1481]))+ (-0.25725627 * float(x[1482]))+ (-1.0868739 * float(x[1483]))+ (-0.4686348 * float(x[1484]))+ (-0.23623927 * float(x[1485]))+ (0.7552533 * float(x[1486]))+ (-2.978938 * float(x[1487]))+ (0.08830301 * float(x[1488]))+ (-0.19445625 * float(x[1489]))+ (-0.44418952 * float(x[1490]))+ (-0.1066992 * float(x[1491]))+ (0.45885244 * float(x[1492]))+ (2.4948294 * float(x[1493]))+ (1.9224322 * float(x[1494]))+ (-1.4955292 * float(x[1495]))+ (0.54654634 * float(x[1496]))+ (-0.5587358 * float(x[1497]))+ (0.55478466 * float(x[1498]))+ (0.67442375 * float(x[1499])))+ ((0.31458604 * float(x[1500]))+ (0.37242338 * float(x[1501]))+ (0.8943129 * float(x[1502]))+ (-0.9209129 * float(x[1503]))+ (0.5089643 * float(x[1504]))+ (-0.27257788 * float(x[1505]))+ (1.410363 * float(x[1506]))+ (-1.4304739 * float(x[1507]))+ (0.18533 * float(x[1508]))+ (0.76527023 * float(x[1509]))+ (0.7231164 * float(x[1510]))+ (-0.078018755 * float(x[1511]))+ (0.3150467 * float(x[1512]))+ (-0.40766555 * float(x[1513]))+ (0.061180547 * float(x[1514]))+ (-1.0951788 * float(x[1515]))+ (1.029258 * float(x[1516]))+ (1.0411582 * float(x[1517]))+ (-1.5005981 * float(x[1518]))+ (-1.3760291 * float(x[1519]))+ (0.2321082 * float(x[1520]))+ (-0.10167378 * float(x[1521]))+ (1.6607903 * float(x[1522]))+ (-0.89927375 * float(x[1523]))+ (0.69960946 * float(x[1524]))+ (-0.75870657 * float(x[1525]))+ (-0.44113094 * float(x[1526]))+ (-0.62702435 * float(x[1527]))+ (-0.4300208 * float(x[1528]))+ (0.67904216 * float(x[1529]))+ (0.7703961 * float(x[1530]))+ (0.23807922 * float(x[1531]))+ (0.056293882 * float(x[1532]))+ (0.5207728 * float(x[1533]))+ (1.056168 * float(x[1534]))+ (-0.79175764 * float(x[1535]))+ (-0.21316452 * float(x[1536]))+ (1.8925941 * float(x[1537]))+ (-0.1577459 * float(x[1538]))+ (1.9123814 * float(x[1539]))+ (-0.8584776 * float(x[1540]))+ (-0.20099297 * float(x[1541]))+ (0.24213846 * float(x[1542]))+ (-0.5795958 * float(x[1543]))+ (-1.6269349 * float(x[1544]))+ (0.38064575 * float(x[1545]))+ (0.22178805 * float(x[1546]))+ (-0.07443377 * float(x[1547]))+ (-0.9843214 * float(x[1548]))+ (-0.3675373 * float(x[1549])))+ ((0.40894327 * float(x[1550]))+ (-0.08217745 * float(x[1551]))+ (1.5100818 * float(x[1552]))+ (0.59582156 * float(x[1553]))+ (-0.0887636 * float(x[1554]))+ (-0.08848281 * float(x[1555]))+ (-0.8392623 * float(x[1556]))+ (0.481675 * float(x[1557]))) + 0.23750487), 0)
    h_3 = max((((-0.34258002 * float(x[0]))+ (0.88331455 * float(x[1]))+ (-0.48515823 * float(x[2]))+ (1.2435935 * float(x[3]))+ (-0.9494045 * float(x[4]))+ (0.6304932 * float(x[5]))+ (-0.96534127 * float(x[6]))+ (0.55408275 * float(x[7]))+ (-0.9000478 * float(x[8]))+ (0.21789141 * float(x[9]))+ (-0.9592788 * float(x[10]))+ (-0.33631507 * float(x[11]))+ (-0.40242934 * float(x[12]))+ (-0.6120031 * float(x[13]))+ (0.26631477 * float(x[14]))+ (0.35998333 * float(x[15]))+ (-0.7239269 * float(x[16]))+ (0.23342441 * float(x[17]))+ (-0.29525158 * float(x[18]))+ (-0.877788 * float(x[19]))+ (0.95840305 * float(x[20]))+ (0.7259107 * float(x[21]))+ (0.22343613 * float(x[22]))+ (-0.7337575 * float(x[23]))+ (-0.7544145 * float(x[24]))+ (0.76091176 * float(x[25]))+ (1.8217214 * float(x[26]))+ (-0.57052934 * float(x[27]))+ (-0.38713884 * float(x[28]))+ (-0.4840992 * float(x[29]))+ (0.29110938 * float(x[30]))+ (-0.38727272 * float(x[31]))+ (-0.3260843 * float(x[32]))+ (-0.0706615 * float(x[33]))+ (-0.5853691 * float(x[34]))+ (0.42016062 * float(x[35]))+ (-0.06875346 * float(x[36]))+ (0.3228586 * float(x[37]))+ (0.65430206 * float(x[38]))+ (0.15148044 * float(x[39]))+ (-0.13717255 * float(x[40]))+ (-0.72973895 * float(x[41]))+ (-0.522994 * float(x[42]))+ (0.07199058 * float(x[43]))+ (-0.056684174 * float(x[44]))+ (0.23413678 * float(x[45]))+ (-0.7308636 * float(x[46]))+ (-0.8173052 * float(x[47]))+ (-0.00019407866 * float(x[48]))+ (-0.5992436 * float(x[49])))+ ((-0.07771328 * float(x[50]))+ (-0.55584973 * float(x[51]))+ (0.67950565 * float(x[52]))+ (-0.097848766 * float(x[53]))+ (0.4431781 * float(x[54]))+ (0.7913637 * float(x[55]))+ (-0.93460286 * float(x[56]))+ (-0.76233774 * float(x[57]))+ (-0.34584957 * float(x[58]))+ (-0.8331345 * float(x[59]))+ (0.0095287515 * float(x[60]))+ (0.721044 * float(x[61]))+ (0.5992709 * float(x[62]))+ (-0.7455776 * float(x[63]))+ (-0.86756104 * float(x[64]))+ (-0.05058917 * float(x[65]))+ (0.27856797 * float(x[66]))+ (0.7201222 * float(x[67]))+ (0.97335845 * float(x[68]))+ (0.2419885 * float(x[69]))+ (1.1482786 * float(x[70]))+ (-0.8573973 * float(x[71]))+ (-1.5234652 * float(x[72]))+ (1.0773469 * float(x[73]))+ (0.57050854 * float(x[74]))+ (-1.1554582 * float(x[75]))+ (-0.22244738 * float(x[76]))+ (0.6121292 * float(x[77]))+ (-0.38146353 * float(x[78]))+ (0.7298591 * float(x[79]))+ (0.11449252 * float(x[80]))+ (0.4483054 * float(x[81]))+ (0.97489494 * float(x[82]))+ (0.5274647 * float(x[83]))+ (0.3619427 * float(x[84]))+ (0.2834226 * float(x[85]))+ (1.038414 * float(x[86]))+ (0.272808 * float(x[87]))+ (-1.2004948 * float(x[88]))+ (0.36584434 * float(x[89]))+ (-0.046393722 * float(x[90]))+ (0.8142894 * float(x[91]))+ (-0.013528052 * float(x[92]))+ (-0.9548427 * float(x[93]))+ (-0.116835795 * float(x[94]))+ (1.4156196 * float(x[95]))+ (0.011545183 * float(x[96]))+ (0.76486766 * float(x[97]))+ (0.8011598 * float(x[98]))+ (0.61488366 * float(x[99])))+ ((0.47537038 * float(x[100]))+ (-0.6815232 * float(x[101]))+ (0.13769968 * float(x[102]))+ (-0.5859115 * float(x[103]))+ (0.89842945 * float(x[104]))+ (-0.7740408 * float(x[105]))+ (0.03942852 * float(x[106]))+ (-0.66873145 * float(x[107]))+ (0.49794713 * float(x[108]))+ (0.415247 * float(x[109]))+ (0.59933 * float(x[110]))+ (-0.4930463 * float(x[111]))+ (0.26565853 * float(x[112]))+ (0.95891786 * float(x[113]))+ (-0.9405685 * float(x[114]))+ (0.5986537 * float(x[115]))+ (-0.17097934 * float(x[116]))+ (0.018564131 * float(x[117]))+ (-1.0995177 * float(x[118]))+ (-0.8890825 * float(x[119]))+ (0.25762603 * float(x[120]))+ (0.12516333 * float(x[121]))+ (0.7351562 * float(x[122]))+ (0.7296134 * float(x[123]))+ (0.66011035 * float(x[124]))+ (-0.9856774 * float(x[125]))+ (-0.19868365 * float(x[126]))+ (1.485021 * float(x[127]))+ (-0.038307853 * float(x[128]))+ (-0.5838857 * float(x[129]))+ (0.4882951 * float(x[130]))+ (-0.022564726 * float(x[131]))+ (-0.09200965 * float(x[132]))+ (0.10225764 * float(x[133]))+ (-0.5136375 * float(x[134]))+ (-0.28141645 * float(x[135]))+ (0.729082 * float(x[136]))+ (0.8986376 * float(x[137]))+ (-1.0443674 * float(x[138]))+ (-0.6879275 * float(x[139]))+ (-0.5055656 * float(x[140]))+ (-0.03956344 * float(x[141]))+ (0.025446065 * float(x[142]))+ (-0.2131473 * float(x[143]))+ (-0.9863437 * float(x[144]))+ (0.06109323 * float(x[145]))+ (-0.90918213 * float(x[146]))+ (-0.41029453 * float(x[147]))+ (0.25592586 * float(x[148]))+ (-0.3992206 * float(x[149])))+ ((-0.8887972 * float(x[150]))+ (-0.22198395 * float(x[151]))+ (-0.73792624 * float(x[152]))+ (1.2688297 * float(x[153]))+ (-0.41898483 * float(x[154]))+ (0.3226192 * float(x[155]))+ (0.027295694 * float(x[156]))+ (-0.3481132 * float(x[157]))+ (1.2880259 * float(x[158]))+ (-0.9787955 * float(x[159]))+ (-0.38186774 * float(x[160]))+ (-0.7194322 * float(x[161]))+ (0.8727225 * float(x[162]))+ (1.0151186 * float(x[163]))+ (-0.33416465 * float(x[164]))+ (0.13234288 * float(x[165]))+ (-0.7293147 * float(x[166]))+ (1.0734036 * float(x[167]))+ (-1.0252224 * float(x[168]))+ (0.040424254 * float(x[169]))+ (-0.8148248 * float(x[170]))+ (0.58440477 * float(x[171]))+ (-0.30045068 * float(x[172]))+ (0.5868108 * float(x[173]))+ (-0.7194199 * float(x[174]))+ (0.570165 * float(x[175]))+ (-0.86283594 * float(x[176]))+ (-0.30921933 * float(x[177]))+ (-0.29684636 * float(x[178]))+ (0.8047756 * float(x[179]))+ (0.40969265 * float(x[180]))+ (-0.1735786 * float(x[181]))+ (-0.74432427 * float(x[182]))+ (0.80045825 * float(x[183]))+ (0.5255044 * float(x[184]))+ (-0.24271637 * float(x[185]))+ (0.80902827 * float(x[186]))+ (0.84933376 * float(x[187]))+ (-0.088127814 * float(x[188]))+ (-0.056985777 * float(x[189]))+ (-0.12977593 * float(x[190]))+ (-1.0848093 * float(x[191]))+ (0.73903984 * float(x[192]))+ (-0.24275045 * float(x[193]))+ (0.5663355 * float(x[194]))+ (0.487339 * float(x[195]))+ (0.6614126 * float(x[196]))+ (-0.53074205 * float(x[197]))+ (-0.93461263 * float(x[198]))+ (0.55702126 * float(x[199])))+ ((-0.43888688 * float(x[200]))+ (0.41758287 * float(x[201]))+ (0.713478 * float(x[202]))+ (-0.82469934 * float(x[203]))+ (0.477783 * float(x[204]))+ (-0.11654571 * float(x[205]))+ (-1.0597284 * float(x[206]))+ (0.47384182 * float(x[207]))+ (0.7374066 * float(x[208]))+ (-0.9658712 * float(x[209]))+ (0.7717418 * float(x[210]))+ (-0.5874978 * float(x[211]))+ (0.07859646 * float(x[212]))+ (-0.9909197 * float(x[213]))+ (-0.52292323 * float(x[214]))+ (-0.29528347 * float(x[215]))+ (-0.9549803 * float(x[216]))+ (-0.25112084 * float(x[217]))+ (-0.5084398 * float(x[218]))+ (-0.65358144 * float(x[219]))+ (-0.50888604 * float(x[220]))+ (0.35826927 * float(x[221]))+ (-0.73911893 * float(x[222]))+ (-0.91320205 * float(x[223]))+ (0.2632897 * float(x[224]))+ (-0.1788241 * float(x[225]))+ (-0.753674 * float(x[226]))+ (0.30869657 * float(x[227]))+ (-0.80149347 * float(x[228]))+ (-0.88722605 * float(x[229]))+ (0.43538004 * float(x[230]))+ (-2.0130386 * float(x[231]))+ (-0.2518059 * float(x[232]))+ (-1.2007222 * float(x[233]))+ (0.629059 * float(x[234]))+ (-1.1960989 * float(x[235]))+ (-0.5086958 * float(x[236]))+ (0.07366333 * float(x[237]))+ (0.30385548 * float(x[238]))+ (0.009585166 * float(x[239]))+ (-0.506948 * float(x[240]))+ (-1.6587089 * float(x[241]))+ (-0.71702933 * float(x[242]))+ (-0.3379854 * float(x[243]))+ (0.22350362 * float(x[244]))+ (1.0800076 * float(x[245]))+ (0.56497365 * float(x[246]))+ (-1.0275179 * float(x[247]))+ (-0.3594739 * float(x[248]))+ (-0.3158797 * float(x[249])))+ ((-0.52545106 * float(x[250]))+ (0.12287669 * float(x[251]))+ (0.014886801 * float(x[252]))+ (0.6073653 * float(x[253]))+ (-0.997775 * float(x[254]))+ (0.28642526 * float(x[255]))+ (-0.07569035 * float(x[256]))+ (-0.896241 * float(x[257]))+ (-0.5247332 * float(x[258]))+ (0.40413362 * float(x[259]))+ (0.75224507 * float(x[260]))+ (0.77845 * float(x[261]))+ (-0.3903947 * float(x[262]))+ (0.25966924 * float(x[263]))+ (-0.4479373 * float(x[264]))+ (-0.40105858 * float(x[265]))+ (-0.48626605 * float(x[266]))+ (0.5786669 * float(x[267]))+ (0.0012307229 * float(x[268]))+ (1.0266819 * float(x[269]))+ (1.223511 * float(x[270]))+ (-0.8262456 * float(x[271]))+ (0.055629697 * float(x[272]))+ (0.43448275 * float(x[273]))+ (0.41204613 * float(x[274]))+ (0.29866406 * float(x[275]))+ (-0.47037745 * float(x[276]))+ (0.08656796 * float(x[277]))+ (1.0388469 * float(x[278]))+ (-0.0020864992 * float(x[279]))+ (0.8155428 * float(x[280]))+ (0.49808586 * float(x[281]))+ (0.6987982 * float(x[282]))+ (0.10663797 * float(x[283]))+ (-1.2646075 * float(x[284]))+ (0.47780314 * float(x[285]))+ (0.53790724 * float(x[286]))+ (-0.29107428 * float(x[287]))+ (-0.5442095 * float(x[288]))+ (0.106591195 * float(x[289]))+ (-0.8194185 * float(x[290]))+ (-0.7628534 * float(x[291]))+ (-0.4351363 * float(x[292]))+ (0.13763998 * float(x[293]))+ (0.8021422 * float(x[294]))+ (-0.010062884 * float(x[295]))+ (-1.707331 * float(x[296]))+ (0.78539073 * float(x[297]))+ (0.46894318 * float(x[298]))+ (0.50421035 * float(x[299])))+ ((-0.48559177 * float(x[300]))+ (-0.20245405 * float(x[301]))+ (-0.4330982 * float(x[302]))+ (-0.93696594 * float(x[303]))+ (0.8057695 * float(x[304]))+ (0.407259 * float(x[305]))+ (0.6190418 * float(x[306]))+ (-0.110229224 * float(x[307]))+ (0.04045077 * float(x[308]))+ (-0.12299086 * float(x[309]))+ (0.81945026 * float(x[310]))+ (-0.33743393 * float(x[311]))+ (-0.029617816 * float(x[312]))+ (0.6041649 * float(x[313]))+ (0.07092942 * float(x[314]))+ (0.66596943 * float(x[315]))+ (-0.8948456 * float(x[316]))+ (0.04969459 * float(x[317]))+ (0.46809778 * float(x[318]))+ (-0.0005147556 * float(x[319]))+ (0.94542855 * float(x[320]))+ (-0.78235257 * float(x[321]))+ (-1.0140578 * float(x[322]))+ (0.8766231 * float(x[323]))+ (-0.5100361 * float(x[324]))+ (-0.82295674 * float(x[325]))+ (-0.76259315 * float(x[326]))+ (0.7091388 * float(x[327]))+ (-0.11669565 * float(x[328]))+ (-0.1089821 * float(x[329]))+ (0.0012000771 * float(x[330]))+ (0.6621855 * float(x[331]))+ (-0.12904243 * float(x[332]))+ (-0.091217585 * float(x[333]))+ (-1.0365957 * float(x[334]))+ (-0.4325596 * float(x[335]))+ (-0.8103813 * float(x[336]))+ (0.14274059 * float(x[337]))+ (0.72760135 * float(x[338]))+ (0.46461156 * float(x[339]))+ (-0.14996447 * float(x[340]))+ (0.12469099 * float(x[341]))+ (-0.5146594 * float(x[342]))+ (-0.4758991 * float(x[343]))+ (-0.40615556 * float(x[344]))+ (0.47852877 * float(x[345]))+ (0.20380147 * float(x[346]))+ (-0.76792836 * float(x[347]))+ (0.5968271 * float(x[348]))+ (-0.4283699 * float(x[349])))+ ((1.0292698 * float(x[350]))+ (0.9108646 * float(x[351]))+ (-0.32774207 * float(x[352]))+ (-0.8091346 * float(x[353]))+ (-0.3865254 * float(x[354]))+ (0.15396006 * float(x[355]))+ (-0.047574762 * float(x[356]))+ (-0.6987693 * float(x[357]))+ (0.43820277 * float(x[358]))+ (0.11764888 * float(x[359]))+ (-0.2528488 * float(x[360]))+ (-1.0365964 * float(x[361]))+ (-0.23876342 * float(x[362]))+ (-0.9823237 * float(x[363]))+ (-0.7577666 * float(x[364]))+ (-0.19798674 * float(x[365]))+ (-0.23486497 * float(x[366]))+ (0.9501486 * float(x[367]))+ (-0.8108971 * float(x[368]))+ (0.47760215 * float(x[369]))+ (0.88202465 * float(x[370]))+ (0.7480826 * float(x[371]))+ (-0.43907332 * float(x[372]))+ (0.50312996 * float(x[373]))+ (0.2510668 * float(x[374]))+ (-0.37556383 * float(x[375]))+ (-0.9324107 * float(x[376]))+ (-0.42577183 * float(x[377]))+ (-0.8444439 * float(x[378]))+ (1.4607706 * float(x[379]))+ (0.681987 * float(x[380]))+ (1.1020114 * float(x[381]))+ (-0.7881358 * float(x[382]))+ (-0.37994033 * float(x[383]))+ (0.93662053 * float(x[384]))+ (0.52599645 * float(x[385]))+ (-0.21297868 * float(x[386]))+ (-0.07675495 * float(x[387]))+ (0.42031857 * float(x[388]))+ (0.040866762 * float(x[389]))+ (-0.4355957 * float(x[390]))+ (-0.012376482 * float(x[391]))+ (-0.5437416 * float(x[392]))+ (-0.53623146 * float(x[393]))+ (0.08789038 * float(x[394]))+ (-0.9996043 * float(x[395]))+ (0.9383541 * float(x[396]))+ (-1.0034114 * float(x[397]))+ (-0.3265154 * float(x[398]))+ (0.09314525 * float(x[399])))+ ((0.70756626 * float(x[400]))+ (0.58140284 * float(x[401]))+ (0.26121703 * float(x[402]))+ (0.69180727 * float(x[403]))+ (-0.44469842 * float(x[404]))+ (0.33721116 * float(x[405]))+ (-0.7853622 * float(x[406]))+ (0.6685035 * float(x[407]))+ (-0.69797754 * float(x[408]))+ (-0.726024 * float(x[409]))+ (0.19280685 * float(x[410]))+ (-1.1033833 * float(x[411]))+ (0.30269223 * float(x[412]))+ (-0.68741435 * float(x[413]))+ (0.21819778 * float(x[414]))+ (-0.039930824 * float(x[415]))+ (-0.74959135 * float(x[416]))+ (-1.4157643 * float(x[417]))+ (1.696541 * float(x[418]))+ (-0.23676449 * float(x[419]))+ (-0.35536927 * float(x[420]))+ (0.3122023 * float(x[421]))+ (0.05020349 * float(x[422]))+ (-0.0099321585 * float(x[423]))+ (0.66600406 * float(x[424]))+ (0.4209103 * float(x[425]))+ (0.09275555 * float(x[426]))+ (-0.18390754 * float(x[427]))+ (-0.23430854 * float(x[428]))+ (-0.24357468 * float(x[429]))+ (1.3144304 * float(x[430]))+ (0.11659745 * float(x[431]))+ (1.4656855 * float(x[432]))+ (0.32006603 * float(x[433]))+ (-0.8315446 * float(x[434]))+ (0.5300198 * float(x[435]))+ (0.2740564 * float(x[436]))+ (0.12165502 * float(x[437]))+ (0.15970865 * float(x[438]))+ (-0.70072645 * float(x[439]))+ (1.0316886 * float(x[440]))+ (0.7050418 * float(x[441]))+ (0.9317924 * float(x[442]))+ (-0.7704708 * float(x[443]))+ (0.15516555 * float(x[444]))+ (-0.14739059 * float(x[445]))+ (0.8091688 * float(x[446]))+ (0.6510205 * float(x[447]))+ (0.06692697 * float(x[448]))+ (-0.21704893 * float(x[449])))+ ((-0.5870632 * float(x[450]))+ (0.13711257 * float(x[451]))+ (-0.23304112 * float(x[452]))+ (-0.67116904 * float(x[453]))+ (-0.7326552 * float(x[454]))+ (-0.31187937 * float(x[455]))+ (0.7454584 * float(x[456]))+ (0.23392081 * float(x[457]))+ (0.97241455 * float(x[458]))+ (0.2446956 * float(x[459]))+ (0.03481461 * float(x[460]))+ (0.6866353 * float(x[461]))+ (0.11812855 * float(x[462]))+ (-0.94711757 * float(x[463]))+ (0.09705073 * float(x[464]))+ (-0.6131509 * float(x[465]))+ (-0.7374986 * float(x[466]))+ (0.2935442 * float(x[467]))+ (-0.934312 * float(x[468]))+ (-0.67573327 * float(x[469]))+ (0.23807667 * float(x[470]))+ (-0.61706644 * float(x[471]))+ (-0.61058414 * float(x[472]))+ (0.5262489 * float(x[473]))+ (0.0968917 * float(x[474]))+ (-0.38974124 * float(x[475]))+ (-0.97260517 * float(x[476]))+ (0.96099406 * float(x[477]))+ (0.87289226 * float(x[478]))+ (0.06261539 * float(x[479]))+ (-0.29386643 * float(x[480]))+ (0.08423898 * float(x[481]))+ (-0.43710342 * float(x[482]))+ (-0.124698095 * float(x[483]))+ (-0.6971317 * float(x[484]))+ (-1.0052606 * float(x[485]))+ (0.07684785 * float(x[486]))+ (-0.08094951 * float(x[487]))+ (-0.55986476 * float(x[488]))+ (0.6730767 * float(x[489]))+ (-0.044519186 * float(x[490]))+ (0.8745632 * float(x[491]))+ (-0.8647194 * float(x[492]))+ (-0.33842483 * float(x[493]))+ (-0.86460984 * float(x[494]))+ (-0.40116474 * float(x[495]))+ (0.5601001 * float(x[496]))+ (-0.17443444 * float(x[497]))+ (0.8618816 * float(x[498]))+ (-0.791642 * float(x[499])))+ ((-0.56556225 * float(x[500]))+ (-0.10035404 * float(x[501]))+ (0.78382635 * float(x[502]))+ (0.67193353 * float(x[503]))+ (0.06564867 * float(x[504]))+ (0.81405324 * float(x[505]))+ (-0.2772468 * float(x[506]))+ (0.81376886 * float(x[507]))+ (1.3249998 * float(x[508]))+ (-0.7462127 * float(x[509]))+ (-0.3614804 * float(x[510]))+ (-0.43187147 * float(x[511]))+ (-0.20200539 * float(x[512]))+ (-0.4818268 * float(x[513]))+ (0.3124326 * float(x[514]))+ (-0.19725607 * float(x[515]))+ (-0.36869 * float(x[516]))+ (-0.76058024 * float(x[517]))+ (1.0732812 * float(x[518]))+ (-0.34199002 * float(x[519]))+ (-0.07131712 * float(x[520]))+ (-0.044280645 * float(x[521]))+ (-0.57049996 * float(x[522]))+ (0.91573185 * float(x[523]))+ (-1.0462704 * float(x[524]))+ (0.147138 * float(x[525]))+ (0.08129536 * float(x[526]))+ (-0.46701044 * float(x[527]))+ (0.9240826 * float(x[528]))+ (-0.6985986 * float(x[529]))+ (-0.6102505 * float(x[530]))+ (0.16351335 * float(x[531]))+ (0.14276396 * float(x[532]))+ (0.4869257 * float(x[533]))+ (0.79941475 * float(x[534]))+ (-0.5778576 * float(x[535]))+ (-0.65215474 * float(x[536]))+ (-0.92849016 * float(x[537]))+ (-0.5660102 * float(x[538]))+ (0.26212075 * float(x[539]))+ (-1.1258912 * float(x[540]))+ (-0.0027072441 * float(x[541]))+ (0.70029104 * float(x[542]))+ (-0.6187533 * float(x[543]))+ (0.5764366 * float(x[544]))+ (1.4291066 * float(x[545]))+ (0.12442453 * float(x[546]))+ (0.4390044 * float(x[547]))+ (0.30156866 * float(x[548]))+ (-0.103362605 * float(x[549])))+ ((-0.69499105 * float(x[550]))+ (-0.44271198 * float(x[551]))+ (-0.28939015 * float(x[552]))+ (0.05312143 * float(x[553]))+ (0.26528686 * float(x[554]))+ (0.60359323 * float(x[555]))+ (-0.8741634 * float(x[556]))+ (-0.3595806 * float(x[557]))+ (0.6907272 * float(x[558]))+ (-0.8930541 * float(x[559]))+ (-0.60202694 * float(x[560]))+ (0.951695 * float(x[561]))+ (-1.0962281 * float(x[562]))+ (-0.4499262 * float(x[563]))+ (0.9714283 * float(x[564]))+ (-0.51845974 * float(x[565]))+ (-0.46087915 * float(x[566]))+ (0.3085797 * float(x[567]))+ (-0.7446163 * float(x[568]))+ (-0.03510726 * float(x[569]))+ (-1.111042 * float(x[570]))+ (-0.022779008 * float(x[571]))+ (0.5929534 * float(x[572]))+ (0.091515 * float(x[573]))+ (0.65968525 * float(x[574]))+ (-0.36101785 * float(x[575]))+ (0.46059275 * float(x[576]))+ (-0.12790817 * float(x[577]))+ (-0.3890801 * float(x[578]))+ (-0.33101317 * float(x[579]))+ (-0.49314508 * float(x[580]))+ (-0.6274137 * float(x[581]))+ (0.83029866 * float(x[582]))+ (-0.4495181 * float(x[583]))+ (0.5556359 * float(x[584]))+ (-0.18970287 * float(x[585]))+ (-0.28259113 * float(x[586]))+ (-0.85994774 * float(x[587]))+ (0.21302615 * float(x[588]))+ (0.18964033 * float(x[589]))+ (-0.20822003 * float(x[590]))+ (0.18847635 * float(x[591]))+ (0.66580415 * float(x[592]))+ (0.7335404 * float(x[593]))+ (-0.55027694 * float(x[594]))+ (-0.5970199 * float(x[595]))+ (0.1961939 * float(x[596]))+ (0.40580317 * float(x[597]))+ (-0.5328819 * float(x[598]))+ (-1.185883 * float(x[599])))+ ((-0.5604707 * float(x[600]))+ (0.95906514 * float(x[601]))+ (-0.029794924 * float(x[602]))+ (0.83034545 * float(x[603]))+ (1.3422302 * float(x[604]))+ (0.08394822 * float(x[605]))+ (-0.8905569 * float(x[606]))+ (-0.72771406 * float(x[607]))+ (-0.20304434 * float(x[608]))+ (0.76003814 * float(x[609]))+ (-0.09335816 * float(x[610]))+ (-0.9051487 * float(x[611]))+ (0.113539666 * float(x[612]))+ (-0.9986162 * float(x[613]))+ (1.2353222 * float(x[614]))+ (0.16895871 * float(x[615]))+ (0.8641371 * float(x[616]))+ (0.17099917 * float(x[617]))+ (-0.27472615 * float(x[618]))+ (0.25951198 * float(x[619]))+ (-0.13920777 * float(x[620]))+ (0.6315862 * float(x[621]))+ (0.7596484 * float(x[622]))+ (-0.8218203 * float(x[623]))+ (1.1043086 * float(x[624]))+ (0.88120604 * float(x[625]))+ (-0.394311 * float(x[626]))+ (-0.6034715 * float(x[627]))+ (-1.0638828 * float(x[628]))+ (0.52377725 * float(x[629]))+ (0.8400763 * float(x[630]))+ (0.6412685 * float(x[631]))+ (0.45193207 * float(x[632]))+ (-0.12485082 * float(x[633]))+ (0.7282483 * float(x[634]))+ (-0.5468371 * float(x[635]))+ (-0.23004645 * float(x[636]))+ (-0.27161124 * float(x[637]))+ (0.101499036 * float(x[638]))+ (-0.8649765 * float(x[639]))+ (-0.009712236 * float(x[640]))+ (-0.07464685 * float(x[641]))+ (-0.19902243 * float(x[642]))+ (-0.1419971 * float(x[643]))+ (-0.64473194 * float(x[644]))+ (0.6626105 * float(x[645]))+ (0.79386944 * float(x[646]))+ (1.3246751 * float(x[647]))+ (-0.06648386 * float(x[648]))+ (-0.5908822 * float(x[649])))+ ((0.19744056 * float(x[650]))+ (0.5154331 * float(x[651]))+ (1.029578 * float(x[652]))+ (0.37902695 * float(x[653]))+ (-0.77781653 * float(x[654]))+ (0.45777765 * float(x[655]))+ (1.4744251 * float(x[656]))+ (0.32785884 * float(x[657]))+ (0.8536841 * float(x[658]))+ (0.8421632 * float(x[659]))+ (1.000397 * float(x[660]))+ (0.8456921 * float(x[661]))+ (0.6357018 * float(x[662]))+ (-0.20763063 * float(x[663]))+ (0.1888066 * float(x[664]))+ (0.7076301 * float(x[665]))+ (0.71822166 * float(x[666]))+ (-0.7105537 * float(x[667]))+ (-0.39316794 * float(x[668]))+ (0.020185726 * float(x[669]))+ (-0.3936224 * float(x[670]))+ (-0.5201325 * float(x[671]))+ (0.6070642 * float(x[672]))+ (0.58701754 * float(x[673]))+ (0.5175071 * float(x[674]))+ (0.19674051 * float(x[675]))+ (0.052492235 * float(x[676]))+ (0.71883917 * float(x[677]))+ (0.6909971 * float(x[678]))+ (-0.49628767 * float(x[679]))+ (0.008979366 * float(x[680]))+ (0.565376 * float(x[681]))+ (-1.0963253 * float(x[682]))+ (-0.677785 * float(x[683]))+ (-1.0044266 * float(x[684]))+ (-0.4381225 * float(x[685]))+ (-0.05454612 * float(x[686]))+ (-0.08623333 * float(x[687]))+ (-0.13678473 * float(x[688]))+ (0.34703305 * float(x[689]))+ (0.19168387 * float(x[690]))+ (-1.3588707 * float(x[691]))+ (-0.8041322 * float(x[692]))+ (-0.8691041 * float(x[693]))+ (1.0359879 * float(x[694]))+ (0.7095779 * float(x[695]))+ (-0.04183733 * float(x[696]))+ (-0.99888784 * float(x[697]))+ (0.053710576 * float(x[698]))+ (-0.9699615 * float(x[699])))+ ((-0.11799479 * float(x[700]))+ (-0.78063095 * float(x[701]))+ (-0.0455213 * float(x[702]))+ (0.9652671 * float(x[703]))+ (-0.32888246 * float(x[704]))+ (0.80172604 * float(x[705]))+ (-0.486667 * float(x[706]))+ (-0.18761018 * float(x[707]))+ (0.10501991 * float(x[708]))+ (0.027999165 * float(x[709]))+ (-0.35226345 * float(x[710]))+ (0.7519023 * float(x[711]))+ (0.78928816 * float(x[712]))+ (-0.4745987 * float(x[713]))+ (-0.12841356 * float(x[714]))+ (-0.67149556 * float(x[715]))+ (0.5657943 * float(x[716]))+ (-2.0356054 * float(x[717]))+ (0.92444044 * float(x[718]))+ (-1.002503 * float(x[719]))+ (-0.00846566 * float(x[720]))+ (-0.4832051 * float(x[721]))+ (-0.22505847 * float(x[722]))+ (0.24458468 * float(x[723]))+ (-0.2092122 * float(x[724]))+ (0.025342742 * float(x[725]))+ (0.57819885 * float(x[726]))+ (-0.7164828 * float(x[727]))+ (-0.9638082 * float(x[728]))+ (1.1421196 * float(x[729]))+ (0.13131006 * float(x[730]))+ (0.69108146 * float(x[731]))+ (-0.7299035 * float(x[732]))+ (0.54233277 * float(x[733]))+ (0.091675684 * float(x[734]))+ (0.29309115 * float(x[735]))+ (-0.03726734 * float(x[736]))+ (0.5903718 * float(x[737]))+ (-0.46853927 * float(x[738]))+ (0.17993005 * float(x[739]))+ (0.8475557 * float(x[740]))+ (-0.6930958 * float(x[741]))+ (0.021925796 * float(x[742]))+ (0.9200007 * float(x[743]))+ (-0.44954914 * float(x[744]))+ (-0.9133934 * float(x[745]))+ (-0.75132906 * float(x[746]))+ (-0.89734787 * float(x[747]))+ (0.14000879 * float(x[748]))+ (0.29265413 * float(x[749])))+ ((-1.8741604 * float(x[750]))+ (-0.10250489 * float(x[751]))+ (-0.5625332 * float(x[752]))+ (0.6014213 * float(x[753]))+ (0.56494427 * float(x[754]))+ (0.47194633 * float(x[755]))+ (-1.0333117 * float(x[756]))+ (-0.62371284 * float(x[757]))+ (-1.4554739 * float(x[758]))+ (0.6953139 * float(x[759]))+ (0.8704174 * float(x[760]))+ (0.03807477 * float(x[761]))+ (-0.25054613 * float(x[762]))+ (0.19191946 * float(x[763]))+ (0.033915557 * float(x[764]))+ (0.4067524 * float(x[765]))+ (-0.913701 * float(x[766]))+ (0.014638817 * float(x[767]))+ (1.2159528 * float(x[768]))+ (0.41854513 * float(x[769]))+ (-1.3444247 * float(x[770]))+ (0.91009 * float(x[771]))+ (0.18133004 * float(x[772]))+ (0.8420617 * float(x[773]))+ (-0.61671615 * float(x[774]))+ (-0.23946086 * float(x[775]))+ (0.5533226 * float(x[776]))+ (-0.23272017 * float(x[777]))+ (0.5106369 * float(x[778]))+ (-0.2762702 * float(x[779]))+ (0.5450748 * float(x[780]))+ (-0.5807473 * float(x[781]))+ (-0.037517447 * float(x[782]))+ (-0.7283263 * float(x[783]))+ (0.07110957 * float(x[784]))+ (-0.5365647 * float(x[785]))+ (-0.66027546 * float(x[786]))+ (-0.5324683 * float(x[787]))+ (0.36192438 * float(x[788]))+ (-0.13843194 * float(x[789]))+ (-0.7316312 * float(x[790]))+ (-0.0775308 * float(x[791]))+ (0.85548544 * float(x[792]))+ (0.80804527 * float(x[793]))+ (-0.72419846 * float(x[794]))+ (-0.028516904 * float(x[795]))+ (-0.031109113 * float(x[796]))+ (0.72672945 * float(x[797]))+ (0.014541261 * float(x[798]))+ (-0.79382986 * float(x[799])))+ ((1.1666144 * float(x[800]))+ (0.82940227 * float(x[801]))+ (-0.07408763 * float(x[802]))+ (-1.1115845 * float(x[803]))+ (-0.34079695 * float(x[804]))+ (0.38478866 * float(x[805]))+ (-1.0891967 * float(x[806]))+ (-0.5689961 * float(x[807]))+ (0.7460773 * float(x[808]))+ (-0.12688304 * float(x[809]))+ (-0.4566998 * float(x[810]))+ (0.09180624 * float(x[811]))+ (-0.4309858 * float(x[812]))+ (0.5069255 * float(x[813]))+ (0.22954191 * float(x[814]))+ (1.2650579 * float(x[815]))+ (-0.2633477 * float(x[816]))+ (0.43615156 * float(x[817]))+ (-1.1788995 * float(x[818]))+ (-0.22857255 * float(x[819]))+ (0.3361976 * float(x[820]))+ (1.0574157 * float(x[821]))+ (0.26836383 * float(x[822]))+ (0.64059114 * float(x[823]))+ (0.53748596 * float(x[824]))+ (-0.64723366 * float(x[825]))+ (-1.0281627 * float(x[826]))+ (-0.19455457 * float(x[827]))+ (0.65236276 * float(x[828]))+ (0.69232875 * float(x[829]))+ (0.29567727 * float(x[830]))+ (-0.79499555 * float(x[831]))+ (0.9813438 * float(x[832]))+ (-0.5997623 * float(x[833]))+ (0.41233388 * float(x[834]))+ (-0.82205945 * float(x[835]))+ (-0.13587853 * float(x[836]))+ (0.40930277 * float(x[837]))+ (-1.1123642 * float(x[838]))+ (0.86368626 * float(x[839]))+ (-0.081980065 * float(x[840]))+ (-0.49071553 * float(x[841]))+ (-0.921058 * float(x[842]))+ (0.15381998 * float(x[843]))+ (-0.94444543 * float(x[844]))+ (0.70889205 * float(x[845]))+ (0.22511059 * float(x[846]))+ (-2.44532 * float(x[847]))+ (1.3764 * float(x[848]))+ (0.97385186 * float(x[849])))+ ((0.95603645 * float(x[850]))+ (-1.2467616 * float(x[851]))+ (-0.5052744 * float(x[852]))+ (0.07395032 * float(x[853]))+ (0.2165423 * float(x[854]))+ (-0.6530859 * float(x[855]))+ (0.7456707 * float(x[856]))+ (1.0056987 * float(x[857]))+ (-0.7484787 * float(x[858]))+ (-0.03746004 * float(x[859]))+ (1.0454952 * float(x[860]))+ (-0.13694498 * float(x[861]))+ (-0.0778085 * float(x[862]))+ (0.43623814 * float(x[863]))+ (0.7404208 * float(x[864]))+ (1.3978422 * float(x[865]))+ (-0.7734274 * float(x[866]))+ (-0.8781521 * float(x[867]))+ (0.38492772 * float(x[868]))+ (-0.7276988 * float(x[869]))+ (-0.7326184 * float(x[870]))+ (0.49306536 * float(x[871]))+ (0.41723356 * float(x[872]))+ (0.46736255 * float(x[873]))+ (0.38812488 * float(x[874]))+ (-0.9573553 * float(x[875]))+ (0.069588795 * float(x[876]))+ (0.7577422 * float(x[877]))+ (0.79243517 * float(x[878]))+ (-0.12432793 * float(x[879]))+ (0.017648479 * float(x[880]))+ (-0.88061893 * float(x[881]))+ (0.05846801 * float(x[882]))+ (0.6642472 * float(x[883]))+ (-1.3290313 * float(x[884]))+ (0.19950749 * float(x[885]))+ (0.31936225 * float(x[886]))+ (-0.8884162 * float(x[887]))+ (-0.5001646 * float(x[888]))+ (0.08968679 * float(x[889]))+ (1.1104462 * float(x[890]))+ (-0.49354392 * float(x[891]))+ (0.66301584 * float(x[892]))+ (-0.061690185 * float(x[893]))+ (-0.26658708 * float(x[894]))+ (0.24998333 * float(x[895]))+ (-0.30856007 * float(x[896]))+ (0.35479814 * float(x[897]))+ (-1.0216933 * float(x[898]))+ (0.34506905 * float(x[899])))+ ((0.55682224 * float(x[900]))+ (-0.46953902 * float(x[901]))+ (0.45409945 * float(x[902]))+ (1.141803 * float(x[903]))+ (-0.1614331 * float(x[904]))+ (0.2639682 * float(x[905]))+ (-0.070278704 * float(x[906]))+ (0.5557557 * float(x[907]))+ (-2.4970353 * float(x[908]))+ (0.3707795 * float(x[909]))+ (-0.06496489 * float(x[910]))+ (0.19123276 * float(x[911]))+ (0.6489051 * float(x[912]))+ (-0.26211506 * float(x[913]))+ (-0.06418679 * float(x[914]))+ (1.1775224 * float(x[915]))+ (-1.2115886 * float(x[916]))+ (0.09371632 * float(x[917]))+ (-0.30677408 * float(x[918]))+ (0.25611424 * float(x[919]))+ (0.5537869 * float(x[920]))+ (-0.27140933 * float(x[921]))+ (-0.4808979 * float(x[922]))+ (-0.1569212 * float(x[923]))+ (0.1254313 * float(x[924]))+ (0.30242404 * float(x[925]))+ (-0.81867504 * float(x[926]))+ (0.27466208 * float(x[927]))+ (0.5555685 * float(x[928]))+ (-0.5285818 * float(x[929]))+ (0.64445925 * float(x[930]))+ (-0.18269472 * float(x[931]))+ (-0.07931835 * float(x[932]))+ (0.92704296 * float(x[933]))+ (-0.20887475 * float(x[934]))+ (-0.5476483 * float(x[935]))+ (0.7705072 * float(x[936]))+ (0.15406539 * float(x[937]))+ (0.35657126 * float(x[938]))+ (0.43141687 * float(x[939]))+ (-0.86196494 * float(x[940]))+ (-0.4116882 * float(x[941]))+ (0.28324085 * float(x[942]))+ (0.15350612 * float(x[943]))+ (0.810011 * float(x[944]))+ (-0.24805556 * float(x[945]))+ (0.63709885 * float(x[946]))+ (0.3542758 * float(x[947]))+ (0.935908 * float(x[948]))+ (0.123634025 * float(x[949])))+ ((0.39987403 * float(x[950]))+ (1.2145791 * float(x[951]))+ (0.7136836 * float(x[952]))+ (0.6363999 * float(x[953]))+ (0.60892457 * float(x[954]))+ (-0.5311768 * float(x[955]))+ (0.3111304 * float(x[956]))+ (0.24970809 * float(x[957]))+ (-0.4146763 * float(x[958]))+ (0.0693418 * float(x[959]))+ (0.80725056 * float(x[960]))+ (-0.46518317 * float(x[961]))+ (0.3797971 * float(x[962]))+ (-0.41258842 * float(x[963]))+ (0.79896784 * float(x[964]))+ (-0.51805365 * float(x[965]))+ (0.06455841 * float(x[966]))+ (0.10379754 * float(x[967]))+ (-0.5177331 * float(x[968]))+ (0.85105693 * float(x[969]))+ (-0.74021626 * float(x[970]))+ (-0.1344677 * float(x[971]))+ (-0.3614199 * float(x[972]))+ (1.2365022 * float(x[973]))+ (0.22528931 * float(x[974]))+ (-0.5180316 * float(x[975]))+ (0.72109085 * float(x[976]))+ (-1.0618327 * float(x[977]))+ (-0.50034744 * float(x[978]))+ (0.22063138 * float(x[979]))+ (-0.5218406 * float(x[980]))+ (0.5916591 * float(x[981]))+ (0.0787783 * float(x[982]))+ (0.9317957 * float(x[983]))+ (0.5328161 * float(x[984]))+ (0.44953755 * float(x[985]))+ (-0.610797 * float(x[986]))+ (0.51163954 * float(x[987]))+ (0.8566263 * float(x[988]))+ (-0.9295903 * float(x[989]))+ (0.952663 * float(x[990]))+ (-1.5189096 * float(x[991]))+ (0.36800772 * float(x[992]))+ (1.0533702 * float(x[993]))+ (-0.27854654 * float(x[994]))+ (0.599734 * float(x[995]))+ (-0.13274413 * float(x[996]))+ (-0.28103673 * float(x[997]))+ (0.4875351 * float(x[998]))+ (0.28031197 * float(x[999])))+ ((-1.2623284 * float(x[1000]))+ (-0.13818051 * float(x[1001]))+ (0.85822785 * float(x[1002]))+ (-0.8611888 * float(x[1003]))+ (-0.8256804 * float(x[1004]))+ (-0.37786037 * float(x[1005]))+ (0.15991622 * float(x[1006]))+ (0.006892519 * float(x[1007]))+ (0.50455487 * float(x[1008]))+ (-0.9074349 * float(x[1009]))+ (0.011526157 * float(x[1010]))+ (0.030893102 * float(x[1011]))+ (-0.8608636 * float(x[1012]))+ (-0.92700833 * float(x[1013]))+ (0.036511533 * float(x[1014]))+ (-0.3171496 * float(x[1015]))+ (0.8964924 * float(x[1016]))+ (-0.68388444 * float(x[1017]))+ (-0.31095463 * float(x[1018]))+ (0.41077834 * float(x[1019]))+ (0.32098988 * float(x[1020]))+ (-0.010640923 * float(x[1021]))+ (0.120021746 * float(x[1022]))+ (-0.29135305 * float(x[1023]))+ (0.95384973 * float(x[1024]))+ (0.317131 * float(x[1025]))+ (0.32686234 * float(x[1026]))+ (-0.34576097 * float(x[1027]))+ (-0.05837317 * float(x[1028]))+ (-0.86408186 * float(x[1029]))+ (-0.66400486 * float(x[1030]))+ (0.816365 * float(x[1031]))+ (0.41609958 * float(x[1032]))+ (-0.24026184 * float(x[1033]))+ (0.7101982 * float(x[1034]))+ (-0.3507916 * float(x[1035]))+ (0.7172419 * float(x[1036]))+ (-0.80598617 * float(x[1037]))+ (0.7809158 * float(x[1038]))+ (-0.5919367 * float(x[1039]))+ (-0.5295303 * float(x[1040]))+ (1.2363492 * float(x[1041]))+ (-0.37330058 * float(x[1042]))+ (0.7376006 * float(x[1043]))+ (0.57406336 * float(x[1044]))+ (0.285801 * float(x[1045]))+ (0.41520914 * float(x[1046]))+ (-0.3980092 * float(x[1047]))+ (0.94894165 * float(x[1048]))+ (0.96716446 * float(x[1049])))+ ((-0.02276585 * float(x[1050]))+ (-0.17150375 * float(x[1051]))+ (-0.034366634 * float(x[1052]))+ (-0.36057642 * float(x[1053]))+ (0.10466642 * float(x[1054]))+ (-0.74288005 * float(x[1055]))+ (-0.014154102 * float(x[1056]))+ (0.14340816 * float(x[1057]))+ (1.1755648 * float(x[1058]))+ (-0.2518078 * float(x[1059]))+ (0.37271 * float(x[1060]))+ (0.9175188 * float(x[1061]))+ (0.59709454 * float(x[1062]))+ (-0.95033926 * float(x[1063]))+ (0.10979943 * float(x[1064]))+ (0.78393567 * float(x[1065]))+ (-0.3000875 * float(x[1066]))+ (0.28932026 * float(x[1067]))+ (-0.20155178 * float(x[1068]))+ (0.10395781 * float(x[1069]))+ (0.3058701 * float(x[1070]))+ (-0.42291868 * float(x[1071]))+ (-0.17925577 * float(x[1072]))+ (-0.7871266 * float(x[1073]))+ (0.65944374 * float(x[1074]))+ (1.0287719 * float(x[1075]))+ (-0.12759231 * float(x[1076]))+ (0.7161436 * float(x[1077]))+ (0.038090337 * float(x[1078]))+ (-0.019461244 * float(x[1079]))+ (0.10518435 * float(x[1080]))+ (0.83473635 * float(x[1081]))+ (0.792271 * float(x[1082]))+ (0.5967372 * float(x[1083]))+ (0.3172242 * float(x[1084]))+ (-0.7502004 * float(x[1085]))+ (1.1295385 * float(x[1086]))+ (-1.9386292 * float(x[1087]))+ (-0.23584208 * float(x[1088]))+ (0.01513729 * float(x[1089]))+ (-0.13565284 * float(x[1090]))+ (0.32446894 * float(x[1091]))+ (-0.7852852 * float(x[1092]))+ (-0.98316586 * float(x[1093]))+ (-0.42063954 * float(x[1094]))+ (0.040821295 * float(x[1095]))+ (-0.62884533 * float(x[1096]))+ (0.96781355 * float(x[1097]))+ (0.11639257 * float(x[1098]))+ (0.530141 * float(x[1099])))+ ((0.89296454 * float(x[1100]))+ (-0.043118868 * float(x[1101]))+ (0.13017835 * float(x[1102]))+ (-0.6413164 * float(x[1103]))+ (0.61988986 * float(x[1104]))+ (-1.0552158 * float(x[1105]))+ (0.5624321 * float(x[1106]))+ (0.65707314 * float(x[1107]))+ (0.83926076 * float(x[1108]))+ (-2.1944156 * float(x[1109]))+ (-0.7340998 * float(x[1110]))+ (-0.8790407 * float(x[1111]))+ (1.2630596 * float(x[1112]))+ (0.35204998 * float(x[1113]))+ (0.54020554 * float(x[1114]))+ (0.7683299 * float(x[1115]))+ (-0.27528477 * float(x[1116]))+ (0.051300853 * float(x[1117]))+ (-0.15240598 * float(x[1118]))+ (-0.7943209 * float(x[1119]))+ (-0.11773091 * float(x[1120]))+ (1.0217475 * float(x[1121]))+ (-0.5926873 * float(x[1122]))+ (0.16826583 * float(x[1123]))+ (0.14221168 * float(x[1124]))+ (-0.2290057 * float(x[1125]))+ (-0.17556758 * float(x[1126]))+ (-0.10388378 * float(x[1127]))+ (-0.0030304624 * float(x[1128]))+ (1.1642486 * float(x[1129]))+ (0.92938954 * float(x[1130]))+ (0.9566055 * float(x[1131]))+ (0.2656591 * float(x[1132]))+ (-0.0174423 * float(x[1133]))+ (0.24448746 * float(x[1134]))+ (-0.64168715 * float(x[1135]))+ (-0.8682683 * float(x[1136]))+ (0.4815595 * float(x[1137]))+ (-0.9906754 * float(x[1138]))+ (-0.8706788 * float(x[1139]))+ (-0.5859454 * float(x[1140]))+ (-0.57153577 * float(x[1141]))+ (0.8091348 * float(x[1142]))+ (0.5685636 * float(x[1143]))+ (-0.5762799 * float(x[1144]))+ (-0.09779365 * float(x[1145]))+ (1.2578012 * float(x[1146]))+ (-0.89295757 * float(x[1147]))+ (0.11111729 * float(x[1148]))+ (1.0230845 * float(x[1149])))+ ((-0.345003 * float(x[1150]))+ (-0.9330857 * float(x[1151]))+ (0.06409935 * float(x[1152]))+ (0.46239594 * float(x[1153]))+ (0.4935492 * float(x[1154]))+ (0.31260958 * float(x[1155]))+ (-0.75735825 * float(x[1156]))+ (0.37034565 * float(x[1157]))+ (0.18254727 * float(x[1158]))+ (-0.32316747 * float(x[1159]))+ (-0.56495434 * float(x[1160]))+ (0.31503424 * float(x[1161]))+ (-0.51559484 * float(x[1162]))+ (-1.2471389 * float(x[1163]))+ (0.15214804 * float(x[1164]))+ (0.8123864 * float(x[1165]))+ (-0.12743908 * float(x[1166]))+ (1.3061515 * float(x[1167]))+ (-0.19709775 * float(x[1168]))+ (1.0297984 * float(x[1169]))+ (0.071221665 * float(x[1170]))+ (-0.29103512 * float(x[1171]))+ (0.60079074 * float(x[1172]))+ (0.6280542 * float(x[1173]))+ (0.9898494 * float(x[1174]))+ (-0.47063726 * float(x[1175]))+ (-0.5007678 * float(x[1176]))+ (0.2316103 * float(x[1177]))+ (1.1290946 * float(x[1178]))+ (-0.8023262 * float(x[1179]))+ (0.527559 * float(x[1180]))+ (-0.3249796 * float(x[1181]))+ (-0.4371253 * float(x[1182]))+ (0.07892907 * float(x[1183]))+ (-0.31985742 * float(x[1184]))+ (-0.30125514 * float(x[1185]))+ (0.85090786 * float(x[1186]))+ (0.33037364 * float(x[1187]))+ (0.1566247 * float(x[1188]))+ (-0.84749097 * float(x[1189]))+ (0.29689637 * float(x[1190]))+ (0.59505147 * float(x[1191]))+ (0.27220047 * float(x[1192]))+ (0.40066978 * float(x[1193]))+ (-1.0798141 * float(x[1194]))+ (-0.7870008 * float(x[1195]))+ (0.8779528 * float(x[1196]))+ (0.989377 * float(x[1197]))+ (0.6134346 * float(x[1198]))+ (-0.3001507 * float(x[1199])))+ ((-0.6229864 * float(x[1200]))+ (0.684038 * float(x[1201]))+ (-0.8814349 * float(x[1202]))+ (1.2761521 * float(x[1203]))+ (0.37755623 * float(x[1204]))+ (0.67367584 * float(x[1205]))+ (0.5887703 * float(x[1206]))+ (-0.020696 * float(x[1207]))+ (0.11843462 * float(x[1208]))+ (-1.1470122 * float(x[1209]))+ (0.955393 * float(x[1210]))+ (-0.0426764 * float(x[1211]))+ (0.48515758 * float(x[1212]))+ (-0.18488787 * float(x[1213]))+ (0.85530937 * float(x[1214]))+ (0.15706672 * float(x[1215]))+ (-0.47635344 * float(x[1216]))+ (-0.6757994 * float(x[1217]))+ (-0.1581372 * float(x[1218]))+ (-0.6156533 * float(x[1219]))+ (-0.70228505 * float(x[1220]))+ (-1.1253455 * float(x[1221]))+ (-0.59027344 * float(x[1222]))+ (1.2642299 * float(x[1223]))+ (0.3408405 * float(x[1224]))+ (0.51867735 * float(x[1225]))+ (-0.9437535 * float(x[1226]))+ (-0.18517593 * float(x[1227]))+ (0.54970807 * float(x[1228]))+ (-0.6952144 * float(x[1229]))+ (0.22604185 * float(x[1230]))+ (-0.8177558 * float(x[1231]))+ (0.9457901 * float(x[1232]))+ (0.31586063 * float(x[1233]))+ (0.20493068 * float(x[1234]))+ (0.782255 * float(x[1235]))+ (0.15833506 * float(x[1236]))+ (-0.024337925 * float(x[1237]))+ (-1.2999129 * float(x[1238]))+ (0.5429085 * float(x[1239]))+ (-1.0771613 * float(x[1240]))+ (0.043283537 * float(x[1241]))+ (-0.0040823226 * float(x[1242]))+ (-0.70819235 * float(x[1243]))+ (-0.66956145 * float(x[1244]))+ (0.13027842 * float(x[1245]))+ (0.16522358 * float(x[1246]))+ (-0.24776676 * float(x[1247]))+ (-0.26837727 * float(x[1248]))+ (-0.7111522 * float(x[1249])))+ ((0.72945863 * float(x[1250]))+ (0.706069 * float(x[1251]))+ (-0.28464583 * float(x[1252]))+ (-0.26080108 * float(x[1253]))+ (-0.6543951 * float(x[1254]))+ (-0.73215973 * float(x[1255]))+ (-0.18890074 * float(x[1256]))+ (0.68592244 * float(x[1257]))+ (0.03020933 * float(x[1258]))+ (-0.670587 * float(x[1259]))+ (1.2133071 * float(x[1260]))+ (-0.6478759 * float(x[1261]))+ (-0.5868757 * float(x[1262]))+ (0.4616328 * float(x[1263]))+ (0.6316422 * float(x[1264]))+ (-0.37489086 * float(x[1265]))+ (-0.3106713 * float(x[1266]))+ (-0.4919415 * float(x[1267]))+ (0.5092181 * float(x[1268]))+ (0.81125253 * float(x[1269]))+ (-0.63849884 * float(x[1270]))+ (-0.3047934 * float(x[1271]))+ (-0.9774353 * float(x[1272]))+ (-1.0214764 * float(x[1273]))+ (-0.43308306 * float(x[1274]))+ (-0.112926275 * float(x[1275]))+ (-0.52913994 * float(x[1276]))+ (0.5012863 * float(x[1277]))+ (0.38283154 * float(x[1278]))+ (0.9206319 * float(x[1279]))+ (0.5959725 * float(x[1280]))+ (-0.7883905 * float(x[1281]))+ (-0.17416056 * float(x[1282]))+ (-0.006498475 * float(x[1283]))+ (-0.15739606 * float(x[1284]))+ (-0.9267412 * float(x[1285]))+ (-1.1380439 * float(x[1286]))+ (-0.20564939 * float(x[1287]))+ (-0.32522473 * float(x[1288]))+ (-0.047699146 * float(x[1289]))+ (0.1713355 * float(x[1290]))+ (0.43309227 * float(x[1291]))+ (-0.8596905 * float(x[1292]))+ (0.26135194 * float(x[1293]))+ (-0.6445505 * float(x[1294]))+ (-0.2790303 * float(x[1295]))+ (-0.5517592 * float(x[1296]))+ (0.011153734 * float(x[1297]))+ (0.49501136 * float(x[1298]))+ (1.0565449 * float(x[1299])))+ ((-0.81137437 * float(x[1300]))+ (0.57536876 * float(x[1301]))+ (0.40930063 * float(x[1302]))+ (-0.8430876 * float(x[1303]))+ (-0.73353136 * float(x[1304]))+ (-0.21498086 * float(x[1305]))+ (-0.6114333 * float(x[1306]))+ (0.72630316 * float(x[1307]))+ (0.21140498 * float(x[1308]))+ (0.54682916 * float(x[1309]))+ (0.5609045 * float(x[1310]))+ (0.005599895 * float(x[1311]))+ (-0.6874226 * float(x[1312]))+ (-0.15099421 * float(x[1313]))+ (-0.7635054 * float(x[1314]))+ (0.03838207 * float(x[1315]))+ (0.21234648 * float(x[1316]))+ (-0.3247072 * float(x[1317]))+ (-0.31537157 * float(x[1318]))+ (0.6025082 * float(x[1319]))+ (-0.039128724 * float(x[1320]))+ (-0.5851314 * float(x[1321]))+ (0.10236812 * float(x[1322]))+ (-0.0831572 * float(x[1323]))+ (0.65003353 * float(x[1324]))+ (-0.3788633 * float(x[1325]))+ (0.21676031 * float(x[1326]))+ (1.1334696 * float(x[1327]))+ (-0.023455296 * float(x[1328]))+ (0.79587674 * float(x[1329]))+ (0.30281866 * float(x[1330]))+ (0.4442999 * float(x[1331]))+ (1.0889453 * float(x[1332]))+ (0.014436608 * float(x[1333]))+ (-0.62526345 * float(x[1334]))+ (0.62326515 * float(x[1335]))+ (-0.5599209 * float(x[1336]))+ (0.4076874 * float(x[1337]))+ (-0.7340805 * float(x[1338]))+ (0.44216725 * float(x[1339]))+ (-0.4577639 * float(x[1340]))+ (1.2681324 * float(x[1341]))+ (-0.6864682 * float(x[1342]))+ (-0.54895324 * float(x[1343]))+ (0.30917338 * float(x[1344]))+ (-0.06544659 * float(x[1345]))+ (0.47326562 * float(x[1346]))+ (-0.2346741 * float(x[1347]))+ (0.65566427 * float(x[1348]))+ (-0.15661338 * float(x[1349])))+ ((0.08424126 * float(x[1350]))+ (-0.13726287 * float(x[1351]))+ (0.60145 * float(x[1352]))+ (-0.97769797 * float(x[1353]))+ (0.37527463 * float(x[1354]))+ (0.6342369 * float(x[1355]))+ (-0.96945107 * float(x[1356]))+ (0.74481285 * float(x[1357]))+ (-0.4743551 * float(x[1358]))+ (0.58756953 * float(x[1359]))+ (-0.6257869 * float(x[1360]))+ (0.509539 * float(x[1361]))+ (-0.2969686 * float(x[1362]))+ (-0.6663085 * float(x[1363]))+ (1.6701295 * float(x[1364]))+ (0.73826486 * float(x[1365]))+ (0.33876002 * float(x[1366]))+ (-0.54994 * float(x[1367]))+ (0.53985226 * float(x[1368]))+ (-0.80987525 * float(x[1369]))+ (0.32365122 * float(x[1370]))+ (1.3196945 * float(x[1371]))+ (-0.6695241 * float(x[1372]))+ (0.8331962 * float(x[1373]))+ (0.2866383 * float(x[1374]))+ (0.48388588 * float(x[1375]))+ (0.38127384 * float(x[1376]))+ (0.851658 * float(x[1377]))+ (0.28361994 * float(x[1378]))+ (0.43562892 * float(x[1379]))+ (0.75156295 * float(x[1380]))+ (0.42954016 * float(x[1381]))+ (0.20164694 * float(x[1382]))+ (-0.57284755 * float(x[1383]))+ (-0.8643051 * float(x[1384]))+ (-0.3237863 * float(x[1385]))+ (0.571872 * float(x[1386]))+ (-0.5752958 * float(x[1387]))+ (-1.9909378 * float(x[1388]))+ (0.504819 * float(x[1389]))+ (0.42191148 * float(x[1390]))+ (0.93276894 * float(x[1391]))+ (0.94921434 * float(x[1392]))+ (-0.25618953 * float(x[1393]))+ (0.82925415 * float(x[1394]))+ (-0.62867254 * float(x[1395]))+ (-0.5274859 * float(x[1396]))+ (0.39914078 * float(x[1397]))+ (-0.034032334 * float(x[1398]))+ (0.83827543 * float(x[1399])))+ ((0.46330276 * float(x[1400]))+ (0.038546238 * float(x[1401]))+ (0.6116232 * float(x[1402]))+ (-0.2809867 * float(x[1403]))+ (1.1281121 * float(x[1404]))+ (1.6482317 * float(x[1405]))+ (-0.68549365 * float(x[1406]))+ (0.30448478 * float(x[1407]))+ (0.88818896 * float(x[1408]))+ (0.87290126 * float(x[1409]))+ (1.4449832 * float(x[1410]))+ (0.8875644 * float(x[1411]))+ (-0.20128226 * float(x[1412]))+ (0.87274206 * float(x[1413]))+ (0.41025364 * float(x[1414]))+ (-0.34507006 * float(x[1415]))+ (0.5814163 * float(x[1416]))+ (0.24926013 * float(x[1417]))+ (-0.59014654 * float(x[1418]))+ (0.08865113 * float(x[1419]))+ (0.5730811 * float(x[1420]))+ (0.26289415 * float(x[1421]))+ (0.71599275 * float(x[1422]))+ (1.103705 * float(x[1423]))+ (-0.80647856 * float(x[1424]))+ (-0.5416185 * float(x[1425]))+ (-0.54526246 * float(x[1426]))+ (0.8582715 * float(x[1427]))+ (0.90122736 * float(x[1428]))+ (0.30892882 * float(x[1429]))+ (-0.39782766 * float(x[1430]))+ (-0.16688758 * float(x[1431]))+ (-0.31462547 * float(x[1432]))+ (1.127056 * float(x[1433]))+ (0.4027747 * float(x[1434]))+ (0.49181813 * float(x[1435]))+ (-0.3329467 * float(x[1436]))+ (1.040742 * float(x[1437]))+ (0.29299897 * float(x[1438]))+ (-0.054973066 * float(x[1439]))+ (-0.9758745 * float(x[1440]))+ (0.325798 * float(x[1441]))+ (0.33913994 * float(x[1442]))+ (-0.66260093 * float(x[1443]))+ (0.47532406 * float(x[1444]))+ (0.712542 * float(x[1445]))+ (0.31537932 * float(x[1446]))+ (-0.0960792 * float(x[1447]))+ (0.5418963 * float(x[1448]))+ (0.17462558 * float(x[1449])))+ ((-1.0120082 * float(x[1450]))+ (-0.6525597 * float(x[1451]))+ (-0.93429554 * float(x[1452]))+ (-1.1025963 * float(x[1453]))+ (-0.64131874 * float(x[1454]))+ (-0.2992058 * float(x[1455]))+ (0.65996516 * float(x[1456]))+ (0.10478275 * float(x[1457]))+ (-1.278693 * float(x[1458]))+ (-0.41927513 * float(x[1459]))+ (-0.8850003 * float(x[1460]))+ (0.10929561 * float(x[1461]))+ (-0.35949972 * float(x[1462]))+ (1.2074182 * float(x[1463]))+ (0.2966203 * float(x[1464]))+ (0.12856136 * float(x[1465]))+ (0.3738526 * float(x[1466]))+ (-0.46506625 * float(x[1467]))+ (0.8725223 * float(x[1468]))+ (0.3506253 * float(x[1469]))+ (-0.69405925 * float(x[1470]))+ (-0.68948215 * float(x[1471]))+ (0.1012809 * float(x[1472]))+ (0.5670324 * float(x[1473]))+ (-0.4091642 * float(x[1474]))+ (-0.5086879 * float(x[1475]))+ (-0.51731354 * float(x[1476]))+ (-0.02008691 * float(x[1477]))+ (0.8641875 * float(x[1478]))+ (-0.14854923 * float(x[1479]))+ (1.24966 * float(x[1480]))+ (-0.6433632 * float(x[1481]))+ (0.48878285 * float(x[1482]))+ (-0.09968613 * float(x[1483]))+ (-0.064391986 * float(x[1484]))+ (0.9311547 * float(x[1485]))+ (0.4814738 * float(x[1486]))+ (3.048478 * float(x[1487]))+ (0.529022 * float(x[1488]))+ (0.29922512 * float(x[1489]))+ (0.20325233 * float(x[1490]))+ (-0.3753306 * float(x[1491]))+ (-1.1799104 * float(x[1492]))+ (0.45825928 * float(x[1493]))+ (-1.3931197 * float(x[1494]))+ (1.2835417 * float(x[1495]))+ (0.48426488 * float(x[1496]))+ (-0.6296286 * float(x[1497]))+ (-0.814583 * float(x[1498]))+ (0.82056373 * float(x[1499])))+ ((-0.12735485 * float(x[1500]))+ (1.1472151 * float(x[1501]))+ (-0.45638818 * float(x[1502]))+ (-0.5956779 * float(x[1503]))+ (0.30461392 * float(x[1504]))+ (-0.82494783 * float(x[1505]))+ (0.30118933 * float(x[1506]))+ (-0.097984955 * float(x[1507]))+ (0.5377967 * float(x[1508]))+ (-1.1750511 * float(x[1509]))+ (0.80325097 * float(x[1510]))+ (0.09841088 * float(x[1511]))+ (0.5604543 * float(x[1512]))+ (-0.28050804 * float(x[1513]))+ (1.0112548 * float(x[1514]))+ (0.8807665 * float(x[1515]))+ (-0.29288474 * float(x[1516]))+ (-0.7230697 * float(x[1517]))+ (1.7695982 * float(x[1518]))+ (0.8518992 * float(x[1519]))+ (-0.40537217 * float(x[1520]))+ (-0.63347536 * float(x[1521]))+ (-1.0855302 * float(x[1522]))+ (0.7790052 * float(x[1523]))+ (0.55859447 * float(x[1524]))+ (-0.79731977 * float(x[1525]))+ (0.7783064 * float(x[1526]))+ (-0.6919743 * float(x[1527]))+ (-0.7206484 * float(x[1528]))+ (-0.8772349 * float(x[1529]))+ (0.41486922 * float(x[1530]))+ (0.28224933 * float(x[1531]))+ (-0.38876587 * float(x[1532]))+ (0.9804713 * float(x[1533]))+ (0.6407091 * float(x[1534]))+ (-0.33914584 * float(x[1535]))+ (0.956546 * float(x[1536]))+ (0.29523864 * float(x[1537]))+ (0.5204295 * float(x[1538]))+ (0.97318715 * float(x[1539]))+ (-0.29464087 * float(x[1540]))+ (0.6692221 * float(x[1541]))+ (0.23464909 * float(x[1542]))+ (0.694105 * float(x[1543]))+ (-0.034842186 * float(x[1544]))+ (0.14298995 * float(x[1545]))+ (0.52547497 * float(x[1546]))+ (-0.6395527 * float(x[1547]))+ (-0.92301923 * float(x[1548]))+ (0.76270825 * float(x[1549])))+ ((-0.80827165 * float(x[1550]))+ (0.9498418 * float(x[1551]))+ (-0.57999146 * float(x[1552]))+ (0.03891982 * float(x[1553]))+ (-0.2583601 * float(x[1554]))+ (-0.762208 * float(x[1555]))+ (0.6678941 * float(x[1556]))+ (-0.4004836 * float(x[1557]))) + 0.16351067), 0)
    o[0] = (7.4117155 * h_0)+ (2.2947173 * h_1)+ (2.9563272 * h_2)+ (-1.5732826 * h_3) + -4.7164364

    if num_output_logits == 1:
        return o[0] >= 0
    else:
        return argmax(o)


def Validate(cleanvalfile):
    #Binary
    if n_classes == 2:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
            valcsvreader = csv.reader(valcsvfile)
            for valrow in valcsvreader:
                if len(valrow) == 0:
                    continue
                if int(classify(valrow[:-1])) == int(float(valrow[-1])):
                    correct_count += 1
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_TP += 1
                    else:
                        num_class_0 += 1
                        num_TN += 1
                else:
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_FN += 1
                    else:
                        num_class_0 += 1
                        num_FP += 1
                count += 1
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0

    #Multiclass
    else:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count = 0, 0
            valcsvreader = csv.reader(valcsvfile)
            numeachclass = {}
            preds = []
            y_trues = []
            for i, valrow in enumerate(valcsvreader):
                pred = int(classify(valrow[:-1]))
                preds.append(pred)
                y_true = int(float(valrow[-1]))
                y_trues.append(y_true)
                if len(valrow) == 0:
                    continue
                if pred == y_true:
                    correct_count += 1
                #if class seen, add to its counter
                if y_true in numeachclass.keys():
                    numeachclass[y_true] += 1
                #initialize a new counter
                else:
                    numeachclass[y_true] = 0
                count += 1
        return count, correct_count, numeachclass, preds,  y_trues



def Predict(cleanfile, preprocessedfile, headerless, get_key, classmapping):
    with open(cleanfile,'r') as cleancsvfile, open(preprocessedfile,'r') as dirtycsvfile:
        cleancsvreader = csv.reader(cleancsvfile)
        dirtycsvreader = csv.reader(dirtycsvfile)
        if (not headerless):
            print(','.join(next(dirtycsvreader, None) + ["Prediction"]))
        for cleanrow, dirtyrow in zip(cleancsvreader, dirtycsvreader):
            if len(cleanrow) == 0:
                continue
            print(str(','.join(str(j) for j in ([i for i in dirtyrow]))) + ',' + str(get_key(int(classify(cleanrow)), classmapping)))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempdir + os.sep + "clean.csv"
        preprocessedfile = tempdir + os.sep + "prep.csv"
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x,y: x
        classmapping = {}


    #Predict
    if not args.validate:
        Predict(cleanfile, preprocessedfile, args.headerless, get_key, classmapping)


    #Validate
    else: 
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)

        #Report Metrics
        model_cap=6241
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")





            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                    try:
                        np.array
                    except:
                        import numpy as np
                except:
                    raise ValueError("Scipy and Numpy Required for Multiclass Metrics")
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


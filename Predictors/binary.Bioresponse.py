#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f NN -target target Bioresponse.csv -o Bioresponse_NN.py -nsamples 0 --yes -nsamples 0 -e 20
# Total compiler execution time: 1:04:01.56. Finished on: Sep-03-2020 11:06:52.
# This source code requires Python 3.
#
"""
Classifier Type:                     Neural Network
System Type:                         Binary classifier
Training/Validation Split:           50:50%
Best-guess accuracy:                 54.22%
Training accuracy:                   85.81% (1609/1875 correct)
Validation accuracy:                 85.39% (1602/1876 correct)
Overall Model accuracy:              85.60% (3211/3751 correct)
Overall Improvement over best guess: 31.38% (of possible 45.78%)
Model capacity (MEC):                3557 bits
Generalization ratio:                0.90 bits/bit
Model efficiency:                    0.00%/parameter
System behavior
True Negatives:                      38.10% (1429/3751)
True Positives:                      47.51% (1782/3751)
False Negatives:                     6.72% (252/3751)
False Positives:                     7.68% (288/3751)
True Pos. Rate/Sensitivity/Recall:   0.88
True Neg. Rate/Specificity:          0.83
Precision:                           0.86
F-1 Measure:                         0.87
False Negative Rate/Miss Rate:       0.12
Critical Success Index:              0.77
Confusion Matrix:
 [38.10% 7.68%]
 [6.72% 47.51%]
Overfitting:                         Yes
Warning: The prediction model overfits the training data.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "Bioresponse.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 1776
n_classes = 2


# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="target"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="target"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def single_classify(row):
    x = row
    o = [0] * num_output_logits
    h_0 = max((((-0.023997044 * float(x[0]))+ (-0.4929934 * float(x[1]))+ (-0.042744484 * float(x[2]))+ (-0.022371836 * float(x[3]))+ (-0.15786564 * float(x[4]))+ (-0.4792478 * float(x[5]))+ (-0.27697876 * float(x[6]))+ (-0.48921698 * float(x[7]))+ (-0.54021764 * float(x[8]))+ (-0.33525008 * float(x[9]))+ (-0.17145613 * float(x[10]))+ (-0.158873 * float(x[11]))+ (-0.038472593 * float(x[12]))+ (-0.10165465 * float(x[13]))+ (-0.45179936 * float(x[14]))+ (-0.22646001 * float(x[15]))+ (-0.37655443 * float(x[16]))+ (-0.19708493 * float(x[17]))+ (-0.085873745 * float(x[18]))+ (-0.029809382 * float(x[19]))+ (0.04361455 * float(x[20]))+ (-0.040485915 * float(x[21]))+ (-0.7832463 * float(x[22]))+ (-0.009362967 * float(x[23]))+ (-0.39118296 * float(x[24]))+ (-0.62454635 * float(x[25]))+ (-0.053590503 * float(x[26]))+ (-0.86328804 * float(x[27]))+ (-0.014705641 * float(x[28]))+ (-0.3064337 * float(x[29]))+ (0.024486948 * float(x[30]))+ (-0.097522125 * float(x[31]))+ (-0.026739607 * float(x[32]))+ (-0.04058268 * float(x[33]))+ (-0.103035495 * float(x[34]))+ (-0.17174979 * float(x[35]))+ (0.049935248 * float(x[36]))+ (-0.001534081 * float(x[37]))+ (-0.12701541 * float(x[38]))+ (0.003066161 * float(x[39]))+ (-0.029779797 * float(x[40]))+ (0.009828717 * float(x[41]))+ (-0.10931858 * float(x[42]))+ (-0.08638626 * float(x[43]))+ (-0.26345807 * float(x[44]))+ (-0.30140057 * float(x[45]))+ (-0.107472174 * float(x[46]))+ (-0.09242072 * float(x[47]))+ (-0.08058177 * float(x[48]))+ (-0.58284044 * float(x[49])))+ ((0.057963237 * float(x[50]))+ (-0.8037273 * float(x[51]))+ (0.007849728 * float(x[52]))+ (0.015131098 * float(x[53]))+ (-0.08705028 * float(x[54]))+ (-0.051849097 * float(x[55]))+ (-0.059593607 * float(x[56]))+ (-0.04024672 * float(x[57]))+ (-0.030008906 * float(x[58]))+ (0.0035418237 * float(x[59]))+ (0.023416273 * float(x[60]))+ (-0.09379081 * float(x[61]))+ (0.017553305 * float(x[62]))+ (-0.03683335 * float(x[63]))+ (-0.02163856 * float(x[64]))+ (0.0022190888 * float(x[65]))+ (-0.11589443 * float(x[66]))+ (-0.026635597 * float(x[67]))+ (0.011204503 * float(x[68]))+ (-0.47258556 * float(x[69]))+ (-0.02128224 * float(x[70]))+ (0.022830382 * float(x[71]))+ (0.048134435 * float(x[72]))+ (-0.050213616 * float(x[73]))+ (-0.0056316904 * float(x[74]))+ (-0.04119998 * float(x[75]))+ (-0.050514746 * float(x[76]))+ (-0.0002464378 * float(x[77]))+ (-0.27254504 * float(x[78]))+ (-0.05413784 * float(x[79]))+ (0.05161695 * float(x[80]))+ (0.044170223 * float(x[81]))+ (-0.14983909 * float(x[82]))+ (-0.002175685 * float(x[83]))+ (-0.009785885 * float(x[84]))+ (-0.016422505 * float(x[85]))+ (-0.3171445 * float(x[86]))+ (-0.017671771 * float(x[87]))+ (-0.5250408 * float(x[88]))+ (-0.2595602 * float(x[89]))+ (-0.35715088 * float(x[90]))+ (-0.0019110616 * float(x[91]))+ (-0.01764245 * float(x[92]))+ (-0.057236817 * float(x[93]))+ (-0.037740827 * float(x[94]))+ (-0.026134234 * float(x[95]))+ (0.012160783 * float(x[96]))+ (-0.045315556 * float(x[97]))+ (-0.44751257 * float(x[98]))+ (-0.33321846 * float(x[99])))+ ((-0.047697555 * float(x[100]))+ (-0.09321391 * float(x[101]))+ (-0.16903193 * float(x[102]))+ (-0.7240446 * float(x[103]))+ (-0.4508075 * float(x[104]))+ (-0.3332001 * float(x[105]))+ (-0.55544496 * float(x[106]))+ (-0.14103344 * float(x[107]))+ (0.008723085 * float(x[108]))+ (-0.023789937 * float(x[109]))+ (0.034470037 * float(x[110]))+ (-0.035350714 * float(x[111]))+ (0.052710157 * float(x[112]))+ (0.03980985 * float(x[113]))+ (-0.048987247 * float(x[114]))+ (-0.0144579625 * float(x[115]))+ (-0.5536545 * float(x[116]))+ (0.008476526 * float(x[117]))+ (0.01377799 * float(x[118]))+ (0.022796689 * float(x[119]))+ (0.003479674 * float(x[120]))+ (-0.028344315 * float(x[121]))+ (0.027488085 * float(x[122]))+ (-0.05572384 * float(x[123]))+ (-0.03443099 * float(x[124]))+ (-0.16687869 * float(x[125]))+ (-0.02821216 * float(x[126]))+ (-0.07547932 * float(x[127]))+ (-0.047612514 * float(x[128]))+ (-0.12721813 * float(x[129]))+ (-0.066315226 * float(x[130]))+ (-0.03784424 * float(x[131]))+ (-0.0029810963 * float(x[132]))+ (0.041584577 * float(x[133]))+ (-0.06954739 * float(x[134]))+ (-0.18215837 * float(x[135]))+ (-0.0050099376 * float(x[136]))+ (0.011756674 * float(x[137]))+ (-0.08120952 * float(x[138]))+ (0.055026613 * float(x[139]))+ (0.03689114 * float(x[140]))+ (-0.048223004 * float(x[141]))+ (-0.0042004087 * float(x[142]))+ (-0.05218447 * float(x[143]))+ (-0.15477577 * float(x[144]))+ (0.039555874 * float(x[145]))+ (-0.00037654853 * float(x[146]))+ (-0.028873978 * float(x[147]))+ (-0.04451375 * float(x[148]))+ (-0.05436311 * float(x[149])))+ ((-0.096253045 * float(x[150]))+ (-0.11202941 * float(x[151]))+ (0.031857535 * float(x[152]))+ (0.03140645 * float(x[153]))+ (-0.10465453 * float(x[154]))+ (0.036237027 * float(x[155]))+ (-0.13734928 * float(x[156]))+ (-0.012275583 * float(x[157]))+ (-0.023552781 * float(x[158]))+ (-0.0111861685 * float(x[159]))+ (-0.06309549 * float(x[160]))+ (-0.08661549 * float(x[161]))+ (-0.05015793 * float(x[162]))+ (-0.009079285 * float(x[163]))+ (0.0007512948 * float(x[164]))+ (-0.02638887 * float(x[165]))+ (-0.041715346 * float(x[166]))+ (-0.052285183 * float(x[167]))+ (-0.003920407 * float(x[168]))+ (0.051086467 * float(x[169]))+ (-0.023694903 * float(x[170]))+ (0.05247707 * float(x[171]))+ (0.021051027 * float(x[172]))+ (-0.05242379 * float(x[173]))+ (-0.04868862 * float(x[174]))+ (-0.006702991 * float(x[175]))+ (-0.22822474 * float(x[176]))+ (-0.64054495 * float(x[177]))+ (-0.046941463 * float(x[178]))+ (-0.33958066 * float(x[179]))+ (-0.5764757 * float(x[180]))+ (-0.036474984 * float(x[181]))+ (-0.79127103 * float(x[182]))+ (0.0279131 * float(x[183]))+ (0.020522382 * float(x[184]))+ (-0.06588722 * float(x[185]))+ (-0.704147 * float(x[186]))+ (-0.047871813 * float(x[187]))+ (-0.22436084 * float(x[188]))+ (-0.4802004 * float(x[189]))+ (0.039754163 * float(x[190]))+ (-0.04094775 * float(x[191]))+ (-0.032949816 * float(x[192]))+ (-0.70970964 * float(x[193]))+ (-0.6366633 * float(x[194]))+ (-0.50781566 * float(x[195]))+ (0.019915879 * float(x[196]))+ (-0.034580827 * float(x[197]))+ (-0.0012499662 * float(x[198]))+ (-0.47151566 * float(x[199])))+ ((-0.17542438 * float(x[200]))+ (-0.53424853 * float(x[201]))+ (-0.4187157 * float(x[202]))+ (-0.6594001 * float(x[203]))+ (-0.62395513 * float(x[204]))+ (-0.02088137 * float(x[205]))+ (-0.41379336 * float(x[206]))+ (-0.64750546 * float(x[207]))+ (-0.23801064 * float(x[208]))+ (-0.7673594 * float(x[209]))+ (-0.011479246 * float(x[210]))+ (0.0073167896 * float(x[211]))+ (-0.013264785 * float(x[212]))+ (-0.00038984066 * float(x[213]))+ (0.0074121607 * float(x[214]))+ (-0.086608574 * float(x[215]))+ (-0.47630244 * float(x[216]))+ (-0.5088823 * float(x[217]))+ (-0.047142193 * float(x[218]))+ (-0.004170983 * float(x[219]))+ (0.02762154 * float(x[220]))+ (-0.80573213 * float(x[221]))+ (0.0016880415 * float(x[222]))+ (-0.05019394 * float(x[223]))+ (0.028777106 * float(x[224]))+ (-0.041376874 * float(x[225]))+ (-0.016489934 * float(x[226]))+ (-0.0194905 * float(x[227]))+ (-0.21536233 * float(x[228]))+ (0.00063543895 * float(x[229]))+ (0.04791399 * float(x[230]))+ (0.00725203 * float(x[231]))+ (0.04293796 * float(x[232]))+ (0.03553506 * float(x[233]))+ (-0.036726017 * float(x[234]))+ (0.026054658 * float(x[235]))+ (-0.04106429 * float(x[236]))+ (-0.024620304 * float(x[237]))+ (0.017086575 * float(x[238]))+ (0.01918123 * float(x[239]))+ (0.04358159 * float(x[240]))+ (-0.018700454 * float(x[241]))+ (9.312327e-05 * float(x[242]))+ (0.029906675 * float(x[243]))+ (-0.05617946 * float(x[244]))+ (0.04199877 * float(x[245]))+ (-0.04803684 * float(x[246]))+ (0.00080230355 * float(x[247]))+ (-0.009876418 * float(x[248]))+ (-0.030595008 * float(x[249])))+ ((0.0076779653 * float(x[250]))+ (0.048036635 * float(x[251]))+ (-0.01698117 * float(x[252]))+ (-0.034488354 * float(x[253]))+ (-0.021484353 * float(x[254]))+ (-0.057576917 * float(x[255]))+ (0.026221983 * float(x[256]))+ (-0.027899051 * float(x[257]))+ (-0.038766544 * float(x[258]))+ (-0.033466376 * float(x[259]))+ (0.033399843 * float(x[260]))+ (0.03076353 * float(x[261]))+ (0.044586204 * float(x[262]))+ (0.021070994 * float(x[263]))+ (-0.019400092 * float(x[264]))+ (-0.016233454 * float(x[265]))+ (0.017161854 * float(x[266]))+ (0.047752917 * float(x[267]))+ (0.015794523 * float(x[268]))+ (-0.027485542 * float(x[269]))+ (-0.027307322 * float(x[270]))+ (-0.26168314 * float(x[271]))+ (0.012550473 * float(x[272]))+ (-0.032599717 * float(x[273]))+ (-0.051792637 * float(x[274]))+ (0.050938733 * float(x[275]))+ (-0.037725024 * float(x[276]))+ (-0.0066085337 * float(x[277]))+ (0.016642727 * float(x[278]))+ (0.0018506877 * float(x[279]))+ (-0.03908845 * float(x[280]))+ (-0.046956312 * float(x[281]))+ (0.046303406 * float(x[282]))+ (0.009459482 * float(x[283]))+ (0.04819382 * float(x[284]))+ (-0.019474491 * float(x[285]))+ (0.017111056 * float(x[286]))+ (-0.013284057 * float(x[287]))+ (-0.0025833766 * float(x[288]))+ (-0.035380058 * float(x[289]))+ (0.019646473 * float(x[290]))+ (0.018366441 * float(x[291]))+ (-0.0011983365 * float(x[292]))+ (-0.013064815 * float(x[293]))+ (-0.035809096 * float(x[294]))+ (0.040172607 * float(x[295]))+ (-0.04324443 * float(x[296]))+ (0.023797922 * float(x[297]))+ (-0.019533344 * float(x[298]))+ (-0.028027106 * float(x[299])))+ ((0.010435782 * float(x[300]))+ (-0.030175837 * float(x[301]))+ (0.013384476 * float(x[302]))+ (0.011407986 * float(x[303]))+ (-0.043132044 * float(x[304]))+ (0.009672083 * float(x[305]))+ (0.0247427 * float(x[306]))+ (0.022994265 * float(x[307]))+ (-0.2140722 * float(x[308]))+ (-0.13951561 * float(x[309]))+ (-0.1743628 * float(x[310]))+ (-0.14523232 * float(x[311]))+ (-0.08479542 * float(x[312]))+ (0.022050295 * float(x[313]))+ (0.038686514 * float(x[314]))+ (-0.03033237 * float(x[315]))+ (-0.41294667 * float(x[316]))+ (0.02402062 * float(x[317]))+ (0.004553058 * float(x[318]))+ (0.0048524365 * float(x[319]))+ (0.007253574 * float(x[320]))+ (-0.0456682 * float(x[321]))+ (0.0045652767 * float(x[322]))+ (0.040226348 * float(x[323]))+ (0.052346714 * float(x[324]))+ (0.03414312 * float(x[325]))+ (0.0077843983 * float(x[326]))+ (0.027129376 * float(x[327]))+ (-0.028260145 * float(x[328]))+ (-0.04813943 * float(x[329]))+ (-0.049953777 * float(x[330]))+ (0.057952262 * float(x[331]))+ (0.03687562 * float(x[332]))+ (-0.04014373 * float(x[333]))+ (0.02272778 * float(x[334]))+ (0.04386855 * float(x[335]))+ (0.058068752 * float(x[336]))+ (0.050794587 * float(x[337]))+ (0.045006316 * float(x[338]))+ (-0.013317924 * float(x[339]))+ (-0.02038659 * float(x[340]))+ (0.047695648 * float(x[341]))+ (0.032553077 * float(x[342]))+ (-0.034958012 * float(x[343]))+ (0.05222492 * float(x[344]))+ (0.028067227 * float(x[345]))+ (0.031667534 * float(x[346]))+ (-0.036410134 * float(x[347]))+ (0.016666332 * float(x[348]))+ (-0.020364562 * float(x[349])))+ ((0.045389876 * float(x[350]))+ (-0.010452947 * float(x[351]))+ (0.022615597 * float(x[352]))+ (0.010318249 * float(x[353]))+ (0.024715923 * float(x[354]))+ (-0.019740961 * float(x[355]))+ (0.028323568 * float(x[356]))+ (-0.04057496 * float(x[357]))+ (0.013120203 * float(x[358]))+ (-0.039303966 * float(x[359]))+ (-0.057309065 * float(x[360]))+ (-0.046650402 * float(x[361]))+ (0.045861203 * float(x[362]))+ (0.03142937 * float(x[363]))+ (0.054502018 * float(x[364]))+ (0.04653804 * float(x[365]))+ (-0.05187801 * float(x[366]))+ (-0.039643187 * float(x[367]))+ (-0.009386512 * float(x[368]))+ (-0.03772625 * float(x[369]))+ (0.04033827 * float(x[370]))+ (-0.04391734 * float(x[371]))+ (-0.028331652 * float(x[372]))+ (-0.05611953 * float(x[373]))+ (-0.032980915 * float(x[374]))+ (0.047778655 * float(x[375]))+ (0.047562696 * float(x[376]))+ (0.041583817 * float(x[377]))+ (0.044853747 * float(x[378]))+ (0.051653847 * float(x[379]))+ (-0.014874982 * float(x[380]))+ (0.025560217 * float(x[381]))+ (0.051755145 * float(x[382]))+ (0.019217633 * float(x[383]))+ (0.05807232 * float(x[384]))+ (0.030130103 * float(x[385]))+ (0.03611242 * float(x[386]))+ (-0.020331353 * float(x[387]))+ (0.02787374 * float(x[388]))+ (0.0066750585 * float(x[389]))+ (-0.013873161 * float(x[390]))+ (-0.032746535 * float(x[391]))+ (-0.032595888 * float(x[392]))+ (-0.0447 * float(x[393]))+ (0.038998332 * float(x[394]))+ (0.041298784 * float(x[395]))+ (-0.0066115074 * float(x[396]))+ (-0.033616517 * float(x[397]))+ (0.044898942 * float(x[398]))+ (0.037148632 * float(x[399])))+ ((0.0043181484 * float(x[400]))+ (-0.027426869 * float(x[401]))+ (0.053388514 * float(x[402]))+ (0.023755819 * float(x[403]))+ (-0.044099607 * float(x[404]))+ (0.055598013 * float(x[405]))+ (0.044112876 * float(x[406]))+ (-0.02117368 * float(x[407]))+ (0.032656454 * float(x[408]))+ (-0.033006735 * float(x[409]))+ (-0.009103712 * float(x[410]))+ (0.049325235 * float(x[411]))+ (0.0024002858 * float(x[412]))+ (-0.041083097 * float(x[413]))+ (-0.019412689 * float(x[414]))+ (-0.015767124 * float(x[415]))+ (-0.0112074325 * float(x[416]))+ (0.005559372 * float(x[417]))+ (0.053724397 * float(x[418]))+ (0.0031102314 * float(x[419]))+ (-0.03586777 * float(x[420]))+ (0.002977424 * float(x[421]))+ (0.027853945 * float(x[422]))+ (0.028815532 * float(x[423]))+ (-0.053091712 * float(x[424]))+ (-0.010384176 * float(x[425]))+ (-0.04317 * float(x[426]))+ (-0.024786545 * float(x[427]))+ (0.020929853 * float(x[428]))+ (-0.04125225 * float(x[429]))+ (0.021594036 * float(x[430]))+ (0.049306475 * float(x[431]))+ (0.0038101017 * float(x[432]))+ (-0.038717017 * float(x[433]))+ (-0.02081317 * float(x[434]))+ (0.012685019 * float(x[435]))+ (-0.044283908 * float(x[436]))+ (0.028860264 * float(x[437]))+ (-0.05273916 * float(x[438]))+ (-0.055831354 * float(x[439]))+ (-0.08952624 * float(x[440]))+ (-0.011784487 * float(x[441]))+ (0.039062403 * float(x[442]))+ (-0.054982003 * float(x[443]))+ (0.0482846 * float(x[444]))+ (-0.023237772 * float(x[445]))+ (0.01701397 * float(x[446]))+ (0.0026491266 * float(x[447]))+ (-0.15576173 * float(x[448]))+ (0.048176654 * float(x[449])))+ ((0.03127879 * float(x[450]))+ (0.057742324 * float(x[451]))+ (0.029348347 * float(x[452]))+ (-0.038344145 * float(x[453]))+ (0.048481904 * float(x[454]))+ (0.0031220731 * float(x[455]))+ (0.02754779 * float(x[456]))+ (-0.04657912 * float(x[457]))+ (-0.016708516 * float(x[458]))+ (-0.1751868 * float(x[459]))+ (-0.022626031 * float(x[460]))+ (0.012532072 * float(x[461]))+ (-0.045610923 * float(x[462]))+ (0.018517368 * float(x[463]))+ (0.031183712 * float(x[464]))+ (0.008092634 * float(x[465]))+ (-0.0388678 * float(x[466]))+ (-0.045039188 * float(x[467]))+ (-0.017910961 * float(x[468]))+ (0.025501473 * float(x[469]))+ (0.057300936 * float(x[470]))+ (0.03340412 * float(x[471]))+ (-0.0065415627 * float(x[472]))+ (0.020367714 * float(x[473]))+ (-0.056991033 * float(x[474]))+ (-0.049615692 * float(x[475]))+ (0.027105784 * float(x[476]))+ (-0.032903694 * float(x[477]))+ (0.027948175 * float(x[478]))+ (-0.04100752 * float(x[479]))+ (-0.028773157 * float(x[480]))+ (-0.04784901 * float(x[481]))+ (0.030314311 * float(x[482]))+ (-0.0059191994 * float(x[483]))+ (0.044706993 * float(x[484]))+ (0.035950974 * float(x[485]))+ (0.032144293 * float(x[486]))+ (0.0018679835 * float(x[487]))+ (-0.017960496 * float(x[488]))+ (-0.01263085 * float(x[489]))+ (0.0077204304 * float(x[490]))+ (0.028797183 * float(x[491]))+ (-0.040697947 * float(x[492]))+ (0.048754647 * float(x[493]))+ (-0.0063162497 * float(x[494]))+ (-0.048677195 * float(x[495]))+ (-0.031430654 * float(x[496]))+ (0.051400054 * float(x[497]))+ (0.053125918 * float(x[498]))+ (-0.053808622 * float(x[499])))+ ((0.040971573 * float(x[500]))+ (0.029112898 * float(x[501]))+ (0.034385204 * float(x[502]))+ (0.049177498 * float(x[503]))+ (-0.05752353 * float(x[504]))+ (0.01834377 * float(x[505]))+ (0.023772813 * float(x[506]))+ (-0.017165542 * float(x[507]))+ (0.019440377 * float(x[508]))+ (-0.016713593 * float(x[509]))+ (0.035915494 * float(x[510]))+ (-0.07516106 * float(x[511]))+ (-0.05614328 * float(x[512]))+ (-0.12321497 * float(x[513]))+ (0.020604588 * float(x[514]))+ (-0.02838166 * float(x[515]))+ (0.005135161 * float(x[516]))+ (0.033665884 * float(x[517]))+ (-0.0057798736 * float(x[518]))+ (0.017679099 * float(x[519]))+ (-0.014010819 * float(x[520]))+ (0.020360917 * float(x[521]))+ (-0.04208087 * float(x[522]))+ (-0.034159247 * float(x[523]))+ (-0.029486498 * float(x[524]))+ (0.05338637 * float(x[525]))+ (-0.015631396 * float(x[526]))+ (-0.000158611 * float(x[527]))+ (-0.028144885 * float(x[528]))+ (0.057991788 * float(x[529]))+ (0.05673586 * float(x[530]))+ (-0.04381154 * float(x[531]))+ (-0.04709272 * float(x[532]))+ (-0.044032652 * float(x[533]))+ (-0.00028015353 * float(x[534]))+ (-0.15264751 * float(x[535]))+ (-0.03802329 * float(x[536]))+ (-0.020835666 * float(x[537]))+ (0.010975205 * float(x[538]))+ (-0.03035207 * float(x[539]))+ (0.012871982 * float(x[540]))+ (-0.0133212125 * float(x[541]))+ (-0.028148828 * float(x[542]))+ (0.007980878 * float(x[543]))+ (0.047765907 * float(x[544]))+ (-0.039274197 * float(x[545]))+ (0.0026974308 * float(x[546]))+ (-0.021422127 * float(x[547]))+ (0.057005182 * float(x[548]))+ (-0.05511472 * float(x[549])))+ ((-0.0556897 * float(x[550]))+ (0.05724211 * float(x[551]))+ (-0.03675367 * float(x[552]))+ (0.01113745 * float(x[553]))+ (-0.0050136177 * float(x[554]))+ (-0.012237294 * float(x[555]))+ (-0.012974518 * float(x[556]))+ (0.03691346 * float(x[557]))+ (0.0027765809 * float(x[558]))+ (-0.05655836 * float(x[559]))+ (-0.03429468 * float(x[560]))+ (-0.019803276 * float(x[561]))+ (0.029232405 * float(x[562]))+ (-0.037592724 * float(x[563]))+ (0.054775253 * float(x[564]))+ (-0.012938595 * float(x[565]))+ (-0.010430954 * float(x[566]))+ (0.045517765 * float(x[567]))+ (0.029197045 * float(x[568]))+ (0.04926826 * float(x[569]))+ (0.033602484 * float(x[570]))+ (-0.01762217 * float(x[571]))+ (-0.038541853 * float(x[572]))+ (-0.0043221563 * float(x[573]))+ (0.048078388 * float(x[574]))+ (-0.019496463 * float(x[575]))+ (-0.053871915 * float(x[576]))+ (0.023813203 * float(x[577]))+ (0.05655004 * float(x[578]))+ (-0.016537566 * float(x[579]))+ (-0.048100814 * float(x[580]))+ (-0.052692097 * float(x[581]))+ (-0.030185197 * float(x[582]))+ (-0.28007835 * float(x[583]))+ (-0.029335272 * float(x[584]))+ (0.011742066 * float(x[585]))+ (0.02206062 * float(x[586]))+ (0.04620097 * float(x[587]))+ (0.045100912 * float(x[588]))+ (-0.00869529 * float(x[589]))+ (-0.051222842 * float(x[590]))+ (-0.052492477 * float(x[591]))+ (0.054239072 * float(x[592]))+ (0.025679486 * float(x[593]))+ (0.025323039 * float(x[594]))+ (-0.050261147 * float(x[595]))+ (0.053793743 * float(x[596]))+ (0.055032495 * float(x[597]))+ (0.05244818 * float(x[598]))+ (-0.049004782 * float(x[599])))+ ((-0.021919139 * float(x[600]))+ (-0.039952967 * float(x[601]))+ (0.05501029 * float(x[602]))+ (-0.02496059 * float(x[603]))+ (-0.026521765 * float(x[604]))+ (0.03043469 * float(x[605]))+ (-0.026872458 * float(x[606]))+ (-0.028611125 * float(x[607]))+ (-0.0050812853 * float(x[608]))+ (-0.0055836667 * float(x[609]))+ (-0.04525172 * float(x[610]))+ (0.04842873 * float(x[611]))+ (-0.025625248 * float(x[612]))+ (0.02060578 * float(x[613]))+ (0.05052671 * float(x[614]))+ (0.029296309 * float(x[615]))+ (0.008224533 * float(x[616]))+ (0.049427234 * float(x[617]))+ (0.007808969 * float(x[618]))+ (-0.026876241 * float(x[619]))+ (0.054954186 * float(x[620]))+ (0.013749056 * float(x[621]))+ (-0.05667837 * float(x[622]))+ (-0.01653803 * float(x[623]))+ (-0.039569765 * float(x[624]))+ (0.050931573 * float(x[625]))+ (-0.009593504 * float(x[626]))+ (-0.0529515 * float(x[627]))+ (-0.0036518008 * float(x[628]))+ (0.03648197 * float(x[629]))+ (0.015092097 * float(x[630]))+ (0.018368669 * float(x[631]))+ (0.005395107 * float(x[632]))+ (0.02165746 * float(x[633]))+ (-0.014154003 * float(x[634]))+ (-0.023108657 * float(x[635]))+ (-0.05429826 * float(x[636]))+ (-0.043762185 * float(x[637]))+ (0.025176838 * float(x[638]))+ (-0.03439653 * float(x[639]))+ (0.00833413 * float(x[640]))+ (0.018542185 * float(x[641]))+ (0.0041131037 * float(x[642]))+ (-0.03766334 * float(x[643]))+ (0.055554204 * float(x[644]))+ (-0.03377993 * float(x[645]))+ (0.04777998 * float(x[646]))+ (-0.046211965 * float(x[647]))+ (-0.013973725 * float(x[648]))+ (0.031599768 * float(x[649])))+ ((-0.023734909 * float(x[650]))+ (0.04879904 * float(x[651]))+ (-0.039975777 * float(x[652]))+ (-0.048783265 * float(x[653]))+ (-0.026194397 * float(x[654]))+ (0.009390451 * float(x[655]))+ (0.053487755 * float(x[656]))+ (-0.027732752 * float(x[657]))+ (-0.08260393 * float(x[658]))+ (-0.0145633 * float(x[659]))+ (-0.012597539 * float(x[660]))+ (0.04271472 * float(x[661]))+ (-0.04501978 * float(x[662]))+ (0.0061700614 * float(x[663]))+ (0.054629426 * float(x[664]))+ (-0.007982428 * float(x[665]))+ (0.04510416 * float(x[666]))+ (-0.017889554 * float(x[667]))+ (0.046761155 * float(x[668]))+ (-0.056193303 * float(x[669]))+ (-0.008372307 * float(x[670]))+ (-0.06925406 * float(x[671]))+ (0.01882648 * float(x[672]))+ (-0.059913162 * float(x[673]))+ (0.04460335 * float(x[674]))+ (-0.0086547565 * float(x[675]))+ (-0.0023036052 * float(x[676]))+ (0.03978145 * float(x[677]))+ (-0.015717898 * float(x[678]))+ (0.05092463 * float(x[679]))+ (-0.038677774 * float(x[680]))+ (-0.006286032 * float(x[681]))+ (-0.0031201276 * float(x[682]))+ (0.02592083 * float(x[683]))+ (0.03973734 * float(x[684]))+ (-0.0092075905 * float(x[685]))+ (-0.048127342 * float(x[686]))+ (0.028783726 * float(x[687]))+ (0.017376907 * float(x[688]))+ (0.02333517 * float(x[689]))+ (-0.03583452 * float(x[690]))+ (0.037387192 * float(x[691]))+ (0.055021297 * float(x[692]))+ (0.005040646 * float(x[693]))+ (-0.05425992 * float(x[694]))+ (0.040779375 * float(x[695]))+ (-0.043071497 * float(x[696]))+ (0.013353561 * float(x[697]))+ (0.00844171 * float(x[698]))+ (-0.027188735 * float(x[699])))+ ((0.020227076 * float(x[700]))+ (-0.05195859 * float(x[701]))+ (0.013230804 * float(x[702]))+ (-0.036826912 * float(x[703]))+ (-0.0062816045 * float(x[704]))+ (0.0074721957 * float(x[705]))+ (0.049490407 * float(x[706]))+ (-0.02771645 * float(x[707]))+ (0.037215274 * float(x[708]))+ (-0.0073795244 * float(x[709]))+ (-0.027589085 * float(x[710]))+ (-0.050585724 * float(x[711]))+ (-0.05329967 * float(x[712]))+ (0.05673241 * float(x[713]))+ (-0.0144879 * float(x[714]))+ (0.0029015844 * float(x[715]))+ (0.015749216 * float(x[716]))+ (0.0394864 * float(x[717]))+ (0.04957927 * float(x[718]))+ (0.047112897 * float(x[719]))+ (-0.04303873 * float(x[720]))+ (-0.009307168 * float(x[721]))+ (-0.0343747 * float(x[722]))+ (-0.03319046 * float(x[723]))+ (0.013779628 * float(x[724]))+ (0.05452711 * float(x[725]))+ (-0.046536658 * float(x[726]))+ (0.035157863 * float(x[727]))+ (-0.030118305 * float(x[728]))+ (-0.011314654 * float(x[729]))+ (0.04611105 * float(x[730]))+ (-0.0131384665 * float(x[731]))+ (0.0052895336 * float(x[732]))+ (-0.040607583 * float(x[733]))+ (0.049449567 * float(x[734]))+ (-0.007509418 * float(x[735]))+ (-0.04248729 * float(x[736]))+ (0.017009676 * float(x[737]))+ (-0.041301664 * float(x[738]))+ (-0.04609569 * float(x[739]))+ (0.0035388921 * float(x[740]))+ (0.046057183 * float(x[741]))+ (-0.016438855 * float(x[742]))+ (0.027341567 * float(x[743]))+ (0.049918935 * float(x[744]))+ (0.038529567 * float(x[745]))+ (-0.030461362 * float(x[746]))+ (-0.0063651563 * float(x[747]))+ (-0.018280324 * float(x[748]))+ (-0.04671237 * float(x[749])))+ ((2.4041667e-05 * float(x[750]))+ (0.043709807 * float(x[751]))+ (0.048942678 * float(x[752]))+ (0.0054199426 * float(x[753]))+ (0.0131938355 * float(x[754]))+ (-0.0251489 * float(x[755]))+ (0.04384964 * float(x[756]))+ (-0.02417221 * float(x[757]))+ (-0.040353157 * float(x[758]))+ (0.008945651 * float(x[759]))+ (0.034819644 * float(x[760]))+ (-0.05237423 * float(x[761]))+ (0.05251256 * float(x[762]))+ (0.020897206 * float(x[763]))+ (-0.040699363 * float(x[764]))+ (-0.012513249 * float(x[765]))+ (0.050398696 * float(x[766]))+ (-0.04456952 * float(x[767]))+ (-0.016978709 * float(x[768]))+ (0.019052746 * float(x[769]))+ (-0.05089276 * float(x[770]))+ (0.03184545 * float(x[771]))+ (0.030239195 * float(x[772]))+ (0.03602843 * float(x[773]))+ (-0.037035655 * float(x[774]))+ (0.05785882 * float(x[775]))+ (-0.034434173 * float(x[776]))+ (0.057994716 * float(x[777]))+ (-0.055749487 * float(x[778]))+ (-0.051757444 * float(x[779]))+ (0.035679348 * float(x[780]))+ (0.00607127 * float(x[781]))+ (0.003351238 * float(x[782]))+ (-0.032168444 * float(x[783]))+ (-0.024367798 * float(x[784]))+ (-0.016985115 * float(x[785]))+ (-0.05658978 * float(x[786]))+ (0.0030189194 * float(x[787]))+ (0.010273933 * float(x[788]))+ (-4.8967133e-05 * float(x[789]))+ (0.018761048 * float(x[790]))+ (0.055119917 * float(x[791]))+ (0.015445597 * float(x[792]))+ (-0.021265553 * float(x[793]))+ (-0.023907207 * float(x[794]))+ (-0.03716702 * float(x[795]))+ (-0.040269855 * float(x[796]))+ (-0.009355566 * float(x[797]))+ (-0.01027432 * float(x[798]))+ (0.025842566 * float(x[799])))+ ((-0.024830285 * float(x[800]))+ (0.04631093 * float(x[801]))+ (-0.04076139 * float(x[802]))+ (0.00016510511 * float(x[803]))+ (0.052219264 * float(x[804]))+ (0.057766028 * float(x[805]))+ (-0.03364903 * float(x[806]))+ (0.010348151 * float(x[807]))+ (0.0068619014 * float(x[808]))+ (-0.027236084 * float(x[809]))+ (-0.02007017 * float(x[810]))+ (0.01573422 * float(x[811]))+ (-0.04039454 * float(x[812]))+ (0.009584789 * float(x[813]))+ (0.025137465 * float(x[814]))+ (-0.022891974 * float(x[815]))+ (0.048252873 * float(x[816]))+ (-0.003823 * float(x[817]))+ (0.026356684 * float(x[818]))+ (0.057528004 * float(x[819]))+ (-0.017756619 * float(x[820]))+ (0.031567186 * float(x[821]))+ (-0.016615756 * float(x[822]))+ (-0.0084855445 * float(x[823]))+ (-0.009844769 * float(x[824]))+ (-0.00036089495 * float(x[825]))+ (-0.021944989 * float(x[826]))+ (0.013615802 * float(x[827]))+ (0.002188895 * float(x[828]))+ (0.03682337 * float(x[829]))+ (-0.011757951 * float(x[830]))+ (0.0058254087 * float(x[831]))+ (-0.02160933 * float(x[832]))+ (-0.048648626 * float(x[833]))+ (0.023507573 * float(x[834]))+ (0.0074332207 * float(x[835]))+ (-0.02326455 * float(x[836]))+ (-0.019640896 * float(x[837]))+ (0.01519207 * float(x[838]))+ (-0.010503855 * float(x[839]))+ (0.03796398 * float(x[840]))+ (-0.13454933 * float(x[841]))+ (-0.046949204 * float(x[842]))+ (-0.07806971 * float(x[843]))+ (-0.34506923 * float(x[844]))+ (0.025133993 * float(x[845]))+ (0.04286737 * float(x[846]))+ (0.002673258 * float(x[847]))+ (0.011368022 * float(x[848]))+ (0.0021107758 * float(x[849])))+ ((0.040220402 * float(x[850]))+ (-0.024525799 * float(x[851]))+ (-0.030879486 * float(x[852]))+ (0.025313415 * float(x[853]))+ (-0.05055752 * float(x[854]))+ (0.0009313449 * float(x[855]))+ (-0.026715588 * float(x[856]))+ (0.03834209 * float(x[857]))+ (-0.054085102 * float(x[858]))+ (0.035222538 * float(x[859]))+ (0.05747284 * float(x[860]))+ (0.011754163 * float(x[861]))+ (-0.0038703938 * float(x[862]))+ (0.057181995 * float(x[863]))+ (-0.024825364 * float(x[864]))+ (-0.0046550278 * float(x[865]))+ (-0.025438368 * float(x[866]))+ (-0.008018959 * float(x[867]))+ (0.012625463 * float(x[868]))+ (0.007758729 * float(x[869]))+ (-0.010971956 * float(x[870]))+ (-0.05808186 * float(x[871]))+ (0.0029745027 * float(x[872]))+ (-0.0017207712 * float(x[873]))+ (0.008739039 * float(x[874]))+ (0.044512335 * float(x[875]))+ (0.05646511 * float(x[876]))+ (-0.03446444 * float(x[877]))+ (-0.0036222413 * float(x[878]))+ (-0.02324614 * float(x[879]))+ (-0.05353673 * float(x[880]))+ (-0.04226988 * float(x[881]))+ (0.054522093 * float(x[882]))+ (0.03387071 * float(x[883]))+ (0.031203711 * float(x[884]))+ (0.032283746 * float(x[885]))+ (-0.046152174 * float(x[886]))+ (0.0061006844 * float(x[887]))+ (0.054067083 * float(x[888]))+ (-0.03241965 * float(x[889]))+ (0.05167757 * float(x[890]))+ (0.015268585 * float(x[891]))+ (0.04086964 * float(x[892]))+ (-0.02488551 * float(x[893]))+ (0.026781047 * float(x[894]))+ (-0.051497053 * float(x[895]))+ (-0.003688511 * float(x[896]))+ (0.019376364 * float(x[897]))+ (0.017421203 * float(x[898]))+ (0.048611607 * float(x[899])))+ ((0.05708473 * float(x[900]))+ (0.05284883 * float(x[901]))+ (0.03900193 * float(x[902]))+ (0.040841665 * float(x[903]))+ (-0.0074954806 * float(x[904]))+ (-0.04508143 * float(x[905]))+ (-0.021565001 * float(x[906]))+ (-0.0065215705 * float(x[907]))+ (-0.031391658 * float(x[908]))+ (0.02969449 * float(x[909]))+ (-0.041882742 * float(x[910]))+ (0.009373116 * float(x[911]))+ (0.014032529 * float(x[912]))+ (0.05103028 * float(x[913]))+ (0.021158608 * float(x[914]))+ (-0.05094239 * float(x[915]))+ (-0.042167224 * float(x[916]))+ (0.025603637 * float(x[917]))+ (0.007916615 * float(x[918]))+ (0.02833055 * float(x[919]))+ (-0.05801676 * float(x[920]))+ (-0.05361051 * float(x[921]))+ (0.035623007 * float(x[922]))+ (0.037157737 * float(x[923]))+ (-0.11615378 * float(x[924]))+ (-0.01929981 * float(x[925]))+ (-0.103086285 * float(x[926]))+ (0.04399286 * float(x[927]))+ (0.018228441 * float(x[928]))+ (0.057439737 * float(x[929]))+ (-0.057277378 * float(x[930]))+ (-0.055921763 * float(x[931]))+ (-0.029616524 * float(x[932]))+ (0.05157468 * float(x[933]))+ (0.035591308 * float(x[934]))+ (0.03862072 * float(x[935]))+ (-0.048928477 * float(x[936]))+ (0.042047147 * float(x[937]))+ (-0.054846555 * float(x[938]))+ (0.012977654 * float(x[939]))+ (-0.0380517 * float(x[940]))+ (-0.023073526 * float(x[941]))+ (0.01028613 * float(x[942]))+ (-0.022840265 * float(x[943]))+ (-0.009191345 * float(x[944]))+ (-0.055060178 * float(x[945]))+ (-0.097196326 * float(x[946]))+ (0.022502359 * float(x[947]))+ (-0.12796663 * float(x[948]))+ (-0.064855635 * float(x[949])))+ ((-0.09643005 * float(x[950]))+ (-0.047418777 * float(x[951]))+ (-0.04636202 * float(x[952]))+ (0.03483756 * float(x[953]))+ (0.029730208 * float(x[954]))+ (-0.8192936 * float(x[955]))+ (-0.03168792 * float(x[956]))+ (0.019501744 * float(x[957]))+ (0.0026562172 * float(x[958]))+ (-0.8685392 * float(x[959]))+ (-0.8145242 * float(x[960]))+ (-0.7741097 * float(x[961]))+ (-0.05713627 * float(x[962]))+ (-0.057763815 * float(x[963]))+ (-0.8195274 * float(x[964]))+ (0.043774776 * float(x[965]))+ (-0.03502685 * float(x[966]))+ (-0.814233 * float(x[967]))+ (-0.7861913 * float(x[968]))+ (0.017976677 * float(x[969]))+ (0.012624947 * float(x[970]))+ (-0.76898485 * float(x[971]))+ (-0.7891924 * float(x[972]))+ (-0.85965776 * float(x[973]))+ (0.005270536 * float(x[974]))+ (0.029864205 * float(x[975]))+ (-0.77579415 * float(x[976]))+ (-0.057786178 * float(x[977]))+ (0.031476527 * float(x[978]))+ (-0.8438736 * float(x[979]))+ (-0.88391215 * float(x[980]))+ (0.013191681 * float(x[981]))+ (-0.03161411 * float(x[982]))+ (0.008237218 * float(x[983]))+ (-0.03768956 * float(x[984]))+ (-0.0433943 * float(x[985]))+ (-0.0049211965 * float(x[986]))+ (-0.019511737 * float(x[987]))+ (0.034035176 * float(x[988]))+ (-0.8217084 * float(x[989]))+ (-0.7816854 * float(x[990]))+ (-0.816075 * float(x[991]))+ (-0.8455581 * float(x[992]))+ (-0.7876791 * float(x[993]))+ (0.003197534 * float(x[994]))+ (0.0109608825 * float(x[995]))+ (-0.018607946 * float(x[996]))+ (-0.8268165 * float(x[997]))+ (-0.010986014 * float(x[998]))+ (-0.8319583 * float(x[999])))+ ((-0.8722879 * float(x[1000]))+ (-0.00033680594 * float(x[1001]))+ (-0.8751045 * float(x[1002]))+ (-0.012435778 * float(x[1003]))+ (-0.7931894 * float(x[1004]))+ (-0.04038387 * float(x[1005]))+ (-0.03910418 * float(x[1006]))+ (-0.013978968 * float(x[1007]))+ (-0.015867239 * float(x[1008]))+ (0.010033418 * float(x[1009]))+ (0.009964986 * float(x[1010]))+ (-0.79744875 * float(x[1011]))+ (-0.039972875 * float(x[1012]))+ (-0.0040890994 * float(x[1013]))+ (-0.7945457 * float(x[1014]))+ (-0.77679163 * float(x[1015]))+ (-0.0042373715 * float(x[1016]))+ (-0.033612393 * float(x[1017]))+ (0.01669908 * float(x[1018]))+ (-0.7939575 * float(x[1019]))+ (-0.86333144 * float(x[1020]))+ (-0.8607487 * float(x[1021]))+ (0.025676385 * float(x[1022]))+ (-0.8311092 * float(x[1023]))+ (-0.05486694 * float(x[1024]))+ (-0.03349435 * float(x[1025]))+ (-0.8034811 * float(x[1026]))+ (-0.019702902 * float(x[1027]))+ (0.040096473 * float(x[1028]))+ (0.045923423 * float(x[1029]))+ (-0.8185882 * float(x[1030]))+ (-0.83163255 * float(x[1031]))+ (-0.8454788 * float(x[1032]))+ (-0.82997614 * float(x[1033]))+ (-0.8164652 * float(x[1034]))+ (-0.044372663 * float(x[1035]))+ (-0.013883371 * float(x[1036]))+ (-0.048320066 * float(x[1037]))+ (-0.7913853 * float(x[1038]))+ (-0.03699425 * float(x[1039]))+ (-0.7739702 * float(x[1040]))+ (-0.014974618 * float(x[1041]))+ (-0.03327883 * float(x[1042]))+ (-0.79912883 * float(x[1043]))+ (-0.81837887 * float(x[1044]))+ (0.04022569 * float(x[1045]))+ (-0.8027878 * float(x[1046]))+ (-0.8830005 * float(x[1047]))+ (-0.790297 * float(x[1048]))+ (-0.83797824 * float(x[1049])))+ ((-0.8527135 * float(x[1050]))+ (0.03689124 * float(x[1051]))+ (0.042367645 * float(x[1052]))+ (-0.05105794 * float(x[1053]))+ (-0.0052526663 * float(x[1054]))+ (0.047705 * float(x[1055]))+ (-0.8045408 * float(x[1056]))+ (0.048940133 * float(x[1057]))+ (-0.019907536 * float(x[1058]))+ (-0.03204522 * float(x[1059]))+ (0.049953282 * float(x[1060]))+ (-0.8028252 * float(x[1061]))+ (0.055766802 * float(x[1062]))+ (-0.8513035 * float(x[1063]))+ (-0.86433744 * float(x[1064]))+ (-0.006808743 * float(x[1065]))+ (-0.054697175 * float(x[1066]))+ (0.022770358 * float(x[1067]))+ (0.04284762 * float(x[1068]))+ (-0.8130938 * float(x[1069]))+ (-0.0057397047 * float(x[1070]))+ (-0.7982371 * float(x[1071]))+ (-0.036873195 * float(x[1072]))+ (-0.7702117 * float(x[1073]))+ (-0.88480145 * float(x[1074]))+ (-0.8826871 * float(x[1075]))+ (-0.84076566 * float(x[1076]))+ (0.04745173 * float(x[1077]))+ (0.00581645 * float(x[1078]))+ (0.022309817 * float(x[1079]))+ (-0.042581137 * float(x[1080]))+ (0.021185074 * float(x[1081]))+ (-0.0064910185 * float(x[1082]))+ (0.023284592 * float(x[1083]))+ (0.041026436 * float(x[1084]))+ (0.025251288 * float(x[1085]))+ (-0.0049413443 * float(x[1086]))+ (-0.003578074 * float(x[1087]))+ (-0.036433324 * float(x[1088]))+ (-0.021011412 * float(x[1089]))+ (0.037750047 * float(x[1090]))+ (-0.023294277 * float(x[1091]))+ (0.03607698 * float(x[1092]))+ (-0.023034755 * float(x[1093]))+ (-0.013529292 * float(x[1094]))+ (0.001236718 * float(x[1095]))+ (-0.053308144 * float(x[1096]))+ (-0.0005799214 * float(x[1097]))+ (-0.005855111 * float(x[1098]))+ (-0.0052185184 * float(x[1099])))+ ((-0.011612566 * float(x[1100]))+ (0.04579779 * float(x[1101]))+ (0.042870607 * float(x[1102]))+ (-0.039371535 * float(x[1103]))+ (0.026984958 * float(x[1104]))+ (-0.04556553 * float(x[1105]))+ (-0.04945409 * float(x[1106]))+ (0.017757503 * float(x[1107]))+ (0.0008541907 * float(x[1108]))+ (-0.027099794 * float(x[1109]))+ (-0.05602892 * float(x[1110]))+ (-0.022489 * float(x[1111]))+ (0.019402511 * float(x[1112]))+ (-0.05376912 * float(x[1113]))+ (-0.05643344 * float(x[1114]))+ (0.007370416 * float(x[1115]))+ (-0.041848876 * float(x[1116]))+ (-0.050892234 * float(x[1117]))+ (-0.022381503 * float(x[1118]))+ (-0.009352469 * float(x[1119]))+ (-0.052787364 * float(x[1120]))+ (-0.038788904 * float(x[1121]))+ (0.0038089978 * float(x[1122]))+ (-0.054778222 * float(x[1123]))+ (-0.008164713 * float(x[1124]))+ (-0.037509374 * float(x[1125]))+ (-0.040270817 * float(x[1126]))+ (0.022831997 * float(x[1127]))+ (-0.0447121 * float(x[1128]))+ (-0.04402324 * float(x[1129]))+ (0.033128347 * float(x[1130]))+ (0.010861212 * float(x[1131]))+ (0.052904647 * float(x[1132]))+ (-0.015527377 * float(x[1133]))+ (-0.028058814 * float(x[1134]))+ (-0.0053760144 * float(x[1135]))+ (0.00029405594 * float(x[1136]))+ (0.044302978 * float(x[1137]))+ (-0.057863303 * float(x[1138]))+ (-0.004135856 * float(x[1139]))+ (0.02569693 * float(x[1140]))+ (-0.031989682 * float(x[1141]))+ (-0.02951815 * float(x[1142]))+ (0.028073732 * float(x[1143]))+ (-0.05566193 * float(x[1144]))+ (0.013765265 * float(x[1145]))+ (-0.044973284 * float(x[1146]))+ (0.02887511 * float(x[1147]))+ (-0.049670048 * float(x[1148]))+ (0.03571504 * float(x[1149])))+ ((-0.054990746 * float(x[1150]))+ (-0.048829358 * float(x[1151]))+ (0.000856288 * float(x[1152]))+ (0.045775186 * float(x[1153]))+ (-0.049748797 * float(x[1154]))+ (-0.025911985 * float(x[1155]))+ (0.05102071 * float(x[1156]))+ (-0.0097416695 * float(x[1157]))+ (0.024066553 * float(x[1158]))+ (-0.055883165 * float(x[1159]))+ (-0.01826831 * float(x[1160]))+ (-0.029500443 * float(x[1161]))+ (0.048974745 * float(x[1162]))+ (0.024110483 * float(x[1163]))+ (-0.042387497 * float(x[1164]))+ (0.009365979 * float(x[1165]))+ (-0.00066747866 * float(x[1166]))+ (-0.023867656 * float(x[1167]))+ (-0.03317424 * float(x[1168]))+ (-0.019276597 * float(x[1169]))+ (0.04578917 * float(x[1170]))+ (-0.041642524 * float(x[1171]))+ (-0.041380532 * float(x[1172]))+ (-0.017922128 * float(x[1173]))+ (0.0010107036 * float(x[1174]))+ (0.015813546 * float(x[1175]))+ (0.0017433444 * float(x[1176]))+ (-0.013983758 * float(x[1177]))+ (-0.035223495 * float(x[1178]))+ (-0.010423221 * float(x[1179]))+ (-0.023384653 * float(x[1180]))+ (0.046933733 * float(x[1181]))+ (-0.05654634 * float(x[1182]))+ (-0.037053697 * float(x[1183]))+ (-0.047262173 * float(x[1184]))+ (-0.010616455 * float(x[1185]))+ (0.045269113 * float(x[1186]))+ (0.050919242 * float(x[1187]))+ (-0.05057131 * float(x[1188]))+ (-0.0025164362 * float(x[1189]))+ (0.034097787 * float(x[1190]))+ (0.025606558 * float(x[1191]))+ (0.04758277 * float(x[1192]))+ (-0.001611226 * float(x[1193]))+ (-0.03903082 * float(x[1194]))+ (0.038429204 * float(x[1195]))+ (-0.019920157 * float(x[1196]))+ (0.030078903 * float(x[1197]))+ (-0.014315684 * float(x[1198]))+ (0.024694463 * float(x[1199])))+ ((0.052248996 * float(x[1200]))+ (0.054016616 * float(x[1201]))+ (-0.052866533 * float(x[1202]))+ (-0.038426105 * float(x[1203]))+ (-0.024018731 * float(x[1204]))+ (-0.037044697 * float(x[1205]))+ (0.05573845 * float(x[1206]))+ (-0.005130514 * float(x[1207]))+ (-0.03853415 * float(x[1208]))+ (-0.025849909 * float(x[1209]))+ (-0.032087427 * float(x[1210]))+ (0.023700599 * float(x[1211]))+ (-0.050669998 * float(x[1212]))+ (-0.05416423 * float(x[1213]))+ (-0.05726392 * float(x[1214]))+ (0.02500965 * float(x[1215]))+ (0.028723434 * float(x[1216]))+ (-0.03607916 * float(x[1217]))+ (0.01440541 * float(x[1218]))+ (0.04288206 * float(x[1219]))+ (0.008440802 * float(x[1220]))+ (-0.012290968 * float(x[1221]))+ (0.0042919205 * float(x[1222]))+ (-0.0062289713 * float(x[1223]))+ (0.029248856 * float(x[1224]))+ (-0.0394445 * float(x[1225]))+ (0.02945828 * float(x[1226]))+ (0.03274158 * float(x[1227]))+ (-0.035195902 * float(x[1228]))+ (0.047435265 * float(x[1229]))+ (0.057056263 * float(x[1230]))+ (-0.02290102 * float(x[1231]))+ (-0.01627095 * float(x[1232]))+ (0.028950125 * float(x[1233]))+ (-0.04550973 * float(x[1234]))+ (0.022972632 * float(x[1235]))+ (0.0135529805 * float(x[1236]))+ (0.036616586 * float(x[1237]))+ (-0.050458327 * float(x[1238]))+ (-0.048261195 * float(x[1239]))+ (0.026090551 * float(x[1240]))+ (0.02092519 * float(x[1241]))+ (-0.054069173 * float(x[1242]))+ (-0.032394942 * float(x[1243]))+ (-0.053152077 * float(x[1244]))+ (-0.041617796 * float(x[1245]))+ (-0.026210625 * float(x[1246]))+ (0.048072677 * float(x[1247]))+ (-0.011563066 * float(x[1248]))+ (0.033364773 * float(x[1249])))+ ((0.055168107 * float(x[1250]))+ (0.02647403 * float(x[1251]))+ (-0.052003764 * float(x[1252]))+ (0.029232824 * float(x[1253]))+ (0.022157973 * float(x[1254]))+ (0.045024484 * float(x[1255]))+ (-0.05730301 * float(x[1256]))+ (0.03572702 * float(x[1257]))+ (0.04755006 * float(x[1258]))+ (-0.054045912 * float(x[1259]))+ (0.0060779033 * float(x[1260]))+ (0.049590845 * float(x[1261]))+ (-0.042250115 * float(x[1262]))+ (0.019060876 * float(x[1263]))+ (0.025669187 * float(x[1264]))+ (0.015225234 * float(x[1265]))+ (0.05775864 * float(x[1266]))+ (0.0475639 * float(x[1267]))+ (0.04983957 * float(x[1268]))+ (-0.0072407895 * float(x[1269]))+ (0.04872178 * float(x[1270]))+ (-0.054135773 * float(x[1271]))+ (-0.031347595 * float(x[1272]))+ (-0.012424535 * float(x[1273]))+ (-0.017256316 * float(x[1274]))+ (0.053658523 * float(x[1275]))+ (0.027399626 * float(x[1276]))+ (0.037399936 * float(x[1277]))+ (0.039514232 * float(x[1278]))+ (-0.04339421 * float(x[1279]))+ (-0.0067280727 * float(x[1280]))+ (0.008482783 * float(x[1281]))+ (0.015109086 * float(x[1282]))+ (0.029872395 * float(x[1283]))+ (-0.023114674 * float(x[1284]))+ (-0.017516414 * float(x[1285]))+ (0.048607256 * float(x[1286]))+ (-0.015590652 * float(x[1287]))+ (-0.04035241 * float(x[1288]))+ (0.03938816 * float(x[1289]))+ (0.039336864 * float(x[1290]))+ (-0.018215425 * float(x[1291]))+ (-0.011613547 * float(x[1292]))+ (-0.042864244 * float(x[1293]))+ (-0.048511498 * float(x[1294]))+ (0.021845207 * float(x[1295]))+ (-0.024816051 * float(x[1296]))+ (0.046246134 * float(x[1297]))+ (-0.046514183 * float(x[1298]))+ (-0.008029613 * float(x[1299])))+ ((0.0012543043 * float(x[1300]))+ (0.029855818 * float(x[1301]))+ (0.047014978 * float(x[1302]))+ (0.03933959 * float(x[1303]))+ (0.025571512 * float(x[1304]))+ (-0.026663458 * float(x[1305]))+ (-0.04148551 * float(x[1306]))+ (-0.051969033 * float(x[1307]))+ (0.0028816748 * float(x[1308]))+ (0.0563415 * float(x[1309]))+ (-0.011033916 * float(x[1310]))+ (-0.002445484 * float(x[1311]))+ (-0.042214412 * float(x[1312]))+ (0.017834576 * float(x[1313]))+ (0.036828943 * float(x[1314]))+ (-0.05727291 * float(x[1315]))+ (-0.040903155 * float(x[1316]))+ (0.04302856 * float(x[1317]))+ (0.013753953 * float(x[1318]))+ (-0.0036217412 * float(x[1319]))+ (0.010384336 * float(x[1320]))+ (-0.008832211 * float(x[1321]))+ (-0.04060358 * float(x[1322]))+ (-0.05428201 * float(x[1323]))+ (0.038207117 * float(x[1324]))+ (-0.0069091544 * float(x[1325]))+ (-0.021574274 * float(x[1326]))+ (-0.014994186 * float(x[1327]))+ (-0.031684224 * float(x[1328]))+ (-0.017205497 * float(x[1329]))+ (-0.049866196 * float(x[1330]))+ (0.043472223 * float(x[1331]))+ (0.02372114 * float(x[1332]))+ (-0.029296566 * float(x[1333]))+ (-0.019827198 * float(x[1334]))+ (0.026061865 * float(x[1335]))+ (-0.021511283 * float(x[1336]))+ (0.015318324 * float(x[1337]))+ (0.015994951 * float(x[1338]))+ (-0.036567863 * float(x[1339]))+ (0.014551984 * float(x[1340]))+ (0.0035543754 * float(x[1341]))+ (0.0507359 * float(x[1342]))+ (-0.021018505 * float(x[1343]))+ (-0.014933345 * float(x[1344]))+ (0.050051365 * float(x[1345]))+ (-0.047437306 * float(x[1346]))+ (0.0041970685 * float(x[1347]))+ (0.05597101 * float(x[1348]))+ (-0.026046162 * float(x[1349])))+ ((0.05569095 * float(x[1350]))+ (0.051546644 * float(x[1351]))+ (0.054044507 * float(x[1352]))+ (-0.0055431407 * float(x[1353]))+ (0.052551202 * float(x[1354]))+ (-0.025311414 * float(x[1355]))+ (-0.019884855 * float(x[1356]))+ (0.021971976 * float(x[1357]))+ (0.012271601 * float(x[1358]))+ (0.032024268 * float(x[1359]))+ (0.05520513 * float(x[1360]))+ (-0.036364324 * float(x[1361]))+ (0.030830622 * float(x[1362]))+ (0.019435318 * float(x[1363]))+ (0.030647123 * float(x[1364]))+ (0.027545359 * float(x[1365]))+ (-0.021730121 * float(x[1366]))+ (-0.045912597 * float(x[1367]))+ (0.046495344 * float(x[1368]))+ (-0.033125613 * float(x[1369]))+ (0.03713927 * float(x[1370]))+ (-0.0553401 * float(x[1371]))+ (-0.0100498665 * float(x[1372]))+ (0.00061579345 * float(x[1373]))+ (0.010051175 * float(x[1374]))+ (0.0046957536 * float(x[1375]))+ (0.018304892 * float(x[1376]))+ (-0.006468079 * float(x[1377]))+ (0.014226864 * float(x[1378]))+ (0.057486095 * float(x[1379]))+ (-0.0375879 * float(x[1380]))+ (-0.0031714984 * float(x[1381]))+ (-0.022174696 * float(x[1382]))+ (0.050970957 * float(x[1383]))+ (0.049728468 * float(x[1384]))+ (-0.0015840394 * float(x[1385]))+ (-0.020136226 * float(x[1386]))+ (-0.03589242 * float(x[1387]))+ (0.041566502 * float(x[1388]))+ (-0.004000254 * float(x[1389]))+ (0.05471081 * float(x[1390]))+ (0.033127185 * float(x[1391]))+ (0.05084745 * float(x[1392]))+ (0.04594568 * float(x[1393]))+ (-0.03774992 * float(x[1394]))+ (0.017003462 * float(x[1395]))+ (-0.02408791 * float(x[1396]))+ (0.029147454 * float(x[1397]))+ (-0.0052229213 * float(x[1398]))+ (0.0050290627 * float(x[1399])))+ ((-0.040176287 * float(x[1400]))+ (-0.05191743 * float(x[1401]))+ (0.021875683 * float(x[1402]))+ (0.013499592 * float(x[1403]))+ (0.005045968 * float(x[1404]))+ (0.039455302 * float(x[1405]))+ (-0.024257291 * float(x[1406]))+ (0.020621253 * float(x[1407]))+ (-0.03199433 * float(x[1408]))+ (0.0120365275 * float(x[1409]))+ (-0.01326205 * float(x[1410]))+ (0.040682882 * float(x[1411]))+ (0.05079971 * float(x[1412]))+ (0.050453622 * float(x[1413]))+ (0.002613208 * float(x[1414]))+ (0.03425596 * float(x[1415]))+ (-0.058041055 * float(x[1416]))+ (-0.034075867 * float(x[1417]))+ (0.010382302 * float(x[1418]))+ (0.00032402136 * float(x[1419]))+ (-0.045605663 * float(x[1420]))+ (-0.025711756 * float(x[1421]))+ (-0.027131647 * float(x[1422]))+ (-0.057554413 * float(x[1423]))+ (0.0055402485 * float(x[1424]))+ (0.039600406 * float(x[1425]))+ (0.023577126 * float(x[1426]))+ (-0.02760095 * float(x[1427]))+ (-0.053342942 * float(x[1428]))+ (-0.0468665 * float(x[1429]))+ (0.0010776926 * float(x[1430]))+ (0.039961703 * float(x[1431]))+ (-0.023525266 * float(x[1432]))+ (-0.031609926 * float(x[1433]))+ (-0.030989066 * float(x[1434]))+ (-0.005028795 * float(x[1435]))+ (-0.05516641 * float(x[1436]))+ (-0.051262166 * float(x[1437]))+ (0.057184372 * float(x[1438]))+ (-0.027704544 * float(x[1439]))+ (-0.0104774125 * float(x[1440]))+ (-0.01554239 * float(x[1441]))+ (-0.0510334 * float(x[1442]))+ (-0.010241038 * float(x[1443]))+ (0.017782737 * float(x[1444]))+ (-0.023588283 * float(x[1445]))+ (-0.0024757406 * float(x[1446]))+ (-0.0002778153 * float(x[1447]))+ (-0.057829965 * float(x[1448]))+ (0.042215783 * float(x[1449])))+ ((0.046924423 * float(x[1450]))+ (0.03960686 * float(x[1451]))+ (-0.019077022 * float(x[1452]))+ (0.030356301 * float(x[1453]))+ (-0.05442684 * float(x[1454]))+ (-0.014370921 * float(x[1455]))+ (-0.011814809 * float(x[1456]))+ (-0.020514807 * float(x[1457]))+ (0.024398314 * float(x[1458]))+ (-0.026469633 * float(x[1459]))+ (-0.0067329784 * float(x[1460]))+ (-0.016773995 * float(x[1461]))+ (-0.05455237 * float(x[1462]))+ (-0.009593198 * float(x[1463]))+ (-0.049230836 * float(x[1464]))+ (0.03387318 * float(x[1465]))+ (0.031047609 * float(x[1466]))+ (0.0544193 * float(x[1467]))+ (-0.019507116 * float(x[1468]))+ (0.0029540835 * float(x[1469]))+ (0.011379553 * float(x[1470]))+ (0.05798764 * float(x[1471]))+ (0.05324714 * float(x[1472]))+ (-0.030064408 * float(x[1473]))+ (-0.049429853 * float(x[1474]))+ (-0.05235683 * float(x[1475]))+ (-0.027974341 * float(x[1476]))+ (0.04884225 * float(x[1477]))+ (0.01950992 * float(x[1478]))+ (0.056049407 * float(x[1479]))+ (0.043058366 * float(x[1480]))+ (0.0008422238 * float(x[1481]))+ (-0.03600343 * float(x[1482]))+ (0.056726027 * float(x[1483]))+ (0.046599034 * float(x[1484]))+ (0.025150154 * float(x[1485]))+ (-0.031733047 * float(x[1486]))+ (0.045763023 * float(x[1487]))+ (0.0052872244 * float(x[1488]))+ (0.038411822 * float(x[1489]))+ (0.024245307 * float(x[1490]))+ (0.030846877 * float(x[1491]))+ (-0.05097355 * float(x[1492]))+ (-0.032210384 * float(x[1493]))+ (0.03484145 * float(x[1494]))+ (-0.0121024605 * float(x[1495]))+ (-0.050538085 * float(x[1496]))+ (0.052828062 * float(x[1497]))+ (-0.00125621 * float(x[1498]))+ (0.046861183 * float(x[1499])))+ ((-0.04540498 * float(x[1500]))+ (0.020000419 * float(x[1501]))+ (-0.021881105 * float(x[1502]))+ (-0.024445605 * float(x[1503]))+ (-0.012116013 * float(x[1504]))+ (-0.021502148 * float(x[1505]))+ (0.031831667 * float(x[1506]))+ (-0.011037253 * float(x[1507]))+ (0.04404572 * float(x[1508]))+ (0.013255422 * float(x[1509]))+ (-0.008975953 * float(x[1510]))+ (-0.033553388 * float(x[1511]))+ (-0.053192418 * float(x[1512]))+ (-0.016946467 * float(x[1513]))+ (-0.053794213 * float(x[1514]))+ (-0.010762569 * float(x[1515]))+ (0.0009495079 * float(x[1516]))+ (-0.0037436045 * float(x[1517]))+ (-0.028535334 * float(x[1518]))+ (0.040318944 * float(x[1519]))+ (0.03271576 * float(x[1520]))+ (-0.014312319 * float(x[1521]))+ (-0.022952126 * float(x[1522]))+ (0.03652136 * float(x[1523]))+ (0.05054069 * float(x[1524]))+ (-0.05319046 * float(x[1525]))+ (-0.012551076 * float(x[1526]))+ (-0.0053909747 * float(x[1527]))+ (-0.021032518 * float(x[1528]))+ (0.04959293 * float(x[1529]))+ (-0.00858068 * float(x[1530]))+ (0.04925252 * float(x[1531]))+ (0.00028720117 * float(x[1532]))+ (-0.0063012075 * float(x[1533]))+ (-0.033884637 * float(x[1534]))+ (-0.01931562 * float(x[1535]))+ (0.018718686 * float(x[1536]))+ (0.025695918 * float(x[1537]))+ (-0.0020668544 * float(x[1538]))+ (0.05535175 * float(x[1539]))+ (-0.04020676 * float(x[1540]))+ (0.022272915 * float(x[1541]))+ (0.052321307 * float(x[1542]))+ (-0.010101016 * float(x[1543]))+ (0.04611911 * float(x[1544]))+ (0.0009576369 * float(x[1545]))+ (-0.043501224 * float(x[1546]))+ (-0.03186972 * float(x[1547]))+ (0.021622417 * float(x[1548]))+ (-0.025138834 * float(x[1549])))+ ((0.013971599 * float(x[1550]))+ (0.057176545 * float(x[1551]))+ (0.01973243 * float(x[1552]))+ (-0.0054367227 * float(x[1553]))+ (0.014520199 * float(x[1554]))+ (-0.033468783 * float(x[1555]))+ (-0.04881124 * float(x[1556]))+ (-0.04366706 * float(x[1557]))+ (-0.0487444 * float(x[1558]))+ (0.011921432 * float(x[1559]))+ (0.011315185 * float(x[1560]))+ (-0.024686826 * float(x[1561]))+ (-0.05682186 * float(x[1562]))+ (0.031468246 * float(x[1563]))+ (-0.03296139 * float(x[1564]))+ (-0.0096981665 * float(x[1565]))+ (-0.04870835 * float(x[1566]))+ (-0.032772567 * float(x[1567]))+ (0.024233326 * float(x[1568]))+ (-0.05412506 * float(x[1569]))+ (-0.033125855 * float(x[1570]))+ (0.04355267 * float(x[1571]))+ (-0.029791938 * float(x[1572]))+ (-0.024174921 * float(x[1573]))+ (-0.016310457 * float(x[1574]))+ (0.02483158 * float(x[1575]))+ (-0.038106006 * float(x[1576]))+ (0.0058245324 * float(x[1577]))+ (0.023724588 * float(x[1578]))+ (-0.0042170053 * float(x[1579]))+ (0.010503978 * float(x[1580]))+ (-0.044314623 * float(x[1581]))+ (0.026263002 * float(x[1582]))+ (0.021710372 * float(x[1583]))+ (-0.0072864858 * float(x[1584]))+ (-0.04803382 * float(x[1585]))+ (0.02323506 * float(x[1586]))+ (0.037906904 * float(x[1587]))+ (-0.010160557 * float(x[1588]))+ (0.027380543 * float(x[1589]))+ (0.02153201 * float(x[1590]))+ (-0.023234555 * float(x[1591]))+ (-0.00403267 * float(x[1592]))+ (0.057826173 * float(x[1593]))+ (0.00027428745 * float(x[1594]))+ (-0.04624707 * float(x[1595]))+ (-0.0042364514 * float(x[1596]))+ (0.02889996 * float(x[1597]))+ (-0.01896231 * float(x[1598]))+ (-0.030421354 * float(x[1599])))+ ((0.047854207 * float(x[1600]))+ (0.03073091 * float(x[1601]))+ (-0.009869259 * float(x[1602]))+ (0.0029678226 * float(x[1603]))+ (-0.006143823 * float(x[1604]))+ (0.013486793 * float(x[1605]))+ (0.0020645391 * float(x[1606]))+ (-0.03515295 * float(x[1607]))+ (0.010762801 * float(x[1608]))+ (0.0015193634 * float(x[1609]))+ (0.003755806 * float(x[1610]))+ (-0.022137785 * float(x[1611]))+ (0.014884271 * float(x[1612]))+ (-0.04697512 * float(x[1613]))+ (0.017364781 * float(x[1614]))+ (0.0314792 * float(x[1615]))+ (-0.0063931034 * float(x[1616]))+ (-0.045125153 * float(x[1617]))+ (-0.00021112841 * float(x[1618]))+ (8.2479295e-05 * float(x[1619]))+ (-0.050202616 * float(x[1620]))+ (-0.04108753 * float(x[1621]))+ (0.053730767 * float(x[1622]))+ (0.043441627 * float(x[1623]))+ (0.032194275 * float(x[1624]))+ (0.040243138 * float(x[1625]))+ (0.022362962 * float(x[1626]))+ (0.032693043 * float(x[1627]))+ (0.03847501 * float(x[1628]))+ (-0.013570491 * float(x[1629]))+ (-0.007384655 * float(x[1630]))+ (0.0414217 * float(x[1631]))+ (-2.0904867e-05 * float(x[1632]))+ (-0.03779906 * float(x[1633]))+ (-0.045043748 * float(x[1634]))+ (0.032488976 * float(x[1635]))+ (0.04811804 * float(x[1636]))+ (0.045114286 * float(x[1637]))+ (0.009667475 * float(x[1638]))+ (0.04009917 * float(x[1639]))+ (-0.053335384 * float(x[1640]))+ (-0.041852463 * float(x[1641]))+ (-0.05589704 * float(x[1642]))+ (0.046803243 * float(x[1643]))+ (-0.0005256374 * float(x[1644]))+ (-0.026748907 * float(x[1645]))+ (0.019656494 * float(x[1646]))+ (-0.021745382 * float(x[1647]))+ (-0.037256364 * float(x[1648]))+ (0.022405656 * float(x[1649])))+ ((0.010636447 * float(x[1650]))+ (-0.04160012 * float(x[1651]))+ (-0.038262375 * float(x[1652]))+ (0.027237175 * float(x[1653]))+ (0.044171147 * float(x[1654]))+ (0.0047290702 * float(x[1655]))+ (-0.029178288 * float(x[1656]))+ (0.028050719 * float(x[1657]))+ (0.010131421 * float(x[1658]))+ (-0.05085754 * float(x[1659]))+ (-0.037645645 * float(x[1660]))+ (0.012714841 * float(x[1661]))+ (0.03594531 * float(x[1662]))+ (-0.018662564 * float(x[1663]))+ (0.02808904 * float(x[1664]))+ (-0.03597657 * float(x[1665]))+ (0.05558935 * float(x[1666]))+ (0.04139249 * float(x[1667]))+ (0.010880935 * float(x[1668]))+ (0.025844315 * float(x[1669]))+ (0.020224825 * float(x[1670]))+ (-0.034279402 * float(x[1671]))+ (-0.0005065413 * float(x[1672]))+ (0.01549062 * float(x[1673]))+ (-0.013111962 * float(x[1674]))+ (0.055706214 * float(x[1675]))+ (-0.022402 * float(x[1676]))+ (-0.0518794 * float(x[1677]))+ (-0.027655782 * float(x[1678]))+ (-0.053913485 * float(x[1679]))+ (0.04786989 * float(x[1680]))+ (-0.026077626 * float(x[1681]))+ (-0.04087135 * float(x[1682]))+ (-0.00627956 * float(x[1683]))+ (-0.039142285 * float(x[1684]))+ (-0.030345252 * float(x[1685]))+ (0.02961546 * float(x[1686]))+ (-0.043614548 * float(x[1687]))+ (0.027395356 * float(x[1688]))+ (0.042362336 * float(x[1689]))+ (-0.0001302585 * float(x[1690]))+ (0.025794582 * float(x[1691]))+ (-0.032540232 * float(x[1692]))+ (0.045300428 * float(x[1693]))+ (0.056432128 * float(x[1694]))+ (0.01380462 * float(x[1695]))+ (0.052937042 * float(x[1696]))+ (-0.0576941 * float(x[1697]))+ (-0.0063784034 * float(x[1698]))+ (0.01154231 * float(x[1699])))+ ((-0.05049203 * float(x[1700]))+ (0.028269025 * float(x[1701]))+ (-0.02213936 * float(x[1702]))+ (-0.021010505 * float(x[1703]))+ (-0.046090316 * float(x[1704]))+ (0.023748687 * float(x[1705]))+ (-0.042268667 * float(x[1706]))+ (-0.012327262 * float(x[1707]))+ (0.025805946 * float(x[1708]))+ (0.043762766 * float(x[1709]))+ (0.013135877 * float(x[1710]))+ (-0.021670453 * float(x[1711]))+ (-0.025267622 * float(x[1712]))+ (0.032605547 * float(x[1713]))+ (0.010778096 * float(x[1714]))+ (0.04890138 * float(x[1715]))+ (0.021876339 * float(x[1716]))+ (0.04679721 * float(x[1717]))+ (-0.04681029 * float(x[1718]))+ (0.04670109 * float(x[1719]))+ (-0.0266902 * float(x[1720]))+ (-0.015550058 * float(x[1721]))+ (0.00034773294 * float(x[1722]))+ (-0.010893925 * float(x[1723]))+ (0.011490798 * float(x[1724]))+ (0.051764812 * float(x[1725]))+ (-0.034708574 * float(x[1726]))+ (0.017949464 * float(x[1727]))+ (-0.04668807 * float(x[1728]))+ (0.009121212 * float(x[1729]))+ (0.047856178 * float(x[1730]))+ (0.039169908 * float(x[1731]))+ (0.04974711 * float(x[1732]))+ (0.031446178 * float(x[1733]))+ (-0.0048061484 * float(x[1734]))+ (0.015167401 * float(x[1735]))+ (-0.024273638 * float(x[1736]))+ (0.049309067 * float(x[1737]))+ (0.029086558 * float(x[1738]))+ (-0.042518016 * float(x[1739]))+ (0.050228875 * float(x[1740]))+ (-0.000861983 * float(x[1741]))+ (-0.0025822306 * float(x[1742]))+ (-0.015898667 * float(x[1743]))+ (-0.015326776 * float(x[1744]))+ (0.002907519 * float(x[1745]))+ (-0.028359441 * float(x[1746]))+ (-0.05403672 * float(x[1747]))+ (-0.02992306 * float(x[1748]))+ (-0.011559968 * float(x[1749])))+ ((0.04386719 * float(x[1750]))+ (0.042735077 * float(x[1751]))+ (-0.03480542 * float(x[1752]))+ (-0.0022305297 * float(x[1753]))+ (-0.016766002 * float(x[1754]))+ (-0.03107691 * float(x[1755]))+ (-0.01021513 * float(x[1756]))+ (-0.020156166 * float(x[1757]))+ (0.03247007 * float(x[1758]))+ (-0.028809594 * float(x[1759]))+ (0.008937526 * float(x[1760]))+ (-0.032781634 * float(x[1761]))+ (-0.018130524 * float(x[1762]))+ (0.045730755 * float(x[1763]))+ (-0.028519023 * float(x[1764]))+ (-0.0034930117 * float(x[1765]))+ (0.05547986 * float(x[1766]))+ (0.019882698 * float(x[1767]))+ (-0.029568305 * float(x[1768]))+ (-0.03487804 * float(x[1769]))+ (-0.020371044 * float(x[1770]))+ (-0.018191183 * float(x[1771]))+ (0.025292149 * float(x[1772]))+ (-0.012915087 * float(x[1773]))+ (0.048993595 * float(x[1774]))+ (-0.031873524 * float(x[1775]))) + -0.8271514), 0)
    h_1 = max((((-0.13544056 * float(x[0]))+ (0.098366015 * float(x[1]))+ (0.019005854 * float(x[2]))+ (0.64164263 * float(x[3]))+ (-1.0234576 * float(x[4]))+ (-0.20322469 * float(x[5]))+ (0.14702 * float(x[6]))+ (-0.012000813 * float(x[7]))+ (-0.04721777 * float(x[8]))+ (0.23156652 * float(x[9]))+ (-0.13059269 * float(x[10]))+ (0.33068278 * float(x[11]))+ (-3.521164 * float(x[12]))+ (0.4157527 * float(x[13]))+ (-0.3119409 * float(x[14]))+ (-0.4603644 * float(x[15]))+ (-0.029532414 * float(x[16]))+ (-0.17741293 * float(x[17]))+ (0.24508572 * float(x[18]))+ (0.325395 * float(x[19]))+ (3.1272275 * float(x[20]))+ (-0.043357894 * float(x[21]))+ (0.38711327 * float(x[22]))+ (1.1140503 * float(x[23]))+ (-0.28246334 * float(x[24]))+ (-0.081065595 * float(x[25]))+ (0.8359966 * float(x[26]))+ (0.33679616 * float(x[27]))+ (-0.97430944 * float(x[28]))+ (-0.24000792 * float(x[29]))+ (1.0290557 * float(x[30]))+ (-0.039505776 * float(x[31]))+ (-0.6092703 * float(x[32]))+ (-2.9547427 * float(x[33]))+ (-0.71715665 * float(x[34]))+ (0.2203772 * float(x[35]))+ (0.47229436 * float(x[36]))+ (0.6832509 * float(x[37]))+ (-0.83711123 * float(x[38]))+ (-0.0068945265 * float(x[39]))+ (-2.4544296 * float(x[40]))+ (1.3661175 * float(x[41]))+ (-0.2870684 * float(x[42]))+ (-0.89870715 * float(x[43]))+ (-0.385453 * float(x[44]))+ (-0.019876368 * float(x[45]))+ (-0.3032651 * float(x[46]))+ (-0.16588019 * float(x[47]))+ (-0.18442506 * float(x[48]))+ (0.2195029 * float(x[49])))+ ((0.4853953 * float(x[50]))+ (0.3698738 * float(x[51]))+ (-0.98328984 * float(x[52]))+ (1.2656839 * float(x[53]))+ (-0.1004177 * float(x[54]))+ (-0.49642873 * float(x[55]))+ (0.49203032 * float(x[56]))+ (-0.10818481 * float(x[57]))+ (-0.5717604 * float(x[58]))+ (-0.74328506 * float(x[59]))+ (-0.29185143 * float(x[60]))+ (0.01819628 * float(x[61]))+ (-0.23179296 * float(x[62]))+ (-0.7998365 * float(x[63]))+ (-0.37933865 * float(x[64]))+ (0.86655277 * float(x[65]))+ (-0.536563 * float(x[66]))+ (1.2155299 * float(x[67]))+ (-0.2557355 * float(x[68]))+ (0.07305807 * float(x[69]))+ (-0.22493747 * float(x[70]))+ (-0.44972706 * float(x[71]))+ (0.38534328 * float(x[72]))+ (0.02733214 * float(x[73]))+ (-0.93465024 * float(x[74]))+ (-0.11948649 * float(x[75]))+ (1.7331628 * float(x[76]))+ (-0.55290216 * float(x[77]))+ (0.1278846 * float(x[78]))+ (0.49055842 * float(x[79]))+ (3.4130335 * float(x[80]))+ (-1.5556432 * float(x[81]))+ (0.5237471 * float(x[82]))+ (0.38384587 * float(x[83]))+ (-2.8567705 * float(x[84]))+ (-0.091141246 * float(x[85]))+ (-0.47575602 * float(x[86]))+ (0.011723918 * float(x[87]))+ (-0.16666381 * float(x[88]))+ (-0.37586483 * float(x[89]))+ (-0.46723786 * float(x[90]))+ (0.8508212 * float(x[91]))+ (-2.1629996 * float(x[92]))+ (-0.16395688 * float(x[93]))+ (-3.4653726 * float(x[94]))+ (-0.1622274 * float(x[95]))+ (-0.62187666 * float(x[96]))+ (-1.8764384 * float(x[97]))+ (0.040497914 * float(x[98]))+ (0.17556782 * float(x[99])))+ ((-1.051729 * float(x[100]))+ (-0.012786831 * float(x[101]))+ (-0.30556294 * float(x[102]))+ (0.39111128 * float(x[103]))+ (-0.12666424 * float(x[104]))+ (0.2859935 * float(x[105]))+ (-0.04989681 * float(x[106]))+ (0.3651493 * float(x[107]))+ (0.2634773 * float(x[108]))+ (0.10062346 * float(x[109]))+ (1.0837604 * float(x[110]))+ (-1.2590103 * float(x[111]))+ (-0.15869145 * float(x[112]))+ (0.48594943 * float(x[113]))+ (0.99808854 * float(x[114]))+ (0.521313 * float(x[115]))+ (-0.29834154 * float(x[116]))+ (0.12540674 * float(x[117]))+ (-1.3181399 * float(x[118]))+ (-0.11054225 * float(x[119]))+ (0.45803195 * float(x[120]))+ (0.536561 * float(x[121]))+ (1.4887341 * float(x[122]))+ (-0.25899926 * float(x[123]))+ (0.08714226 * float(x[124]))+ (-0.10710055 * float(x[125]))+ (-0.3979638 * float(x[126]))+ (0.39593467 * float(x[127]))+ (-2.3065095 * float(x[128]))+ (-0.7839464 * float(x[129]))+ (0.6253056 * float(x[130]))+ (0.62031645 * float(x[131]))+ (0.53192806 * float(x[132]))+ (1.6580489 * float(x[133]))+ (-0.86918324 * float(x[134]))+ (-1.2149197 * float(x[135]))+ (-0.104476154 * float(x[136]))+ (-1.5651723 * float(x[137]))+ (-0.78330654 * float(x[138]))+ (0.6548326 * float(x[139]))+ (-0.16387457 * float(x[140]))+ (0.44795448 * float(x[141]))+ (-1.370043 * float(x[142]))+ (0.9244294 * float(x[143]))+ (0.90964514 * float(x[144]))+ (0.16006996 * float(x[145]))+ (1.1774625 * float(x[146]))+ (1.392726 * float(x[147]))+ (-0.9607008 * float(x[148]))+ (-0.30587336 * float(x[149])))+ ((-0.06055116 * float(x[150]))+ (-0.5114798 * float(x[151]))+ (0.80450684 * float(x[152]))+ (0.3585745 * float(x[153]))+ (-0.028788252 * float(x[154]))+ (-0.23140499 * float(x[155]))+ (0.9369355 * float(x[156]))+ (-0.7016981 * float(x[157]))+ (-1.1125076 * float(x[158]))+ (-0.51612276 * float(x[159]))+ (-0.4250434 * float(x[160]))+ (0.38505805 * float(x[161]))+ (-0.28103894 * float(x[162]))+ (1.1313115 * float(x[163]))+ (0.06789945 * float(x[164]))+ (0.35919303 * float(x[165]))+ (-0.090466596 * float(x[166]))+ (0.42074937 * float(x[167]))+ (-0.030104632 * float(x[168]))+ (-0.19335207 * float(x[169]))+ (2.2833486 * float(x[170]))+ (-0.098886654 * float(x[171]))+ (0.012595167 * float(x[172]))+ (-2.1771626 * float(x[173]))+ (-1.0256984 * float(x[174]))+ (0.88316315 * float(x[175]))+ (0.110119805 * float(x[176]))+ (0.14330739 * float(x[177]))+ (-0.20991458 * float(x[178]))+ (-0.39447746 * float(x[179]))+ (-0.05236801 * float(x[180]))+ (0.7280635 * float(x[181]))+ (0.29903135 * float(x[182]))+ (1.2624445 * float(x[183]))+ (0.2748696 * float(x[184]))+ (-0.1265541 * float(x[185]))+ (0.065108895 * float(x[186]))+ (-4.015285 * float(x[187]))+ (-0.35049364 * float(x[188]))+ (-0.052753385 * float(x[189]))+ (0.40700424 * float(x[190]))+ (-1.2307829 * float(x[191]))+ (0.82638377 * float(x[192]))+ (-0.26955518 * float(x[193]))+ (-0.0682255 * float(x[194]))+ (0.128412 * float(x[195]))+ (-0.107466675 * float(x[196]))+ (-0.19038966 * float(x[197]))+ (-0.44587913 * float(x[198]))+ (0.7090948 * float(x[199])))+ ((-0.4978812 * float(x[200]))+ (-0.764366 * float(x[201]))+ (-0.08719483 * float(x[202]))+ (-0.57806444 * float(x[203]))+ (0.21132909 * float(x[204]))+ (-0.7550586 * float(x[205]))+ (-0.22756222 * float(x[206]))+ (-0.5918916 * float(x[207]))+ (-0.357934 * float(x[208]))+ (0.16495295 * float(x[209]))+ (0.6829876 * float(x[210]))+ (1.0030912 * float(x[211]))+ (0.33551562 * float(x[212]))+ (0.25508994 * float(x[213]))+ (-0.022053856 * float(x[214]))+ (0.4331228 * float(x[215]))+ (-0.16756022 * float(x[216]))+ (0.22626537 * float(x[217]))+ (0.717297 * float(x[218]))+ (0.46539435 * float(x[219]))+ (0.41807556 * float(x[220]))+ (0.35223928 * float(x[221]))+ (-0.22335115 * float(x[222]))+ (1.0413575 * float(x[223]))+ (1.0743967 * float(x[224]))+ (0.92122 * float(x[225]))+ (-0.63639414 * float(x[226]))+ (-1.2458111 * float(x[227]))+ (0.05492731 * float(x[228]))+ (-1.5281004 * float(x[229]))+ (-2.1333342 * float(x[230]))+ (-2.229977 * float(x[231]))+ (1.0966988 * float(x[232]))+ (-1.1110928 * float(x[233]))+ (-2.747798 * float(x[234]))+ (0.58836454 * float(x[235]))+ (0.9968531 * float(x[236]))+ (2.9141986 * float(x[237]))+ (-1.2941555 * float(x[238]))+ (-1.6501919 * float(x[239]))+ (-5.2620735 * float(x[240]))+ (-2.1253347 * float(x[241]))+ (7.035959 * float(x[242]))+ (-0.46903455 * float(x[243]))+ (-1.7443023 * float(x[244]))+ (-1.8041573 * float(x[245]))+ (-0.9317298 * float(x[246]))+ (0.67655027 * float(x[247]))+ (-0.26573196 * float(x[248]))+ (-2.0759513 * float(x[249])))+ ((1.1081464 * float(x[250]))+ (-0.5021891 * float(x[251]))+ (-1.0135419 * float(x[252]))+ (1.307475 * float(x[253]))+ (-1.0677832 * float(x[254]))+ (-0.7618832 * float(x[255]))+ (-0.9242143 * float(x[256]))+ (1.682198 * float(x[257]))+ (-0.28475252 * float(x[258]))+ (-1.1611743 * float(x[259]))+ (0.20712824 * float(x[260]))+ (-0.8756499 * float(x[261]))+ (0.3317235 * float(x[262]))+ (-0.9435671 * float(x[263]))+ (-1.7817221 * float(x[264]))+ (1.5726134 * float(x[265]))+ (0.59489566 * float(x[266]))+ (0.7516623 * float(x[267]))+ (-1.8729659 * float(x[268]))+ (0.48445213 * float(x[269]))+ (-1.5220032 * float(x[270]))+ (-0.26791155 * float(x[271]))+ (-1.9920768 * float(x[272]))+ (-1.4860432 * float(x[273]))+ (0.4814983 * float(x[274]))+ (-0.060036886 * float(x[275]))+ (-1.1802546 * float(x[276]))+ (0.30469224 * float(x[277]))+ (1.6021502 * float(x[278]))+ (1.6823174 * float(x[279]))+ (-1.9582782 * float(x[280]))+ (-0.12891984 * float(x[281]))+ (-1.1328634 * float(x[282]))+ (-0.5983759 * float(x[283]))+ (1.9223948 * float(x[284]))+ (0.7237756 * float(x[285]))+ (0.02369096 * float(x[286]))+ (-1.4084276 * float(x[287]))+ (0.27904537 * float(x[288]))+ (-0.78827876 * float(x[289]))+ (-0.23216714 * float(x[290]))+ (-0.18875049 * float(x[291]))+ (-0.9278925 * float(x[292]))+ (-3.0303993 * float(x[293]))+ (-1.2184755 * float(x[294]))+ (-1.0490872 * float(x[295]))+ (1.301145 * float(x[296]))+ (-0.16830985 * float(x[297]))+ (-0.8705038 * float(x[298]))+ (-1.4695027 * float(x[299])))+ ((2.7431087 * float(x[300]))+ (0.92708075 * float(x[301]))+ (0.8987929 * float(x[302]))+ (-0.66088665 * float(x[303]))+ (-1.4205967 * float(x[304]))+ (-0.41335726 * float(x[305]))+ (2.3022501 * float(x[306]))+ (-1.0804105 * float(x[307]))+ (-0.3613462 * float(x[308]))+ (-1.3068401 * float(x[309]))+ (0.028049178 * float(x[310]))+ (-1.1492151 * float(x[311]))+ (-0.27777648 * float(x[312]))+ (-0.7913677 * float(x[313]))+ (-0.6910182 * float(x[314]))+ (-3.2298179 * float(x[315]))+ (-0.054901652 * float(x[316]))+ (0.08855796 * float(x[317]))+ (1.8744973 * float(x[318]))+ (-1.2762959 * float(x[319]))+ (1.2961333 * float(x[320]))+ (0.64815503 * float(x[321]))+ (-3.1235306 * float(x[322]))+ (-0.46586922 * float(x[323]))+ (2.4313786 * float(x[324]))+ (0.11821884 * float(x[325]))+ (-1.7485237 * float(x[326]))+ (0.25497758 * float(x[327]))+ (1.2957344 * float(x[328]))+ (-0.23191229 * float(x[329]))+ (2.6996853 * float(x[330]))+ (3.4266908 * float(x[331]))+ (1.6960546 * float(x[332]))+ (2.2373176 * float(x[333]))+ (0.058908693 * float(x[334]))+ (-0.8164825 * float(x[335]))+ (0.459797 * float(x[336]))+ (0.9987816 * float(x[337]))+ (-0.5658335 * float(x[338]))+ (-1.4691403 * float(x[339]))+ (0.5643351 * float(x[340]))+ (1.4188788 * float(x[341]))+ (0.47786796 * float(x[342]))+ (0.07334615 * float(x[343]))+ (-1.747229 * float(x[344]))+ (-0.3993349 * float(x[345]))+ (-1.0095955 * float(x[346]))+ (-0.7606856 * float(x[347]))+ (-0.25665557 * float(x[348]))+ (-0.29890874 * float(x[349])))+ ((0.941002 * float(x[350]))+ (-0.69733655 * float(x[351]))+ (1.5960082 * float(x[352]))+ (-1.1940749 * float(x[353]))+ (1.6730115 * float(x[354]))+ (1.1579281 * float(x[355]))+ (-2.2612755 * float(x[356]))+ (1.9806617 * float(x[357]))+ (-0.8914343 * float(x[358]))+ (-0.77435493 * float(x[359]))+ (0.8148847 * float(x[360]))+ (0.4256958 * float(x[361]))+ (-2.982206 * float(x[362]))+ (-0.53008866 * float(x[363]))+ (-1.0230296 * float(x[364]))+ (3.6023276 * float(x[365]))+ (4.270752 * float(x[366]))+ (-2.1042247 * float(x[367]))+ (-1.1257114 * float(x[368]))+ (3.8529782 * float(x[369]))+ (0.6168942 * float(x[370]))+ (1.8392562 * float(x[371]))+ (-0.042369403 * float(x[372]))+ (0.9002035 * float(x[373]))+ (0.7570218 * float(x[374]))+ (-1.4550964 * float(x[375]))+ (-0.45116386 * float(x[376]))+ (2.0750482 * float(x[377]))+ (1.9578943 * float(x[378]))+ (0.52030295 * float(x[379]))+ (0.6110079 * float(x[380]))+ (-0.33645695 * float(x[381]))+ (2.4535022 * float(x[382]))+ (-0.6021792 * float(x[383]))+ (-0.24470356 * float(x[384]))+ (0.70011306 * float(x[385]))+ (-0.5266233 * float(x[386]))+ (-0.55364954 * float(x[387]))+ (-0.18224058 * float(x[388]))+ (0.75077003 * float(x[389]))+ (0.70436984 * float(x[390]))+ (-0.73438454 * float(x[391]))+ (-2.359856 * float(x[392]))+ (0.04236417 * float(x[393]))+ (0.4677168 * float(x[394]))+ (-0.24490228 * float(x[395]))+ (-1.9575633 * float(x[396]))+ (-1.4483173 * float(x[397]))+ (-0.06424048 * float(x[398]))+ (-0.8702016 * float(x[399])))+ ((1.0394821 * float(x[400]))+ (-0.59471124 * float(x[401]))+ (1.7941782 * float(x[402]))+ (2.0491252 * float(x[403]))+ (-2.4661155 * float(x[404]))+ (1.0428936 * float(x[405]))+ (1.5257999 * float(x[406]))+ (-0.124288455 * float(x[407]))+ (-0.41423628 * float(x[408]))+ (2.1125345 * float(x[409]))+ (-4.8073335 * float(x[410]))+ (0.45986226 * float(x[411]))+ (-1.7043349 * float(x[412]))+ (-3.733041 * float(x[413]))+ (-0.85795885 * float(x[414]))+ (0.3577493 * float(x[415]))+ (-0.07285396 * float(x[416]))+ (-2.4201882 * float(x[417]))+ (-1.4675282 * float(x[418]))+ (0.3894209 * float(x[419]))+ (1.7309858 * float(x[420]))+ (-0.4193665 * float(x[421]))+ (-3.6493897 * float(x[422]))+ (-1.2243909 * float(x[423]))+ (-1.345346 * float(x[424]))+ (0.7340267 * float(x[425]))+ (1.906752 * float(x[426]))+ (-0.29824713 * float(x[427]))+ (-0.4617747 * float(x[428]))+ (2.050424 * float(x[429]))+ (0.010494328 * float(x[430]))+ (-1.3010525 * float(x[431]))+ (-0.30901045 * float(x[432]))+ (1.0890911 * float(x[433]))+ (2.1815748 * float(x[434]))+ (1.4501166 * float(x[435]))+ (0.4103684 * float(x[436]))+ (-1.6753074 * float(x[437]))+ (-1.0383984 * float(x[438]))+ (1.4484726 * float(x[439]))+ (-0.8394238 * float(x[440]))+ (-0.8673657 * float(x[441]))+ (0.48848677 * float(x[442]))+ (-0.0076104724 * float(x[443]))+ (0.40119386 * float(x[444]))+ (0.2492005 * float(x[445]))+ (-0.84417397 * float(x[446]))+ (-2.0826404 * float(x[447]))+ (-0.6934109 * float(x[448]))+ (-0.07505087 * float(x[449])))+ ((-0.020768652 * float(x[450]))+ (-0.25540984 * float(x[451]))+ (0.37477586 * float(x[452]))+ (0.011056421 * float(x[453]))+ (0.94719344 * float(x[454]))+ (0.025294889 * float(x[455]))+ (0.7180968 * float(x[456]))+ (-0.62422174 * float(x[457]))+ (-0.66461295 * float(x[458]))+ (-0.11677308 * float(x[459]))+ (-1.1486465 * float(x[460]))+ (0.014563718 * float(x[461]))+ (0.8918233 * float(x[462]))+ (0.7770283 * float(x[463]))+ (1.8604892 * float(x[464]))+ (-3.9189107 * float(x[465]))+ (0.07261926 * float(x[466]))+ (-2.2112412 * float(x[467]))+ (0.8062748 * float(x[468]))+ (-0.1965798 * float(x[469]))+ (-0.22020127 * float(x[470]))+ (-0.80099446 * float(x[471]))+ (0.16200452 * float(x[472]))+ (0.5268949 * float(x[473]))+ (0.061081763 * float(x[474]))+ (-0.3710448 * float(x[475]))+ (0.6777678 * float(x[476]))+ (-0.1562254 * float(x[477]))+ (-0.024485633 * float(x[478]))+ (0.51341754 * float(x[479]))+ (0.048878044 * float(x[480]))+ (-0.25914544 * float(x[481]))+ (-0.6805386 * float(x[482]))+ (0.9739888 * float(x[483]))+ (-0.20881525 * float(x[484]))+ (-0.14354226 * float(x[485]))+ (0.7934249 * float(x[486]))+ (-0.050452724 * float(x[487]))+ (-1.8015715 * float(x[488]))+ (-2.0836172 * float(x[489]))+ (-0.5486611 * float(x[490]))+ (-0.2229267 * float(x[491]))+ (0.61135125 * float(x[492]))+ (-0.35386145 * float(x[493]))+ (0.70132655 * float(x[494]))+ (-2.0616696 * float(x[495]))+ (0.039746627 * float(x[496]))+ (-0.07191903 * float(x[497]))+ (0.0062096305 * float(x[498]))+ (0.27761513 * float(x[499])))+ ((-0.60094756 * float(x[500]))+ (3.5151744 * float(x[501]))+ (2.3767328 * float(x[502]))+ (-0.10921189 * float(x[503]))+ (0.04917708 * float(x[504]))+ (5.916072 * float(x[505]))+ (0.3650591 * float(x[506]))+ (-1.9210021 * float(x[507]))+ (-1.1543882 * float(x[508]))+ (2.586029 * float(x[509]))+ (2.467433 * float(x[510]))+ (0.0059274705 * float(x[511]))+ (-0.2788142 * float(x[512]))+ (0.6438958 * float(x[513]))+ (1.5658774 * float(x[514]))+ (0.57587636 * float(x[515]))+ (-1.1071745 * float(x[516]))+ (0.68168557 * float(x[517]))+ (1.1606076 * float(x[518]))+ (-1.5239733 * float(x[519]))+ (-1.2839166 * float(x[520]))+ (-0.23401856 * float(x[521]))+ (1.7489417 * float(x[522]))+ (-0.13785261 * float(x[523]))+ (0.4556595 * float(x[524]))+ (-1.858263 * float(x[525]))+ (1.2359163 * float(x[526]))+ (2.2400007 * float(x[527]))+ (0.6157627 * float(x[528]))+ (-1.08189 * float(x[529]))+ (-0.14031062 * float(x[530]))+ (-1.4128164 * float(x[531]))+ (1.2476456 * float(x[532]))+ (3.0844734 * float(x[533]))+ (1.0770936 * float(x[534]))+ (-0.58656967 * float(x[535]))+ (1.9457376 * float(x[536]))+ (-0.8852047 * float(x[537]))+ (0.80267674 * float(x[538]))+ (0.3403055 * float(x[539]))+ (-0.15342745 * float(x[540]))+ (0.7505439 * float(x[541]))+ (0.9360545 * float(x[542]))+ (-1.1446743 * float(x[543]))+ (-2.0371153 * float(x[544]))+ (2.378299 * float(x[545]))+ (0.5155531 * float(x[546]))+ (-1.915865 * float(x[547]))+ (0.35002843 * float(x[548]))+ (-0.732416 * float(x[549])))+ ((1.5749998 * float(x[550]))+ (0.22224705 * float(x[551]))+ (0.6211414 * float(x[552]))+ (-0.6455065 * float(x[553]))+ (-0.6683505 * float(x[554]))+ (-0.44461492 * float(x[555]))+ (-0.1599591 * float(x[556]))+ (1.0597057 * float(x[557]))+ (1.3584728 * float(x[558]))+ (0.46218708 * float(x[559]))+ (-0.14477149 * float(x[560]))+ (0.29577675 * float(x[561]))+ (0.74600595 * float(x[562]))+ (-1.1400265 * float(x[563]))+ (-0.7043992 * float(x[564]))+ (1.1098783 * float(x[565]))+ (0.04488139 * float(x[566]))+ (-0.9723619 * float(x[567]))+ (1.0513558 * float(x[568]))+ (-1.1815827 * float(x[569]))+ (0.83173203 * float(x[570]))+ (0.44064122 * float(x[571]))+ (0.80052847 * float(x[572]))+ (1.9375286 * float(x[573]))+ (-1.2240236 * float(x[574]))+ (0.6946815 * float(x[575]))+ (1.8567423 * float(x[576]))+ (2.315371 * float(x[577]))+ (2.0140457 * float(x[578]))+ (0.9433044 * float(x[579]))+ (2.4724553 * float(x[580]))+ (0.59836 * float(x[581]))+ (0.89157146 * float(x[582]))+ (-0.49615738 * float(x[583]))+ (0.85507363 * float(x[584]))+ (1.9292614 * float(x[585]))+ (1.023343 * float(x[586]))+ (-0.06637828 * float(x[587]))+ (3.1945212 * float(x[588]))+ (0.38274753 * float(x[589]))+ (-0.3192462 * float(x[590]))+ (-1.5739362 * float(x[591]))+ (-1.7041802 * float(x[592]))+ (-1.7267355 * float(x[593]))+ (0.43944734 * float(x[594]))+ (1.3497716 * float(x[595]))+ (1.2699008 * float(x[596]))+ (-0.21108745 * float(x[597]))+ (-1.0116838 * float(x[598]))+ (0.15257664 * float(x[599])))+ ((1.5869399 * float(x[600]))+ (0.11484041 * float(x[601]))+ (-1.9445754 * float(x[602]))+ (-2.556334 * float(x[603]))+ (-0.03562612 * float(x[604]))+ (1.8020889 * float(x[605]))+ (1.4336445 * float(x[606]))+ (-0.7068029 * float(x[607]))+ (-0.8400421 * float(x[608]))+ (0.5367857 * float(x[609]))+ (3.2978663 * float(x[610]))+ (1.3696458 * float(x[611]))+ (1.0002186 * float(x[612]))+ (5.4884024 * float(x[613]))+ (-1.1858165 * float(x[614]))+ (-1.4815128 * float(x[615]))+ (-2.5361829 * float(x[616]))+ (3.3692043 * float(x[617]))+ (-2.9589672 * float(x[618]))+ (-2.4560769 * float(x[619]))+ (0.5804829 * float(x[620]))+ (-1.2094402 * float(x[621]))+ (-0.5111472 * float(x[622]))+ (0.29981464 * float(x[623]))+ (0.21323492 * float(x[624]))+ (-0.56157696 * float(x[625]))+ (0.039319623 * float(x[626]))+ (0.04803337 * float(x[627]))+ (1.6349127 * float(x[628]))+ (2.165776 * float(x[629]))+ (-3.2113776 * float(x[630]))+ (-3.0864527 * float(x[631]))+ (-2.9176388 * float(x[632]))+ (1.61513 * float(x[633]))+ (0.32711425 * float(x[634]))+ (0.2461357 * float(x[635]))+ (-3.528697 * float(x[636]))+ (-0.23287535 * float(x[637]))+ (-0.32870296 * float(x[638]))+ (0.42112368 * float(x[639]))+ (-1.5107595 * float(x[640]))+ (2.148912 * float(x[641]))+ (2.8478165 * float(x[642]))+ (1.0012997 * float(x[643]))+ (0.15313125 * float(x[644]))+ (0.46963292 * float(x[645]))+ (-1.272672 * float(x[646]))+ (-0.6777203 * float(x[647]))+ (-1.273551 * float(x[648]))+ (0.8382198 * float(x[649])))+ ((-0.8242841 * float(x[650]))+ (1.0084758 * float(x[651]))+ (0.84391624 * float(x[652]))+ (-2.722587 * float(x[653]))+ (3.3723826 * float(x[654]))+ (-3.4550343 * float(x[655]))+ (0.43752497 * float(x[656]))+ (-1.8272865 * float(x[657]))+ (0.5362801 * float(x[658]))+ (-0.1820397 * float(x[659]))+ (-1.8745323 * float(x[660]))+ (-0.56606174 * float(x[661]))+ (0.1429319 * float(x[662]))+ (0.83656865 * float(x[663]))+ (0.8499796 * float(x[664]))+ (0.31720692 * float(x[665]))+ (-0.73516446 * float(x[666]))+ (-3.5302734 * float(x[667]))+ (-2.1027625 * float(x[668]))+ (2.2302504 * float(x[669]))+ (-1.0124525 * float(x[670]))+ (0.24516973 * float(x[671]))+ (-2.0558448 * float(x[672]))+ (0.48724777 * float(x[673]))+ (1.6734436 * float(x[674]))+ (1.1669909 * float(x[675]))+ (-2.132949 * float(x[676]))+ (-1.4006839 * float(x[677]))+ (0.1662054 * float(x[678]))+ (2.99847 * float(x[679]))+ (-3.6127543 * float(x[680]))+ (1.0406134 * float(x[681]))+ (-0.33024982 * float(x[682]))+ (0.33042437 * float(x[683]))+ (2.1604326 * float(x[684]))+ (-0.49134266 * float(x[685]))+ (0.7789358 * float(x[686]))+ (1.1601319 * float(x[687]))+ (0.46932474 * float(x[688]))+ (0.07919351 * float(x[689]))+ (-0.8197435 * float(x[690]))+ (0.6253877 * float(x[691]))+ (0.49469334 * float(x[692]))+ (-1.0861846 * float(x[693]))+ (-1.705227 * float(x[694]))+ (2.0576713 * float(x[695]))+ (-0.67094785 * float(x[696]))+ (-1.1775429 * float(x[697]))+ (-0.6103034 * float(x[698]))+ (-0.17227659 * float(x[699])))+ ((0.55981874 * float(x[700]))+ (-0.39242744 * float(x[701]))+ (-0.44925004 * float(x[702]))+ (0.9049986 * float(x[703]))+ (0.7254509 * float(x[704]))+ (0.201057 * float(x[705]))+ (-1.0038558 * float(x[706]))+ (-1.510445 * float(x[707]))+ (-2.1266816 * float(x[708]))+ (-0.5552586 * float(x[709]))+ (0.79509985 * float(x[710]))+ (0.33540136 * float(x[711]))+ (1.0716769 * float(x[712]))+ (0.19358437 * float(x[713]))+ (-3.2696161 * float(x[714]))+ (-1.5548815 * float(x[715]))+ (0.08594974 * float(x[716]))+ (-1.067351 * float(x[717]))+ (1.8123169 * float(x[718]))+ (1.5799428 * float(x[719]))+ (1.1057467 * float(x[720]))+ (0.33938926 * float(x[721]))+ (1.2032367 * float(x[722]))+ (1.1475121 * float(x[723]))+ (4.286297 * float(x[724]))+ (0.24412279 * float(x[725]))+ (0.84809613 * float(x[726]))+ (-1.3516774 * float(x[727]))+ (-3.2768848 * float(x[728]))+ (1.5847626 * float(x[729]))+ (3.8712761 * float(x[730]))+ (-0.29025355 * float(x[731]))+ (0.6698204 * float(x[732]))+ (-0.1518564 * float(x[733]))+ (4.804693 * float(x[734]))+ (3.9104745 * float(x[735]))+ (-3.2826865 * float(x[736]))+ (0.6965277 * float(x[737]))+ (0.4708254 * float(x[738]))+ (-0.5078272 * float(x[739]))+ (2.112954 * float(x[740]))+ (0.6398502 * float(x[741]))+ (-1.5431149 * float(x[742]))+ (0.4179155 * float(x[743]))+ (0.47169036 * float(x[744]))+ (2.4588044 * float(x[745]))+ (0.023139453 * float(x[746]))+ (-1.3131104 * float(x[747]))+ (0.44101062 * float(x[748]))+ (1.8691708 * float(x[749])))+ ((-0.94667405 * float(x[750]))+ (0.1783117 * float(x[751]))+ (-1.7422066 * float(x[752]))+ (-0.26570508 * float(x[753]))+ (-1.1637625 * float(x[754]))+ (1.7997991 * float(x[755]))+ (-0.93581325 * float(x[756]))+ (-0.8617597 * float(x[757]))+ (-1.9976982 * float(x[758]))+ (-0.28485665 * float(x[759]))+ (-0.17700776 * float(x[760]))+ (0.039195895 * float(x[761]))+ (-1.0554789 * float(x[762]))+ (0.6184109 * float(x[763]))+ (0.690199 * float(x[764]))+ (-0.1382785 * float(x[765]))+ (1.0714384 * float(x[766]))+ (-1.4493935 * float(x[767]))+ (-1.6690273 * float(x[768]))+ (-0.024677433 * float(x[769]))+ (-0.5177354 * float(x[770]))+ (-1.8418832 * float(x[771]))+ (0.23444627 * float(x[772]))+ (-0.54539055 * float(x[773]))+ (1.6834278 * float(x[774]))+ (-1.6604362 * float(x[775]))+ (0.16913468 * float(x[776]))+ (0.55658865 * float(x[777]))+ (-0.87639797 * float(x[778]))+ (-1.0328536 * float(x[779]))+ (-0.9562477 * float(x[780]))+ (2.426273 * float(x[781]))+ (2.7956572 * float(x[782]))+ (-0.16579144 * float(x[783]))+ (-1.3907666 * float(x[784]))+ (-0.4374038 * float(x[785]))+ (2.833454 * float(x[786]))+ (1.6311207 * float(x[787]))+ (-1.9716038 * float(x[788]))+ (0.34351373 * float(x[789]))+ (1.9448557 * float(x[790]))+ (0.61654043 * float(x[791]))+ (-0.03384531 * float(x[792]))+ (0.27502462 * float(x[793]))+ (-2.4543266 * float(x[794]))+ (0.15091752 * float(x[795]))+ (-0.07113651 * float(x[796]))+ (1.2283789 * float(x[797]))+ (1.8820887 * float(x[798]))+ (-1.0688523 * float(x[799])))+ ((4.445366 * float(x[800]))+ (0.100988664 * float(x[801]))+ (-1.3864758 * float(x[802]))+ (1.0128169 * float(x[803]))+ (-0.22790961 * float(x[804]))+ (0.4102246 * float(x[805]))+ (-0.4216271 * float(x[806]))+ (0.8382399 * float(x[807]))+ (0.25865299 * float(x[808]))+ (1.4385748 * float(x[809]))+ (0.014228933 * float(x[810]))+ (-0.2998132 * float(x[811]))+ (0.20290488 * float(x[812]))+ (0.048912168 * float(x[813]))+ (1.0226303 * float(x[814]))+ (-1.4740318 * float(x[815]))+ (-0.6528304 * float(x[816]))+ (0.25262868 * float(x[817]))+ (1.180462 * float(x[818]))+ (-0.10927752 * float(x[819]))+ (-0.42341924 * float(x[820]))+ (-0.46568137 * float(x[821]))+ (0.055921003 * float(x[822]))+ (-0.37409583 * float(x[823]))+ (-0.6791075 * float(x[824]))+ (-0.05215876 * float(x[825]))+ (-1.1821607 * float(x[826]))+ (2.2090557 * float(x[827]))+ (0.44299707 * float(x[828]))+ (-1.225282 * float(x[829]))+ (0.2656093 * float(x[830]))+ (0.31559074 * float(x[831]))+ (1.6344377 * float(x[832]))+ (-0.15947662 * float(x[833]))+ (1.2356299 * float(x[834]))+ (1.6378927 * float(x[835]))+ (-2.972647 * float(x[836]))+ (-3.4329877 * float(x[837]))+ (3.3124661 * float(x[838]))+ (3.0669193 * float(x[839]))+ (1.0493917 * float(x[840]))+ (-0.2481959 * float(x[841]))+ (-1.2626762 * float(x[842]))+ (-0.7406284 * float(x[843]))+ (0.104348056 * float(x[844]))+ (-0.13878183 * float(x[845]))+ (1.4758972 * float(x[846]))+ (0.20016128 * float(x[847]))+ (1.2356782 * float(x[848]))+ (0.7994506 * float(x[849])))+ ((2.0433424 * float(x[850]))+ (1.6411002 * float(x[851]))+ (2.8104968 * float(x[852]))+ (-1.0936363 * float(x[853]))+ (-3.8846097 * float(x[854]))+ (-1.4630877 * float(x[855]))+ (2.0586143 * float(x[856]))+ (0.05064398 * float(x[857]))+ (-1.1744514 * float(x[858]))+ (-3.3212235 * float(x[859]))+ (-1.0022947 * float(x[860]))+ (-2.8330054 * float(x[861]))+ (1.3724917 * float(x[862]))+ (1.5482115 * float(x[863]))+ (1.785953 * float(x[864]))+ (0.36305502 * float(x[865]))+ (-1.5922775 * float(x[866]))+ (-0.7512831 * float(x[867]))+ (-2.2623603 * float(x[868]))+ (-3.004106 * float(x[869]))+ (-0.3897999 * float(x[870]))+ (-2.0692406 * float(x[871]))+ (-1.0793308 * float(x[872]))+ (-0.12963365 * float(x[873]))+ (0.8920188 * float(x[874]))+ (1.0082507 * float(x[875]))+ (1.0540665 * float(x[876]))+ (-0.4496306 * float(x[877]))+ (-0.305563 * float(x[878]))+ (1.6488912 * float(x[879]))+ (-3.1564257 * float(x[880]))+ (1.0166607 * float(x[881]))+ (0.80453193 * float(x[882]))+ (2.536116 * float(x[883]))+ (-1.0354414 * float(x[884]))+ (1.030642 * float(x[885]))+ (-3.235544 * float(x[886]))+ (3.244115 * float(x[887]))+ (0.15617715 * float(x[888]))+ (0.35960466 * float(x[889]))+ (1.0451977 * float(x[890]))+ (0.41985613 * float(x[891]))+ (-0.9139707 * float(x[892]))+ (0.9374184 * float(x[893]))+ (-1.5087854 * float(x[894]))+ (0.25936714 * float(x[895]))+ (1.6516281 * float(x[896]))+ (1.1301888 * float(x[897]))+ (2.763491 * float(x[898]))+ (3.150237 * float(x[899])))+ ((0.9487145 * float(x[900]))+ (-1.0137717 * float(x[901]))+ (2.9530656 * float(x[902]))+ (1.6464442 * float(x[903]))+ (-0.7161102 * float(x[904]))+ (-1.2175552 * float(x[905]))+ (1.6881183 * float(x[906]))+ (0.2058541 * float(x[907]))+ (0.7405199 * float(x[908]))+ (4.418804 * float(x[909]))+ (0.6239521 * float(x[910]))+ (-1.063592 * float(x[911]))+ (-2.5275917 * float(x[912]))+ (0.40184006 * float(x[913]))+ (-2.4691117 * float(x[914]))+ (-0.2591976 * float(x[915]))+ (0.008778326 * float(x[916]))+ (-0.5745033 * float(x[917]))+ (-0.9876373 * float(x[918]))+ (0.5570459 * float(x[919]))+ (0.3424803 * float(x[920]))+ (2.7029946 * float(x[921]))+ (2.160937 * float(x[922]))+ (-1.2709434 * float(x[923]))+ (0.18092814 * float(x[924]))+ (0.18223748 * float(x[925]))+ (0.08205022 * float(x[926]))+ (-0.80433136 * float(x[927]))+ (-2.3740048 * float(x[928]))+ (0.15890141 * float(x[929]))+ (-1.5201488 * float(x[930]))+ (0.30336854 * float(x[931]))+ (0.6642095 * float(x[932]))+ (-1.354885 * float(x[933]))+ (0.480264 * float(x[934]))+ (1.1002024 * float(x[935]))+ (0.2094969 * float(x[936]))+ (1.123417 * float(x[937]))+ (-0.73780394 * float(x[938]))+ (1.8094156 * float(x[939]))+ (-0.057566084 * float(x[940]))+ (-2.8462627 * float(x[941]))+ (-1.6693811 * float(x[942]))+ (2.2631552 * float(x[943]))+ (-3.6143894 * float(x[944]))+ (0.66182715 * float(x[945]))+ (-0.19845517 * float(x[946]))+ (-0.85255694 * float(x[947]))+ (-0.38908127 * float(x[948]))+ (0.2959777 * float(x[949])))+ ((-0.44351885 * float(x[950]))+ (-0.025503783 * float(x[951]))+ (0.27667326 * float(x[952]))+ (0.1138941 * float(x[953]))+ (0.54470736 * float(x[954]))+ (-0.07756358 * float(x[955]))+ (0.16569795 * float(x[956]))+ (0.65390843 * float(x[957]))+ (0.29228452 * float(x[958]))+ (0.253822 * float(x[959]))+ (0.51384485 * float(x[960]))+ (-0.12369545 * float(x[961]))+ (0.18710387 * float(x[962]))+ (0.20260854 * float(x[963]))+ (0.10945694 * float(x[964]))+ (-0.01928984 * float(x[965]))+ (-0.03365073 * float(x[966]))+ (-0.0063394806 * float(x[967]))+ (-0.6544076 * float(x[968]))+ (0.0583988 * float(x[969]))+ (-0.20318267 * float(x[970]))+ (-0.24381319 * float(x[971]))+ (-0.24815002 * float(x[972]))+ (-0.22601964 * float(x[973]))+ (0.3448068 * float(x[974]))+ (-0.533523 * float(x[975]))+ (-0.05618666 * float(x[976]))+ (0.16736992 * float(x[977]))+ (-0.140354 * float(x[978]))+ (0.64176583 * float(x[979]))+ (0.13443686 * float(x[980]))+ (-0.013854434 * float(x[981]))+ (-0.4771651 * float(x[982]))+ (0.4665149 * float(x[983]))+ (-0.7307151 * float(x[984]))+ (0.15801978 * float(x[985]))+ (-0.70296913 * float(x[986]))+ (-0.129836 * float(x[987]))+ (-0.2827984 * float(x[988]))+ (0.5112648 * float(x[989]))+ (-0.39563498 * float(x[990]))+ (-0.4159168 * float(x[991]))+ (-0.23698148 * float(x[992]))+ (-0.12083122 * float(x[993]))+ (0.18272232 * float(x[994]))+ (-0.08638461 * float(x[995]))+ (-0.31642538 * float(x[996]))+ (0.45893326 * float(x[997]))+ (0.050657216 * float(x[998]))+ (-0.031170744 * float(x[999])))+ ((0.43166792 * float(x[1000]))+ (0.22023578 * float(x[1001]))+ (-0.02143981 * float(x[1002]))+ (-0.049676057 * float(x[1003]))+ (-0.11295588 * float(x[1004]))+ (0.015387645 * float(x[1005]))+ (0.10503987 * float(x[1006]))+ (0.37804675 * float(x[1007]))+ (-0.2855576 * float(x[1008]))+ (-0.2283514 * float(x[1009]))+ (-0.18186812 * float(x[1010]))+ (0.91145474 * float(x[1011]))+ (-0.09864049 * float(x[1012]))+ (-0.19949469 * float(x[1013]))+ (0.10652998 * float(x[1014]))+ (0.49105713 * float(x[1015]))+ (0.16905981 * float(x[1016]))+ (0.14004 * float(x[1017]))+ (-0.25764126 * float(x[1018]))+ (0.044631664 * float(x[1019]))+ (-0.3996152 * float(x[1020]))+ (-0.14844577 * float(x[1021]))+ (-0.6811824 * float(x[1022]))+ (0.03014206 * float(x[1023]))+ (0.48419365 * float(x[1024]))+ (0.275337 * float(x[1025]))+ (0.10923388 * float(x[1026]))+ (-0.38856217 * float(x[1027]))+ (-0.03304409 * float(x[1028]))+ (-0.29951268 * float(x[1029]))+ (-0.01127091 * float(x[1030]))+ (-0.30772772 * float(x[1031]))+ (-0.27767116 * float(x[1032]))+ (-0.18373251 * float(x[1033]))+ (-0.06431197 * float(x[1034]))+ (0.10933816 * float(x[1035]))+ (0.38484812 * float(x[1036]))+ (-0.18086138 * float(x[1037]))+ (-0.0526309 * float(x[1038]))+ (-0.09596972 * float(x[1039]))+ (0.1704483 * float(x[1040]))+ (-0.15783918 * float(x[1041]))+ (0.16990125 * float(x[1042]))+ (0.049677946 * float(x[1043]))+ (0.0397564 * float(x[1044]))+ (-0.021393478 * float(x[1045]))+ (0.214553 * float(x[1046]))+ (0.15421279 * float(x[1047]))+ (-0.24387892 * float(x[1048]))+ (-0.10160069 * float(x[1049])))+ ((0.05192033 * float(x[1050]))+ (-0.08417879 * float(x[1051]))+ (-0.2813501 * float(x[1052]))+ (0.21649097 * float(x[1053]))+ (-0.017642269 * float(x[1054]))+ (0.25543314 * float(x[1055]))+ (0.06793733 * float(x[1056]))+ (-0.29222482 * float(x[1057]))+ (0.555554 * float(x[1058]))+ (0.055497807 * float(x[1059]))+ (0.21093811 * float(x[1060]))+ (0.3979153 * float(x[1061]))+ (0.27237624 * float(x[1062]))+ (-0.031537157 * float(x[1063]))+ (0.42911512 * float(x[1064]))+ (0.19505565 * float(x[1065]))+ (-0.25919303 * float(x[1066]))+ (-0.12130776 * float(x[1067]))+ (0.47624668 * float(x[1068]))+ (-0.19060245 * float(x[1069]))+ (0.7543656 * float(x[1070]))+ (0.013472737 * float(x[1071]))+ (0.21057324 * float(x[1072]))+ (0.076644495 * float(x[1073]))+ (0.06346723 * float(x[1074]))+ (-0.5502253 * float(x[1075]))+ (0.34907293 * float(x[1076]))+ (-0.40758613 * float(x[1077]))+ (-0.10117242 * float(x[1078]))+ (0.118474066 * float(x[1079]))+ (-0.91570437 * float(x[1080]))+ (-0.3926757 * float(x[1081]))+ (0.21454431 * float(x[1082]))+ (0.09024528 * float(x[1083]))+ (0.20867266 * float(x[1084]))+ (-0.50265914 * float(x[1085]))+ (0.011532012 * float(x[1086]))+ (0.40329883 * float(x[1087]))+ (-0.3681524 * float(x[1088]))+ (-0.19100957 * float(x[1089]))+ (0.6788804 * float(x[1090]))+ (0.3616783 * float(x[1091]))+ (0.5331004 * float(x[1092]))+ (-0.5986247 * float(x[1093]))+ (0.6274168 * float(x[1094]))+ (-0.29116568 * float(x[1095]))+ (-0.15894412 * float(x[1096]))+ (-0.53162754 * float(x[1097]))+ (-0.14034875 * float(x[1098]))+ (-0.6195376 * float(x[1099])))+ ((-0.4575998 * float(x[1100]))+ (-0.77115023 * float(x[1101]))+ (-0.09558558 * float(x[1102]))+ (0.07382769 * float(x[1103]))+ (0.30598414 * float(x[1104]))+ (0.21692385 * float(x[1105]))+ (0.45604235 * float(x[1106]))+ (-0.44754833 * float(x[1107]))+ (-0.14722297 * float(x[1108]))+ (-0.52861345 * float(x[1109]))+ (-0.46087077 * float(x[1110]))+ (0.723961 * float(x[1111]))+ (-0.4714152 * float(x[1112]))+ (0.21647094 * float(x[1113]))+ (-0.16663656 * float(x[1114]))+ (-0.64838666 * float(x[1115]))+ (0.12531398 * float(x[1116]))+ (0.017549453 * float(x[1117]))+ (-0.4296876 * float(x[1118]))+ (-0.17664449 * float(x[1119]))+ (-0.08003966 * float(x[1120]))+ (-0.08034552 * float(x[1121]))+ (0.14301206 * float(x[1122]))+ (-0.42470047 * float(x[1123]))+ (-0.0442022 * float(x[1124]))+ (0.13133085 * float(x[1125]))+ (-0.0106224185 * float(x[1126]))+ (-0.23304038 * float(x[1127]))+ (-0.31649795 * float(x[1128]))+ (0.6707634 * float(x[1129]))+ (-0.4559843 * float(x[1130]))+ (-0.44997662 * float(x[1131]))+ (0.372256 * float(x[1132]))+ (0.3845832 * float(x[1133]))+ (0.6206171 * float(x[1134]))+ (0.56131303 * float(x[1135]))+ (0.1402803 * float(x[1136]))+ (-0.06845101 * float(x[1137]))+ (-0.55383575 * float(x[1138]))+ (0.14518079 * float(x[1139]))+ (-0.26573095 * float(x[1140]))+ (-0.20092377 * float(x[1141]))+ (-0.08527047 * float(x[1142]))+ (0.43949893 * float(x[1143]))+ (0.039920412 * float(x[1144]))+ (0.15677474 * float(x[1145]))+ (-0.23697531 * float(x[1146]))+ (0.699086 * float(x[1147]))+ (0.31918725 * float(x[1148]))+ (0.48534504 * float(x[1149])))+ ((-0.25586522 * float(x[1150]))+ (-0.1702698 * float(x[1151]))+ (-0.72926575 * float(x[1152]))+ (-0.59920204 * float(x[1153]))+ (-0.35836685 * float(x[1154]))+ (0.09815806 * float(x[1155]))+ (-0.08892304 * float(x[1156]))+ (0.12725233 * float(x[1157]))+ (-0.39383796 * float(x[1158]))+ (-0.6073591 * float(x[1159]))+ (-0.14713983 * float(x[1160]))+ (-0.14009191 * float(x[1161]))+ (0.8327988 * float(x[1162]))+ (0.06680773 * float(x[1163]))+ (0.20792417 * float(x[1164]))+ (-0.015493488 * float(x[1165]))+ (-0.32938856 * float(x[1166]))+ (-0.3240528 * float(x[1167]))+ (0.14702265 * float(x[1168]))+ (0.43874216 * float(x[1169]))+ (0.307583 * float(x[1170]))+ (0.19373901 * float(x[1171]))+ (0.7211094 * float(x[1172]))+ (0.6651937 * float(x[1173]))+ (0.34029943 * float(x[1174]))+ (-0.09568136 * float(x[1175]))+ (0.12274633 * float(x[1176]))+ (-0.31004116 * float(x[1177]))+ (0.55006903 * float(x[1178]))+ (-0.2342338 * float(x[1179]))+ (-0.6536262 * float(x[1180]))+ (0.61195314 * float(x[1181]))+ (0.034822352 * float(x[1182]))+ (0.80242956 * float(x[1183]))+ (0.09650654 * float(x[1184]))+ (-0.0012199584 * float(x[1185]))+ (0.20942333 * float(x[1186]))+ (-0.010901875 * float(x[1187]))+ (0.070427604 * float(x[1188]))+ (0.40460286 * float(x[1189]))+ (-0.10603228 * float(x[1190]))+ (-0.48645857 * float(x[1191]))+ (0.18296708 * float(x[1192]))+ (-0.6495947 * float(x[1193]))+ (-0.36329558 * float(x[1194]))+ (0.19423981 * float(x[1195]))+ (0.3589861 * float(x[1196]))+ (-0.24239545 * float(x[1197]))+ (0.004368766 * float(x[1198]))+ (0.35818583 * float(x[1199])))+ ((0.087966874 * float(x[1200]))+ (-0.055425107 * float(x[1201]))+ (-0.060281575 * float(x[1202]))+ (1.245277 * float(x[1203]))+ (0.34013078 * float(x[1204]))+ (0.0062439935 * float(x[1205]))+ (-0.42348945 * float(x[1206]))+ (0.3450667 * float(x[1207]))+ (1.0244088 * float(x[1208]))+ (0.21368185 * float(x[1209]))+ (0.12201656 * float(x[1210]))+ (-0.4378153 * float(x[1211]))+ (-0.115140796 * float(x[1212]))+ (0.5761266 * float(x[1213]))+ (0.25437915 * float(x[1214]))+ (-0.32306236 * float(x[1215]))+ (-0.14619076 * float(x[1216]))+ (-0.81222415 * float(x[1217]))+ (1.3000801 * float(x[1218]))+ (-0.5894989 * float(x[1219]))+ (0.50288486 * float(x[1220]))+ (-0.902879 * float(x[1221]))+ (0.62468815 * float(x[1222]))+ (-0.7763442 * float(x[1223]))+ (-0.45024735 * float(x[1224]))+ (-0.5773081 * float(x[1225]))+ (-0.101547785 * float(x[1226]))+ (-0.46411717 * float(x[1227]))+ (-0.5245819 * float(x[1228]))+ (0.20086707 * float(x[1229]))+ (-0.03292746 * float(x[1230]))+ (0.0564922 * float(x[1231]))+ (0.34912682 * float(x[1232]))+ (-0.5324962 * float(x[1233]))+ (0.41386864 * float(x[1234]))+ (0.91088295 * float(x[1235]))+ (0.29415503 * float(x[1236]))+ (-0.09760457 * float(x[1237]))+ (-0.48659453 * float(x[1238]))+ (0.31543684 * float(x[1239]))+ (-0.45564172 * float(x[1240]))+ (-0.65444255 * float(x[1241]))+ (0.10524715 * float(x[1242]))+ (-0.4830292 * float(x[1243]))+ (1.0519427 * float(x[1244]))+ (0.985005 * float(x[1245]))+ (0.30621412 * float(x[1246]))+ (0.4756573 * float(x[1247]))+ (0.29468822 * float(x[1248]))+ (-1.0480613 * float(x[1249])))+ ((0.5741672 * float(x[1250]))+ (0.1387054 * float(x[1251]))+ (-1.3578804 * float(x[1252]))+ (1.2137853 * float(x[1253]))+ (0.033257194 * float(x[1254]))+ (-0.75471824 * float(x[1255]))+ (0.7110706 * float(x[1256]))+ (-0.14011638 * float(x[1257]))+ (-0.06041595 * float(x[1258]))+ (0.34246814 * float(x[1259]))+ (-0.78406763 * float(x[1260]))+ (-0.7599767 * float(x[1261]))+ (0.4792612 * float(x[1262]))+ (-0.504663 * float(x[1263]))+ (-0.5631671 * float(x[1264]))+ (-0.9270674 * float(x[1265]))+ (-0.62636805 * float(x[1266]))+ (0.30016714 * float(x[1267]))+ (-1.5898737 * float(x[1268]))+ (-0.9673077 * float(x[1269]))+ (-1.61352 * float(x[1270]))+ (0.41895813 * float(x[1271]))+ (0.3357213 * float(x[1272]))+ (-0.96621263 * float(x[1273]))+ (1.0821692 * float(x[1274]))+ (-0.95085424 * float(x[1275]))+ (-0.21585588 * float(x[1276]))+ (-0.24042733 * float(x[1277]))+ (-0.4415333 * float(x[1278]))+ (0.14249733 * float(x[1279]))+ (-0.909604 * float(x[1280]))+ (-0.26972973 * float(x[1281]))+ (-0.21022202 * float(x[1282]))+ (0.24895658 * float(x[1283]))+ (0.12327611 * float(x[1284]))+ (0.15071955 * float(x[1285]))+ (-0.6067815 * float(x[1286]))+ (-0.92006296 * float(x[1287]))+ (-0.43938226 * float(x[1288]))+ (-0.1400273 * float(x[1289]))+ (-0.503546 * float(x[1290]))+ (-0.2889657 * float(x[1291]))+ (-0.33702952 * float(x[1292]))+ (0.71267486 * float(x[1293]))+ (1.279739 * float(x[1294]))+ (0.52257603 * float(x[1295]))+ (0.5132359 * float(x[1296]))+ (0.8547305 * float(x[1297]))+ (-0.43094122 * float(x[1298]))+ (0.2701714 * float(x[1299])))+ ((-0.19037047 * float(x[1300]))+ (-0.081663474 * float(x[1301]))+ (-0.52563465 * float(x[1302]))+ (-0.7027372 * float(x[1303]))+ (-0.6306951 * float(x[1304]))+ (0.9747127 * float(x[1305]))+ (-0.5852506 * float(x[1306]))+ (0.22508751 * float(x[1307]))+ (1.0143071 * float(x[1308]))+ (0.5994804 * float(x[1309]))+ (-0.30978286 * float(x[1310]))+ (0.36329132 * float(x[1311]))+ (0.13007765 * float(x[1312]))+ (-0.25797462 * float(x[1313]))+ (-0.18553518 * float(x[1314]))+ (0.08441813 * float(x[1315]))+ (0.52244246 * float(x[1316]))+ (0.051871683 * float(x[1317]))+ (0.24825935 * float(x[1318]))+ (0.38686147 * float(x[1319]))+ (0.0184708 * float(x[1320]))+ (-0.30753872 * float(x[1321]))+ (0.310813 * float(x[1322]))+ (-0.06927076 * float(x[1323]))+ (-0.42480412 * float(x[1324]))+ (-0.30781662 * float(x[1325]))+ (0.32885438 * float(x[1326]))+ (0.20600276 * float(x[1327]))+ (0.24506205 * float(x[1328]))+ (0.53510076 * float(x[1329]))+ (-0.37477612 * float(x[1330]))+ (0.35339394 * float(x[1331]))+ (-0.53507537 * float(x[1332]))+ (-0.13370341 * float(x[1333]))+ (-0.09107896 * float(x[1334]))+ (1.0659298 * float(x[1335]))+ (-0.10792949 * float(x[1336]))+ (1.0918579 * float(x[1337]))+ (-0.22039334 * float(x[1338]))+ (-0.22528996 * float(x[1339]))+ (0.42133313 * float(x[1340]))+ (-0.10658693 * float(x[1341]))+ (-0.23701608 * float(x[1342]))+ (-0.48862153 * float(x[1343]))+ (-0.5019068 * float(x[1344]))+ (-0.4629875 * float(x[1345]))+ (0.23589577 * float(x[1346]))+ (0.5737034 * float(x[1347]))+ (0.26760063 * float(x[1348]))+ (-0.13017651 * float(x[1349])))+ ((-0.2980146 * float(x[1350]))+ (-0.45941523 * float(x[1351]))+ (0.884825 * float(x[1352]))+ (0.7941212 * float(x[1353]))+ (0.27014259 * float(x[1354]))+ (1.4927906 * float(x[1355]))+ (-0.122726634 * float(x[1356]))+ (-0.30132723 * float(x[1357]))+ (-0.35833585 * float(x[1358]))+ (-0.41503394 * float(x[1359]))+ (0.31062636 * float(x[1360]))+ (-0.4991919 * float(x[1361]))+ (0.5451112 * float(x[1362]))+ (0.08009234 * float(x[1363]))+ (0.2185658 * float(x[1364]))+ (0.5567802 * float(x[1365]))+ (0.34185392 * float(x[1366]))+ (0.8301525 * float(x[1367]))+ (0.51573974 * float(x[1368]))+ (0.5348807 * float(x[1369]))+ (0.0169691 * float(x[1370]))+ (-0.297679 * float(x[1371]))+ (-0.47769147 * float(x[1372]))+ (-0.049043573 * float(x[1373]))+ (0.04605668 * float(x[1374]))+ (0.4938392 * float(x[1375]))+ (0.19306317 * float(x[1376]))+ (-0.11558648 * float(x[1377]))+ (0.17657395 * float(x[1378]))+ (0.32792026 * float(x[1379]))+ (-1.3019562 * float(x[1380]))+ (0.48244157 * float(x[1381]))+ (-0.5669757 * float(x[1382]))+ (0.50012875 * float(x[1383]))+ (-0.22689223 * float(x[1384]))+ (-0.02089576 * float(x[1385]))+ (-0.9864443 * float(x[1386]))+ (-0.3405936 * float(x[1387]))+ (0.01751613 * float(x[1388]))+ (0.97345906 * float(x[1389]))+ (0.41750023 * float(x[1390]))+ (1.0442318 * float(x[1391]))+ (-0.73686767 * float(x[1392]))+ (-0.32865292 * float(x[1393]))+ (-0.07262895 * float(x[1394]))+ (-0.12987907 * float(x[1395]))+ (-0.5141985 * float(x[1396]))+ (0.1988396 * float(x[1397]))+ (1.0899091 * float(x[1398]))+ (-0.30628815 * float(x[1399])))+ ((-0.6254879 * float(x[1400]))+ (-1.4699333 * float(x[1401]))+ (0.2612006 * float(x[1402]))+ (0.24065073 * float(x[1403]))+ (-0.39736024 * float(x[1404]))+ (0.037628368 * float(x[1405]))+ (0.47259873 * float(x[1406]))+ (-0.58970785 * float(x[1407]))+ (0.12200002 * float(x[1408]))+ (-0.025404047 * float(x[1409]))+ (0.0016259629 * float(x[1410]))+ (0.07633163 * float(x[1411]))+ (-0.032970194 * float(x[1412]))+ (-0.60346645 * float(x[1413]))+ (1.2654725 * float(x[1414]))+ (0.32930666 * float(x[1415]))+ (-0.6084918 * float(x[1416]))+ (0.863199 * float(x[1417]))+ (0.24008545 * float(x[1418]))+ (0.039227758 * float(x[1419]))+ (0.58037955 * float(x[1420]))+ (-0.7971123 * float(x[1421]))+ (1.2730191 * float(x[1422]))+ (0.6796323 * float(x[1423]))+ (0.03871887 * float(x[1424]))+ (0.9594093 * float(x[1425]))+ (0.13140543 * float(x[1426]))+ (-0.5389509 * float(x[1427]))+ (0.5625966 * float(x[1428]))+ (-0.4745383 * float(x[1429]))+ (0.81508857 * float(x[1430]))+ (0.42649734 * float(x[1431]))+ (0.1432847 * float(x[1432]))+ (0.12717354 * float(x[1433]))+ (-1.8482196 * float(x[1434]))+ (-0.44621226 * float(x[1435]))+ (-0.36402342 * float(x[1436]))+ (-0.16305529 * float(x[1437]))+ (0.62912494 * float(x[1438]))+ (0.6639725 * float(x[1439]))+ (-0.25214761 * float(x[1440]))+ (0.48732945 * float(x[1441]))+ (-0.23818438 * float(x[1442]))+ (-0.021354184 * float(x[1443]))+ (-0.5223309 * float(x[1444]))+ (0.07358907 * float(x[1445]))+ (0.754358 * float(x[1446]))+ (1.1199472 * float(x[1447]))+ (0.088462785 * float(x[1448]))+ (0.09657267 * float(x[1449])))+ ((-0.16066201 * float(x[1450]))+ (0.0035577547 * float(x[1451]))+ (0.42192322 * float(x[1452]))+ (0.7755388 * float(x[1453]))+ (0.02143186 * float(x[1454]))+ (-0.18081224 * float(x[1455]))+ (1.1833285 * float(x[1456]))+ (0.314844 * float(x[1457]))+ (-0.31688648 * float(x[1458]))+ (-0.21384941 * float(x[1459]))+ (0.5677459 * float(x[1460]))+ (-0.59317285 * float(x[1461]))+ (3.3818603 * float(x[1462]))+ (0.8108879 * float(x[1463]))+ (-0.039831802 * float(x[1464]))+ (1.5135126 * float(x[1465]))+ (0.0451 * float(x[1466]))+ (0.3440346 * float(x[1467]))+ (0.74868107 * float(x[1468]))+ (-0.43563312 * float(x[1469]))+ (0.02727584 * float(x[1470]))+ (0.7115122 * float(x[1471]))+ (-0.23549688 * float(x[1472]))+ (-0.4556276 * float(x[1473]))+ (1.0019047 * float(x[1474]))+ (-0.094472915 * float(x[1475]))+ (-0.7529251 * float(x[1476]))+ (0.36764193 * float(x[1477]))+ (-0.8905629 * float(x[1478]))+ (-0.8913961 * float(x[1479]))+ (0.27913085 * float(x[1480]))+ (0.60583866 * float(x[1481]))+ (-0.10182766 * float(x[1482]))+ (-0.02763885 * float(x[1483]))+ (-0.45441172 * float(x[1484]))+ (0.18603529 * float(x[1485]))+ (1.299329 * float(x[1486]))+ (0.14986494 * float(x[1487]))+ (-0.43322614 * float(x[1488]))+ (0.23939773 * float(x[1489]))+ (-0.874271 * float(x[1490]))+ (0.3628958 * float(x[1491]))+ (-0.43233737 * float(x[1492]))+ (-0.29970142 * float(x[1493]))+ (-0.031609736 * float(x[1494]))+ (0.70000374 * float(x[1495]))+ (-0.26178786 * float(x[1496]))+ (1.8312051 * float(x[1497]))+ (-0.28094548 * float(x[1498]))+ (0.4666983 * float(x[1499])))+ ((-0.14047728 * float(x[1500]))+ (-0.2461304 * float(x[1501]))+ (-0.16959195 * float(x[1502]))+ (0.21692123 * float(x[1503]))+ (-0.46780467 * float(x[1504]))+ (-0.0159158 * float(x[1505]))+ (-0.6579824 * float(x[1506]))+ (-0.12179286 * float(x[1507]))+ (0.82076013 * float(x[1508]))+ (-0.61689395 * float(x[1509]))+ (-0.44876114 * float(x[1510]))+ (0.36530948 * float(x[1511]))+ (0.11755269 * float(x[1512]))+ (0.48630086 * float(x[1513]))+ (0.15934823 * float(x[1514]))+ (0.5243241 * float(x[1515]))+ (-0.0016182761 * float(x[1516]))+ (0.26491058 * float(x[1517]))+ (-0.36049253 * float(x[1518]))+ (0.30233496 * float(x[1519]))+ (-0.31884915 * float(x[1520]))+ (-1.3350891 * float(x[1521]))+ (0.51926714 * float(x[1522]))+ (-0.09595711 * float(x[1523]))+ (0.103244066 * float(x[1524]))+ (-0.60181403 * float(x[1525]))+ (-0.001724709 * float(x[1526]))+ (-0.66531706 * float(x[1527]))+ (-0.30358636 * float(x[1528]))+ (-0.24122383 * float(x[1529]))+ (0.67581326 * float(x[1530]))+ (0.16622877 * float(x[1531]))+ (0.38947526 * float(x[1532]))+ (0.35331884 * float(x[1533]))+ (-0.3298415 * float(x[1534]))+ (0.384898 * float(x[1535]))+ (-0.26996166 * float(x[1536]))+ (0.5506339 * float(x[1537]))+ (1.3670522 * float(x[1538]))+ (1.3293087 * float(x[1539]))+ (1.1171702 * float(x[1540]))+ (-0.08461787 * float(x[1541]))+ (0.27063462 * float(x[1542]))+ (-0.29612672 * float(x[1543]))+ (0.6921703 * float(x[1544]))+ (-0.47662094 * float(x[1545]))+ (0.14891848 * float(x[1546]))+ (-0.9226988 * float(x[1547]))+ (-0.0064094905 * float(x[1548]))+ (-0.2532591 * float(x[1549])))+ ((-0.31325322 * float(x[1550]))+ (-0.11781149 * float(x[1551]))+ (-0.7227799 * float(x[1552]))+ (-0.030190978 * float(x[1553]))+ (-0.022490999 * float(x[1554]))+ (-0.4279211 * float(x[1555]))+ (-0.7967123 * float(x[1556]))+ (0.0042691943 * float(x[1557]))+ (0.5050616 * float(x[1558]))+ (-0.7763707 * float(x[1559]))+ (-0.46839735 * float(x[1560]))+ (-0.47649327 * float(x[1561]))+ (-0.17054224 * float(x[1562]))+ (-0.045403726 * float(x[1563]))+ (-0.2526079 * float(x[1564]))+ (-0.7544541 * float(x[1565]))+ (-0.31504947 * float(x[1566]))+ (0.8106628 * float(x[1567]))+ (1.2737002 * float(x[1568]))+ (0.71389246 * float(x[1569]))+ (2.5308156 * float(x[1570]))+ (-0.6207033 * float(x[1571]))+ (0.30359176 * float(x[1572]))+ (0.48645377 * float(x[1573]))+ (0.32147574 * float(x[1574]))+ (-0.08006515 * float(x[1575]))+ (0.6643263 * float(x[1576]))+ (0.03318109 * float(x[1577]))+ (0.03300109 * float(x[1578]))+ (0.22499911 * float(x[1579]))+ (-0.38406602 * float(x[1580]))+ (-0.24468426 * float(x[1581]))+ (0.23388717 * float(x[1582]))+ (0.3820814 * float(x[1583]))+ (-0.57584816 * float(x[1584]))+ (0.19314419 * float(x[1585]))+ (0.037013598 * float(x[1586]))+ (-0.091787 * float(x[1587]))+ (0.19371825 * float(x[1588]))+ (-0.5362638 * float(x[1589]))+ (0.47098804 * float(x[1590]))+ (0.07541902 * float(x[1591]))+ (0.35201856 * float(x[1592]))+ (-0.5763535 * float(x[1593]))+ (0.05455431 * float(x[1594]))+ (0.79009575 * float(x[1595]))+ (0.09071296 * float(x[1596]))+ (0.62804466 * float(x[1597]))+ (-0.24540678 * float(x[1598]))+ (0.6511714 * float(x[1599])))+ ((-0.11780237 * float(x[1600]))+ (0.557661 * float(x[1601]))+ (0.45482823 * float(x[1602]))+ (0.034264747 * float(x[1603]))+ (-0.004151127 * float(x[1604]))+ (0.014351268 * float(x[1605]))+ (0.82773906 * float(x[1606]))+ (0.25651565 * float(x[1607]))+ (-0.28894392 * float(x[1608]))+ (-0.48278123 * float(x[1609]))+ (-0.15688376 * float(x[1610]))+ (0.5534207 * float(x[1611]))+ (0.2320086 * float(x[1612]))+ (-0.12547661 * float(x[1613]))+ (-0.1350097 * float(x[1614]))+ (0.22188291 * float(x[1615]))+ (-0.09082437 * float(x[1616]))+ (-0.30823913 * float(x[1617]))+ (0.34165102 * float(x[1618]))+ (0.10940929 * float(x[1619]))+ (0.5518275 * float(x[1620]))+ (-0.05342977 * float(x[1621]))+ (0.121863015 * float(x[1622]))+ (-0.90537125 * float(x[1623]))+ (-0.46761483 * float(x[1624]))+ (-0.53565055 * float(x[1625]))+ (-0.5612892 * float(x[1626]))+ (-0.07039468 * float(x[1627]))+ (-0.4917505 * float(x[1628]))+ (0.32437232 * float(x[1629]))+ (-0.6165355 * float(x[1630]))+ (0.87430483 * float(x[1631]))+ (1.5852523 * float(x[1632]))+ (-0.15756853 * float(x[1633]))+ (-0.30308324 * float(x[1634]))+ (-0.6816773 * float(x[1635]))+ (0.14157258 * float(x[1636]))+ (0.68726355 * float(x[1637]))+ (-0.8094102 * float(x[1638]))+ (-0.37400937 * float(x[1639]))+ (-0.628293 * float(x[1640]))+ (-0.3210762 * float(x[1641]))+ (0.2359135 * float(x[1642]))+ (0.10279917 * float(x[1643]))+ (0.051834337 * float(x[1644]))+ (-0.3653905 * float(x[1645]))+ (0.57701534 * float(x[1646]))+ (-0.8233025 * float(x[1647]))+ (0.27873555 * float(x[1648]))+ (0.4061082 * float(x[1649])))+ ((-0.39580083 * float(x[1650]))+ (0.06499873 * float(x[1651]))+ (0.029487196 * float(x[1652]))+ (0.2197933 * float(x[1653]))+ (-0.4767988 * float(x[1654]))+ (0.5102617 * float(x[1655]))+ (0.25650963 * float(x[1656]))+ (-0.3238313 * float(x[1657]))+ (0.5772042 * float(x[1658]))+ (-1.3198713 * float(x[1659]))+ (-0.7299544 * float(x[1660]))+ (-0.32920453 * float(x[1661]))+ (0.6270781 * float(x[1662]))+ (0.07324726 * float(x[1663]))+ (-0.36700892 * float(x[1664]))+ (-0.43051383 * float(x[1665]))+ (-0.19110104 * float(x[1666]))+ (-0.5396209 * float(x[1667]))+ (0.08453159 * float(x[1668]))+ (0.83883476 * float(x[1669]))+ (-0.1974515 * float(x[1670]))+ (-0.76388943 * float(x[1671]))+ (-0.43926066 * float(x[1672]))+ (0.14571968 * float(x[1673]))+ (-0.7709181 * float(x[1674]))+ (-1.0279723 * float(x[1675]))+ (0.013327927 * float(x[1676]))+ (-0.30757833 * float(x[1677]))+ (0.38783947 * float(x[1678]))+ (-0.6607828 * float(x[1679]))+ (1.014657 * float(x[1680]))+ (0.65041703 * float(x[1681]))+ (0.0834536 * float(x[1682]))+ (1.2746981 * float(x[1683]))+ (-0.36574596 * float(x[1684]))+ (-0.10232095 * float(x[1685]))+ (0.2057305 * float(x[1686]))+ (0.005233212 * float(x[1687]))+ (-0.1719443 * float(x[1688]))+ (-0.2825652 * float(x[1689]))+ (0.2600753 * float(x[1690]))+ (0.58283645 * float(x[1691]))+ (-0.2929429 * float(x[1692]))+ (-0.6840887 * float(x[1693]))+ (-0.6016668 * float(x[1694]))+ (0.8267682 * float(x[1695]))+ (1.0795295 * float(x[1696]))+ (-0.55631715 * float(x[1697]))+ (0.62047774 * float(x[1698]))+ (0.6056589 * float(x[1699])))+ ((-0.2743944 * float(x[1700]))+ (0.059725367 * float(x[1701]))+ (0.00841878 * float(x[1702]))+ (-0.4692388 * float(x[1703]))+ (-0.1321272 * float(x[1704]))+ (0.42069584 * float(x[1705]))+ (-1.3976367 * float(x[1706]))+ (0.49474075 * float(x[1707]))+ (0.099219225 * float(x[1708]))+ (0.30345258 * float(x[1709]))+ (-0.35929564 * float(x[1710]))+ (0.007592148 * float(x[1711]))+ (-0.55984455 * float(x[1712]))+ (0.032756176 * float(x[1713]))+ (-0.45847273 * float(x[1714]))+ (0.65226406 * float(x[1715]))+ (0.1360092 * float(x[1716]))+ (1.1524998 * float(x[1717]))+ (-0.30266184 * float(x[1718]))+ (0.48564574 * float(x[1719]))+ (0.28806806 * float(x[1720]))+ (-0.4825634 * float(x[1721]))+ (0.13699542 * float(x[1722]))+ (-0.67865527 * float(x[1723]))+ (0.2517495 * float(x[1724]))+ (0.5870302 * float(x[1725]))+ (0.9362374 * float(x[1726]))+ (0.44558927 * float(x[1727]))+ (1.298401 * float(x[1728]))+ (0.17962344 * float(x[1729]))+ (0.44104737 * float(x[1730]))+ (-0.12559743 * float(x[1731]))+ (-0.7904019 * float(x[1732]))+ (0.783854 * float(x[1733]))+ (0.7661124 * float(x[1734]))+ (-0.15267393 * float(x[1735]))+ (0.28527352 * float(x[1736]))+ (-0.42542267 * float(x[1737]))+ (0.23688789 * float(x[1738]))+ (-0.047102503 * float(x[1739]))+ (1.2614795 * float(x[1740]))+ (-0.83005583 * float(x[1741]))+ (0.56840473 * float(x[1742]))+ (-0.17108224 * float(x[1743]))+ (0.19969638 * float(x[1744]))+ (-0.027560046 * float(x[1745]))+ (-0.6711186 * float(x[1746]))+ (0.40846696 * float(x[1747]))+ (0.3673075 * float(x[1748]))+ (-0.20185566 * float(x[1749])))+ ((-0.12486013 * float(x[1750]))+ (-0.82120633 * float(x[1751]))+ (-0.10077678 * float(x[1752]))+ (0.3826932 * float(x[1753]))+ (0.8379663 * float(x[1754]))+ (0.694097 * float(x[1755]))+ (0.72175175 * float(x[1756]))+ (1.2123806 * float(x[1757]))+ (-0.60665566 * float(x[1758]))+ (-0.6325271 * float(x[1759]))+ (-0.07178413 * float(x[1760]))+ (-0.14778508 * float(x[1761]))+ (1.3167973 * float(x[1762]))+ (0.18487157 * float(x[1763]))+ (0.032912407 * float(x[1764]))+ (0.10890322 * float(x[1765]))+ (0.4145253 * float(x[1766]))+ (1.306856 * float(x[1767]))+ (0.21095921 * float(x[1768]))+ (-0.34057933 * float(x[1769]))+ (0.52958804 * float(x[1770]))+ (0.13823017 * float(x[1771]))+ (0.6466338 * float(x[1772]))+ (-0.5398252 * float(x[1773]))+ (0.04452595 * float(x[1774]))+ (0.3770455 * float(x[1775]))) + 0.2544877), 0)
    o[0] = (-0.28028083 * h_0)+ (2.4500237 * h_1) + -3.4703596

    if num_output_logits == 1:
        return o[0] >= 0
    else:
        return argmax(o)


#for classifying batches
def classify(arr):
    outputs = []
    for row in arr:
        outputs.append(single_classify(row))
    return outputs

def Validate(cleanvalfile):
    #Binary
    if n_classes == 2:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
            valcsvreader = csv.reader(valcsvfile)
            preds = []
            y_trues = []
            for valrow in valcsvreader:
                if len(valrow) == 0:
                    continue
                y_true = int(float(valrow[-1]))
                pred = int(single_classify(valrow[:-1]))
                y_trues.append(y_true)
                preds.append(pred)
                if pred == y_true:
                    correct_count += 1
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_TP += 1
                    else:
                        num_class_0 += 1
                        num_TN += 1
                else:
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_FN += 1
                    else:
                        num_class_0 += 1
                        num_FP += 1
                count += 1
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, y_trues

    #Multiclass
    else:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count = 0, 0
            valcsvreader = csv.reader(valcsvfile)
            numeachclass = {}
            preds = []
            y_trues = []
            for i, valrow in enumerate(valcsvreader):
                pred = int(single_classify(valrow[:-1]))
                preds.append(pred)
                y_true = int(float(valrow[-1]))
                y_trues.append(y_true)
                if len(valrow) == 0:
                    continue
                if pred == y_true:
                    correct_count += 1
                #if class seen, add to its counter
                if y_true in numeachclass.keys():
                    numeachclass[y_true] += 1
                #initialize a new counter
                else:
                    numeachclass[y_true] = 1
                count += 1
        return count, correct_count, numeachclass, preds,  y_trues



def Predict(cleanfile, preprocessedfile, headerless, get_key, classmapping):
    with open(cleanfile,'r') as cleancsvfile, open(preprocessedfile,'r') as dirtycsvfile:
        cleancsvreader = csv.reader(cleancsvfile)
        dirtycsvreader = csv.reader(dirtycsvfile)
        if (not headerless):
            print(','.join(next(dirtycsvreader, None) + ["Prediction"]))
        for cleanrow, dirtyrow in zip(cleancsvreader, dirtycsvreader):
            if len(cleanrow) == 0:
                continue
            print(str(','.join(str(j) for j in ([i for i in dirtyrow]))) + ',' + str(get_key(int(single_classify(cleanrow)), classmapping)))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #Predict
    if not args.validate:
        Predict(cleanfile, preprocessedfile, args.headerless, get_key, classmapping)


    #Validate
    else: 
        classifier_type = 'NN'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)

        #Report Metrics
        model_cap=3557
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


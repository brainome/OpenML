#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f QC -target Class thyroid-allhypo.csv -o thyroid-allhypo.py -nsamples 0 --yes -nsamples 0 -e 100
# Total compiler execution time: 0:00:46.56. Finished on: Sep-04-2020 12:07:26.
# This source code requires Python 3.
#
"""
Classifier Type:                     Decision Tree
System Type:                         5-way classifier
Best-guess accuracy:                 58.29%
Overall Model accuracy:              97.89% (2741/2800 correct)
Overall Improvement over best guess: 39.60% (of possible 41.71%)
Model capacity (MEC):                1522 bits
Generalization ratio:                1.80 bits/bit
Model efficiency:                    0.02%/parameter
Confusion Matrix:
 [9.71% 0.11% 0.00% 0.00% 0.00%]
 [0.57% 57.64% 0.07% 0.00% 0.00%]
 [0.32% 0.79% 26.43% 0.00% 0.00%]
 [0.00% 0.07% 0.07% 3.11% 0.00%]
 [0.00% 0.07% 0.04% 0.00% 1.00%]
Overfitting:                         No
Note: Unable to split dataset. The predictor was trained and evaluated on the same data.
Note: Labels have been remapped to '3'=0, '1'=1, '5'=2, '2'=3, '4'=4.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "thyroid-allhypo.csv"


#Number of attributes
num_attr = 26
n_classes = 5


# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="Class"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="Class"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'3': 0, '1': 1, '5': 2, '2': 3, '4': 4}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([119.56, 122.405, 142.1825, 153.269983, 160.412483, 166.79500000000002, 168.37, 170.365, 171.57999999999998, 173.59, 175.35500000000002, 175.58999999999997, 175.83499999999998, 177.79, 180.21748300000002, 180.437483, 182.005448, 184.47, 184.685, 186.475, 188.433558, 189.118558, 194.585, 195.62, 197.00248299999998, 197.612483, 198.055, 199.386075, 199.49, 199.54000000000002, 199.645, 200.965, 202.02748300000002, 202.40544799999998, 202.59, 204.661041, 204.774966, 205.32999999999998, 205.855, 206.17499999999998, 206.513558, 206.975, 207.095, 207.27748300000002, 208.16107499999998, 208.565, 208.8425, 209.07, 209.075, 209.47500000000002, 209.588558, 210.747948, 211.862483, 212.592483, 212.81, 214.167948, 214.55248300000002, 214.83248300000002, 214.99, 216.815, 217.38, 217.857483, 218.292483, 218.70999999999998, 219.25, 220.195, 220.491075, 220.691075, 220.86, 221.28500000000003, 221.76, 221.87, 221.981075, 222.13, 222.14999999999998, 222.34500000000003, 222.375, 223.565, 223.62, 224.07, 224.21248300000002, 224.297483, 224.49, 226.08999999999997, 226.425, 226.56, 226.615, 226.73, 226.87, 227.412483, 227.583558, 227.683558, 227.85, 228.015, 228.32999999999998, 228.41000000000003, 228.63500000000002, 228.972483, 229.3, 229.47, 229.56, 229.70499999999998, 229.95, 230.035, 230.215, 230.847483, 231.17, 231.282483, 231.42249999999999, 231.815, 231.845, 231.985, 232.035, 232.357483, 232.52748300000002, 232.84248300000002, 233.075, 233.60000000000002, 233.65855800000003, 233.718558, 233.79500000000002, 233.831075, 233.961075, 234.137948, 234.262948, 234.51999999999998, 234.61, 235.12, 235.44, 235.52, 235.56, 235.598558, 235.803558, 235.93, 236.262483, 236.372483, 236.45749999999998, 236.888558, 237.11, 237.41, 237.465, 237.533558, 237.718558, 237.896075, 238.03, 238.08748300000002, 238.265, 238.33999999999997, 238.445, 238.585, 238.655, 238.70999999999998, 238.927483, 239.055, 239.22, 239.3, 239.82999999999998, 239.94, 240.04000000000002, 240.166075, 240.613558, 240.65, 240.872483, 241.13748299999997, 241.15499999999997, 241.77294799999999, 241.895, 242.035, 242.24, 242.357483, 242.387483, 242.407483, 242.446041, 242.763558, 242.81, 242.84500000000003, 242.96999999999997, 243.802483, 243.86, 244.492948, 244.535, 244.615, 244.682483, 244.70748300000002, 244.71748300000002, 244.747483, 244.78, 244.89000000000001, 245.235, 245.285, 245.365, 245.82, 246.04500000000002, 246.35500000000002, 246.445, 246.701041, 246.794966, 246.84248300000002, 247.14499999999998, 247.267483, 247.357483, 247.41, 247.49, 247.598558, 247.688558, 247.745, 247.84, 247.935, 247.95499999999998, 247.98000000000002, 248.005, 248.03000000000003, 248.062948, 248.157948, 248.27748300000002, 248.45248300000003, 248.613558, 248.648558, 248.735, 249.352483, 249.52355799999998, 249.745, 249.815, 249.96499999999997, 249.995, 250.235, 250.787483, 250.857483, 251.302483, 251.69, 251.95499999999998, 251.96499999999997, 252.12748299999998, 252.262483, 252.46, 252.48294800000002, 252.5741315, 252.60411449999998, 252.82500000000002, 252.885, 252.992948, 253.157948, 253.252483, 253.59499999999997, 253.755, 253.84248300000002, 254.07, 254.10500000000002, 254.195, 254.35, 254.792948, 254.90248300000002, 254.99, 255.065, 255.185, 255.225, 255.265, 255.29, 255.35, 255.41, 255.485, 255.575, 255.625, 255.655, 255.732483, 255.757483, 255.77748300000002, 255.78294799999998, 255.792948, 255.81248300000001, 255.827483, 255.83499999999998, 255.937483, 256.105, 256.195, 256.275, 256.39748299999997, 256.475, 256.67065449999996, 256.875, 256.91999999999996, 256.95000000000005, 257.103558, 257.25, 257.4, 257.58000000000004, 257.62, 257.71500000000003, 257.91499999999996, 258.07, 258.117483, 258.212483, 258.305, 258.347483, 258.435, 258.515, 258.65855799999997, 258.776506, 258.827948, 258.875, 258.96000000000004, 259.012483, 259.25, 259.3375, 259.42855799999995, 259.5777065, 259.615, 259.685, 259.76, 259.79499999999996, 259.885, 259.89248299999997, 259.95500000000004, 260.0325, 260.08544800000004, 260.087948, 260.112483, 260.187483, 260.525, 260.57000000000005, 260.615, 260.65999999999997, 260.735, 260.835, 261.022948, 261.12294799999995, 261.271075, 261.31107499999996, 261.34000000000003, 261.365, 261.59000000000003, 261.62, 261.655, 261.672483, 261.685431, 261.697948, 261.75, 261.79999999999995, 261.815, 261.845, 261.982948, 262.16499999999996, 262.182483, 262.35, 262.38, 262.411075, 262.46999999999997, 262.64248299999997, 262.765, 263.39500000000004, 263.50270650000004, 263.645, 263.77, 263.855, 263.885, 263.99, 264.095, 264.235, 264.295, 264.32500000000005, 264.395, 264.4977065, 264.6177065, 264.73, 264.78499999999997, 264.78999999999996, 264.855, 264.965, 265.03499999999997, 265.135, 265.185, 265.22, 265.297948, 265.58770649999997, 265.64, 265.66999999999996, 265.730431, 265.792483, 265.84000000000003, 265.942948, 266.025, 266.185, 266.33000000000004, 266.41294800000003, 266.507948, 266.5427065, 266.68, 266.69748300000003, 266.717483, 266.74, 266.76, 266.78499999999997, 266.875, 266.957483, 267.187483, 267.315, 267.387948, 267.41794799999997, 267.8502235, 267.977483, 268.03748299999995, 268.092483, 268.107483, 268.19, 268.255, 268.3, 268.42, 268.52, 268.56, 268.7, 268.85294799999997, 268.952948, 269.08000000000004, 269.11, 269.122483, 269.217948, 269.267948, 269.325, 269.42499999999995, 269.53520649999996, 269.608558, 269.635, 269.825, 269.88, 270.09000000000003, 270.262948, 270.317948, 270.355, 270.385, 270.467483, 270.5727065, 270.61022349999996, 270.6402235, 270.67499999999995, 270.82, 270.945, 271.125, 271.31, 271.405, 271.455, 271.53499999999997, 271.5477065, 271.5777065, 271.603558, 271.608558, 271.612483, 271.95500000000004, 271.985, 272.06, 272.114983, 272.21107500000005, 272.225, 272.37, 272.505, 272.625, 272.662483, 272.68748300000004, 272.695, 272.725, 272.80107499999997, 272.861075, 272.877948, 273.0775, 273.132483, 273.16496600000005, 273.17748300000005, 273.25, 273.33000000000004, 273.345, 273.4527065, 273.71000000000004, 273.777483, 273.89248299999997, 273.975, 274.04499999999996, 274.09000000000003, 274.105, 274.235, 274.255, 274.322948, 274.501075, 274.642948, 274.677948, 274.695, 274.78499999999997, 274.80248300000005, 274.82748300000003, 274.91999999999996, 275.16499999999996, 275.182948, 275.202948, 275.225, 275.275, 275.33500000000004, 275.37, 275.506075, 275.541075, 275.5527065, 275.655, 275.68499999999995, 275.7152235, 275.775, 275.80499999999995, 275.857483, 275.91499999999996, 275.935, 275.977483, 276.027483, 276.125, 276.155, 276.19, 276.207483, 276.5075, 276.5377065, 276.662483, 276.69500000000005, 276.78999999999996, 276.83500000000004, 276.87, 276.905, 276.93107499999996, 276.978558, 277.175, 277.19, 277.232483, 277.472483, 277.51770650000003, 277.5627065, 277.7, 277.83, 277.935, 278.0, 278.03, 278.065, 278.444966, 278.457483, 278.46500000000003, 278.475, 278.49, 278.5277065, 278.808558, 278.88, 278.96500000000003, 279.02, 279.03499999999997, 279.041075, 279.087948, 279.385, 279.71500000000003, 279.82248300000003, 279.872483, 279.94748300000003, 279.962483, 279.98, 280.002483, 280.05499999999995, 280.105448, 280.162483, 280.185431, 280.212948, 280.262948, 280.625, 280.89, 280.985, 281.031075, 281.081075, 281.12, 281.15248299999996, 281.195, 281.24, 281.27, 281.29499999999996, 281.34000000000003, 281.39, 281.42999999999995, 281.5, 281.5527065, 281.5577065, 281.63, 281.72, 281.81, 281.925, 282.045, 282.33500000000004, 282.342948, 282.5727065, 282.6, 282.76, 282.905, 283.1591145, 283.207483, 283.34000000000003, 283.3651565, 283.435, 283.46500000000003, 283.6, 283.63, 283.65, 283.69500000000005, 283.725, 284.027948, 284.0825, 284.114983, 284.19248300000004, 284.222483, 284.262483, 284.317483, 284.367483, 284.5377065, 284.85044800000003, 284.87294799999995, 284.91999999999996, 284.9625, 284.97607500000004, 285.05748300000005, 285.06248300000004, 285.082483, 285.115, 285.145, 285.172483, 285.212483, 285.257948, 285.592483, 285.73, 285.84499999999997, 285.92999999999995, 285.95000000000005, 285.995, 286.127483, 286.17999999999995, 286.232483, 286.255, 286.275, 286.28499999999997, 286.31, 286.342483, 286.427948, 286.475, 286.495, 286.52, 286.5427065, 286.702948, 286.753558, 286.80855799999995, 286.865, 287.09000000000003, 287.242483, 287.280431, 287.395, 287.43855800000006, 287.73, 287.82663149999996, 287.8866315, 287.96500000000003, 288.095, 288.185, 288.2, 288.23, 288.26, 288.345, 288.355, 288.386075, 288.434633, 288.507948, 288.5527065, 288.825, 288.975, 289.125, 289.15, 289.33000000000004, 289.405, 289.48, 289.5227065, 289.5577065, 289.58000000000004, 289.677483, 289.8, 290.075, 290.255, 290.305, 290.412483, 290.495, 290.515, 290.5427065, 290.59270649999996, 290.78, 290.985, 291.125, 291.145, 291.16248299999995, 291.207483, 291.28, 291.595, 291.665, 291.845, 291.911075, 292.09000000000003, 292.137948, 292.222483, 292.26, 292.275, 292.307483, 292.352483, 292.375, 292.385, 292.45500000000004, 292.485, 292.51, 292.5427065, 292.5727065, 292.675, 292.775, 292.875, 292.952948, 293.24, 293.54499999999996, 293.63, 293.6875, 293.76, 293.8302235, 293.8452235, 293.99, 294.06, 294.077948, 294.425, 294.525, 294.632483, 294.717483, 294.91499999999996, 294.98, 295.0152235, 295.0502235, 295.082483, 295.092483, 295.11, 295.19248300000004, 295.27248299999997, 295.282948, 295.6177065, 295.682948, 295.752483, 296.017948, 296.235, 296.367948, 296.43, 296.5227065, 296.5777065, 296.63, 296.735, 296.82500000000005, 296.875, 296.94, 297.002483, 297.02248299999997, 297.047483, 297.082483, 297.102483, 297.1202235, 297.15522350000003, 297.20000000000005, 297.20248300000003, 297.235, 297.28, 297.36, 297.41499999999996, 297.47, 297.753558, 297.775, 297.905, 298.01, 298.055, 298.17, 298.412483, 298.475, 298.60607500000003, 298.655, 298.75, 298.85, 299.0325, 299.055, 299.11, 299.225, 299.32500000000005, 299.47, 299.5377065, 299.67, 299.752948, 299.802948, 299.82500000000005, 299.85, 299.875, 299.895, 299.945, 299.995, 300.06, 300.0725, 300.0875, 300.252948, 300.422948, 300.5067295, 300.5677065, 300.6, 300.635, 300.678558, 300.768558, 300.855, 300.935, 301.037483, 301.045, 301.0902235, 301.1352235, 301.16999999999996, 301.207483, 301.237483, 301.297483, 301.337483, 301.42999999999995, 301.50770650000004, 301.5777065, 301.65, 301.71000000000004, 301.78499999999997, 301.842483, 301.9, 301.993558, 302.02, 302.04999999999995, 302.135, 302.21500000000003, 302.32, 302.355, 302.655, 302.735, 302.78999999999996, 302.815, 302.82500000000005, 302.9, 302.93, 303.06, 303.115, 303.187948, 303.235, 303.28999999999996, 303.305, 303.3302235, 303.3627065, 303.495, 303.5277065, 303.615, 303.695, 303.77, 303.83, 303.855, 303.88, 303.917483, 303.942948, 304.087483, 304.16499999999996, 304.33500000000004, 304.35, 304.395, 304.45000000000005, 304.495, 304.5327065, 304.5677065, 304.6052235, 304.777483, 304.915, 304.93, 304.96163149999995, 304.9866315, 304.995, 305.073558, 305.152483, 305.20248300000003, 305.25, 305.282948, 305.64, 305.66855799999996, 306.01496599999996, 306.092483, 306.16999999999996, 306.185, 306.225, 306.2716315, 306.287948, 306.335, 306.385, 306.395, 306.5, 306.5527065, 306.655, 306.70248300000003, 306.747483, 306.8, 307.1581715, 307.187948, 307.41999999999996, 307.5527065, 307.5727065, 307.62, 307.6902235, 307.905, 307.97, 308.10749999999996, 308.197483, 308.28499999999997, 308.305, 308.33000000000004, 308.3491485, 308.695, 308.7302235, 308.7552235, 308.805431, 309.135, 309.15248299999996, 309.19500000000005, 309.225, 309.267483, 309.28294800000003, 309.322948, 309.47650600000003, 309.567948, 309.625, 309.66999999999996, 309.7, 309.782948, 309.802948, 309.997948, 310.015, 310.075, 310.19, 310.2825, 310.35249999999996, 310.425, 310.5477065, 310.685, 310.8566485, 310.962483, 311.042483, 311.135, 311.16499999999996, 311.2, 311.322948, 311.375, 311.42499999999995, 311.485, 311.5327065, 311.632483, 311.65999999999997, 312.125, 312.19, 312.225, 312.445, 312.48, 312.5277065, 312.5777065, 312.63, 312.7716315, 312.92911449999997, 313.009483, 313.047, 313.117483, 313.187483, 313.235, 313.297483, 313.4966315, 313.527483, 313.613558, 313.65, 313.67499999999995, 313.745, 313.815, 313.845, 313.877948, 313.900431, 313.95248300000003, 314.03, 314.20500000000004, 314.282483, 314.37496600000003, 314.467483, 314.52, 314.5427065, 314.59770649999996, 314.65, 314.69, 314.78999999999996, 314.89, 314.91499999999996, 314.94, 314.97, 315.057948, 315.235, 315.28, 315.375, 315.660448, 315.675, 315.821058, 315.8925, 316.03499999999997, 316.095, 316.17499999999995, 316.28, 316.3302235, 316.71770649999996, 316.885, 316.958558, 317.0252235, 317.0452235, 317.122483, 317.467483, 317.5527065, 317.5827065, 317.628558, 317.682116, 317.75604100000004, 317.79748300000006, 317.87, 317.885, 317.904983, 318.00498300000004, 318.097483, 318.112483, 318.13, 318.15, 318.18499999999995, 318.22, 318.315, 318.395, 318.41999999999996, 318.501075, 318.5427065, 318.5827065, 318.622483, 319.0266315, 319.04411450000003, 319.054983, 319.082948, 319.11294799999996, 319.205, 319.813558, 319.82000000000005, 319.83500000000004, 320.112483, 320.172483, 320.31248300000004, 320.4927065, 320.618558, 320.625, 320.645, 320.68607499999996, 320.847483, 320.93, 321.025, 321.1066315, 321.1566315, 321.31, 321.46000000000004, 321.492948, 321.4975, 321.52, 321.5477065, 322.05, 322.37, 322.475, 322.515, 322.66855799999996, 322.71500000000003, 322.775, 322.875, 322.995, 323.07000000000005, 323.25, 323.265, 323.29999999999995, 323.325, 323.45500000000004, 323.53999999999996, 323.545, 323.635, 323.8216315, 323.885, 324.13, 324.15748299999996, 324.28, 324.29620049999994, 324.3112005, 324.32248300000003, 324.43, 324.84000000000003, 324.887483, 324.982483, 325.04499999999996, 325.09000000000003, 325.117483, 325.137483, 325.192948, 325.387948, 325.63, 325.863558, 325.93248300000005, 325.975, 326.04999999999995, 326.075, 326.082948, 326.097948, 326.1302235, 326.212483, 326.252483, 326.6752235, 326.755, 326.79499999999996, 326.81, 326.93499999999995, 327.042483, 327.082483, 327.235, 327.255, 327.70000000000005, 327.735, 327.86, 328.242483, 328.355, 328.467483, 328.56748300000004, 328.695, 328.82000000000005, 328.91499999999996, 329.46270649999997, 329.656075, 329.68, 329.74, 329.78499999999997, 330.07500000000005, 330.1, 330.12, 330.135, 330.35, 330.45248300000003, 330.575, 330.71500000000003, 330.865, 331.0, 331.047948, 331.16294800000003, 331.275, 331.48, 331.515, 331.5475, 331.57, 331.935, 332.027483, 332.06248300000004, 332.07663149999996, 332.335, 332.525, 332.575, 332.81, 333.0, 333.23, 333.36, 333.47, 333.515, 333.745, 333.82, 333.94, 334.04499999999996, 334.095, 334.262948, 334.362483, 334.40999999999997, 334.45500000000004, 334.497483, 334.69500000000005, 334.70750000000004, 334.739983, 334.825431, 334.927948, 334.975, 335.067483, 335.124966, 335.20248300000003, 335.29499999999996, 335.33500000000004, 335.42, 335.485, 335.645, 335.845, 335.905, 335.96000000000004, 336.02794800000004, 336.10794799999996, 336.262483, 336.28, 336.456075, 336.51770650000003, 336.5677065, 336.615, 336.85, 336.992483, 337.03, 337.22249999999997, 337.482483, 337.592483, 337.67248300000006, 337.70248300000003, 337.814983, 337.985, 338.059983, 338.399983, 338.5675, 338.825, 339.01750000000004, 339.122483, 339.212483, 339.31, 339.53499999999997, 339.66999999999996, 339.77, 339.8425, 340.007483, 340.025, 340.04999999999995, 340.075, 340.095, 340.3075, 340.53499999999997, 340.765, 340.84000000000003, 341.265, 341.32, 341.39, 341.653558, 341.685, 341.71000000000004, 341.895, 341.97, 342.27748299999996, 342.325, 342.37, 342.475, 342.635, 342.875, 343.095, 343.33, 343.362483, 343.547483, 343.62, 343.67499999999995, 343.71500000000003, 343.787483, 343.84000000000003, 343.877483, 344.155, 344.22, 344.285, 344.372483, 344.445, 344.472948, 344.49794799999995, 344.52, 344.65999999999997, 344.976075, 345.04499999999996, 345.087483, 345.207483, 345.775, 345.85294799999997, 345.945431, 346.342483, 346.745, 347.23650599999996, 347.654983, 347.992483, 348.092483, 348.197483, 349.015, 349.15748299999996, 349.52748299999996, 350.145, 350.24, 350.50248300000004, 350.69855800000005, 350.92499999999995, 351.32500000000005, 351.40999999999997, 351.495, 351.707483, 351.902466, 351.964983, 352.03, 352.105, 352.14, 352.415, 352.6425, 352.7825, 352.855, 353.0475, 353.64, 353.705, 353.77, 353.83000000000004, 353.87, 353.89, 354.13, 354.33000000000004, 354.69248300000004, 354.969983, 355.27, 355.345, 355.435, 355.47749999999996, 355.5325, 355.57, 355.615, 355.96498299999996, 356.095, 356.147483, 356.17248300000006, 356.22, 356.287483, 356.492483, 356.85607500000003, 357.13, 357.265, 357.32748300000003, 357.45748299999997, 357.88, 358.1, 358.257483, 358.352483, 358.9225, 359.007483, 359.485, 359.766075, 359.861075, 359.982483, 360.062483, 360.355, 360.61, 360.967948, 361.297948, 361.35, 362.13, 362.22, 362.3, 362.42, 362.74, 363.08000000000004, 363.375, 363.425, 363.505, 363.775, 363.97, 364.37, 364.467483, 364.51748299999997, 364.54499999999996, 364.631075, 365.06, 365.24, 365.41499999999996, 365.505, 365.58500000000004, 365.732483, 365.912483, 366.062948, 366.15, 366.16748299999995, 366.515, 366.83748299999996, 367.54, 368.40999999999997, 368.78999999999996, 369.08, 369.21000000000004, 370.307483, 370.796075, 371.145, 371.3, 371.39, 371.52, 371.78, 372.29499999999996, 372.66499999999996, 372.8325, 372.9525, 373.26748299999997, 373.612483, 373.795, 373.854983, 374.045, 374.65999999999997, 374.82748300000003, 374.925, 374.997483, 375.154983, 375.3125, 375.42499999999995, 375.67499999999995, 375.955, 376.1, 376.225, 376.54, 376.675, 376.78248299999996, 377.11749999999995, 377.22249999999997, 378.031075, 378.20248300000003, 378.394983, 378.617948, 380.6125, 380.76748299999997, 381.362483, 381.635, 382.185, 382.365, 383.507483, 383.885, 384.238558, 384.47, 384.76748299999997, 384.86, 385.11, 385.375, 386.122948, 386.88, 387.34000000000003, 387.83000000000004, 388.172483, 388.375, 388.71, 388.96, 389.15999999999997, 389.56748300000004, 390.763558, 391.18248300000005, 391.54748300000006, 391.57, 392.0, 392.522483, 393.53, 393.67499999999995, 395.4575, 395.59355800000003, 396.62, 396.7125, 396.78999999999996, 396.995, 397.33, 399.53499999999997, 399.957483, 401.48249999999996, 401.5625, 401.7175, 401.909983, 402.2025, 402.355, 402.65248299999996, 403.957483, 404.862483, 405.837483, 406.492483, 406.735, 408.69748300000003, 409.125, 411.667483, 411.77, 412.195, 412.55, 412.775, 412.885, 413.07, 416.015, 416.251075, 421.64750000000004, 421.78999999999996, 422.215, 424.179983, 424.527483, 425.065, 426.092483, 427.427483, 427.94748300000003, 430.265, 430.784983, 432.64, 433.3875, 435.86746600000004, 436.277483, 439.67496600000004, 439.807483, 440.992483, 448.735, 450.207483, 455.2575, 458.39750000000004, 459.409983, 460.5525, 462.20500000000004, 462.765, 478.938558, 481.27, 496.4125, 498.96500000000003, 504.22749999999996, 509.50249999999994, 511.36749999999995, 514.0775, 517.04, 521.335, 529.687483, 544.7710750000001, 546.4549999999999, 561.49, 563.7750000000001, 564.62, 565.5, 697.7475, 800.772483])
labels = array([2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 3.0, 1.0, 0.0, 3.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 3.0, 1.0, 0.0, 2.0, 1.0, 3.0, 1.0, 0.0, 2.0, 1.0, 3.0, 1.0, 2.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 1.0, 3.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 3.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 3.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 0.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 3.0, 0.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 3.0, 2.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 1.0, 0.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 3.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 0.0, 3.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 4.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 4.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 3.0, 1.0, 2.0, 4.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 4.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 3.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 3.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 4.0, 2.0, 3.0, 1.0, 0.0, 2.0, 1.0, 4.0, 1.0, 3.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 4.0, 1.0, 0.0, 2.0, 1.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 3.0, 2.0, 1.0, 2.0, 4.0, 1.0, 4.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 2.0, 3.0, 1.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 3.0, 1.0, 3.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 3.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 1.0, 3.0, 0.0, 1.0, 3.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 3.0])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)

    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = labels[numers[indys]]
        outputs[defaultindys] = 1.0
        return outputs
    return thresh_search(energys)

numthresholds = 1522



# Main method
model_cap = numthresholds


def Validate(file):
    #Load Array
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs, cleanarr[:, -1]


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    cleanarr = cleanarr.reshape(cleanarr.shape[0], -1)
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in (['"' + i + '"' if ',' in i else i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        classifier_type = 'DT'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)



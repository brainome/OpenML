#!/usr/bin/env python3
#
# This code has been produced by an evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Distribution of this code in binary form or commercial use of any kind is forbidden.
# For a detailed license agreement see: http://brainome.ai/license
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.98 Table Compiler v0.98.
# Invocation: btc -f NN -target class Internet-Advertisements.csv -o Internet-Advertisements_NN.py -nsamples 0 --yes -nsamples 0 -e 20
# Total compiler execution time: 0:55:16.49. Finished on: Sep-03-2020 10:52:22.
# This source code requires Python 3.
#
"""
Classifier Type:                     Neural Network
System Type:                         Binary classifier
Training/Validation Split:           60:40%
Best-guess accuracy:                 86.00%
Overall Model accuracy:              98.84% (3241/3279 correct)
Overall Improvement over best guess: 12.84% (of possible 14.0%)
Model capacity (MEC):                4681 bits
Generalization ratio:                0.69 bits/bit
Model efficiency:                    0.00%/parameter
System behavior
True Negatives:                      13.45% (441/3279)
True Positives:                      85.39% (2800/3279)
False Negatives:                     0.61% (20/3279)
False Positives:                     0.55% (18/3279)
True Pos. Rate/Sensitivity/Recall:   0.99
True Neg. Rate/Specificity:          0.96
Precision:                           0.99
F-1 Measure:                         0.99
False Negative Rate/Miss Rate:       0.01
Critical Success Index:              0.99
Confusion Matrix:
 [13.45% 0.55%]
 [0.61% 85.39%]
Overfitting:                         Yes
Warning: The prediction model overfits the training data.
Note: Labels have been remapped to 'ad'=0, 'noad'=1.
"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "Internet-Advertisements.csv"


#Number of output logits
num_output_logits = 1

#Number of attributes
num_attr = 1558
n_classes = 2


# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=[]
target="class"


def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=[]
    target="class"
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return
    if (testfile):
        target = ''
        hc = -1
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'ad': 0, 'noad': 1}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def single_classify(row):
    x = row
    o = [0] * num_output_logits
    h_0 = max((((3.587891 * float(x[0]))+ (13.24494 * float(x[1]))+ (1.1905198 * float(x[2]))+ (0.12383419 * float(x[3]))+ (1.2271335 * float(x[4]))+ (0.78278846 * float(x[5]))+ (1.0230061 * float(x[6]))+ (0.10323027 * float(x[7]))+ (0.85663545 * float(x[8]))+ (-1.0983306 * float(x[9]))+ (0.67509943 * float(x[10]))+ (-1.3061825 * float(x[11]))+ (0.8527131 * float(x[12]))+ (0.3936349 * float(x[13]))+ (-1.2446374 * float(x[14]))+ (0.8647425 * float(x[15]))+ (0.6453155 * float(x[16]))+ (0.37016726 * float(x[17]))+ (0.9188561 * float(x[18]))+ (1.3085382 * float(x[19]))+ (-0.934308 * float(x[20]))+ (-1.2793328 * float(x[21]))+ (0.8159617 * float(x[22]))+ (0.18154265 * float(x[23]))+ (0.006562315 * float(x[24]))+ (1.5454612 * float(x[25]))+ (-0.58154345 * float(x[26]))+ (0.44540018 * float(x[27]))+ (0.60676986 * float(x[28]))+ (1.2103299 * float(x[29]))+ (0.49351925 * float(x[30]))+ (0.2552904 * float(x[31]))+ (0.96593636 * float(x[32]))+ (0.1778559 * float(x[33]))+ (1.2564569 * float(x[34]))+ (0.9327591 * float(x[35]))+ (-1.0888127 * float(x[36]))+ (0.32649207 * float(x[37]))+ (0.44925797 * float(x[38]))+ (2.3495193 * float(x[39]))+ (1.1946566 * float(x[40]))+ (0.69916666 * float(x[41]))+ (0.4844976 * float(x[42]))+ (0.73796993 * float(x[43]))+ (0.26868114 * float(x[44]))+ (0.9843469 * float(x[45]))+ (0.33701518 * float(x[46]))+ (0.8366043 * float(x[47]))+ (0.55182016 * float(x[48]))+ (-0.91832757 * float(x[49])))+ ((0.34929174 * float(x[50]))+ (1.6550783 * float(x[51]))+ (1.0783007 * float(x[52]))+ (0.5100591 * float(x[53]))+ (0.3282329 * float(x[54]))+ (0.21811979 * float(x[55]))+ (0.6752966 * float(x[56]))+ (0.09452822 * float(x[57]))+ (-1.1911454 * float(x[58]))+ (-0.9775883 * float(x[59]))+ (0.0632725 * float(x[60]))+ (0.3006556 * float(x[61]))+ (0.21515375 * float(x[62]))+ (0.1049681 * float(x[63]))+ (1.7093089 * float(x[64]))+ (-1.2196681 * float(x[65]))+ (0.5969913 * float(x[66]))+ (0.6510248 * float(x[67]))+ (0.528026 * float(x[68]))+ (-1.2947263 * float(x[69]))+ (-1.3352399 * float(x[70]))+ (0.39064622 * float(x[71]))+ (1.2778364 * float(x[72]))+ (0.043714453 * float(x[73]))+ (0.6344124 * float(x[74]))+ (1.2206389 * float(x[75]))+ (1.4738805 * float(x[76]))+ (0.95092297 * float(x[77]))+ (0.18238533 * float(x[78]))+ (0.3567142 * float(x[79]))+ (0.34274024 * float(x[80]))+ (0.7716746 * float(x[81]))+ (0.88335377 * float(x[82]))+ (0.905394 * float(x[83]))+ (0.8166528 * float(x[84]))+ (0.8515734 * float(x[85]))+ (-1.1276001 * float(x[86]))+ (0.32450217 * float(x[87]))+ (0.5404153 * float(x[88]))+ (0.59217525 * float(x[89]))+ (1.3600034 * float(x[90]))+ (-0.36633575 * float(x[91]))+ (0.43303353 * float(x[92]))+ (0.098695554 * float(x[93]))+ (-0.59657717 * float(x[94]))+ (-1.4908248 * float(x[95]))+ (-1.5119351 * float(x[96]))+ (0.11169759 * float(x[97]))+ (0.1539843 * float(x[98]))+ (0.5427852 * float(x[99])))+ ((0.98397064 * float(x[100]))+ (0.79400975 * float(x[101]))+ (-1.3632954 * float(x[102]))+ (0.7763862 * float(x[103]))+ (-1.9825109 * float(x[104]))+ (0.6766763 * float(x[105]))+ (1.5450895 * float(x[106]))+ (0.4810254 * float(x[107]))+ (2.101154 * float(x[108]))+ (0.6419144 * float(x[109]))+ (0.026546001 * float(x[110]))+ (0.38145992 * float(x[111]))+ (0.6458992 * float(x[112]))+ (-1.6299199 * float(x[113]))+ (0.7687527 * float(x[114]))+ (0.9297827 * float(x[115]))+ (0.39868113 * float(x[116]))+ (0.49349102 * float(x[117]))+ (0.6743788 * float(x[118]))+ (0.39061013 * float(x[119]))+ (-0.38633382 * float(x[120]))+ (0.43821725 * float(x[121]))+ (0.5987862 * float(x[122]))+ (0.36622754 * float(x[123]))+ (0.8034668 * float(x[124]))+ (1.0334228 * float(x[125]))+ (0.8530965 * float(x[126]))+ (0.016635919 * float(x[127]))+ (1.0754725 * float(x[128]))+ (0.40131938 * float(x[129]))+ (0.8031457 * float(x[130]))+ (0.09710943 * float(x[131]))+ (0.6635374 * float(x[132]))+ (1.3589355 * float(x[133]))+ (-1.272945 * float(x[134]))+ (0.9706852 * float(x[135]))+ (0.4753485 * float(x[136]))+ (0.050882652 * float(x[137]))+ (0.7114362 * float(x[138]))+ (-2.220157 * float(x[139]))+ (0.5571516 * float(x[140]))+ (0.29047188 * float(x[141]))+ (0.8788207 * float(x[142]))+ (0.5137283 * float(x[143]))+ (0.16213784 * float(x[144]))+ (1.0881705 * float(x[145]))+ (0.15066533 * float(x[146]))+ (0.95730174 * float(x[147]))+ (0.48704797 * float(x[148]))+ (1.1482176 * float(x[149])))+ ((1.436963 * float(x[150]))+ (0.57704693 * float(x[151]))+ (0.6276192 * float(x[152]))+ (0.02327548 * float(x[153]))+ (0.5228101 * float(x[154]))+ (-1.0353084 * float(x[155]))+ (0.3915837 * float(x[156]))+ (0.5320086 * float(x[157]))+ (-1.3376586 * float(x[158]))+ (0.5515245 * float(x[159]))+ (0.5418812 * float(x[160]))+ (0.41282612 * float(x[161]))+ (0.2838436 * float(x[162]))+ (-1.5346204 * float(x[163]))+ (1.0497496 * float(x[164]))+ (1.0951475 * float(x[165]))+ (0.95996606 * float(x[166]))+ (-2.805091 * float(x[167]))+ (-0.5605293 * float(x[168]))+ (0.74321395 * float(x[169]))+ (0.44322142 * float(x[170]))+ (0.78631836 * float(x[171]))+ (3.0994496 * float(x[172]))+ (0.35301065 * float(x[173]))+ (0.9556621 * float(x[174]))+ (-1.0925902 * float(x[175]))+ (0.5258244 * float(x[176]))+ (0.8662458 * float(x[177]))+ (1.0198058 * float(x[178]))+ (0.9518726 * float(x[179]))+ (-2.232429 * float(x[180]))+ (-1.0755718 * float(x[181]))+ (0.31796485 * float(x[182]))+ (-0.76338613 * float(x[183]))+ (0.24308564 * float(x[184]))+ (-0.66087776 * float(x[185]))+ (1.4584857 * float(x[186]))+ (0.39671782 * float(x[187]))+ (0.93132716 * float(x[188]))+ (-1.0247526 * float(x[189]))+ (-1.607156 * float(x[190]))+ (1.0017864 * float(x[191]))+ (-1.0693395 * float(x[192]))+ (-1.490972 * float(x[193]))+ (0.6746075 * float(x[194]))+ (1.1568259 * float(x[195]))+ (1.3498349 * float(x[196]))+ (0.5165525 * float(x[197]))+ (0.5164142 * float(x[198]))+ (0.7744655 * float(x[199])))+ ((0.9858392 * float(x[200]))+ (1.3377743 * float(x[201]))+ (0.8435208 * float(x[202]))+ (0.8730159 * float(x[203]))+ (0.5512655 * float(x[204]))+ (0.55963206 * float(x[205]))+ (0.83509266 * float(x[206]))+ (0.42401645 * float(x[207]))+ (0.9770154 * float(x[208]))+ (0.59314704 * float(x[209]))+ (0.47218284 * float(x[210]))+ (0.8432386 * float(x[211]))+ (0.5201482 * float(x[212]))+ (0.7623399 * float(x[213]))+ (1.293925 * float(x[214]))+ (2.506267 * float(x[215]))+ (0.10500623 * float(x[216]))+ (0.4264483 * float(x[217]))+ (0.5392963 * float(x[218]))+ (1.0444944 * float(x[219]))+ (0.33884472 * float(x[220]))+ (0.7121783 * float(x[221]))+ (0.53632927 * float(x[222]))+ (0.24507543 * float(x[223]))+ (-1.1446995 * float(x[224]))+ (0.09333781 * float(x[225]))+ (0.7171503 * float(x[226]))+ (0.91579664 * float(x[227]))+ (0.7288866 * float(x[228]))+ (0.66739845 * float(x[229]))+ (0.42752206 * float(x[230]))+ (-0.41006815 * float(x[231]))+ (0.09388024 * float(x[232]))+ (0.6275632 * float(x[233]))+ (1.2412705 * float(x[234]))+ (-0.38496652 * float(x[235]))+ (0.90202254 * float(x[236]))+ (-0.2741447 * float(x[237]))+ (0.68496066 * float(x[238]))+ (0.69581914 * float(x[239]))+ (1.0920613 * float(x[240]))+ (0.5081524 * float(x[241]))+ (0.9389997 * float(x[242]))+ (1.6242921 * float(x[243]))+ (0.72404087 * float(x[244]))+ (0.03809432 * float(x[245]))+ (-0.111522965 * float(x[246]))+ (0.731171 * float(x[247]))+ (-1.1304028 * float(x[248]))+ (0.90623754 * float(x[249])))+ ((1.5348762 * float(x[250]))+ (-0.46298066 * float(x[251]))+ (1.586498 * float(x[252]))+ (1.3851638 * float(x[253]))+ (0.6657377 * float(x[254]))+ (0.33441418 * float(x[255]))+ (1.0161215 * float(x[256]))+ (0.47807407 * float(x[257]))+ (0.14830895 * float(x[258]))+ (0.51820594 * float(x[259]))+ (0.589167 * float(x[260]))+ (0.18390997 * float(x[261]))+ (0.26387808 * float(x[262]))+ (0.50693756 * float(x[263]))+ (1.2760806 * float(x[264]))+ (2.4398444 * float(x[265]))+ (-0.6276424 * float(x[266]))+ (-1.0230128 * float(x[267]))+ (-1.057134 * float(x[268]))+ (-1.5511345 * float(x[269]))+ (-1.2511894 * float(x[270]))+ (2.4961421 * float(x[271]))+ (0.20817992 * float(x[272]))+ (1.38718 * float(x[273]))+ (-1.1274024 * float(x[274]))+ (0.5967779 * float(x[275]))+ (1.461909 * float(x[276]))+ (0.14401224 * float(x[277]))+ (-0.16617249 * float(x[278]))+ (0.33936763 * float(x[279]))+ (0.15468764 * float(x[280]))+ (0.19575813 * float(x[281]))+ (1.868342 * float(x[282]))+ (0.16116622 * float(x[283]))+ (2.317173 * float(x[284]))+ (0.49986264 * float(x[285]))+ (0.24340622 * float(x[286]))+ (-1.3266941 * float(x[287]))+ (0.9338463 * float(x[288]))+ (0.37207314 * float(x[289]))+ (0.817318 * float(x[290]))+ (0.4933101 * float(x[291]))+ (0.4992454 * float(x[292]))+ (-1.0195965 * float(x[293]))+ (0.36695257 * float(x[294]))+ (1.3127749 * float(x[295]))+ (-0.60251397 * float(x[296]))+ (2.092707 * float(x[297]))+ (0.41380098 * float(x[298]))+ (0.5597049 * float(x[299])))+ ((0.92519575 * float(x[300]))+ (0.24764211 * float(x[301]))+ (1.4525009 * float(x[302]))+ (0.6018054 * float(x[303]))+ (-1.2929814 * float(x[304]))+ (0.668737 * float(x[305]))+ (0.57992476 * float(x[306]))+ (-0.7686377 * float(x[307]))+ (0.9374111 * float(x[308]))+ (0.84688234 * float(x[309]))+ (-1.3116349 * float(x[310]))+ (1.2479912 * float(x[311]))+ (-1.1980488 * float(x[312]))+ (0.80632234 * float(x[313]))+ (0.26248437 * float(x[314]))+ (0.7423244 * float(x[315]))+ (0.5546695 * float(x[316]))+ (-1.5961572 * float(x[317]))+ (0.7351515 * float(x[318]))+ (0.72855955 * float(x[319]))+ (0.52551126 * float(x[320]))+ (-1.4949471 * float(x[321]))+ (0.7676495 * float(x[322]))+ (0.80572075 * float(x[323]))+ (0.7000154 * float(x[324]))+ (0.726226 * float(x[325]))+ (0.69698477 * float(x[326]))+ (0.7377105 * float(x[327]))+ (0.4875969 * float(x[328]))+ (-1.3639057 * float(x[329]))+ (-1.8097687 * float(x[330]))+ (1.035703 * float(x[331]))+ (0.33818683 * float(x[332]))+ (0.25595158 * float(x[333]))+ (0.24054223 * float(x[334]))+ (0.4566781 * float(x[335]))+ (3.138984 * float(x[336]))+ (0.7335006 * float(x[337]))+ (1.2410104 * float(x[338]))+ (0.67445624 * float(x[339]))+ (1.301538 * float(x[340]))+ (-1.1711167 * float(x[341]))+ (0.64285696 * float(x[342]))+ (-0.26708162 * float(x[343]))+ (0.19585007 * float(x[344]))+ (0.9688647 * float(x[345]))+ (-1.2514851 * float(x[346]))+ (0.48924598 * float(x[347]))+ (0.6951989 * float(x[348]))+ (2.070103 * float(x[349])))+ ((-1.2536169 * float(x[350]))+ (-4.3324976 * float(x[351]))+ (0.13287811 * float(x[352]))+ (0.95623344 * float(x[353]))+ (1.163424 * float(x[354]))+ (-1.163199 * float(x[355]))+ (-1.2376401 * float(x[356]))+ (-2.3283844 * float(x[357]))+ (0.5145291 * float(x[358]))+ (3.0350292 * float(x[359]))+ (1.6468337 * float(x[360]))+ (0.6735756 * float(x[361]))+ (0.816135 * float(x[362]))+ (0.723253 * float(x[363]))+ (0.16691944 * float(x[364]))+ (-0.38755798 * float(x[365]))+ (2.3760152 * float(x[366]))+ (-1.0003135 * float(x[367]))+ (0.44827574 * float(x[368]))+ (0.14383563 * float(x[369]))+ (-1.4897345 * float(x[370]))+ (0.67649335 * float(x[371]))+ (-0.82344687 * float(x[372]))+ (1.5705504 * float(x[373]))+ (0.6706151 * float(x[374]))+ (2.0522194 * float(x[375]))+ (0.5352198 * float(x[376]))+ (3.3003352 * float(x[377]))+ (0.7503897 * float(x[378]))+ (-1.9466645 * float(x[379]))+ (1.3428087 * float(x[380]))+ (0.48896307 * float(x[381]))+ (0.5252581 * float(x[382]))+ (0.70919067 * float(x[383]))+ (0.055253793 * float(x[384]))+ (0.6093148 * float(x[385]))+ (-1.8140913 * float(x[386]))+ (2.472983 * float(x[387]))+ (-0.36715308 * float(x[388]))+ (-1.3405607 * float(x[389]))+ (0.20637295 * float(x[390]))+ (-0.46802163 * float(x[391]))+ (1.381629 * float(x[392]))+ (0.80290556 * float(x[393]))+ (1.4636174 * float(x[394]))+ (0.73138034 * float(x[395]))+ (0.466644 * float(x[396]))+ (0.5010583 * float(x[397]))+ (-1.9501168 * float(x[398]))+ (1.6441228 * float(x[399])))+ ((0.004610002 * float(x[400]))+ (0.009051111 * float(x[401]))+ (0.8840966 * float(x[402]))+ (0.81755245 * float(x[403]))+ (0.41097558 * float(x[404]))+ (0.65987587 * float(x[405]))+ (1.4417537 * float(x[406]))+ (0.2574332 * float(x[407]))+ (0.5193058 * float(x[408]))+ (0.93372375 * float(x[409]))+ (0.028612558 * float(x[410]))+ (1.245621 * float(x[411]))+ (0.5203299 * float(x[412]))+ (0.15255818 * float(x[413]))+ (0.38086227 * float(x[414]))+ (1.0437632 * float(x[415]))+ (0.82825994 * float(x[416]))+ (-1.2673863 * float(x[417]))+ (-1.3111898 * float(x[418]))+ (0.69199467 * float(x[419]))+ (-1.1583287 * float(x[420]))+ (0.1995966 * float(x[421]))+ (0.7170264 * float(x[422]))+ (1.0069109 * float(x[423]))+ (0.87577647 * float(x[424]))+ (1.6969186 * float(x[425]))+ (-1.1315217 * float(x[426]))+ (-1.1004589 * float(x[427]))+ (3.3257165 * float(x[428]))+ (1.4576017 * float(x[429]))+ (-1.0509413 * float(x[430]))+ (1.1896774 * float(x[431]))+ (-1.069929 * float(x[432]))+ (-0.27535194 * float(x[433]))+ (0.70115924 * float(x[434]))+ (-1.3740079 * float(x[435]))+ (-0.008945557 * float(x[436]))+ (0.58432055 * float(x[437]))+ (0.41370285 * float(x[438]))+ (0.7614338 * float(x[439]))+ (-1.1342565 * float(x[440]))+ (2.116777 * float(x[441]))+ (0.6111428 * float(x[442]))+ (1.6468177 * float(x[443]))+ (0.7388384 * float(x[444]))+ (0.11270309 * float(x[445]))+ (0.60078543 * float(x[446]))+ (0.19924612 * float(x[447]))+ (0.61138994 * float(x[448]))+ (0.8680862 * float(x[449])))+ ((-2.2673764 * float(x[450]))+ (0.4962968 * float(x[451]))+ (0.34099644 * float(x[452]))+ (0.66488945 * float(x[453]))+ (0.4476414 * float(x[454]))+ (1.72047 * float(x[455]))+ (1.3281269 * float(x[456]))+ (0.1364369 * float(x[457]))+ (0.5516022 * float(x[458]))+ (0.82746905 * float(x[459]))+ (0.91474515 * float(x[460]))+ (0.68262815 * float(x[461]))+ (0.9168019 * float(x[462]))+ (0.7906871 * float(x[463]))+ (0.8601733 * float(x[464]))+ (-1.1377193 * float(x[465]))+ (0.17968893 * float(x[466]))+ (0.17310046 * float(x[467]))+ (0.8210914 * float(x[468]))+ (0.38709322 * float(x[469]))+ (-1.240901 * float(x[470]))+ (0.22720057 * float(x[471]))+ (-1.1765739 * float(x[472]))+ (1.5606626 * float(x[473]))+ (1.1736616 * float(x[474]))+ (0.94861436 * float(x[475]))+ (0.46199244 * float(x[476]))+ (-1.3024868 * float(x[477]))+ (-1.7638255 * float(x[478]))+ (1.0017521 * float(x[479]))+ (0.5519041 * float(x[480]))+ (1.4120967 * float(x[481]))+ (-1.1097594 * float(x[482]))+ (0.69088477 * float(x[483]))+ (0.32105392 * float(x[484]))+ (0.44551948 * float(x[485]))+ (0.81833404 * float(x[486]))+ (0.4720005 * float(x[487]))+ (0.5442957 * float(x[488]))+ (0.52618945 * float(x[489]))+ (1.0098188 * float(x[490]))+ (0.06907405 * float(x[491]))+ (0.22987846 * float(x[492]))+ (0.5364922 * float(x[493]))+ (0.14432427 * float(x[494]))+ (0.6784569 * float(x[495]))+ (0.9391035 * float(x[496]))+ (0.7322802 * float(x[497]))+ (0.5251938 * float(x[498]))+ (3.16945 * float(x[499])))+ ((0.15167058 * float(x[500]))+ (0.515523 * float(x[501]))+ (0.57365555 * float(x[502]))+ (1.6829647 * float(x[503]))+ (0.435053 * float(x[504]))+ (0.8464655 * float(x[505]))+ (-1.3470972 * float(x[506]))+ (0.808556 * float(x[507]))+ (-1.0696664 * float(x[508]))+ (0.65032595 * float(x[509]))+ (0.07667453 * float(x[510]))+ (-1.5181584 * float(x[511]))+ (0.7979311 * float(x[512]))+ (0.30325153 * float(x[513]))+ (0.78477275 * float(x[514]))+ (0.4381774 * float(x[515]))+ (1.0070589 * float(x[516]))+ (1.1058637 * float(x[517]))+ (-1.1757607 * float(x[518]))+ (0.70616394 * float(x[519]))+ (-1.0136781 * float(x[520]))+ (0.7451162 * float(x[521]))+ (0.8527983 * float(x[522]))+ (0.040654905 * float(x[523]))+ (0.80874544 * float(x[524]))+ (0.100338645 * float(x[525]))+ (0.6586537 * float(x[526]))+ (0.66907966 * float(x[527]))+ (-1.104044 * float(x[528]))+ (0.062623695 * float(x[529]))+ (0.78394955 * float(x[530]))+ (0.37672588 * float(x[531]))+ (1.0543163 * float(x[532]))+ (-1.2165978 * float(x[533]))+ (0.97235936 * float(x[534]))+ (0.95685 * float(x[535]))+ (0.49635366 * float(x[536]))+ (-0.57858765 * float(x[537]))+ (1.2356195 * float(x[538]))+ (0.38210794 * float(x[539]))+ (3.0907323 * float(x[540]))+ (1.5904055 * float(x[541]))+ (-0.7988264 * float(x[542]))+ (0.41011068 * float(x[543]))+ (0.7183065 * float(x[544]))+ (-2.0457294 * float(x[545]))+ (0.8383373 * float(x[546]))+ (0.015461721 * float(x[547]))+ (1.7395223 * float(x[548]))+ (0.65789986 * float(x[549])))+ ((1.164448 * float(x[550]))+ (1.5486751 * float(x[551]))+ (0.11182978 * float(x[552]))+ (0.0016343843 * float(x[553]))+ (-0.07112723 * float(x[554]))+ (0.75648886 * float(x[555]))+ (3.0631394 * float(x[556]))+ (0.60287887 * float(x[557]))+ (0.14942165 * float(x[558]))+ (0.70239466 * float(x[559]))+ (0.63155675 * float(x[560]))+ (0.51580465 * float(x[561]))+ (0.74794745 * float(x[562]))+ (0.093948245 * float(x[563]))+ (0.91698277 * float(x[564]))+ (0.40968543 * float(x[565]))+ (-0.6046836 * float(x[566]))+ (1.0638663 * float(x[567]))+ (0.4996476 * float(x[568]))+ (0.2427296 * float(x[569]))+ (-0.80363715 * float(x[570]))+ (0.26882544 * float(x[571]))+ (-1.0467951 * float(x[572]))+ (0.8670103 * float(x[573]))+ (1.1559203 * float(x[574]))+ (1.5372387 * float(x[575]))+ (-1.3248718 * float(x[576]))+ (0.17648993 * float(x[577]))+ (0.28155527 * float(x[578]))+ (0.524741 * float(x[579]))+ (0.95030725 * float(x[580]))+ (0.30361673 * float(x[581]))+ (1.8162918 * float(x[582]))+ (0.5349781 * float(x[583]))+ (1.6572977 * float(x[584]))+ (0.829189 * float(x[585]))+ (-1.2438078 * float(x[586]))+ (0.77974725 * float(x[587]))+ (0.72555536 * float(x[588]))+ (0.76257354 * float(x[589]))+ (0.66983455 * float(x[590]))+ (0.48636258 * float(x[591]))+ (1.1278276 * float(x[592]))+ (0.32806817 * float(x[593]))+ (0.7979521 * float(x[594]))+ (0.73035866 * float(x[595]))+ (0.72667825 * float(x[596]))+ (0.6413732 * float(x[597]))+ (0.32931805 * float(x[598]))+ (0.6250892 * float(x[599])))+ ((0.64331937 * float(x[600]))+ (0.9228423 * float(x[601]))+ (-0.37764856 * float(x[602]))+ (0.5559744 * float(x[603]))+ (-0.03857048 * float(x[604]))+ (0.5865499 * float(x[605]))+ (0.37290174 * float(x[606]))+ (0.7403731 * float(x[607]))+ (0.060456898 * float(x[608]))+ (0.48667374 * float(x[609]))+ (1.5097424 * float(x[610]))+ (0.12882428 * float(x[611]))+ (0.106724605 * float(x[612]))+ (0.9197218 * float(x[613]))+ (1.0265995 * float(x[614]))+ (0.58533454 * float(x[615]))+ (0.4159187 * float(x[616]))+ (0.16069753 * float(x[617]))+ (0.98217046 * float(x[618]))+ (0.34767675 * float(x[619]))+ (1.1438713 * float(x[620]))+ (0.37942722 * float(x[621]))+ (-1.5151981 * float(x[622]))+ (0.6710184 * float(x[623]))+ (-0.5436164 * float(x[624]))+ (-1.1595469 * float(x[625]))+ (0.13182381 * float(x[626]))+ (-1.5371888 * float(x[627]))+ (1.5781358 * float(x[628]))+ (0.50895375 * float(x[629]))+ (0.7394912 * float(x[630]))+ (0.48808736 * float(x[631]))+ (0.4016425 * float(x[632]))+ (0.7940394 * float(x[633]))+ (0.9575478 * float(x[634]))+ (0.51500356 * float(x[635]))+ (3.3052216 * float(x[636]))+ (0.38633537 * float(x[637]))+ (-1.815005 * float(x[638]))+ (0.5857492 * float(x[639]))+ (0.6837958 * float(x[640]))+ (0.05812696 * float(x[641]))+ (1.239726 * float(x[642]))+ (-1.1599265 * float(x[643]))+ (0.5962553 * float(x[644]))+ (0.13430652 * float(x[645]))+ (0.1531151 * float(x[646]))+ (-0.55070776 * float(x[647]))+ (1.2996222 * float(x[648]))+ (0.56284446 * float(x[649])))+ ((0.5872092 * float(x[650]))+ (0.77547634 * float(x[651]))+ (-0.7580237 * float(x[652]))+ (1.0525115 * float(x[653]))+ (0.7415885 * float(x[654]))+ (-0.18891065 * float(x[655]))+ (-0.11605227 * float(x[656]))+ (0.11685095 * float(x[657]))+ (-0.87937367 * float(x[658]))+ (0.5479219 * float(x[659]))+ (0.9592092 * float(x[660]))+ (-1.3858728 * float(x[661]))+ (0.6417129 * float(x[662]))+ (-1.7013553 * float(x[663]))+ (0.41720256 * float(x[664]))+ (0.8125289 * float(x[665]))+ (-0.9574972 * float(x[666]))+ (0.34077144 * float(x[667]))+ (0.6325433 * float(x[668]))+ (1.4980614 * float(x[669]))+ (-0.51490414 * float(x[670]))+ (0.8101577 * float(x[671]))+ (0.11765471 * float(x[672]))+ (0.75475484 * float(x[673]))+ (0.8303997 * float(x[674]))+ (0.26408628 * float(x[675]))+ (0.5979474 * float(x[676]))+ (0.86352104 * float(x[677]))+ (0.39035782 * float(x[678]))+ (-1.318109 * float(x[679]))+ (1.1826097 * float(x[680]))+ (0.66145843 * float(x[681]))+ (-1.4713778 * float(x[682]))+ (-1.1419173 * float(x[683]))+ (0.58207375 * float(x[684]))+ (-0.5308235 * float(x[685]))+ (0.6653595 * float(x[686]))+ (0.50443107 * float(x[687]))+ (-1.2488078 * float(x[688]))+ (0.909631 * float(x[689]))+ (0.90760577 * float(x[690]))+ (2.4050193 * float(x[691]))+ (0.41861036 * float(x[692]))+ (0.8220347 * float(x[693]))+ (-1.1231866 * float(x[694]))+ (0.15226935 * float(x[695]))+ (-0.63953084 * float(x[696]))+ (1.7028717 * float(x[697]))+ (0.6963021 * float(x[698]))+ (0.73374933 * float(x[699])))+ ((1.2216305 * float(x[700]))+ (1.0763685 * float(x[701]))+ (0.8410071 * float(x[702]))+ (-1.1133126 * float(x[703]))+ (-1.1265649 * float(x[704]))+ (-0.2971001 * float(x[705]))+ (1.0266684 * float(x[706]))+ (0.8058688 * float(x[707]))+ (0.34038365 * float(x[708]))+ (-0.7766534 * float(x[709]))+ (0.008877911 * float(x[710]))+ (-0.82277995 * float(x[711]))+ (0.6104101 * float(x[712]))+ (0.737973 * float(x[713]))+ (0.7673146 * float(x[714]))+ (1.2269999 * float(x[715]))+ (0.0065579093 * float(x[716]))+ (0.042867202 * float(x[717]))+ (0.44881293 * float(x[718]))+ (1.0958312 * float(x[719]))+ (-1.3133063 * float(x[720]))+ (-0.5309313 * float(x[721]))+ (0.73422 * float(x[722]))+ (-1.5363852 * float(x[723]))+ (0.98367256 * float(x[724]))+ (1.258248 * float(x[725]))+ (0.6400931 * float(x[726]))+ (0.6600037 * float(x[727]))+ (1.431026 * float(x[728]))+ (-1.1816694 * float(x[729]))+ (1.0218856 * float(x[730]))+ (0.024305085 * float(x[731]))+ (1.1102395 * float(x[732]))+ (0.42512515 * float(x[733]))+ (-1.3303293 * float(x[734]))+ (1.0965753 * float(x[735]))+ (0.31352204 * float(x[736]))+ (0.37802947 * float(x[737]))+ (-1.4860371 * float(x[738]))+ (1.0553808 * float(x[739]))+ (0.47748038 * float(x[740]))+ (0.48222473 * float(x[741]))+ (0.522124 * float(x[742]))+ (0.75961316 * float(x[743]))+ (-1.1277578 * float(x[744]))+ (0.9501607 * float(x[745]))+ (0.50714225 * float(x[746]))+ (0.034128908 * float(x[747]))+ (0.20166783 * float(x[748]))+ (-0.64341736 * float(x[749])))+ ((-0.5563187 * float(x[750]))+ (0.73533857 * float(x[751]))+ (0.7204197 * float(x[752]))+ (0.13986741 * float(x[753]))+ (0.3739557 * float(x[754]))+ (0.44162866 * float(x[755]))+ (0.6404218 * float(x[756]))+ (-0.5468011 * float(x[757]))+ (1.0887473 * float(x[758]))+ (1.3240907 * float(x[759]))+ (0.33599117 * float(x[760]))+ (0.021208689 * float(x[761]))+ (-1.2112987 * float(x[762]))+ (0.68902946 * float(x[763]))+ (-0.54482245 * float(x[764]))+ (0.414041 * float(x[765]))+ (3.2806995 * float(x[766]))+ (0.6273164 * float(x[767]))+ (0.020205388 * float(x[768]))+ (1.6023749 * float(x[769]))+ (2.081725 * float(x[770]))+ (0.027254688 * float(x[771]))+ (-1.2350768 * float(x[772]))+ (-0.9671861 * float(x[773]))+ (-1.0451874 * float(x[774]))+ (0.9594925 * float(x[775]))+ (1.502157 * float(x[776]))+ (-0.29012945 * float(x[777]))+ (0.23930287 * float(x[778]))+ (0.6320342 * float(x[779]))+ (0.18454832 * float(x[780]))+ (0.420993 * float(x[781]))+ (0.4051682 * float(x[782]))+ (-1.0399908 * float(x[783]))+ (0.19516894 * float(x[784]))+ (0.94736254 * float(x[785]))+ (0.60689765 * float(x[786]))+ (0.8242738 * float(x[787]))+ (0.38004348 * float(x[788]))+ (1.2238497 * float(x[789]))+ (0.4937296 * float(x[790]))+ (0.6524539 * float(x[791]))+ (0.41807994 * float(x[792]))+ (1.5852197 * float(x[793]))+ (0.68322414 * float(x[794]))+ (0.7133632 * float(x[795]))+ (0.8547317 * float(x[796]))+ (-0.01673061 * float(x[797]))+ (-0.31604594 * float(x[798]))+ (0.8486401 * float(x[799])))+ ((-1.2058728 * float(x[800]))+ (0.80556065 * float(x[801]))+ (0.5105418 * float(x[802]))+ (0.8318943 * float(x[803]))+ (0.7230609 * float(x[804]))+ (0.48516777 * float(x[805]))+ (-1.5039713 * float(x[806]))+ (-1.4355755 * float(x[807]))+ (0.6740457 * float(x[808]))+ (2.4557447 * float(x[809]))+ (0.507682 * float(x[810]))+ (0.49049997 * float(x[811]))+ (-1.1171212 * float(x[812]))+ (-1.2571266 * float(x[813]))+ (0.42842686 * float(x[814]))+ (-0.76100945 * float(x[815]))+ (0.8224326 * float(x[816]))+ (0.67081684 * float(x[817]))+ (-1.3443387 * float(x[818]))+ (-1.7668549 * float(x[819]))+ (0.535101 * float(x[820]))+ (1.0063586 * float(x[821]))+ (-0.85725176 * float(x[822]))+ (0.056822646 * float(x[823]))+ (1.0746957 * float(x[824]))+ (-1.1202441 * float(x[825]))+ (1.558606 * float(x[826]))+ (0.31335467 * float(x[827]))+ (0.43699065 * float(x[828]))+ (0.7697359 * float(x[829]))+ (0.7177637 * float(x[830]))+ (-0.2315659 * float(x[831]))+ (0.7478482 * float(x[832]))+ (0.6147833 * float(x[833]))+ (-0.28771994 * float(x[834]))+ (0.4923782 * float(x[835]))+ (0.91176754 * float(x[836]))+ (0.9479929 * float(x[837]))+ (1.5551372 * float(x[838]))+ (0.8841723 * float(x[839]))+ (-1.2268336 * float(x[840]))+ (-0.3093037 * float(x[841]))+ (0.85030824 * float(x[842]))+ (0.79657406 * float(x[843]))+ (0.5388409 * float(x[844]))+ (1.4900116 * float(x[845]))+ (-1.4222817 * float(x[846]))+ (1.5237547 * float(x[847]))+ (-1.0712253 * float(x[848]))+ (-1.7914088 * float(x[849])))+ ((0.8057144 * float(x[850]))+ (1.1056437 * float(x[851]))+ (0.007960809 * float(x[852]))+ (0.3003498 * float(x[853]))+ (-0.013046797 * float(x[854]))+ (0.8987176 * float(x[855]))+ (0.9173411 * float(x[856]))+ (0.10681529 * float(x[857]))+ (0.67257655 * float(x[858]))+ (0.97420746 * float(x[859]))+ (-2.418104 * float(x[860]))+ (0.3714294 * float(x[861]))+ (0.9613636 * float(x[862]))+ (-1.0129464 * float(x[863]))+ (0.6822439 * float(x[864]))+ (-0.015225626 * float(x[865]))+ (-0.3399742 * float(x[866]))+ (0.5205481 * float(x[867]))+ (0.54258776 * float(x[868]))+ (1.6154314 * float(x[869]))+ (-1.1813035 * float(x[870]))+ (0.0038741268 * float(x[871]))+ (0.22831425 * float(x[872]))+ (-1.1439601 * float(x[873]))+ (-1.2494226 * float(x[874]))+ (1.1521132 * float(x[875]))+ (0.5893907 * float(x[876]))+ (0.0015377337 * float(x[877]))+ (0.13364415 * float(x[878]))+ (0.11266273 * float(x[879]))+ (-0.55853033 * float(x[880]))+ (-0.20196648 * float(x[881]))+ (0.72637653 * float(x[882]))+ (0.9245231 * float(x[883]))+ (1.5482832 * float(x[884]))+ (0.79724145 * float(x[885]))+ (0.5141987 * float(x[886]))+ (0.53562206 * float(x[887]))+ (2.8525608 * float(x[888]))+ (0.6335583 * float(x[889]))+ (-1.2469043 * float(x[890]))+ (0.20783934 * float(x[891]))+ (0.22040957 * float(x[892]))+ (0.12450009 * float(x[893]))+ (0.066922665 * float(x[894]))+ (0.3796761 * float(x[895]))+ (0.4805047 * float(x[896]))+ (1.8218331 * float(x[897]))+ (-0.21918634 * float(x[898]))+ (0.87877846 * float(x[899])))+ ((0.64356315 * float(x[900]))+ (0.83920246 * float(x[901]))+ (0.8044136 * float(x[902]))+ (-0.5640316 * float(x[903]))+ (0.95749354 * float(x[904]))+ (-0.35320637 * float(x[905]))+ (3.3401682 * float(x[906]))+ (0.13054892 * float(x[907]))+ (-0.032801345 * float(x[908]))+ (0.56864786 * float(x[909]))+ (0.9944282 * float(x[910]))+ (0.9466108 * float(x[911]))+ (0.9103669 * float(x[912]))+ (0.430849 * float(x[913]))+ (3.0995786 * float(x[914]))+ (0.37301472 * float(x[915]))+ (1.2354614 * float(x[916]))+ (1.7060012 * float(x[917]))+ (1.6389164 * float(x[918]))+ (1.2302812 * float(x[919]))+ (1.6266773 * float(x[920]))+ (1.1666677 * float(x[921]))+ (0.43962112 * float(x[922]))+ (2.3053908 * float(x[923]))+ (0.47300187 * float(x[924]))+ (-0.8675144 * float(x[925]))+ (0.017455652 * float(x[926]))+ (-1.0270267 * float(x[927]))+ (0.9921189 * float(x[928]))+ (0.12720343 * float(x[929]))+ (-1.3285074 * float(x[930]))+ (0.4943555 * float(x[931]))+ (0.6216212 * float(x[932]))+ (0.2061278 * float(x[933]))+ (1.0069587 * float(x[934]))+ (0.75797045 * float(x[935]))+ (0.62266284 * float(x[936]))+ (0.8144424 * float(x[937]))+ (-0.4949302 * float(x[938]))+ (0.15591985 * float(x[939]))+ (0.36096713 * float(x[940]))+ (0.5123134 * float(x[941]))+ (-1.1700677 * float(x[942]))+ (-1.1665077 * float(x[943]))+ (-1.1908615 * float(x[944]))+ (0.40969592 * float(x[945]))+ (0.53513426 * float(x[946]))+ (-0.31985927 * float(x[947]))+ (-1.5082253 * float(x[948]))+ (-0.6312786 * float(x[949])))+ ((1.5409381 * float(x[950]))+ (-0.9591758 * float(x[951]))+ (0.059157383 * float(x[952]))+ (-0.6782363 * float(x[953]))+ (0.12562199 * float(x[954]))+ (-1.1613295 * float(x[955]))+ (0.63812554 * float(x[956]))+ (0.27782297 * float(x[957]))+ (1.8542064 * float(x[958]))+ (0.9295117 * float(x[959]))+ (-1.5519522 * float(x[960]))+ (0.16520335 * float(x[961]))+ (0.9447993 * float(x[962]))+ (-1.0697317 * float(x[963]))+ (0.5685853 * float(x[964]))+ (0.8696109 * float(x[965]))+ (0.37210754 * float(x[966]))+ (-1.5516454 * float(x[967]))+ (-1.0221326 * float(x[968]))+ (-0.6268432 * float(x[969]))+ (0.6215248 * float(x[970]))+ (0.76502806 * float(x[971]))+ (-1.5840491 * float(x[972]))+ (-0.982394 * float(x[973]))+ (0.6691121 * float(x[974]))+ (0.03168296 * float(x[975]))+ (-0.95095605 * float(x[976]))+ (0.6616759 * float(x[977]))+ (0.24986112 * float(x[978]))+ (0.009431867 * float(x[979]))+ (-0.06072872 * float(x[980]))+ (1.2551603 * float(x[981]))+ (1.5772555 * float(x[982]))+ (-2.6846619 * float(x[983]))+ (0.9286964 * float(x[984]))+ (1.8047496 * float(x[985]))+ (-1.1473856 * float(x[986]))+ (-0.7686722 * float(x[987]))+ (0.44611636 * float(x[988]))+ (0.5200353 * float(x[989]))+ (-1.3930317 * float(x[990]))+ (2.4096625 * float(x[991]))+ (0.5312504 * float(x[992]))+ (-1.5861213 * float(x[993]))+ (0.5112471 * float(x[994]))+ (0.4194036 * float(x[995]))+ (0.22581756 * float(x[996]))+ (1.2541527 * float(x[997]))+ (0.5680696 * float(x[998]))+ (0.29538038 * float(x[999])))+ ((0.8157427 * float(x[1000]))+ (0.5536765 * float(x[1001]))+ (-1.0094683 * float(x[1002]))+ (0.38490105 * float(x[1003]))+ (0.50441885 * float(x[1004]))+ (0.32162502 * float(x[1005]))+ (-0.77906674 * float(x[1006]))+ (-1.3112715 * float(x[1007]))+ (-1.9653907 * float(x[1008]))+ (0.37630078 * float(x[1009]))+ (-1.1938167 * float(x[1010]))+ (0.29965204 * float(x[1011]))+ (0.25702858 * float(x[1012]))+ (0.012585962 * float(x[1013]))+ (-0.6920618 * float(x[1014]))+ (1.7180955 * float(x[1015]))+ (-1.4517778 * float(x[1016]))+ (-1.0415329 * float(x[1017]))+ (1.7687268 * float(x[1018]))+ (0.10456041 * float(x[1019]))+ (0.42973197 * float(x[1020]))+ (2.6869855 * float(x[1021]))+ (-3.34775 * float(x[1022]))+ (0.061945576 * float(x[1023]))+ (-1.8802466 * float(x[1024]))+ (-0.035758287 * float(x[1025]))+ (1.6891772 * float(x[1026]))+ (0.16704173 * float(x[1027]))+ (0.8699059 * float(x[1028]))+ (0.69399285 * float(x[1029]))+ (0.65398747 * float(x[1030]))+ (0.02293767 * float(x[1031]))+ (1.8874128 * float(x[1032]))+ (0.94208187 * float(x[1033]))+ (0.011288457 * float(x[1034]))+ (-1.8491452 * float(x[1035]))+ (0.383421 * float(x[1036]))+ (0.41842043 * float(x[1037]))+ (0.8609739 * float(x[1038]))+ (0.7876056 * float(x[1039]))+ (-1.5929341 * float(x[1040]))+ (-0.9635011 * float(x[1041]))+ (-1.0411764 * float(x[1042]))+ (1.8725516 * float(x[1043]))+ (0.30989847 * float(x[1044]))+ (-1.7787279 * float(x[1045]))+ (-3.1080892 * float(x[1046]))+ (-0.5919635 * float(x[1047]))+ (-1.1648868 * float(x[1048]))+ (-1.1727399 * float(x[1049])))+ ((0.84540915 * float(x[1050]))+ (0.3461733 * float(x[1051]))+ (-1.5124183 * float(x[1052]))+ (1.5478743 * float(x[1053]))+ (-1.5282907 * float(x[1054]))+ (-1.396326 * float(x[1055]))+ (0.21520546 * float(x[1056]))+ (-1.2471143 * float(x[1057]))+ (-1.9264379 * float(x[1058]))+ (-0.32943082 * float(x[1059]))+ (-2.5338812 * float(x[1060]))+ (-0.6201139 * float(x[1061]))+ (0.78291464 * float(x[1062]))+ (0.89232564 * float(x[1063]))+ (2.0520236 * float(x[1064]))+ (-1.2113822 * float(x[1065]))+ (0.6089179 * float(x[1066]))+ (0.8514091 * float(x[1067]))+ (0.45558786 * float(x[1068]))+ (0.96010554 * float(x[1069]))+ (0.38975498 * float(x[1070]))+ (0.3580014 * float(x[1071]))+ (1.8120538 * float(x[1072]))+ (-1.2414067 * float(x[1073]))+ (0.4677366 * float(x[1074]))+ (-1.5603608 * float(x[1075]))+ (0.45382255 * float(x[1076]))+ (0.5665459 * float(x[1077]))+ (0.27441275 * float(x[1078]))+ (0.16132805 * float(x[1079]))+ (1.0461745 * float(x[1080]))+ (-1.453547 * float(x[1081]))+ (1.2344639 * float(x[1082]))+ (0.81474704 * float(x[1083]))+ (-0.90371484 * float(x[1084]))+ (0.9959192 * float(x[1085]))+ (-0.98869675 * float(x[1086]))+ (3.8700626 * float(x[1087]))+ (-0.92111737 * float(x[1088]))+ (-0.04750481 * float(x[1089]))+ (-1.6142255 * float(x[1090]))+ (1.7978351 * float(x[1091]))+ (-0.96713436 * float(x[1092]))+ (-0.024591867 * float(x[1093]))+ (0.8077778 * float(x[1094]))+ (0.15238726 * float(x[1095]))+ (-0.47086427 * float(x[1096]))+ (-0.6465834 * float(x[1097]))+ (0.5873575 * float(x[1098]))+ (0.8215288 * float(x[1099])))+ ((-1.3144721 * float(x[1100]))+ (0.49581888 * float(x[1101]))+ (0.86399627 * float(x[1102]))+ (0.41257864 * float(x[1103]))+ (0.69612116 * float(x[1104]))+ (0.5054127 * float(x[1105]))+ (0.41568065 * float(x[1106]))+ (0.31870866 * float(x[1107]))+ (-0.4238081 * float(x[1108]))+ (2.2238019 * float(x[1109]))+ (-1.361892 * float(x[1110]))+ (0.78419995 * float(x[1111]))+ (-1.2223785 * float(x[1112]))+ (0.8792013 * float(x[1113]))+ (1.5984656 * float(x[1114]))+ (-0.77184933 * float(x[1115]))+ (-2.3583026 * float(x[1116]))+ (1.586569 * float(x[1117]))+ (-0.4486163 * float(x[1118]))+ (0.66201824 * float(x[1119]))+ (0.412122 * float(x[1120]))+ (0.27398112 * float(x[1121]))+ (2.9340737 * float(x[1122]))+ (0.02781618 * float(x[1123]))+ (0.22241136 * float(x[1124]))+ (-0.5021189 * float(x[1125]))+ (0.7736607 * float(x[1126]))+ (0.9695926 * float(x[1127]))+ (-1.4949881 * float(x[1128]))+ (-1.1668577 * float(x[1129]))+ (-1.039131 * float(x[1130]))+ (-0.634369 * float(x[1131]))+ (1.2014195 * float(x[1132]))+ (0.7888371 * float(x[1133]))+ (0.6269241 * float(x[1134]))+ (-1.2488316 * float(x[1135]))+ (0.030075286 * float(x[1136]))+ (0.25386018 * float(x[1137]))+ (0.6469729 * float(x[1138]))+ (1.6600367 * float(x[1139]))+ (-1.6690929 * float(x[1140]))+ (-1.4803443 * float(x[1141]))+ (-0.6774777 * float(x[1142]))+ (-0.463664 * float(x[1143]))+ (0.71243256 * float(x[1144]))+ (0.42920673 * float(x[1145]))+ (-1.6976029 * float(x[1146]))+ (0.7339781 * float(x[1147]))+ (-1.1636266 * float(x[1148]))+ (-1.2049638 * float(x[1149])))+ ((0.94709224 * float(x[1150]))+ (0.8568971 * float(x[1151]))+ (0.24667776 * float(x[1152]))+ (-0.49194822 * float(x[1153]))+ (-0.5078366 * float(x[1154]))+ (0.565945 * float(x[1155]))+ (0.3817215 * float(x[1156]))+ (-1.0160487 * float(x[1157]))+ (0.94250363 * float(x[1158]))+ (0.7031151 * float(x[1159]))+ (0.8524081 * float(x[1160]))+ (2.5232828 * float(x[1161]))+ (0.18979485 * float(x[1162]))+ (0.40210927 * float(x[1163]))+ (-0.9814534 * float(x[1164]))+ (-1.6865275 * float(x[1165]))+ (0.26602483 * float(x[1166]))+ (-0.9052129 * float(x[1167]))+ (0.26340196 * float(x[1168]))+ (-1.1960001 * float(x[1169]))+ (0.18639411 * float(x[1170]))+ (0.8921473 * float(x[1171]))+ (1.5854964 * float(x[1172]))+ (0.6475865 * float(x[1173]))+ (-1.141044 * float(x[1174]))+ (0.3932514 * float(x[1175]))+ (1.8245646 * float(x[1176]))+ (-1.134788 * float(x[1177]))+ (-1.2806963 * float(x[1178]))+ (0.666476 * float(x[1179]))+ (-1.7309886 * float(x[1180]))+ (0.6421708 * float(x[1181]))+ (0.50029707 * float(x[1182]))+ (0.66359353 * float(x[1183]))+ (0.67292225 * float(x[1184]))+ (-1.0169824 * float(x[1185]))+ (0.71504843 * float(x[1186]))+ (0.7263639 * float(x[1187]))+ (-1.6192871 * float(x[1188]))+ (0.29525465 * float(x[1189]))+ (-1.2066902 * float(x[1190]))+ (0.7257757 * float(x[1191]))+ (0.65846753 * float(x[1192]))+ (-0.0017202497 * float(x[1193]))+ (0.08752078 * float(x[1194]))+ (1.5891198 * float(x[1195]))+ (0.23592336 * float(x[1196]))+ (-0.081742905 * float(x[1197]))+ (-0.4700085 * float(x[1198]))+ (0.3417542 * float(x[1199])))+ ((-1.0640783 * float(x[1200]))+ (-1.4432828 * float(x[1201]))+ (-0.05643984 * float(x[1202]))+ (-1.257057 * float(x[1203]))+ (-0.6716063 * float(x[1204]))+ (0.27982554 * float(x[1205]))+ (1.3532786 * float(x[1206]))+ (-0.14459428 * float(x[1207]))+ (-1.2842307 * float(x[1208]))+ (0.2791916 * float(x[1209]))+ (0.11681136 * float(x[1210]))+ (-1.7089667 * float(x[1211]))+ (1.6046185 * float(x[1212]))+ (-1.4107791 * float(x[1213]))+ (0.15514418 * float(x[1214]))+ (0.51114243 * float(x[1215]))+ (0.6996504 * float(x[1216]))+ (0.7513713 * float(x[1217]))+ (-0.4393455 * float(x[1218]))+ (-0.9622824 * float(x[1219]))+ (-0.99663854 * float(x[1220]))+ (1.7969991 * float(x[1221]))+ (-0.64138216 * float(x[1222]))+ (-1.2497422 * float(x[1223]))+ (-1.9225017 * float(x[1224]))+ (0.372401 * float(x[1225]))+ (0.19152546 * float(x[1226]))+ (-1.0390393 * float(x[1227]))+ (-2.108968 * float(x[1228]))+ (-3.2672696 * float(x[1229]))+ (-0.6495584 * float(x[1230]))+ (0.13562728 * float(x[1231]))+ (-1.5400537 * float(x[1232]))+ (0.46705097 * float(x[1233]))+ (-1.0542336 * float(x[1234]))+ (-0.6214389 * float(x[1235]))+ (-1.1715535 * float(x[1236]))+ (1.6580652 * float(x[1237]))+ (2.5009089 * float(x[1238]))+ (0.579718 * float(x[1239]))+ (0.050334703 * float(x[1240]))+ (0.4301028 * float(x[1241]))+ (0.093343906 * float(x[1242]))+ (0.01768564 * float(x[1243]))+ (0.24300684 * float(x[1244]))+ (0.6124487 * float(x[1245]))+ (0.12308535 * float(x[1246]))+ (-3.0061615 * float(x[1247]))+ (0.0963893 * float(x[1248]))+ (-0.6103444 * float(x[1249])))+ ((-0.44636285 * float(x[1250]))+ (0.96486753 * float(x[1251]))+ (0.22145551 * float(x[1252]))+ (0.932943 * float(x[1253]))+ (-1.8434546 * float(x[1254]))+ (0.5217696 * float(x[1255]))+ (0.4994634 * float(x[1256]))+ (-0.96750796 * float(x[1257]))+ (-0.8314569 * float(x[1258]))+ (0.6096135 * float(x[1259]))+ (-0.92971236 * float(x[1260]))+ (1.6938431 * float(x[1261]))+ (0.06756277 * float(x[1262]))+ (0.41447628 * float(x[1263]))+ (1.4117131 * float(x[1264]))+ (-1.3136448 * float(x[1265]))+ (-0.9439873 * float(x[1266]))+ (1.7153583 * float(x[1267]))+ (0.9984259 * float(x[1268]))+ (0.79768384 * float(x[1269]))+ (-1.123407 * float(x[1270]))+ (-1.6460499 * float(x[1271]))+ (0.21229742 * float(x[1272]))+ (1.690959 * float(x[1273]))+ (-0.018422682 * float(x[1274]))+ (0.33732307 * float(x[1275]))+ (-3.636322 * float(x[1276]))+ (0.5939858 * float(x[1277]))+ (1.3477591 * float(x[1278]))+ (0.7164486 * float(x[1279]))+ (0.7555927 * float(x[1280]))+ (0.69773036 * float(x[1281]))+ (0.7248777 * float(x[1282]))+ (-1.2806207 * float(x[1283]))+ (-1.2677696 * float(x[1284]))+ (0.9551334 * float(x[1285]))+ (1.7106056 * float(x[1286]))+ (0.28217423 * float(x[1287]))+ (-1.6083771 * float(x[1288]))+ (2.9720585 * float(x[1289]))+ (0.23318258 * float(x[1290]))+ (-0.96087277 * float(x[1291]))+ (1.219841 * float(x[1292]))+ (-1.6738896 * float(x[1293]))+ (-1.1546434 * float(x[1294]))+ (0.098123424 * float(x[1295]))+ (-1.2485297 * float(x[1296]))+ (0.5652591 * float(x[1297]))+ (0.5584451 * float(x[1298]))+ (0.28127283 * float(x[1299])))+ ((0.35586482 * float(x[1300]))+ (0.03187365 * float(x[1301]))+ (0.3575705 * float(x[1302]))+ (0.33993843 * float(x[1303]))+ (-0.1044238 * float(x[1304]))+ (2.0633786 * float(x[1305]))+ (-2.358394 * float(x[1306]))+ (0.21125501 * float(x[1307]))+ (0.82529783 * float(x[1308]))+ (-1.5894406 * float(x[1309]))+ (0.66022336 * float(x[1310]))+ (-1.1447339 * float(x[1311]))+ (-1.2881598 * float(x[1312]))+ (2.9490476 * float(x[1313]))+ (3.2662127 * float(x[1314]))+ (1.2289603 * float(x[1315]))+ (0.1444096 * float(x[1316]))+ (-1.256138 * float(x[1317]))+ (-1.28578 * float(x[1318]))+ (-0.74112964 * float(x[1319]))+ (0.1198201 * float(x[1320]))+ (-0.6553934 * float(x[1321]))+ (1.7422019 * float(x[1322]))+ (0.13012701 * float(x[1323]))+ (-0.91720206 * float(x[1324]))+ (0.80083287 * float(x[1325]))+ (-1.5558301 * float(x[1326]))+ (-1.9211922 * float(x[1327]))+ (0.5568108 * float(x[1328]))+ (0.40182668 * float(x[1329]))+ (-0.9068587 * float(x[1330]))+ (0.37366307 * float(x[1331]))+ (0.025324322 * float(x[1332]))+ (-0.6573773 * float(x[1333]))+ (0.1853959 * float(x[1334]))+ (0.2495081 * float(x[1335]))+ (1.357199 * float(x[1336]))+ (-1.1257696 * float(x[1337]))+ (-1.848107 * float(x[1338]))+ (-1.8607109 * float(x[1339]))+ (0.4855416 * float(x[1340]))+ (-0.7664761 * float(x[1341]))+ (-1.5739627 * float(x[1342]))+ (-0.13629341 * float(x[1343]))+ (-1.4574279 * float(x[1344]))+ (-1.0664244 * float(x[1345]))+ (-1.2937355 * float(x[1346]))+ (-0.39243 * float(x[1347]))+ (-1.239608 * float(x[1348]))+ (0.37973467 * float(x[1349])))+ ((0.036528427 * float(x[1350]))+ (-0.7726897 * float(x[1351]))+ (-0.57602465 * float(x[1352]))+ (-1.4857979 * float(x[1353]))+ (0.36289176 * float(x[1354]))+ (-2.0449853 * float(x[1355]))+ (0.6660609 * float(x[1356]))+ (-0.9821926 * float(x[1357]))+ (-0.7942447 * float(x[1358]))+ (0.8524175 * float(x[1359]))+ (0.5326385 * float(x[1360]))+ (-0.97502315 * float(x[1361]))+ (-1.9293462 * float(x[1362]))+ (1.4924574 * float(x[1363]))+ (0.3009221 * float(x[1364]))+ (0.8565067 * float(x[1365]))+ (0.7001803 * float(x[1366]))+ (1.6150105 * float(x[1367]))+ (-0.7512031 * float(x[1368]))+ (0.449078 * float(x[1369]))+ (1.0086114 * float(x[1370]))+ (0.2091227 * float(x[1371]))+ (0.6582567 * float(x[1372]))+ (-0.024415564 * float(x[1373]))+ (0.010730468 * float(x[1374]))+ (0.16508932 * float(x[1375]))+ (-1.4401089 * float(x[1376]))+ (0.46157202 * float(x[1377]))+ (0.41677877 * float(x[1378]))+ (0.9015825 * float(x[1379]))+ (-3.359171 * float(x[1380]))+ (0.6852883 * float(x[1381]))+ (0.93141055 * float(x[1382]))+ (-0.9512339 * float(x[1383]))+ (0.74037963 * float(x[1384]))+ (-1.8241389 * float(x[1385]))+ (0.9546527 * float(x[1386]))+ (0.52232075 * float(x[1387]))+ (3.2712703 * float(x[1388]))+ (0.012691872 * float(x[1389]))+ (0.5742959 * float(x[1390]))+ (-1.6142238 * float(x[1391]))+ (-0.95377845 * float(x[1392]))+ (-1.024942 * float(x[1393]))+ (-0.46502352 * float(x[1394]))+ (-0.98749703 * float(x[1395]))+ (0.018080587 * float(x[1396]))+ (-0.5097341 * float(x[1397]))+ (-1.2486681 * float(x[1398]))+ (-1.1263933 * float(x[1399])))+ ((-1.2289143 * float(x[1400]))+ (-0.05542651 * float(x[1401]))+ (-1.8685223 * float(x[1402]))+ (1.6254303 * float(x[1403]))+ (-1.5318292 * float(x[1404]))+ (0.31032595 * float(x[1405]))+ (0.44410953 * float(x[1406]))+ (1.6807283 * float(x[1407]))+ (-1.1692686 * float(x[1408]))+ (0.012849994 * float(x[1409]))+ (-0.95035946 * float(x[1410]))+ (-0.9646303 * float(x[1411]))+ (0.7415234 * float(x[1412]))+ (-1.3220311 * float(x[1413]))+ (0.67010224 * float(x[1414]))+ (0.5528414 * float(x[1415]))+ (0.050704807 * float(x[1416]))+ (1.0932822 * float(x[1417]))+ (0.43127933 * float(x[1418]))+ (0.39622864 * float(x[1419]))+ (0.45917064 * float(x[1420]))+ (1.2879814 * float(x[1421]))+ (-0.48369038 * float(x[1422]))+ (-1.9666281 * float(x[1423]))+ (-0.4488102 * float(x[1424]))+ (0.72823644 * float(x[1425]))+ (0.02517058 * float(x[1426]))+ (-1.4709063 * float(x[1427]))+ (-2.0348797 * float(x[1428]))+ (0.8598821 * float(x[1429]))+ (1.215351 * float(x[1430]))+ (-0.5611425 * float(x[1431]))+ (0.13025081 * float(x[1432]))+ (0.27769688 * float(x[1433]))+ (-2.1701465 * float(x[1434]))+ (0.17033784 * float(x[1435]))+ (-1.861001 * float(x[1436]))+ (-1.0842057 * float(x[1437]))+ (1.3563639 * float(x[1438]))+ (-0.018146383 * float(x[1439]))+ (0.359144 * float(x[1440]))+ (0.16913924 * float(x[1441]))+ (0.25970885 * float(x[1442]))+ (0.19563 * float(x[1443]))+ (0.8620737 * float(x[1444]))+ (-3.5121589 * float(x[1445]))+ (-1.0980241 * float(x[1446]))+ (0.7097588 * float(x[1447]))+ (1.2045788 * float(x[1448]))+ (0.3642608 * float(x[1449])))+ ((2.8517077 * float(x[1450]))+ (1.4501812 * float(x[1451]))+ (-1.134772 * float(x[1452]))+ (0.84155804 * float(x[1453]))+ (-0.6251433 * float(x[1454]))+ (0.021231314 * float(x[1455]))+ (0.65938973 * float(x[1456]))+ (0.19437715 * float(x[1457]))+ (1.4099267 * float(x[1458]))+ (2.3046412 * float(x[1459]))+ (0.5006704 * float(x[1460]))+ (0.5178966 * float(x[1461]))+ (1.1686896 * float(x[1462]))+ (0.54045165 * float(x[1463]))+ (-1.7959952 * float(x[1464]))+ (-0.4266502 * float(x[1465]))+ (0.24942438 * float(x[1466]))+ (0.4213749 * float(x[1467]))+ (1.3662066 * float(x[1468]))+ (-0.8794211 * float(x[1469]))+ (0.21490158 * float(x[1470]))+ (1.3355548 * float(x[1471]))+ (1.3781668 * float(x[1472]))+ (1.7226115 * float(x[1473]))+ (1.7167655 * float(x[1474]))+ (1.0296589 * float(x[1475]))+ (-0.83238035 * float(x[1476]))+ (0.9435035 * float(x[1477]))+ (0.5286861 * float(x[1478]))+ (1.6023487 * float(x[1479]))+ (2.2326303 * float(x[1480]))+ (1.2189893 * float(x[1481]))+ (1.5544914 * float(x[1482]))+ (0.36662182 * float(x[1483]))+ (-2.0885932 * float(x[1484]))+ (-0.72418755 * float(x[1485]))+ (0.7104881 * float(x[1486]))+ (0.33203948 * float(x[1487]))+ (1.7761005 * float(x[1488]))+ (0.69087654 * float(x[1489]))+ (1.4435687 * float(x[1490]))+ (-0.25084737 * float(x[1491]))+ (1.3592905 * float(x[1492]))+ (2.588585 * float(x[1493]))+ (-0.6791815 * float(x[1494]))+ (0.7144235 * float(x[1495]))+ (0.39297187 * float(x[1496]))+ (1.1786882 * float(x[1497]))+ (1.1149104 * float(x[1498]))+ (0.25659147 * float(x[1499])))+ ((-0.41809052 * float(x[1500]))+ (-0.38801038 * float(x[1501]))+ (-0.0063292403 * float(x[1502]))+ (2.417074 * float(x[1503]))+ (2.271927 * float(x[1504]))+ (1.136975 * float(x[1505]))+ (0.40431207 * float(x[1506]))+ (-0.8278123 * float(x[1507]))+ (0.8610502 * float(x[1508]))+ (-1.4510623 * float(x[1509]))+ (-0.13058968 * float(x[1510]))+ (1.343862 * float(x[1511]))+ (0.6974255 * float(x[1512]))+ (-1.8413693 * float(x[1513]))+ (-0.13539346 * float(x[1514]))+ (0.8072135 * float(x[1515]))+ (-0.1530212 * float(x[1516]))+ (0.30566776 * float(x[1517]))+ (-0.28004143 * float(x[1518]))+ (1.3494431 * float(x[1519]))+ (0.25120535 * float(x[1520]))+ (-0.26841334 * float(x[1521]))+ (0.4299317 * float(x[1522]))+ (1.257058 * float(x[1523]))+ (0.72595984 * float(x[1524]))+ (0.7331035 * float(x[1525]))+ (-1.3215628 * float(x[1526]))+ (-0.4597324 * float(x[1527]))+ (0.6332632 * float(x[1528]))+ (2.2036867 * float(x[1529]))+ (0.14404914 * float(x[1530]))+ (1.1885468 * float(x[1531]))+ (-1.6360966 * float(x[1532]))+ (2.2768807 * float(x[1533]))+ (-0.191188 * float(x[1534]))+ (-0.14850895 * float(x[1535]))+ (0.8589049 * float(x[1536]))+ (2.1986885 * float(x[1537]))+ (0.92247224 * float(x[1538]))+ (-2.3473046 * float(x[1539]))+ (1.1534377 * float(x[1540]))+ (-2.6222968 * float(x[1541]))+ (0.5647481 * float(x[1542]))+ (0.21040002 * float(x[1543]))+ (-0.15726468 * float(x[1544]))+ (2.5957537 * float(x[1545]))+ (2.357453 * float(x[1546]))+ (0.13186006 * float(x[1547]))+ (1.0901835 * float(x[1548]))+ (1.3841548 * float(x[1549])))+ ((1.7819072 * float(x[1550]))+ (0.044221584 * float(x[1551]))+ (-0.8840739 * float(x[1552]))+ (0.75697136 * float(x[1553]))+ (-2.6404183 * float(x[1554]))+ (-2.9324124 * float(x[1555]))+ (-2.997318 * float(x[1556]))+ (-0.5164787 * float(x[1557]))) + 3.935546), 0)
    h_1 = max((((-1.0531677 * float(x[0]))+ (-8.739478 * float(x[1]))+ (-0.179891 * float(x[2]))+ (-0.3648021 * float(x[3]))+ (0.17006198 * float(x[4]))+ (0.30915406 * float(x[5]))+ (-0.010353658 * float(x[6]))+ (-0.05200044 * float(x[7]))+ (-0.034987606 * float(x[8]))+ (0.025594857 * float(x[9]))+ (-0.05778325 * float(x[10]))+ (-0.035364762 * float(x[11]))+ (0.046496294 * float(x[12]))+ (0.0062686857 * float(x[13]))+ (-0.025808897 * float(x[14]))+ (-0.017412849 * float(x[15]))+ (0.17951927 * float(x[16]))+ (-0.040681507 * float(x[17]))+ (0.085512474 * float(x[18]))+ (0.14289805 * float(x[19]))+ (-0.0045020394 * float(x[20]))+ (0.011213899 * float(x[21]))+ (-0.045080382 * float(x[22]))+ (0.028038017 * float(x[23]))+ (0.02317772 * float(x[24]))+ (0.101472445 * float(x[25]))+ (-0.05128032 * float(x[26]))+ (0.024805427 * float(x[27]))+ (0.04046891 * float(x[28]))+ (0.5930805 * float(x[29]))+ (0.029231124 * float(x[30]))+ (0.022987299 * float(x[31]))+ (0.16553468 * float(x[32]))+ (0.05986792 * float(x[33]))+ (0.061734468 * float(x[34]))+ (0.029779848 * float(x[35]))+ (-0.049372863 * float(x[36]))+ (-0.004522823 * float(x[37]))+ (0.068927355 * float(x[38]))+ (0.79694915 * float(x[39]))+ (-0.032477476 * float(x[40]))+ (0.051088557 * float(x[41]))+ (0.032807916 * float(x[42]))+ (0.19204779 * float(x[43]))+ (0.003168404 * float(x[44]))+ (-0.006559126 * float(x[45]))+ (0.014398299 * float(x[46]))+ (0.002204068 * float(x[47]))+ (-0.037528876 * float(x[48]))+ (1.2410929 * float(x[49])))+ ((0.001622051 * float(x[50]))+ (0.20450634 * float(x[51]))+ (-0.023634069 * float(x[52]))+ (0.015890248 * float(x[53]))+ (-0.0501501 * float(x[54]))+ (0.018538423 * float(x[55]))+ (0.033606797 * float(x[56]))+ (-0.0068252087 * float(x[57]))+ (-0.0481751 * float(x[58]))+ (-0.0002254434 * float(x[59]))+ (-0.5255475 * float(x[60]))+ (0.060358603 * float(x[61]))+ (-0.043864585 * float(x[62]))+ (0.05736226 * float(x[63]))+ (0.04637775 * float(x[64]))+ (0.034370214 * float(x[65]))+ (0.042963065 * float(x[66]))+ (0.52629215 * float(x[67]))+ (0.034902677 * float(x[68]))+ (0.041075446 * float(x[69]))+ (-0.014487732 * float(x[70]))+ (-0.007883776 * float(x[71]))+ (0.04422126 * float(x[72]))+ (-2.2333115e-05 * float(x[73]))+ (0.4620643 * float(x[74]))+ (-0.048088193 * float(x[75]))+ (0.034684785 * float(x[76]))+ (0.05137019 * float(x[77]))+ (0.112336695 * float(x[78]))+ (0.010320872 * float(x[79]))+ (0.042809382 * float(x[80]))+ (0.062100183 * float(x[81]))+ (-0.044681214 * float(x[82]))+ (-0.059674997 * float(x[83]))+ (0.049966536 * float(x[84]))+ (-0.0005611703 * float(x[85]))+ (-0.028556809 * float(x[86]))+ (0.020985022 * float(x[87]))+ (-0.023215141 * float(x[88]))+ (-0.039774477 * float(x[89]))+ (0.7768773 * float(x[90]))+ (0.5771729 * float(x[91]))+ (-0.013801964 * float(x[92]))+ (-0.04084848 * float(x[93]))+ (-0.54800415 * float(x[94]))+ (0.028456656 * float(x[95]))+ (0.005048655 * float(x[96]))+ (-0.031150393 * float(x[97]))+ (0.029946595 * float(x[98]))+ (0.010816164 * float(x[99])))+ ((0.27706036 * float(x[100]))+ (-0.04019004 * float(x[101]))+ (0.013574168 * float(x[102]))+ (0.03837476 * float(x[103]))+ (-0.020044642 * float(x[104]))+ (0.029987477 * float(x[105]))+ (-0.038408145 * float(x[106]))+ (0.059346505 * float(x[107]))+ (0.36211905 * float(x[108]))+ (0.0116163045 * float(x[109]))+ (0.027591065 * float(x[110]))+ (0.059665985 * float(x[111]))+ (-0.036596276 * float(x[112]))+ (-0.0005407855 * float(x[113]))+ (0.016537577 * float(x[114]))+ (-0.013998199 * float(x[115]))+ (0.11392265 * float(x[116]))+ (-0.023916155 * float(x[117]))+ (-0.055385828 * float(x[118]))+ (-0.029524986 * float(x[119]))+ (0.019036623 * float(x[120]))+ (0.051105298 * float(x[121]))+ (-0.027840171 * float(x[122]))+ (-0.04363376 * float(x[123]))+ (-0.006703999 * float(x[124]))+ (0.4712215 * float(x[125]))+ (0.020311486 * float(x[126]))+ (-0.49401847 * float(x[127]))+ (0.21462758 * float(x[128]))+ (0.029246911 * float(x[129]))+ (0.04522545 * float(x[130]))+ (-0.00013910607 * float(x[131]))+ (0.02753798 * float(x[132]))+ (-0.03473956 * float(x[133]))+ (0.04836218 * float(x[134]))+ (0.08973323 * float(x[135]))+ (0.014737599 * float(x[136]))+ (-0.46912062 * float(x[137]))+ (-0.06159353 * float(x[138]))+ (2.8532946 * float(x[139]))+ (0.012322418 * float(x[140]))+ (-0.053904682 * float(x[141]))+ (0.08288729 * float(x[142]))+ (-0.023635715 * float(x[143]))+ (-0.022430599 * float(x[144]))+ (1.107063 * float(x[145]))+ (0.025353804 * float(x[146]))+ (0.09068853 * float(x[147]))+ (-0.013160434 * float(x[148]))+ (0.027550064 * float(x[149])))+ ((0.15597181 * float(x[150]))+ (0.014023691 * float(x[151]))+ (-0.023135126 * float(x[152]))+ (-0.026975408 * float(x[153]))+ (0.034809276 * float(x[154]))+ (0.011506557 * float(x[155]))+ (0.05220647 * float(x[156]))+ (0.023354873 * float(x[157]))+ (0.049960084 * float(x[158]))+ (-0.01095452 * float(x[159]))+ (0.049857497 * float(x[160]))+ (-0.028494138 * float(x[161]))+ (0.097353116 * float(x[162]))+ (0.0003711991 * float(x[163]))+ (0.50137866 * float(x[164]))+ (-0.5832854 * float(x[165]))+ (0.055263482 * float(x[166]))+ (-0.03733043 * float(x[167]))+ (-0.55791986 * float(x[168]))+ (-0.04984362 * float(x[169]))+ (0.009737685 * float(x[170]))+ (0.051090613 * float(x[171]))+ (0.04181727 * float(x[172]))+ (0.54452306 * float(x[173]))+ (0.304393 * float(x[174]))+ (-0.0052532037 * float(x[175]))+ (0.016192526 * float(x[176]))+ (-0.025914244 * float(x[177]))+ (0.052641757 * float(x[178]))+ (0.031052388 * float(x[179]))+ (-1.4995112 * float(x[180]))+ (0.053623714 * float(x[181]))+ (-0.00092028454 * float(x[182]))+ (-0.002756808 * float(x[183]))+ (0.04719995 * float(x[184]))+ (-0.016362682 * float(x[185]))+ (1.2731863 * float(x[186]))+ (2.2123659 * float(x[187]))+ (-0.0049812696 * float(x[188]))+ (-0.031945515 * float(x[189]))+ (-0.012341287 * float(x[190]))+ (0.04683207 * float(x[191]))+ (-0.09883382 * float(x[192]))+ (-0.03715785 * float(x[193]))+ (0.13803264 * float(x[194]))+ (-0.01789923 * float(x[195]))+ (0.71978 * float(x[196]))+ (-0.010905594 * float(x[197]))+ (-0.021518517 * float(x[198]))+ (0.03466464 * float(x[199])))+ ((0.048537735 * float(x[200]))+ (0.009541549 * float(x[201]))+ (-0.034997292 * float(x[202]))+ (0.5720661 * float(x[203]))+ (0.048821546 * float(x[204]))+ (-0.030446567 * float(x[205]))+ (0.1988547 * float(x[206]))+ (0.1078293 * float(x[207]))+ (0.021226518 * float(x[208]))+ (-0.03156677 * float(x[209]))+ (-0.037235416 * float(x[210]))+ (-0.021747887 * float(x[211]))+ (-0.01942069 * float(x[212]))+ (0.027001552 * float(x[213]))+ (0.10378189 * float(x[214]))+ (0.052304924 * float(x[215]))+ (-0.03402779 * float(x[216]))+ (-0.01939306 * float(x[217]))+ (0.022579305 * float(x[218]))+ (0.5625395 * float(x[219]))+ (0.059325382 * float(x[220]))+ (0.14639318 * float(x[221]))+ (0.0026141033 * float(x[222]))+ (-0.02778598 * float(x[223]))+ (0.035040975 * float(x[224]))+ (-0.03594831 * float(x[225]))+ (-0.016301002 * float(x[226]))+ (-0.051833913 * float(x[227]))+ (-0.05961997 * float(x[228]))+ (0.03466472 * float(x[229]))+ (0.004213281 * float(x[230]))+ (0.9594995 * float(x[231]))+ (-0.4762864 * float(x[232]))+ (0.032543816 * float(x[233]))+ (0.024818994 * float(x[234]))+ (-0.7892152 * float(x[235]))+ (0.112232424 * float(x[236]))+ (0.029822148 * float(x[237]))+ (0.02146905 * float(x[238]))+ (-0.0017902479 * float(x[239]))+ (0.0092635155 * float(x[240]))+ (0.00027516112 * float(x[241]))+ (-0.045007586 * float(x[242]))+ (0.12906502 * float(x[243]))+ (0.29875168 * float(x[244]))+ (0.030090913 * float(x[245]))+ (-0.036950544 * float(x[246]))+ (-0.020258002 * float(x[247]))+ (-0.029411934 * float(x[248]))+ (0.048951 * float(x[249])))+ ((1.1194152 * float(x[250]))+ (0.5974842 * float(x[251]))+ (0.10887552 * float(x[252]))+ (0.17196561 * float(x[253]))+ (0.015538707 * float(x[254]))+ (0.08826006 * float(x[255]))+ (0.18483892 * float(x[256]))+ (0.012215942 * float(x[257]))+ (0.021086998 * float(x[258]))+ (0.01567974 * float(x[259]))+ (-0.016634908 * float(x[260]))+ (0.005623229 * float(x[261]))+ (0.0075139254 * float(x[262]))+ (-0.021910809 * float(x[263]))+ (0.013260518 * float(x[264]))+ (0.2704183 * float(x[265]))+ (0.023742788 * float(x[266]))+ (0.05340133 * float(x[267]))+ (-0.056003492 * float(x[268]))+ (0.010909324 * float(x[269]))+ (-0.05884666 * float(x[270]))+ (-0.05930732 * float(x[271]))+ (-0.038838036 * float(x[272]))+ (0.11992343 * float(x[273]))+ (-0.12713638 * float(x[274]))+ (-0.0471649 * float(x[275]))+ (0.12146701 * float(x[276]))+ (0.056082554 * float(x[277]))+ (-0.014884214 * float(x[278]))+ (0.16443509 * float(x[279]))+ (-0.028076217 * float(x[280]))+ (-0.024533741 * float(x[281]))+ (-0.00800303 * float(x[282]))+ (0.0067763478 * float(x[283]))+ (0.07846513 * float(x[284]))+ (-0.049659632 * float(x[285]))+ (0.024498932 * float(x[286]))+ (0.017881267 * float(x[287]))+ (0.06066966 * float(x[288]))+ (0.0053245462 * float(x[289]))+ (0.021900833 * float(x[290]))+ (-0.025026392 * float(x[291]))+ (0.030614838 * float(x[292]))+ (-0.003435459 * float(x[293]))+ (0.04597397 * float(x[294]))+ (0.034454904 * float(x[295]))+ (-0.5254623 * float(x[296]))+ (0.16833732 * float(x[297]))+ (0.0023299828 * float(x[298]))+ (0.053444855 * float(x[299])))+ ((-0.036427874 * float(x[300]))+ (0.4761433 * float(x[301]))+ (0.11331026 * float(x[302]))+ (0.059243195 * float(x[303]))+ (-0.028969608 * float(x[304]))+ (0.070873864 * float(x[305]))+ (0.0039237365 * float(x[306]))+ (0.019312069 * float(x[307]))+ (0.031109594 * float(x[308]))+ (0.07793029 * float(x[309]))+ (0.05280713 * float(x[310]))+ (-0.015537839 * float(x[311]))+ (-0.020346254 * float(x[312]))+ (0.22337188 * float(x[313]))+ (0.08145542 * float(x[314]))+ (-0.036176443 * float(x[315]))+ (0.005998604 * float(x[316]))+ (1.0088273 * float(x[317]))+ (0.052018568 * float(x[318]))+ (-0.024340149 * float(x[319]))+ (0.054363392 * float(x[320]))+ (-0.0558264 * float(x[321]))+ (-0.036616605 * float(x[322]))+ (-0.060692053 * float(x[323]))+ (0.015641116 * float(x[324]))+ (0.08873275 * float(x[325]))+ (0.020065144 * float(x[326]))+ (0.09733615 * float(x[327]))+ (-0.03972714 * float(x[328]))+ (-0.031683158 * float(x[329]))+ (0.009306885 * float(x[330]))+ (0.05698657 * float(x[331]))+ (0.05809243 * float(x[332]))+ (-0.0046853945 * float(x[333]))+ (-0.060745813 * float(x[334]))+ (0.010120827 * float(x[335]))+ (-0.023635503 * float(x[336]))+ (-0.013190828 * float(x[337]))+ (0.023696125 * float(x[338]))+ (0.031209305 * float(x[339]))+ (0.027496934 * float(x[340]))+ (0.017716393 * float(x[341]))+ (0.12790352 * float(x[342]))+ (-0.0006578937 * float(x[343]))+ (0.007892795 * float(x[344]))+ (-0.031677872 * float(x[345]))+ (1.7540228 * float(x[346]))+ (-0.007741563 * float(x[347]))+ (0.36811724 * float(x[348]))+ (0.3599719 * float(x[349])))+ ((-0.0062701106 * float(x[350]))+ (-2.284113 * float(x[351]))+ (0.0490665 * float(x[352]))+ (-0.033369936 * float(x[353]))+ (0.33799198 * float(x[354]))+ (0.061503403 * float(x[355]))+ (0.0028709397 * float(x[356]))+ (2.877945 * float(x[357]))+ (0.024641283 * float(x[358]))+ (0.04687217 * float(x[359]))+ (-0.01902834 * float(x[360]))+ (-0.03489835 * float(x[361]))+ (-0.004853282 * float(x[362]))+ (0.048500746 * float(x[363]))+ (0.0053323656 * float(x[364]))+ (0.043090373 * float(x[365]))+ (0.28606892 * float(x[366]))+ (1.2486304 * float(x[367]))+ (0.0021564886 * float(x[368]))+ (0.6634794 * float(x[369]))+ (-0.059016936 * float(x[370]))+ (-0.054217704 * float(x[371]))+ (0.005155511 * float(x[372]))+ (0.23119116 * float(x[373]))+ (0.041660324 * float(x[374]))+ (0.1308056 * float(x[375]))+ (0.026141666 * float(x[376]))+ (0.31100082 * float(x[377]))+ (-0.05353663 * float(x[378]))+ (-0.046898946 * float(x[379]))+ (0.36422783 * float(x[380]))+ (0.0010662451 * float(x[381]))+ (0.07982569 * float(x[382]))+ (-0.019846365 * float(x[383]))+ (-0.009278674 * float(x[384]))+ (0.024196804 * float(x[385]))+ (0.014379285 * float(x[386]))+ (1.1476977 * float(x[387]))+ (0.09258298 * float(x[388]))+ (-0.039564397 * float(x[389]))+ (0.06397777 * float(x[390]))+ (0.01024121 * float(x[391]))+ (0.11747097 * float(x[392]))+ (-0.019220486 * float(x[393]))+ (0.10374192 * float(x[394]))+ (-0.039285287 * float(x[395]))+ (0.04569819 * float(x[396]))+ (-0.017569996 * float(x[397]))+ (-0.041926976 * float(x[398]))+ (0.11314774 * float(x[399])))+ ((0.057066128 * float(x[400]))+ (-0.528249 * float(x[401]))+ (-0.04371642 * float(x[402]))+ (0.05053083 * float(x[403]))+ (-0.49008113 * float(x[404]))+ (-0.028579142 * float(x[405]))+ (0.030086672 * float(x[406]))+ (-0.029826328 * float(x[407]))+ (-0.048569836 * float(x[408]))+ (-0.0063102324 * float(x[409]))+ (-0.58213073 * float(x[410]))+ (-0.012499772 * float(x[411]))+ (0.02493564 * float(x[412]))+ (-0.047078963 * float(x[413]))+ (0.048513032 * float(x[414]))+ (0.20865893 * float(x[415]))+ (0.029997692 * float(x[416]))+ (0.34956804 * float(x[417]))+ (0.4941969 * float(x[418]))+ (-0.031213323 * float(x[419]))+ (0.44188327 * float(x[420]))+ (-0.036436554 * float(x[421]))+ (0.017905846 * float(x[422]))+ (0.014229469 * float(x[423]))+ (0.1692124 * float(x[424]))+ (-0.009215128 * float(x[425]))+ (0.031748854 * float(x[426]))+ (-0.055252694 * float(x[427]))+ (0.2944173 * float(x[428]))+ (0.060206063 * float(x[429]))+ (-0.06137849 * float(x[430]))+ (0.28384027 * float(x[431]))+ (0.03970161 * float(x[432]))+ (0.5343673 * float(x[433]))+ (-0.033057947 * float(x[434]))+ (0.0378346 * float(x[435]))+ (-0.5214783 * float(x[436]))+ (0.0024290383 * float(x[437]))+ (0.100203335 * float(x[438]))+ (0.04672634 * float(x[439]))+ (0.034400858 * float(x[440]))+ (0.14997785 * float(x[441]))+ (0.009464562 * float(x[442]))+ (0.753493 * float(x[443]))+ (0.038637437 * float(x[444]))+ (-0.025439613 * float(x[445]))+ (-0.0067947134 * float(x[446]))+ (0.027227022 * float(x[447]))+ (-0.03005229 * float(x[448]))+ (0.05798933 * float(x[449])))+ ((-1.2601526 * float(x[450]))+ (0.028617725 * float(x[451]))+ (-0.04454785 * float(x[452]))+ (0.019911699 * float(x[453]))+ (0.09776784 * float(x[454]))+ (0.007476166 * float(x[455]))+ (-0.006215874 * float(x[456]))+ (0.64343387 * float(x[457]))+ (-0.044531018 * float(x[458]))+ (-0.04184099 * float(x[459]))+ (-0.052857183 * float(x[460]))+ (0.1022073 * float(x[461]))+ (0.023029462 * float(x[462]))+ (-0.028121512 * float(x[463]))+ (0.0138165355 * float(x[464]))+ (0.067482635 * float(x[465]))+ (0.115787655 * float(x[466]))+ (0.037281975 * float(x[467]))+ (-0.016965881 * float(x[468]))+ (0.1700795 * float(x[469]))+ (-0.015681367 * float(x[470]))+ (0.0593751 * float(x[471]))+ (-0.024632063 * float(x[472]))+ (-0.00067921355 * float(x[473]))+ (0.5892342 * float(x[474]))+ (0.5190766 * float(x[475]))+ (0.023763038 * float(x[476]))+ (-0.033026002 * float(x[477]))+ (0.033226658 * float(x[478]))+ (-0.003940724 * float(x[479]))+ (-0.015682802 * float(x[480]))+ (-0.0012509935 * float(x[481]))+ (0.04316072 * float(x[482]))+ (0.115286775 * float(x[483]))+ (0.34810615 * float(x[484]))+ (0.27941453 * float(x[485]))+ (0.38481754 * float(x[486]))+ (0.09310652 * float(x[487]))+ (0.0066091507 * float(x[488]))+ (-0.017909735 * float(x[489]))+ (0.45000318 * float(x[490]))+ (-0.49897 * float(x[491]))+ (0.3238201 * float(x[492]))+ (-0.02121827 * float(x[493]))+ (-0.0062961467 * float(x[494]))+ (0.068982884 * float(x[495]))+ (0.06535258 * float(x[496]))+ (0.4820719 * float(x[497]))+ (-0.047743946 * float(x[498]))+ (0.022729166 * float(x[499])))+ ((0.15976207 * float(x[500]))+ (0.023713432 * float(x[501]))+ (-0.008454923 * float(x[502]))+ (0.2160065 * float(x[503]))+ (0.01560583 * float(x[504]))+ (0.06036143 * float(x[505]))+ (-0.72101444 * float(x[506]))+ (-0.023534086 * float(x[507]))+ (-0.041725405 * float(x[508]))+ (-0.030082777 * float(x[509]))+ (-0.51345915 * float(x[510]))+ (0.03782338 * float(x[511]))+ (-0.046898402 * float(x[512]))+ (0.040336832 * float(x[513]))+ (0.05180324 * float(x[514]))+ (-0.030568797 * float(x[515]))+ (0.5009666 * float(x[516]))+ (-0.031838324 * float(x[517]))+ (0.01328329 * float(x[518]))+ (-0.028752666 * float(x[519]))+ (1.0342007 * float(x[520]))+ (-0.04151545 * float(x[521]))+ (0.0009914394 * float(x[522]))+ (0.049490742 * float(x[523]))+ (-0.007831778 * float(x[524]))+ (-0.03793954 * float(x[525]))+ (-0.030864157 * float(x[526]))+ (0.18360816 * float(x[527]))+ (-0.03549709 * float(x[528]))+ (-1.062291 * float(x[529]))+ (-0.048411664 * float(x[530]))+ (-0.052149195 * float(x[531]))+ (0.2008384 * float(x[532]))+ (-0.047889546 * float(x[533]))+ (0.0036149945 * float(x[534]))+ (-0.0057745464 * float(x[535]))+ (0.022716202 * float(x[536]))+ (-0.5604946 * float(x[537]))+ (-0.047541954 * float(x[538]))+ (0.05569621 * float(x[539]))+ (-0.061777506 * float(x[540]))+ (0.0839058 * float(x[541]))+ (-0.005181171 * float(x[542]))+ (0.034227718 * float(x[543]))+ (0.042262778 * float(x[544]))+ (-0.9848451 * float(x[545]))+ (0.0080785975 * float(x[546]))+ (-0.54754 * float(x[547]))+ (0.47837725 * float(x[548]))+ (0.36838913 * float(x[549])))+ ((0.011138819 * float(x[550]))+ (-0.78842914 * float(x[551]))+ (0.0026146472 * float(x[552]))+ (0.05527571 * float(x[553]))+ (0.0067254454 * float(x[554]))+ (-0.0099920295 * float(x[555]))+ (-0.05250733 * float(x[556]))+ (0.005785588 * float(x[557]))+ (0.044791102 * float(x[558]))+ (-0.0021838546 * float(x[559]))+ (-0.004129924 * float(x[560]))+ (0.024147123 * float(x[561]))+ (0.2886225 * float(x[562]))+ (-0.004189439 * float(x[563]))+ (0.047947194 * float(x[564]))+ (0.032448784 * float(x[565]))+ (0.050471216 * float(x[566]))+ (0.8875427 * float(x[567]))+ (0.046237394 * float(x[568]))+ (-0.044181645 * float(x[569]))+ (-0.42980686 * float(x[570]))+ (0.0073438436 * float(x[571]))+ (-0.052674744 * float(x[572]))+ (0.59997314 * float(x[573]))+ (0.10512875 * float(x[574]))+ (0.026575215 * float(x[575]))+ (0.0501939 * float(x[576]))+ (-0.0530527 * float(x[577]))+ (0.11614023 * float(x[578]))+ (0.028937384 * float(x[579]))+ (0.359573 * float(x[580]))+ (0.18842298 * float(x[581]))+ (-0.05371252 * float(x[582]))+ (-0.04175131 * float(x[583]))+ (-0.030850273 * float(x[584]))+ (-0.0031404607 * float(x[585]))+ (0.011136472 * float(x[586]))+ (0.052012276 * float(x[587]))+ (0.36792907 * float(x[588]))+ (-0.00715876 * float(x[589]))+ (0.1660934 * float(x[590]))+ (0.047749482 * float(x[591]))+ (0.0310454 * float(x[592]))+ (0.009004235 * float(x[593]))+ (0.015409738 * float(x[594]))+ (0.2965336 * float(x[595]))+ (0.16549519 * float(x[596]))+ (-0.061721902 * float(x[597]))+ (0.29231778 * float(x[598]))+ (0.4104135 * float(x[599])))+ ((0.045541346 * float(x[600]))+ (0.019612 * float(x[601]))+ (0.2326911 * float(x[602]))+ (0.010834977 * float(x[603]))+ (-0.05146017 * float(x[604]))+ (-0.016419556 * float(x[605]))+ (0.06577545 * float(x[606]))+ (-0.0041073114 * float(x[607]))+ (0.12930115 * float(x[608]))+ (0.037903473 * float(x[609]))+ (-0.047110133 * float(x[610]))+ (-0.031314157 * float(x[611]))+ (0.06003104 * float(x[612]))+ (0.06504838 * float(x[613]))+ (0.0021357224 * float(x[614]))+ (0.03212414 * float(x[615]))+ (0.30587125 * float(x[616]))+ (0.12545095 * float(x[617]))+ (-0.025832798 * float(x[618]))+ (-0.0101372115 * float(x[619]))+ (0.10856519 * float(x[620]))+ (-0.0079173185 * float(x[621]))+ (0.036094144 * float(x[622]))+ (-0.050574247 * float(x[623]))+ (0.20172226 * float(x[624]))+ (0.0472783 * float(x[625]))+ (0.312038 * float(x[626]))+ (0.012488544 * float(x[627]))+ (0.020397224 * float(x[628]))+ (0.10438586 * float(x[629]))+ (-0.024801224 * float(x[630]))+ (0.0177918 * float(x[631]))+ (0.038014963 * float(x[632]))+ (-0.025619242 * float(x[633]))+ (0.020370597 * float(x[634]))+ (0.0150008425 * float(x[635]))+ (0.2798848 * float(x[636]))+ (-0.041942053 * float(x[637]))+ (0.8999831 * float(x[638]))+ (-0.035146948 * float(x[639]))+ (0.032640778 * float(x[640]))+ (-0.56672823 * float(x[641]))+ (0.25842556 * float(x[642]))+ (0.02470079 * float(x[643]))+ (-0.053106528 * float(x[644]))+ (0.277549 * float(x[645]))+ (0.6365118 * float(x[646]))+ (0.22854428 * float(x[647]))+ (-0.038720984 * float(x[648]))+ (0.012037902 * float(x[649])))+ ((0.5085624 * float(x[650]))+ (-0.030069664 * float(x[651]))+ (0.3057687 * float(x[652]))+ (0.09702753 * float(x[653]))+ (0.05370524 * float(x[654]))+ (0.5580478 * float(x[655]))+ (0.2000983 * float(x[656]))+ (-0.018160678 * float(x[657]))+ (-0.038013853 * float(x[658]))+ (-0.0021825656 * float(x[659]))+ (0.063748814 * float(x[660]))+ (-0.030845933 * float(x[661]))+ (0.1288308 * float(x[662]))+ (-0.009559143 * float(x[663]))+ (0.010669328 * float(x[664]))+ (-0.050890166 * float(x[665]))+ (0.050007038 * float(x[666]))+ (0.08317295 * float(x[667]))+ (0.06099776 * float(x[668]))+ (-0.024266418 * float(x[669]))+ (0.020913728 * float(x[670]))+ (-0.00852444 * float(x[671]))+ (0.021084744 * float(x[672]))+ (0.058721676 * float(x[673]))+ (0.14068797 * float(x[674]))+ (0.36155096 * float(x[675]))+ (0.061427474 * float(x[676]))+ (0.031289548 * float(x[677]))+ (0.32924822 * float(x[678]))+ (-0.6446727 * float(x[679]))+ (-0.0048596635 * float(x[680]))+ (-0.04939654 * float(x[681]))+ (-0.71577877 * float(x[682]))+ (-0.042698767 * float(x[683]))+ (-0.015735235 * float(x[684]))+ (0.46179774 * float(x[685]))+ (0.30383813 * float(x[686]))+ (-0.0024087057 * float(x[687]))+ (-0.00087525696 * float(x[688]))+ (-0.040539443 * float(x[689]))+ (0.07761552 * float(x[690]))+ (0.41950235 * float(x[691]))+ (0.17862898 * float(x[692]))+ (0.04723362 * float(x[693]))+ (1.1127683 * float(x[694]))+ (0.0010998771 * float(x[695]))+ (0.03390407 * float(x[696]))+ (-0.020628624 * float(x[697]))+ (-0.025133852 * float(x[698]))+ (0.053061366 * float(x[699])))+ ((0.0035406575 * float(x[700]))+ (0.15195681 * float(x[701]))+ (0.05225616 * float(x[702]))+ (0.010293469 * float(x[703]))+ (0.03318286 * float(x[704]))+ (-0.26478067 * float(x[705]))+ (0.011508666 * float(x[706]))+ (0.037932955 * float(x[707]))+ (-0.00894694 * float(x[708]))+ (-0.035250954 * float(x[709]))+ (-0.4760179 * float(x[710]))+ (0.028845578 * float(x[711]))+ (0.017662898 * float(x[712]))+ (0.4413781 * float(x[713]))+ (0.20395271 * float(x[714]))+ (0.0355649 * float(x[715]))+ (-0.013557479 * float(x[716]))+ (-1.0737133 * float(x[717]))+ (0.07813258 * float(x[718]))+ (0.016545966 * float(x[719]))+ (0.023613028 * float(x[720]))+ (0.41755712 * float(x[721]))+ (-0.008229975 * float(x[722]))+ (-0.004929077 * float(x[723]))+ (0.045839973 * float(x[724]))+ (-0.047589563 * float(x[725]))+ (0.078662984 * float(x[726]))+ (0.023206644 * float(x[727]))+ (-0.03395474 * float(x[728]))+ (-0.0052170716 * float(x[729]))+ (0.029369993 * float(x[730]))+ (-0.516937 * float(x[731]))+ (0.18576011 * float(x[732]))+ (0.008129455 * float(x[733]))+ (0.01535397 * float(x[734]))+ (0.14022878 * float(x[735]))+ (0.009154372 * float(x[736]))+ (0.15180203 * float(x[737]))+ (0.04230915 * float(x[738]))+ (0.08701782 * float(x[739]))+ (-0.02583415 * float(x[740]))+ (-0.055650562 * float(x[741]))+ (-0.02472597 * float(x[742]))+ (0.10801709 * float(x[743]))+ (-0.05876157 * float(x[744]))+ (0.535853 * float(x[745]))+ (0.03590948 * float(x[746]))+ (-0.036623552 * float(x[747]))+ (0.10949964 * float(x[748]))+ (0.019323938 * float(x[749])))+ ((-0.5615149 * float(x[750]))+ (0.049267374 * float(x[751]))+ (-0.057446387 * float(x[752]))+ (0.045415014 * float(x[753]))+ (0.1491739 * float(x[754]))+ (-0.041558437 * float(x[755]))+ (0.0150895715 * float(x[756]))+ (0.40840098 * float(x[757]))+ (0.16893819 * float(x[758]))+ (-0.0067166947 * float(x[759]))+ (-0.029239018 * float(x[760]))+ (0.054230265 * float(x[761]))+ (0.053378478 * float(x[762]))+ (-0.006615866 * float(x[763]))+ (0.17715436 * float(x[764]))+ (0.7491632 * float(x[765]))+ (0.004097514 * float(x[766]))+ (0.04145371 * float(x[767]))+ (-0.52364016 * float(x[768]))+ (0.01804991 * float(x[769]))+ (1.3473792 * float(x[770]))+ (-0.03518875 * float(x[771]))+ (-0.038468547 * float(x[772]))+ (-0.05542927 * float(x[773]))+ (-0.00048701093 * float(x[774]))+ (0.07191625 * float(x[775]))+ (-0.0044097304 * float(x[776]))+ (0.112003714 * float(x[777]))+ (-0.011830591 * float(x[778]))+ (-0.040468004 * float(x[779]))+ (0.010336302 * float(x[780]))+ (-0.01746478 * float(x[781]))+ (0.040097725 * float(x[782]))+ (0.06009172 * float(x[783]))+ (0.062393747 * float(x[784]))+ (0.075594656 * float(x[785]))+ (0.00828214 * float(x[786]))+ (-0.02307181 * float(x[787]))+ (0.10964186 * float(x[788]))+ (-0.03532688 * float(x[789]))+ (0.0020519644 * float(x[790]))+ (0.013939895 * float(x[791]))+ (0.07643512 * float(x[792]))+ (0.43420333 * float(x[793]))+ (0.14345627 * float(x[794]))+ (0.4921566 * float(x[795]))+ (0.09291766 * float(x[796]))+ (0.020865366 * float(x[797]))+ (-0.1860574 * float(x[798]))+ (0.037288554 * float(x[799])))+ ((0.025135107 * float(x[800]))+ (-0.0039734207 * float(x[801]))+ (0.04975366 * float(x[802]))+ (0.2794402 * float(x[803]))+ (-0.042867623 * float(x[804]))+ (0.004536882 * float(x[805]))+ (-0.686142 * float(x[806]))+ (0.003551796 * float(x[807]))+ (0.054783665 * float(x[808]))+ (0.5217498 * float(x[809]))+ (0.01251176 * float(x[810]))+ (-0.028191704 * float(x[811]))+ (0.05695469 * float(x[812]))+ (-0.013624556 * float(x[813]))+ (0.021406412 * float(x[814]))+ (0.079721205 * float(x[815]))+ (0.007677518 * float(x[816]))+ (-0.054679442 * float(x[817]))+ (-0.60992813 * float(x[818]))+ (0.034923516 * float(x[819]))+ (0.05390457 * float(x[820]))+ (0.039315756 * float(x[821]))+ (-0.428699 * float(x[822]))+ (0.115568675 * float(x[823]))+ (0.116101146 * float(x[824]))+ (-0.012022305 * float(x[825]))+ (0.012158722 * float(x[826]))+ (-0.060094096 * float(x[827]))+ (-0.030656569 * float(x[828]))+ (0.09324877 * float(x[829]))+ (-0.0030573867 * float(x[830]))+ (0.3706847 * float(x[831]))+ (-0.05409573 * float(x[832]))+ (0.039415754 * float(x[833]))+ (-0.012469143 * float(x[834]))+ (-0.060934108 * float(x[835]))+ (0.059833385 * float(x[836]))+ (0.059666365 * float(x[837]))+ (-0.03709501 * float(x[838]))+ (0.06343396 * float(x[839]))+ (0.05992817 * float(x[840]))+ (0.0002589412 * float(x[841]))+ (-0.037298635 * float(x[842]))+ (0.037917104 * float(x[843]))+ (-0.012918159 * float(x[844]))+ (0.0042483807 * float(x[845]))+ (-0.69388217 * float(x[846]))+ (1.1298639 * float(x[847]))+ (-0.04118714 * float(x[848]))+ (-0.014448835 * float(x[849])))+ ((-0.044897325 * float(x[850]))+ (0.25495592 * float(x[851]))+ (0.0006712228 * float(x[852]))+ (0.29418686 * float(x[853]))+ (0.02451051 * float(x[854]))+ (-0.0022749528 * float(x[855]))+ (0.047573112 * float(x[856]))+ (0.15910801 * float(x[857]))+ (-0.05269384 * float(x[858]))+ (0.030909635 * float(x[859]))+ (0.0052128807 * float(x[860]))+ (-0.051710527 * float(x[861]))+ (-0.040128198 * float(x[862]))+ (0.01960063 * float(x[863]))+ (0.16972768 * float(x[864]))+ (-0.0123976655 * float(x[865]))+ (-0.05483919 * float(x[866]))+ (0.029646398 * float(x[867]))+ (0.07198125 * float(x[868]))+ (0.34659952 * float(x[869]))+ (0.015875012 * float(x[870]))+ (0.14678022 * float(x[871]))+ (-0.0032507218 * float(x[872]))+ (0.03272821 * float(x[873]))+ (0.89148283 * float(x[874]))+ (0.19742875 * float(x[875]))+ (0.12174358 * float(x[876]))+ (-0.5465666 * float(x[877]))+ (-0.021167446 * float(x[878]))+ (-0.006859202 * float(x[879]))+ (0.25047964 * float(x[880]))+ (0.025103308 * float(x[881]))+ (-0.005527988 * float(x[882]))+ (-0.040058643 * float(x[883]))+ (-0.81825787 * float(x[884]))+ (0.059705272 * float(x[885]))+ (0.022345886 * float(x[886]))+ (0.05700704 * float(x[887]))+ (-0.038007975 * float(x[888]))+ (-0.030745719 * float(x[889]))+ (0.013621472 * float(x[890]))+ (0.026120871 * float(x[891]))+ (1.3096591 * float(x[892]))+ (-0.022826873 * float(x[893]))+ (-0.4765079 * float(x[894]))+ (-0.031939976 * float(x[895]))+ (-0.046270214 * float(x[896]))+ (0.5192634 * float(x[897]))+ (0.45951194 * float(x[898]))+ (0.01349429 * float(x[899])))+ ((0.008569136 * float(x[900]))+ (0.194862 * float(x[901]))+ (0.038753957 * float(x[902]))+ (-0.5563745 * float(x[903]))+ (0.06346828 * float(x[904]))+ (-0.19626263 * float(x[905]))+ (0.29237965 * float(x[906]))+ (0.008537702 * float(x[907]))+ (-1.0754545 * float(x[908]))+ (0.04606072 * float(x[909]))+ (0.044749018 * float(x[910]))+ (-0.048504867 * float(x[911]))+ (0.050952975 * float(x[912]))+ (-0.015965078 * float(x[913]))+ (0.041201375 * float(x[914]))+ (0.72242427 * float(x[915]))+ (0.057479985 * float(x[916]))+ (0.4010896 * float(x[917]))+ (0.14447625 * float(x[918]))+ (0.027280666 * float(x[919]))+ (-0.037479825 * float(x[920]))+ (-0.009776313 * float(x[921]))+ (0.029256202 * float(x[922]))+ (0.11679975 * float(x[923]))+ (0.011349649 * float(x[924]))+ (-0.056882408 * float(x[925]))+ (0.16247404 * float(x[926]))+ (-0.0070275255 * float(x[927]))+ (-0.02523376 * float(x[928]))+ (0.13423435 * float(x[929]))+ (-0.056605265 * float(x[930]))+ (0.016462035 * float(x[931]))+ (0.5318701 * float(x[932]))+ (0.060145468 * float(x[933]))+ (-0.021036813 * float(x[934]))+ (0.32190534 * float(x[935]))+ (0.033656508 * float(x[936]))+ (0.059065897 * float(x[937]))+ (0.21681705 * float(x[938]))+ (0.3302571 * float(x[939]))+ (0.07420436 * float(x[940]))+ (0.03738846 * float(x[941]))+ (-0.042755775 * float(x[942]))+ (0.044256613 * float(x[943]))+ (-0.027012512 * float(x[944]))+ (-0.03817471 * float(x[945]))+ (0.012313992 * float(x[946]))+ (1.0317764 * float(x[947]))+ (1.8794239 * float(x[948]))+ (0.033111572 * float(x[949])))+ ((0.5741586 * float(x[950]))+ (0.019798256 * float(x[951]))+ (0.048377916 * float(x[952]))+ (0.27777928 * float(x[953]))+ (-0.051484115 * float(x[954]))+ (-0.018671937 * float(x[955]))+ (0.01230903 * float(x[956]))+ (-0.014384847 * float(x[957]))+ (0.3103542 * float(x[958]))+ (-0.0333014 * float(x[959]))+ (-0.0123276375 * float(x[960]))+ (0.022186153 * float(x[961]))+ (-0.0499128 * float(x[962]))+ (-0.03981604 * float(x[963]))+ (0.028286383 * float(x[964]))+ (-0.061337695 * float(x[965]))+ (0.07328944 * float(x[966]))+ (-0.0478203 * float(x[967]))+ (0.25161496 * float(x[968]))+ (0.012731157 * float(x[969]))+ (0.17748104 * float(x[970]))+ (-0.038492177 * float(x[971]))+ (0.008345857 * float(x[972]))+ (0.026703887 * float(x[973]))+ (0.053192884 * float(x[974]))+ (-0.046671133 * float(x[975]))+ (-0.030833298 * float(x[976]))+ (0.018066667 * float(x[977]))+ (-0.0019909255 * float(x[978]))+ (0.14102362 * float(x[979]))+ (-0.05219696 * float(x[980]))+ (0.592392 * float(x[981]))+ (0.019933356 * float(x[982]))+ (-0.026405048 * float(x[983]))+ (-0.013577752 * float(x[984]))+ (0.24563943 * float(x[985]))+ (0.0048410073 * float(x[986]))+ (0.01767057 * float(x[987]))+ (0.0013694534 * float(x[988]))+ (0.006201595 * float(x[989]))+ (-0.00076453015 * float(x[990]))+ (0.31041855 * float(x[991]))+ (1.4517744 * float(x[992]))+ (0.0029443726 * float(x[993]))+ (0.057886705 * float(x[994]))+ (0.04427535 * float(x[995]))+ (-0.06146645 * float(x[996]))+ (0.4781898 * float(x[997]))+ (1.1342717 * float(x[998]))+ (-0.020477895 * float(x[999])))+ ((-0.040744543 * float(x[1000]))+ (-0.043153316 * float(x[1001]))+ (1.2708116 * float(x[1002]))+ (-0.020077903 * float(x[1003]))+ (-0.0039910786 * float(x[1004]))+ (0.018197805 * float(x[1005]))+ (-0.03806565 * float(x[1006]))+ (0.00552772 * float(x[1007]))+ (0.02924955 * float(x[1008]))+ (-0.03626082 * float(x[1009]))+ (0.018043168 * float(x[1010]))+ (-0.52775383 * float(x[1011]))+ (0.0889336 * float(x[1012]))+ (0.13344255 * float(x[1013]))+ (0.016453557 * float(x[1014]))+ (0.21840619 * float(x[1015]))+ (-0.05338645 * float(x[1016]))+ (0.024692476 * float(x[1017]))+ (0.23825218 * float(x[1018]))+ (0.6880063 * float(x[1019]))+ (-0.061579682 * float(x[1020]))+ (0.12304599 * float(x[1021]))+ (-0.01455722 * float(x[1022]))+ (0.0124079585 * float(x[1023]))+ (-0.017433602 * float(x[1024]))+ (0.039550282 * float(x[1025]))+ (0.2770166 * float(x[1026]))+ (0.038874887 * float(x[1027]))+ (-0.01973664 * float(x[1028]))+ (0.39742807 * float(x[1029]))+ (0.3842272 * float(x[1030]))+ (0.71658343 * float(x[1031]))+ (0.9300293 * float(x[1032]))+ (-0.026629835 * float(x[1033]))+ (-0.061359156 * float(x[1034]))+ (0.041479297 * float(x[1035]))+ (0.0613036 * float(x[1036]))+ (0.15516591 * float(x[1037]))+ (0.01981575 * float(x[1038]))+ (0.014657266 * float(x[1039]))+ (0.05970058 * float(x[1040]))+ (-0.031441502 * float(x[1041]))+ (-0.020820808 * float(x[1042]))+ (0.16084825 * float(x[1043]))+ (-0.006141182 * float(x[1044]))+ (0.0042541176 * float(x[1045]))+ (0.01697664 * float(x[1046]))+ (-0.0431445 * float(x[1047]))+ (-0.007176608 * float(x[1048]))+ (-0.05110237 * float(x[1049])))+ ((0.5894372 * float(x[1050]))+ (0.0080835745 * float(x[1051]))+ (-0.060538396 * float(x[1052]))+ (-0.7322709 * float(x[1053]))+ (-0.07583022 * float(x[1054]))+ (-0.043153286 * float(x[1055]))+ (-0.01286836 * float(x[1056]))+ (-0.059182014 * float(x[1057]))+ (0.05008723 * float(x[1058]))+ (0.050814323 * float(x[1059]))+ (1.1154178 * float(x[1060]))+ (0.012991399 * float(x[1061]))+ (0.03172653 * float(x[1062]))+ (0.6479353 * float(x[1063]))+ (0.30962157 * float(x[1064]))+ (-0.058495473 * float(x[1065]))+ (0.045095235 * float(x[1066]))+ (-0.054395232 * float(x[1067]))+ (0.019124236 * float(x[1068]))+ (0.0038470328 * float(x[1069]))+ (0.034026556 * float(x[1070]))+ (-0.022683144 * float(x[1071]))+ (0.2464442 * float(x[1072]))+ (0.003417112 * float(x[1073]))+ (0.8063748 * float(x[1074]))+ (0.05406689 * float(x[1075]))+ (-0.020417426 * float(x[1076]))+ (0.08929635 * float(x[1077]))+ (-0.52269965 * float(x[1078]))+ (-0.027863298 * float(x[1079]))+ (0.7314555 * float(x[1080]))+ (-0.0070378035 * float(x[1081]))+ (0.64810234 * float(x[1082]))+ (-0.010217521 * float(x[1083]))+ (0.018405087 * float(x[1084]))+ (0.08055929 * float(x[1085]))+ (0.009748109 * float(x[1086]))+ (0.022463486 * float(x[1087]))+ (0.038296983 * float(x[1088]))+ (0.013367958 * float(x[1089]))+ (0.02858819 * float(x[1090]))+ (0.3864982 * float(x[1091]))+ (0.058049075 * float(x[1092]))+ (-0.056600384 * float(x[1093]))+ (0.02122181 * float(x[1094]))+ (-0.0028100982 * float(x[1095]))+ (0.17560197 * float(x[1096]))+ (-0.023910303 * float(x[1097]))+ (0.037284873 * float(x[1098]))+ (0.056732707 * float(x[1099])))+ ((-0.050611746 * float(x[1100]))+ (0.033506744 * float(x[1101]))+ (0.042764053 * float(x[1102]))+ (0.06390578 * float(x[1103]))+ (0.0007305518 * float(x[1104]))+ (0.04772397 * float(x[1105]))+ (0.0018387213 * float(x[1106]))+ (0.039365616 * float(x[1107]))+ (-0.0045796447 * float(x[1108]))+ (0.38793838 * float(x[1109]))+ (0.015525378 * float(x[1110]))+ (-0.0033460334 * float(x[1111]))+ (0.01957681 * float(x[1112]))+ (0.016702563 * float(x[1113]))+ (0.31780317 * float(x[1114]))+ (0.0154532865 * float(x[1115]))+ (0.030305814 * float(x[1116]))+ (-0.74167264 * float(x[1117]))+ (-0.0056607462 * float(x[1118]))+ (0.04750725 * float(x[1119]))+ (-0.054183405 * float(x[1120]))+ (-0.02830699 * float(x[1121]))+ (-0.028031275 * float(x[1122]))+ (0.46831942 * float(x[1123]))+ (0.21940525 * float(x[1124]))+ (0.0061507374 * float(x[1125]))+ (-0.060075548 * float(x[1126]))+ (-0.0020393655 * float(x[1127]))+ (0.023116194 * float(x[1128]))+ (-0.014503043 * float(x[1129]))+ (0.06020245 * float(x[1130]))+ (0.00019742548 * float(x[1131]))+ (0.22682288 * float(x[1132]))+ (0.06869983 * float(x[1133]))+ (0.032252997 * float(x[1134]))+ (-0.00012321398 * float(x[1135]))+ (0.19071907 * float(x[1136]))+ (-0.03925179 * float(x[1137]))+ (0.1668755 * float(x[1138]))+ (0.2517478 * float(x[1139]))+ (0.03080348 * float(x[1140]))+ (-2.2746623e-05 * float(x[1141]))+ (0.017703734 * float(x[1142]))+ (-0.048653327 * float(x[1143]))+ (-0.04866848 * float(x[1144]))+ (-0.003854785 * float(x[1145]))+ (-0.0077728257 * float(x[1146]))+ (0.04604949 * float(x[1147]))+ (0.04503247 * float(x[1148]))+ (0.042050727 * float(x[1149])))+ ((-0.028405998 * float(x[1150]))+ (0.5427355 * float(x[1151]))+ (-0.058172222 * float(x[1152]))+ (0.022444755 * float(x[1153]))+ (-0.05588275 * float(x[1154]))+ (-0.061909363 * float(x[1155]))+ (-0.031342346 * float(x[1156]))+ (-0.0523615 * float(x[1157]))+ (-0.024440289 * float(x[1158]))+ (-0.039042816 * float(x[1159]))+ (0.6058017 * float(x[1160]))+ (0.05896142 * float(x[1161]))+ (-0.011686973 * float(x[1162]))+ (0.051445797 * float(x[1163]))+ (0.0013760105 * float(x[1164]))+ (-0.007975042 * float(x[1165]))+ (0.7472269 * float(x[1166]))+ (0.32370916 * float(x[1167]))+ (-0.049827725 * float(x[1168]))+ (0.042942174 * float(x[1169]))+ (-0.019111246 * float(x[1170]))+ (-0.06046567 * float(x[1171]))+ (0.94112104 * float(x[1172]))+ (0.001150392 * float(x[1173]))+ (-0.04149895 * float(x[1174]))+ (-0.04874897 * float(x[1175]))+ (0.30188558 * float(x[1176]))+ (-0.054380246 * float(x[1177]))+ (0.056120835 * float(x[1178]))+ (0.1744654 * float(x[1179]))+ (0.48088536 * float(x[1180]))+ (0.20133428 * float(x[1181]))+ (-0.016220748 * float(x[1182]))+ (-0.058258787 * float(x[1183]))+ (0.02137243 * float(x[1184]))+ (-0.016466826 * float(x[1185]))+ (-0.0132713765 * float(x[1186]))+ (-0.019350257 * float(x[1187]))+ (0.029076934 * float(x[1188]))+ (0.033569343 * float(x[1189]))+ (0.0135855 * float(x[1190]))+ (-0.00776612 * float(x[1191]))+ (0.19740736 * float(x[1192]))+ (-0.001083672 * float(x[1193]))+ (1.3324177 * float(x[1194]))+ (0.27673542 * float(x[1195]))+ (0.011185414 * float(x[1196]))+ (0.036082126 * float(x[1197]))+ (-0.034766804 * float(x[1198]))+ (0.000416331 * float(x[1199])))+ ((0.021230243 * float(x[1200]))+ (-0.056943133 * float(x[1201]))+ (0.028447352 * float(x[1202]))+ (-0.047470868 * float(x[1203]))+ (0.008654289 * float(x[1204]))+ (0.71439284 * float(x[1205]))+ (0.11134937 * float(x[1206]))+ (0.060274743 * float(x[1207]))+ (0.013976589 * float(x[1208]))+ (-0.0017708503 * float(x[1209]))+ (-0.03072618 * float(x[1210]))+ (0.02312231 * float(x[1211]))+ (0.3381906 * float(x[1212]))+ (0.86132896 * float(x[1213]))+ (-0.026880037 * float(x[1214]))+ (0.042067252 * float(x[1215]))+ (0.04756955 * float(x[1216]))+ (0.038028114 * float(x[1217]))+ (0.0006212294 * float(x[1218]))+ (0.028760165 * float(x[1219]))+ (-0.056512244 * float(x[1220]))+ (0.21499404 * float(x[1221]))+ (-0.016112871 * float(x[1222]))+ (0.022608839 * float(x[1223]))+ (-0.010501932 * float(x[1224]))+ (-0.020824622 * float(x[1225]))+ (-0.029123694 * float(x[1226]))+ (0.04000262 * float(x[1227]))+ (0.10796538 * float(x[1228]))+ (-0.01093648 * float(x[1229]))+ (0.031284668 * float(x[1230]))+ (0.0062505305 * float(x[1231]))+ (-0.070881285 * float(x[1232]))+ (0.2922983 * float(x[1233]))+ (-0.03015117 * float(x[1234]))+ (0.057199635 * float(x[1235]))+ (-0.04409595 * float(x[1236]))+ (0.26180145 * float(x[1237]))+ (0.044393003 * float(x[1238]))+ (-0.025706034 * float(x[1239]))+ (0.1102766 * float(x[1240]))+ (-0.04461754 * float(x[1241]))+ (0.009673573 * float(x[1242]))+ (1.2249569 * float(x[1243]))+ (0.057847366 * float(x[1244]))+ (0.026900694 * float(x[1245]))+ (0.026037365 * float(x[1246]))+ (-0.019566294 * float(x[1247]))+ (0.0042594224 * float(x[1248]))+ (0.014732003 * float(x[1249])))+ ((1.2148778 * float(x[1250]))+ (0.012410305 * float(x[1251]))+ (-0.025122598 * float(x[1252]))+ (1.184901 * float(x[1253]))+ (-0.006361138 * float(x[1254]))+ (-0.007934831 * float(x[1255]))+ (-0.055661373 * float(x[1256]))+ (-0.044954415 * float(x[1257]))+ (0.0019291565 * float(x[1258]))+ (-0.009591199 * float(x[1259]))+ (-0.031181082 * float(x[1260]))+ (-0.71632123 * float(x[1261]))+ (-0.0055521466 * float(x[1262]))+ (0.53976685 * float(x[1263]))+ (0.16148643 * float(x[1264]))+ (-0.028512295 * float(x[1265]))+ (-0.030523226 * float(x[1266]))+ (0.15040207 * float(x[1267]))+ (-0.0052516945 * float(x[1268]))+ (0.021688946 * float(x[1269]))+ (-0.014889389 * float(x[1270]))+ (-0.0017876812 * float(x[1271]))+ (0.027818576 * float(x[1272]))+ (0.144225 * float(x[1273]))+ (0.045924403 * float(x[1274]))+ (0.006563604 * float(x[1275]))+ (-0.011547281 * float(x[1276]))+ (0.01588592 * float(x[1277]))+ (1.563702 * float(x[1278]))+ (-0.008138958 * float(x[1279]))+ (0.021325938 * float(x[1280]))+ (-0.05045734 * float(x[1281]))+ (0.08767218 * float(x[1282]))+ (0.0002512075 * float(x[1283]))+ (-0.018797345 * float(x[1284]))+ (-0.030675117 * float(x[1285]))+ (0.3103063 * float(x[1286]))+ (0.041542947 * float(x[1287]))+ (-0.0024710149 * float(x[1288]))+ (-0.033320393 * float(x[1289]))+ (-0.025262408 * float(x[1290]))+ (0.76250905 * float(x[1291]))+ (1.0092961 * float(x[1292]))+ (0.0039831325 * float(x[1293]))+ (-0.0007647872 * float(x[1294]))+ (0.021127008 * float(x[1295]))+ (0.024602026 * float(x[1296]))+ (0.00084153 * float(x[1297]))+ (0.1797879 * float(x[1298]))+ (0.04683043 * float(x[1299])))+ ((0.003992647 * float(x[1300]))+ (0.03159502 * float(x[1301]))+ (-0.023479 * float(x[1302]))+ (0.012318462 * float(x[1303]))+ (0.018121377 * float(x[1304]))+ (0.28928438 * float(x[1305]))+ (0.03829059 * float(x[1306]))+ (0.70674706 * float(x[1307]))+ (-0.023295961 * float(x[1308]))+ (-0.036490258 * float(x[1309]))+ (-0.03681581 * float(x[1310]))+ (-0.037579514 * float(x[1311]))+ (-0.058438394 * float(x[1312]))+ (0.010643221 * float(x[1313]))+ (-0.012268074 * float(x[1314]))+ (0.017863665 * float(x[1315]))+ (-2.5507063e-05 * float(x[1316]))+ (-0.010330938 * float(x[1317]))+ (0.025583811 * float(x[1318]))+ (-0.04857734 * float(x[1319]))+ (-0.017447058 * float(x[1320]))+ (0.012765303 * float(x[1321]))+ (0.18963757 * float(x[1322]))+ (0.0046916083 * float(x[1323]))+ (1.2464093 * float(x[1324]))+ (0.06199467 * float(x[1325]))+ (-0.021483563 * float(x[1326]))+ (0.04226762 * float(x[1327]))+ (0.053421035 * float(x[1328]))+ (-0.05486157 * float(x[1329]))+ (0.015001647 * float(x[1330]))+ (0.035129704 * float(x[1331]))+ (-0.009673912 * float(x[1332]))+ (0.03422728 * float(x[1333]))+ (0.002109453 * float(x[1334]))+ (0.049317718 * float(x[1335]))+ (0.50907415 * float(x[1336]))+ (-0.03970491 * float(x[1337]))+ (0.047098376 * float(x[1338]))+ (0.018444233 * float(x[1339]))+ (0.1718023 * float(x[1340]))+ (0.33331376 * float(x[1341]))+ (0.032931663 * float(x[1342]))+ (0.038668536 * float(x[1343]))+ (0.0028037452 * float(x[1344]))+ (-0.014416922 * float(x[1345]))+ (0.012808725 * float(x[1346]))+ (-0.0065975897 * float(x[1347]))+ (0.0021187142 * float(x[1348]))+ (-0.018304294 * float(x[1349])))+ ((0.06725093 * float(x[1350]))+ (0.3868906 * float(x[1351]))+ (0.40593505 * float(x[1352]))+ (-0.057218 * float(x[1353]))+ (0.0265584 * float(x[1354]))+ (0.040842183 * float(x[1355]))+ (-0.05683866 * float(x[1356]))+ (0.056033313 * float(x[1357]))+ (-0.024736116 * float(x[1358]))+ (-0.01217813 * float(x[1359]))+ (0.032137267 * float(x[1360]))+ (-0.019665878 * float(x[1361]))+ (0.05526895 * float(x[1362]))+ (0.9871144 * float(x[1363]))+ (-0.5339387 * float(x[1364]))+ (-0.040539835 * float(x[1365]))+ (-0.028771672 * float(x[1366]))+ (0.27705172 * float(x[1367]))+ (0.046641 * float(x[1368]))+ (0.0045663714 * float(x[1369]))+ (0.03458628 * float(x[1370]))+ (-0.57826316 * float(x[1371]))+ (0.046819866 * float(x[1372]))+ (-0.009298168 * float(x[1373]))+ (-0.025867064 * float(x[1374]))+ (-0.049354814 * float(x[1375]))+ (0.050989516 * float(x[1376]))+ (0.029407859 * float(x[1377]))+ (0.085954465 * float(x[1378]))+ (0.006421618 * float(x[1379]))+ (0.46033508 * float(x[1380]))+ (0.025404453 * float(x[1381]))+ (0.5338243 * float(x[1382]))+ (0.02081146 * float(x[1383]))+ (-0.0154428445 * float(x[1384]))+ (-0.029266942 * float(x[1385]))+ (0.05091203 * float(x[1386]))+ (0.02078925 * float(x[1387]))+ (-0.025170323 * float(x[1388]))+ (0.097771406 * float(x[1389]))+ (0.027881317 * float(x[1390]))+ (-0.0053035207 * float(x[1391]))+ (0.034776814 * float(x[1392]))+ (-0.04936076 * float(x[1393]))+ (0.05612777 * float(x[1394]))+ (0.041741155 * float(x[1395]))+ (0.43003425 * float(x[1396]))+ (1.2170341 * float(x[1397]))+ (0.012644812 * float(x[1398]))+ (-0.024055084 * float(x[1399])))+ ((0.040283427 * float(x[1400]))+ (-0.032798547 * float(x[1401]))+ (0.011849955 * float(x[1402]))+ (0.0023153021 * float(x[1403]))+ (0.029698543 * float(x[1404]))+ (-0.48365298 * float(x[1405]))+ (0.16558883 * float(x[1406]))+ (0.3731032 * float(x[1407]))+ (0.036617376 * float(x[1408]))+ (0.021145508 * float(x[1409]))+ (0.04158984 * float(x[1410]))+ (0.034996882 * float(x[1411]))+ (-0.05426074 * float(x[1412]))+ (0.006537929 * float(x[1413]))+ (-0.021142788 * float(x[1414]))+ (-0.029613055 * float(x[1415]))+ (0.043409795 * float(x[1416]))+ (1.0894246 * float(x[1417]))+ (0.009633973 * float(x[1418]))+ (0.09349933 * float(x[1419]))+ (0.041745268 * float(x[1420]))+ (1.1681714 * float(x[1421]))+ (-0.0108275525 * float(x[1422]))+ (-0.055281952 * float(x[1423]))+ (-0.059535727 * float(x[1424]))+ (0.019493885 * float(x[1425]))+ (-0.0007359721 * float(x[1426]))+ (-0.039183315 * float(x[1427]))+ (0.75441086 * float(x[1428]))+ (0.16919512 * float(x[1429]))+ (0.44732153 * float(x[1430]))+ (0.27735043 * float(x[1431]))+ (0.0083801 * float(x[1432]))+ (-0.039558675 * float(x[1433]))+ (-1.16245 * float(x[1434]))+ (1.7104338 * float(x[1435]))+ (0.21215658 * float(x[1436]))+ (-0.028326381 * float(x[1437]))+ (0.3622481 * float(x[1438]))+ (0.36575806 * float(x[1439]))+ (-0.014997084 * float(x[1440]))+ (-0.005998887 * float(x[1441]))+ (-0.028585725 * float(x[1442]))+ (0.044146985 * float(x[1443]))+ (0.035592005 * float(x[1444]))+ (-1.2464558 * float(x[1445]))+ (-0.83006257 * float(x[1446]))+ (0.020851053 * float(x[1447]))+ (0.059834182 * float(x[1448]))+ (-0.014829144 * float(x[1449])))+ ((0.4495266 * float(x[1450]))+ (0.10577702 * float(x[1451]))+ (-0.023786329 * float(x[1452]))+ (0.037952207 * float(x[1453]))+ (-0.7225648 * float(x[1454]))+ (1.7603792 * float(x[1455]))+ (0.06194473 * float(x[1456]))+ (-0.01693225 * float(x[1457]))+ (0.024498217 * float(x[1458]))+ (0.16382612 * float(x[1459]))+ (0.018697292 * float(x[1460]))+ (0.024252914 * float(x[1461]))+ (1.0019251 * float(x[1462]))+ (-0.025372881 * float(x[1463]))+ (0.24726862 * float(x[1464]))+ (-1.2247753 * float(x[1465]))+ (0.052957498 * float(x[1466]))+ (-0.015789982 * float(x[1467]))+ (0.7558826 * float(x[1468]))+ (-0.017965108 * float(x[1469]))+ (1.0774592 * float(x[1470]))+ (0.52294135 * float(x[1471]))+ (0.03410045 * float(x[1472]))+ (0.53205085 * float(x[1473]))+ (0.12307225 * float(x[1474]))+ (0.02377703 * float(x[1475]))+ (0.030296769 * float(x[1476]))+ (0.048800465 * float(x[1477]))+ (0.023961045 * float(x[1478]))+ (0.38776937 * float(x[1479]))+ (-0.023310754 * float(x[1480]))+ (0.052186172 * float(x[1481]))+ (2.334613 * float(x[1482]))+ (0.61843365 * float(x[1483]))+ (-0.018598694 * float(x[1484]))+ (-0.034287263 * float(x[1485]))+ (0.043461263 * float(x[1486]))+ (0.27118355 * float(x[1487]))+ (0.8775849 * float(x[1488]))+ (0.15458812 * float(x[1489]))+ (0.4265058 * float(x[1490]))+ (0.019868203 * float(x[1491]))+ (0.58787453 * float(x[1492]))+ (0.03630437 * float(x[1493]))+ (1.136327 * float(x[1494]))+ (0.27079058 * float(x[1495]))+ (0.020453215 * float(x[1496]))+ (0.12650971 * float(x[1497]))+ (-0.021245886 * float(x[1498]))+ (0.011000738 * float(x[1499])))+ ((1.4770654 * float(x[1500]))+ (-0.029697888 * float(x[1501]))+ (-0.21343191 * float(x[1502]))+ (0.5649258 * float(x[1503]))+ (0.017544992 * float(x[1504]))+ (0.14575139 * float(x[1505]))+ (0.049555242 * float(x[1506]))+ (-0.8573625 * float(x[1507]))+ (0.07170897 * float(x[1508]))+ (-0.80484134 * float(x[1509]))+ (0.024215586 * float(x[1510]))+ (0.19380374 * float(x[1511]))+ (0.12557021 * float(x[1512]))+ (0.047071204 * float(x[1513]))+ (-0.054265838 * float(x[1514]))+ (0.08859029 * float(x[1515]))+ (0.032937594 * float(x[1516]))+ (-0.035403937 * float(x[1517]))+ (1.338245 * float(x[1518]))+ (0.38486516 * float(x[1519]))+ (0.012317292 * float(x[1520]))+ (0.030260786 * float(x[1521]))+ (1.3340069 * float(x[1522]))+ (0.045051634 * float(x[1523]))+ (-0.0074628666 * float(x[1524]))+ (0.033667438 * float(x[1525]))+ (0.8881953 * float(x[1526]))+ (0.080173455 * float(x[1527]))+ (-0.043800775 * float(x[1528]))+ (0.3761081 * float(x[1529]))+ (-0.018490579 * float(x[1530]))+ (0.046713047 * float(x[1531]))+ (-1.3326799 * float(x[1532]))+ (0.4089549 * float(x[1533]))+ (0.23487215 * float(x[1534]))+ (0.31879476 * float(x[1535]))+ (0.3578795 * float(x[1536]))+ (0.1362444 * float(x[1537]))+ (-0.024651174 * float(x[1538]))+ (-0.004179401 * float(x[1539]))+ (0.07121782 * float(x[1540]))+ (1.236223 * float(x[1541]))+ (1.0318792 * float(x[1542]))+ (0.070089445 * float(x[1543]))+ (2.3737113 * float(x[1544]))+ (1.400988 * float(x[1545]))+ (0.07766654 * float(x[1546]))+ (1.467513 * float(x[1547]))+ (0.7476612 * float(x[1548]))+ (0.18240446 * float(x[1549])))+ ((0.58824134 * float(x[1550]))+ (1.1775147 * float(x[1551]))+ (-0.19728059 * float(x[1552]))+ (0.0044092685 * float(x[1553]))+ (1.2739325 * float(x[1554]))+ (1.21728 * float(x[1555]))+ (0.99882525 * float(x[1556]))+ (0.31836575 * float(x[1557]))) + 0.33651188), 0)
    h_2 = max((((0.99722457 * float(x[0]))+ (3.7387574 * float(x[1]))+ (0.20995316 * float(x[2]))+ (-0.13186024 * float(x[3]))+ (-1.2825655 * float(x[4]))+ (-0.42396867 * float(x[5]))+ (-1.0444291 * float(x[6]))+ (-0.13266426 * float(x[7]))+ (-0.9317131 * float(x[8]))+ (0.65311855 * float(x[9]))+ (-0.7125011 * float(x[10]))+ (1.7847563 * float(x[11]))+ (-0.92259604 * float(x[12]))+ (-0.41508117 * float(x[13]))+ (1.7786294 * float(x[14]))+ (-0.8964778 * float(x[15]))+ (-0.6423493 * float(x[16]))+ (-0.4340315 * float(x[17]))+ (-0.961587 * float(x[18]))+ (-1.3295687 * float(x[19]))+ (1.4888446 * float(x[20]))+ (1.8887845 * float(x[21]))+ (-0.753474 * float(x[22]))+ (-0.14151834 * float(x[23]))+ (0.028972454 * float(x[24]))+ (-1.5461757 * float(x[25]))+ (0.72315073 * float(x[26]))+ (-0.56219697 * float(x[27]))+ (-0.5933638 * float(x[28]))+ (-0.3636763 * float(x[29]))+ (-0.5007258 * float(x[30]))+ (-0.14895669 * float(x[31]))+ (-1.1826434 * float(x[32]))+ (-0.223931 * float(x[33]))+ (-1.4441199 * float(x[34]))+ (-1.0686393 * float(x[35]))+ (1.6818863 * float(x[36]))+ (-0.26467583 * float(x[37]))+ (-0.4048153 * float(x[38]))+ (-1.7292048 * float(x[39]))+ (-1.2942568 * float(x[40]))+ (-0.65477306 * float(x[41]))+ (-0.5779009 * float(x[42]))+ (-0.8725776 * float(x[43]))+ (-0.29612452 * float(x[44]))+ (-0.012188591 * float(x[45]))+ (-0.28599924 * float(x[46]))+ (-0.8931017 * float(x[47]))+ (-0.60314256 * float(x[48]))+ (1.2946168 * float(x[49])))+ ((-0.26596004 * float(x[50]))+ (-1.6745892 * float(x[51]))+ (-1.1265136 * float(x[52]))+ (-0.42097378 * float(x[53]))+ (-0.26121843 * float(x[54]))+ (-0.17977348 * float(x[55]))+ (-0.77919143 * float(x[56]))+ (-0.24659792 * float(x[57]))+ (1.7285764 * float(x[58]))+ (1.5230337 * float(x[59]))+ (0.3008775 * float(x[60]))+ (-0.26287028 * float(x[61]))+ (-0.115042225 * float(x[62]))+ (-0.11305756 * float(x[63]))+ (-1.7787689 * float(x[64]))+ (1.8461366 * float(x[65]))+ (-0.5663039 * float(x[66]))+ (-0.6167813 * float(x[67]))+ (-0.4290298 * float(x[68]))+ (1.8116397 * float(x[69]))+ (1.9515294 * float(x[70]))+ (-0.36849675 * float(x[71]))+ (-1.2981724 * float(x[72]))+ (0.08735338 * float(x[73]))+ (-0.5165082 * float(x[74]))+ (-1.2304391 * float(x[75]))+ (-0.54625475 * float(x[76]))+ (-0.019305173 * float(x[77]))+ (-0.14807975 * float(x[78]))+ (-0.41524294 * float(x[79]))+ (-0.34241667 * float(x[80]))+ (-0.6469269 * float(x[81]))+ (-0.022016801 * float(x[82]))+ (-0.9486035 * float(x[83]))+ (-0.92449874 * float(x[84]))+ (-0.93451756 * float(x[85]))+ (1.6645489 * float(x[86]))+ (-0.32509297 * float(x[87]))+ (-0.6407372 * float(x[88]))+ (-0.58576375 * float(x[89]))+ (-0.3998512 * float(x[90]))+ (0.8154633 * float(x[91]))+ (-0.35991699 * float(x[92]))+ (-0.2071292 * float(x[93]))+ (-0.41813833 * float(x[94]))+ (2.1826727 * float(x[95]))+ (2.2749825 * float(x[96]))+ (-0.14717488 * float(x[97]))+ (-0.17900349 * float(x[98]))+ (-0.4902545 * float(x[99])))+ ((-1.0739971 * float(x[100]))+ (-0.3405576 * float(x[101]))+ (2.0733426 * float(x[102]))+ (-0.8216969 * float(x[103]))+ (1.7486745 * float(x[104]))+ (-0.78952575 * float(x[105]))+ (-1.2791028 * float(x[106]))+ (-0.5092126 * float(x[107]))+ (-1.3825542 * float(x[108]))+ (-0.64273775 * float(x[109]))+ (0.07187079 * float(x[110]))+ (-0.40014333 * float(x[111]))+ (-0.5980485 * float(x[112]))+ (2.5702252 * float(x[113]))+ (-0.3298435 * float(x[114]))+ (0.025251456 * float(x[115]))+ (-0.39495066 * float(x[116]))+ (-0.5270745 * float(x[117]))+ (-0.63908213 * float(x[118]))+ (-0.3577942 * float(x[119]))+ (0.7664356 * float(x[120]))+ (-0.43023875 * float(x[121]))+ (-0.63344306 * float(x[122]))+ (-0.3991469 * float(x[123]))+ (-0.86719376 * float(x[124]))+ (-0.09948357 * float(x[125]))+ (-0.9764693 * float(x[126]))+ (0.3173468 * float(x[127]))+ (-1.0982512 * float(x[128]))+ (-0.42727798 * float(x[129]))+ (-0.785908 * float(x[130]))+ (-0.21611635 * float(x[131]))+ (-0.7032743 * float(x[132]))+ (-1.4229286 * float(x[133]))+ (1.8580691 * float(x[134]))+ (-1.0452539 * float(x[135]))+ (-0.1991596 * float(x[136]))+ (0.3509903 * float(x[137]))+ (-0.73713964 * float(x[138]))+ (2.563173 * float(x[139]))+ (-0.5426605 * float(x[140]))+ (-0.23250274 * float(x[141]))+ (-0.9372387 * float(x[142]))+ (-0.639051 * float(x[143]))+ (-0.23830476 * float(x[144]))+ (-0.2941291 * float(x[145]))+ (-0.08359104 * float(x[146]))+ (-1.171198 * float(x[147]))+ (-0.58440983 * float(x[148]))+ (-1.3266665 * float(x[149])))+ ((-1.514102 * float(x[150]))+ (-0.6211166 * float(x[151]))+ (-0.62249905 * float(x[152]))+ (0.030496106 * float(x[153]))+ (-0.6732024 * float(x[154]))+ (1.2486539 * float(x[155]))+ (-0.5093518 * float(x[156]))+ (-0.5972481 * float(x[157]))+ (1.9764596 * float(x[158]))+ (-0.60383564 * float(x[159]))+ (-0.5785013 * float(x[160]))+ (-0.43688214 * float(x[161]))+ (-0.20973577 * float(x[162]))+ (2.2353344 * float(x[163]))+ (-0.06256392 * float(x[164]))+ (0.55031246 * float(x[165]))+ (-1.0263443 * float(x[166]))+ (2.5173259 * float(x[167]))+ (-0.43435806 * float(x[168]))+ (-0.6655535 * float(x[169]))+ (-0.46380848 * float(x[170]))+ (-0.57399225 * float(x[171]))+ (-3.138874 * float(x[172]))+ (-0.6419879 * float(x[173]))+ (-0.98327833 * float(x[174]))+ (0.96179205 * float(x[175]))+ (-0.5433754 * float(x[176]))+ (-0.9136224 * float(x[177]))+ (-1.1216396 * float(x[178]))+ (-0.055981684 * float(x[179]))+ (3.0728772 * float(x[180]))+ (1.6510754 * float(x[181]))+ (-0.31609097 * float(x[182]))+ (1.4696048 * float(x[183]))+ (-0.19592777 * float(x[184]))+ (0.06083369 * float(x[185]))+ (-0.963037 * float(x[186]))+ (0.5387575 * float(x[187]))+ (-0.92510396 * float(x[188]))+ (1.3602126 * float(x[189]))+ (2.5421245 * float(x[190]))+ (-1.0883629 * float(x[191]))+ (-0.03396308 * float(x[192]))+ (2.1764915 * float(x[193]))+ (-0.72247386 * float(x[194]))+ (-1.2646648 * float(x[195]))+ (-0.48617843 * float(x[196]))+ (-0.5970218 * float(x[197]))+ (-0.5207183 * float(x[198]))+ (-0.6224508 * float(x[199])))+ ((-1.0230379 * float(x[200]))+ (-1.3657117 * float(x[201]))+ (-0.99508137 * float(x[202]))+ (-0.7556219 * float(x[203]))+ (-0.4494753 * float(x[204]))+ (-0.57804096 * float(x[205]))+ (-0.8571523 * float(x[206]))+ (-0.35314932 * float(x[207]))+ (-1.0107753 * float(x[208]))+ (-0.6682273 * float(x[209]))+ (-0.5705083 * float(x[210]))+ (-0.8343727 * float(x[211]))+ (-0.39024386 * float(x[212]))+ (-0.79305714 * float(x[213]))+ (-1.376844 * float(x[214]))+ (-2.6310234 * float(x[215]))+ (-0.27583268 * float(x[216]))+ (-0.35658363 * float(x[217]))+ (-0.63726133 * float(x[218]))+ (-0.10411509 * float(x[219]))+ (-0.31387156 * float(x[220]))+ (-0.6460149 * float(x[221]))+ (-0.56235987 * float(x[222]))+ (-0.32080644 * float(x[223]))+ (1.7205606 * float(x[224]))+ (-0.31737638 * float(x[225]))+ (-0.7692684 * float(x[226]))+ (-0.96457434 * float(x[227]))+ (-0.7428545 * float(x[228]))+ (-0.73933774 * float(x[229]))+ (-0.3791949 * float(x[230]))+ (-0.8947863 * float(x[231]))+ (0.39812094 * float(x[232]))+ (-0.6241324 * float(x[233]))+ (-1.3331388 * float(x[234]))+ (-0.19882378 * float(x[235]))+ (-0.93010294 * float(x[236]))+ (0.28747994 * float(x[237]))+ (-0.6651499 * float(x[238]))+ (-0.7242743 * float(x[239]))+ (-1.0595394 * float(x[240]))+ (-0.5341185 * float(x[241]))+ (-0.27332467 * float(x[242]))+ (-1.7219503 * float(x[243]))+ (-0.5086421 * float(x[244]))+ (-0.0018915938 * float(x[245]))+ (0.57402164 * float(x[246]))+ (-0.63639337 * float(x[247]))+ (1.62713 * float(x[248]))+ (-0.22352418 * float(x[249])))+ ((-1.6154548 * float(x[250]))+ (0.9571919 * float(x[251]))+ (-1.7713808 * float(x[252]))+ (-0.5353933 * float(x[253]))+ (-0.7372178 * float(x[254]))+ (-0.35776004 * float(x[255]))+ (-1.1174622 * float(x[256]))+ (-0.514233 * float(x[257]))+ (-0.13126972 * float(x[258]))+ (-0.5309073 * float(x[259]))+ (-0.589054 * float(x[260]))+ (-0.09002626 * float(x[261]))+ (-0.16757284 * float(x[262]))+ (-0.4794879 * float(x[263]))+ (-1.3250822 * float(x[264]))+ (-2.1233394 * float(x[265]))+ (0.07315876 * float(x[266]))+ (1.3430943 * float(x[267]))+ (1.3027506 * float(x[268]))+ (2.2461443 * float(x[269]))+ (1.8966495 * float(x[270]))+ (-2.6033115 * float(x[271]))+ (-0.21368532 * float(x[272]))+ (-0.5683375 * float(x[273]))+ (-0.07785328 * float(x[274]))+ (-0.5227049 * float(x[275]))+ (-0.56028605 * float(x[276]))+ (-0.09615288 * float(x[277]))+ (0.82028186 * float(x[278]))+ (-0.26777557 * float(x[279]))+ (-0.097061284 * float(x[280]))+ (-0.25136426 * float(x[281]))+ (-1.9018065 * float(x[282]))+ (-0.15726203 * float(x[283]))+ (-2.4306154 * float(x[284]))+ (-0.5266103 * float(x[285]))+ (-0.19598433 * float(x[286]))+ (1.9586319 * float(x[287]))+ (-0.9188413 * float(x[288]))+ (-0.42326796 * float(x[289]))+ (-0.42676163 * float(x[290]))+ (-0.44305646 * float(x[291]))+ (-0.47550172 * float(x[292]))+ (1.4983003 * float(x[293]))+ (-0.36018968 * float(x[294]))+ (-1.3800715 * float(x[295]))+ (-0.37516242 * float(x[296]))+ (-1.9529815 * float(x[297]))+ (-0.2810321 * float(x[298]))+ (-0.654189 * float(x[299])))+ ((-0.90062296 * float(x[300]))+ (-0.3537894 * float(x[301]))+ (-1.5300189 * float(x[302]))+ (-0.58359784 * float(x[303]))+ (1.7936243 * float(x[304]))+ (-0.5724943 * float(x[305]))+ (-0.58570725 * float(x[306]))+ (1.4878471 * float(x[307]))+ (0.051845357 * float(x[308]))+ (-0.91369617 * float(x[309]))+ (1.9480774 * float(x[310]))+ (-1.2680125 * float(x[311]))+ (1.8340616 * float(x[312]))+ (-0.8643362 * float(x[313]))+ (-0.110624164 * float(x[314]))+ (-0.81299335 * float(x[315]))+ (-0.5451804 * float(x[316]))+ (2.3215063 * float(x[317]))+ (-0.819673 * float(x[318]))+ (-0.776904 * float(x[319]))+ (-0.6006448 * float(x[320]))+ (2.1836238 * float(x[321]))+ (-0.7422341 * float(x[322]))+ (-0.8182339 * float(x[323]))+ (-0.6842796 * float(x[324]))+ (-0.6860923 * float(x[325]))+ (-0.6639749 * float(x[326]))+ (-0.7636489 * float(x[327]))+ (-0.552244 * float(x[328]))+ (1.927366 * float(x[329]))+ (2.6843398 * float(x[330]))+ (-1.0419441 * float(x[331]))+ (-0.3678095 * float(x[332]))+ (-0.332644 * float(x[333]))+ (-0.20696642 * float(x[334]))+ (-0.38905975 * float(x[335]))+ (-3.1749446 * float(x[336]))+ (-0.77190775 * float(x[337]))+ (-1.2903057 * float(x[338]))+ (-0.72494113 * float(x[339]))+ (-1.4077313 * float(x[340]))+ (1.7936584 * float(x[341]))+ (-0.688824 * float(x[342]))+ (0.34743968 * float(x[343]))+ (-0.21360832 * float(x[344]))+ (-0.26025817 * float(x[345]))+ (1.8908479 * float(x[346]))+ (-0.5227359 * float(x[347]))+ (-0.13278727 * float(x[348]))+ (-1.414751 * float(x[349])))+ ((1.9584863 * float(x[350]))+ (0.48749804 * float(x[351]))+ (-0.16364801 * float(x[352]))+ (-0.017847959 * float(x[353]))+ (-0.5812163 * float(x[354]))+ (1.688918 * float(x[355]))+ (1.851831 * float(x[356]))+ (2.4963434 * float(x[357]))+ (-0.5516527 * float(x[358]))+ (-3.1871643 * float(x[359]))+ (-1.7356956 * float(x[360]))+ (-0.6841809 * float(x[361]))+ (-0.8313781 * float(x[362]))+ (-0.696249 * float(x[363]))+ (-0.21695434 * float(x[364]))+ (0.5798731 * float(x[365]))+ (-2.1343188 * float(x[366]))+ (1.2889026 * float(x[367]))+ (-0.5333092 * float(x[368]))+ (0.46414587 * float(x[369]))+ (1.1722533 * float(x[370]))+ (-0.7519686 * float(x[371]))+ (1.5225528 * float(x[372]))+ (-1.6411667 * float(x[373]))+ (-0.7412191 * float(x[374]))+ (-1.1499836 * float(x[375]))+ (-0.5632898 * float(x[376]))+ (-3.5117042 * float(x[377]))+ (-0.6801978 * float(x[378]))+ (2.2065182 * float(x[379]))+ (-0.55284125 * float(x[380]))+ (0.28606853 * float(x[381]))+ (-0.34581164 * float(x[382]))+ (-0.71300006 * float(x[383]))+ (-0.016987547 * float(x[384]))+ (-0.6375032 * float(x[385]))+ (2.8140643 * float(x[386]))+ (-1.3385628 * float(x[387]))+ (0.08688758 * float(x[388]))+ (2.0348501 * float(x[389]))+ (-0.16228448 * float(x[390]))+ (0.7421723 * float(x[391]))+ (-1.4049928 * float(x[392]))+ (-0.89582837 * float(x[393]))+ (-0.54789144 * float(x[394]))+ (-0.7356021 * float(x[395]))+ (-0.4957378 * float(x[396]))+ (-0.60647273 * float(x[397]))+ (2.7239015 * float(x[398]))+ (-1.6518638 * float(x[399])))+ ((0.012251355 * float(x[400]))+ (0.4209407 * float(x[401]))+ (-0.84049135 * float(x[402]))+ (-0.8755842 * float(x[403]))+ (-0.6387081 * float(x[404]))+ (0.055152446 * float(x[405]))+ (-0.4161236 * float(x[406]))+ (-0.28534698 * float(x[407]))+ (-0.47659042 * float(x[408]))+ (-1.0617725 * float(x[409]))+ (0.3224657 * float(x[410]))+ (-1.289241 * float(x[411]))+ (-0.59091485 * float(x[412]))+ (-0.16237599 * float(x[413]))+ (-0.35680518 * float(x[414]))+ (-1.2182052 * float(x[415]))+ (-0.968064 * float(x[416]))+ (1.2804291 * float(x[417]))+ (1.7604898 * float(x[418]))+ (-0.7517961 * float(x[419]))+ (-1.4392468 * float(x[420]))+ (-0.18225168 * float(x[421]))+ (-0.66213924 * float(x[422]))+ (-1.0766237 * float(x[423]))+ (-1.0825616 * float(x[424]))+ (-1.8345115 * float(x[425]))+ (0.9436449 * float(x[426]))+ (1.2940603 * float(x[427]))+ (-2.7254722 * float(x[428]))+ (-1.5636528 * float(x[429]))+ (1.3215642 * float(x[430]))+ (-0.5098129 * float(x[431]))+ (1.3072921 * float(x[432]))+ (0.25253555 * float(x[433]))+ (-0.7395966 * float(x[434]))+ (2.0072775 * float(x[435]))+ (0.3475493 * float(x[436]))+ (-0.52111506 * float(x[437]))+ (-0.37440556 * float(x[438]))+ (-0.34640962 * float(x[439]))+ (1.2425334 * float(x[440]))+ (-1.2364811 * float(x[441]))+ (-0.6570214 * float(x[442]))+ (-1.8119738 * float(x[443]))+ (-0.6641038 * float(x[444]))+ (-0.2361444 * float(x[445]))+ (-0.5858753 * float(x[446]))+ (-0.1346566 * float(x[447]))+ (-0.7532672 * float(x[448]))+ (-0.88833976 * float(x[449])))+ ((0.8774008 * float(x[450]))+ (-0.28098035 * float(x[451]))+ (-0.30535728 * float(x[452]))+ (-0.75708765 * float(x[453]))+ (-0.30480516 * float(x[454]))+ (-1.8393234 * float(x[455]))+ (-1.3973742 * float(x[456]))+ (0.2105258 * float(x[457]))+ (-0.6525892 * float(x[458]))+ (-0.8711973 * float(x[459]))+ (-0.2073452 * float(x[460]))+ (-0.7560181 * float(x[461]))+ (0.023524003 * float(x[462]))+ (-0.83473915 * float(x[463]))+ (-0.891144 * float(x[464]))+ (1.6454004 * float(x[465]))+ (-0.21466267 * float(x[466]))+ (-0.14839773 * float(x[467]))+ (-0.96984124 * float(x[468]))+ (-0.24329925 * float(x[469]))+ (1.9209365 * float(x[470]))+ (-0.17336504 * float(x[471]))+ (1.731546 * float(x[472]))+ (-1.5729456 * float(x[473]))+ (-0.3084461 * float(x[474]))+ (-1.0117476 * float(x[475]))+ (-0.55042946 * float(x[476]))+ (1.8505434 * float(x[477]))+ (1.5096898 * float(x[478]))+ (-1.1158224 * float(x[479]))+ (-0.6573612 * float(x[480]))+ (-1.5968207 * float(x[481]))+ (1.6829212 * float(x[482]))+ (-0.18175916 * float(x[483]))+ (0.8106342 * float(x[484]))+ (0.20168863 * float(x[485]))+ (-0.45494217 * float(x[486]))+ (-0.2800629 * float(x[487]))+ (-0.54480755 * float(x[488]))+ (-0.6248797 * float(x[489]))+ (-1.0361758 * float(x[490]))+ (0.35167515 * float(x[491]))+ (0.72468287 * float(x[492]))+ (-0.50883216 * float(x[493]))+ (-0.12540552 * float(x[494]))+ (-0.8033072 * float(x[495]))+ (-0.37722385 * float(x[496]))+ (-0.13569991 * float(x[497]))+ (-0.37812454 * float(x[498]))+ (-3.2814095 * float(x[499])))+ ((-0.085023805 * float(x[500]))+ (-0.53748024 * float(x[501]))+ (-0.53948903 * float(x[502]))+ (-1.6398238 * float(x[503]))+ (-0.4807716 * float(x[504]))+ (-0.83751416 * float(x[505]))+ (0.016604606 * float(x[506]))+ (-0.88795906 * float(x[507]))+ (0.87304807 * float(x[508]))+ (-0.758758 * float(x[509]))+ (0.3639666 * float(x[510]))+ (2.2392573 * float(x[511]))+ (-0.31188077 * float(x[512]))+ (-0.2539217 * float(x[513]))+ (-0.79259485 * float(x[514]))+ (-0.44074985 * float(x[515]))+ (-1.0637968 * float(x[516]))+ (-1.1564865 * float(x[517]))+ (1.7379134 * float(x[518]))+ (-0.7576471 * float(x[519]))+ (0.4592558 * float(x[520]))+ (-0.74377173 * float(x[521]))+ (-0.94191456 * float(x[522]))+ (-0.069170326 * float(x[523]))+ (-0.87268794 * float(x[524]))+ (-0.76126885 * float(x[525]))+ (-0.75440526 * float(x[526]))+ (-0.67232805 * float(x[527]))+ (1.275298 * float(x[528]))+ (-0.25639528 * float(x[529]))+ (-0.67767566 * float(x[530]))+ (-0.4450422 * float(x[531]))+ (-0.47689497 * float(x[532]))+ (1.8037424 * float(x[533]))+ (-0.3791248 * float(x[534]))+ (-0.4075549 * float(x[535]))+ (-0.5924955 * float(x[536]))+ (-0.34507817 * float(x[537]))+ (-1.2982006 * float(x[538]))+ (-0.38414365 * float(x[539]))+ (-3.158166 * float(x[540]))+ (-1.7443733 * float(x[541]))+ (1.0507219 * float(x[542]))+ (-0.42741284 * float(x[543]))+ (-0.648778 * float(x[544]))+ (1.3046138 * float(x[545]))+ (-0.82233864 * float(x[546]))+ (0.3774551 * float(x[547]))+ (-0.12317583 * float(x[548]))+ (-0.8915544 * float(x[549])))+ ((-1.3011761 * float(x[550]))+ (-1.5914457 * float(x[551]))+ (-0.10852437 * float(x[552]))+ (0.039417394 * float(x[553]))+ (0.24261436 * float(x[554]))+ (-0.86089826 * float(x[555]))+ (-3.2113576 * float(x[556]))+ (-0.54642147 * float(x[557]))+ (-0.07785848 * float(x[558]))+ (-0.7379675 * float(x[559]))+ (-0.71052325 * float(x[560]))+ (-0.5450492 * float(x[561]))+ (-0.878373 * float(x[562]))+ (-0.0334092 * float(x[563]))+ (-0.9311236 * float(x[564]))+ (-0.40701845 * float(x[565]))+ (0.6734888 * float(x[566]))+ (-1.0120056 * float(x[567]))+ (-0.39534092 * float(x[568]))+ (-0.14228755 * float(x[569]))+ (0.40891847 * float(x[570]))+ (-0.30407158 * float(x[571]))+ (1.4477458 * float(x[572]))+ (0.02233674 * float(x[573]))+ (-0.43150294 * float(x[574]))+ (-1.6716524 * float(x[575]))+ (1.9509839 * float(x[576]))+ (-0.11266051 * float(x[577]))+ (-0.19315763 * float(x[578]))+ (-0.62727916 * float(x[579]))+ (-1.0487356 * float(x[580]))+ (-0.24516739 * float(x[581]))+ (-1.8628079 * float(x[582]))+ (-0.5932477 * float(x[583]))+ (-1.7883728 * float(x[584]))+ (-0.8094212 * float(x[585]))+ (1.878294 * float(x[586]))+ (-0.7334531 * float(x[587]))+ (-0.045235 * float(x[588]))+ (-0.703605 * float(x[589]))+ (-0.5768176 * float(x[590]))+ (-0.57874656 * float(x[591]))+ (-1.0602558 * float(x[592]))+ (-0.28398147 * float(x[593]))+ (-0.87793064 * float(x[594]))+ (-0.45813525 * float(x[595]))+ (-0.6776916 * float(x[596]))+ (-0.64141417 * float(x[597]))+ (0.8093664 * float(x[598]))+ (-0.14582412 * float(x[599])))+ ((-0.7047862 * float(x[600]))+ (0.028600141 * float(x[601]))+ (0.67798257 * float(x[602]))+ (-0.5879358 * float(x[603]))+ (0.0032857915 * float(x[604]))+ (-0.6296503 * float(x[605]))+ (-0.43772092 * float(x[606]))+ (-0.83335876 * float(x[607]))+ (-0.05704189 * float(x[608]))+ (-0.5040648 * float(x[609]))+ (-1.6270568 * float(x[610]))+ (0.024461035 * float(x[611]))+ (0.025700226 * float(x[612]))+ (-0.95994985 * float(x[613]))+ (-0.40335768 * float(x[614]))+ (-0.5770183 * float(x[615]))+ (0.16986561 * float(x[616]))+ (-0.14417341 * float(x[617]))+ (-0.97783965 * float(x[618]))+ (-0.34727287 * float(x[619]))+ (-1.116848 * float(x[620]))+ (-0.1946716 * float(x[621]))+ (2.1361628 * float(x[622]))+ (-0.6735581 * float(x[623]))+ (0.62250704 * float(x[624]))+ (1.7847643 * float(x[625]))+ (1.0212826 * float(x[626]))+ (2.2615523 * float(x[627]))+ (-1.6685389 * float(x[628]))+ (-0.297893 * float(x[629]))+ (-0.7753609 * float(x[630]))+ (-0.38690728 * float(x[631]))+ (-0.34052867 * float(x[632]))+ (-0.8330485 * float(x[633]))+ (-0.3410523 * float(x[634]))+ (-0.58688176 * float(x[635]))+ (-2.4029446 * float(x[636]))+ (-0.5069409 * float(x[637]))+ (2.0062933 * float(x[638]))+ (-0.64120907 * float(x[639]))+ (-0.71140695 * float(x[640]))+ (0.34382507 * float(x[641]))+ (-1.356109 * float(x[642]))+ (1.6950665 * float(x[643]))+ (-0.53661156 * float(x[644]))+ (-0.19658343 * float(x[645]))+ (-0.16319713 * float(x[646]))+ (0.5825673 * float(x[647]))+ (-1.3883095 * float(x[648]))+ (-0.50881314 * float(x[649])))+ ((-0.65303296 * float(x[650]))+ (-0.77114236 * float(x[651]))+ (0.8351937 * float(x[652]))+ (-0.47073832 * float(x[653]))+ (-0.86354434 * float(x[654]))+ (0.22295302 * float(x[655]))+ (1.3231119 * float(x[656]))+ (-0.15816607 * float(x[657]))+ (0.7980029 * float(x[658]))+ (-0.57670933 * float(x[659]))+ (-0.39854887 * float(x[660]))+ (2.116872 * float(x[661]))+ (-0.6627211 * float(x[662]))+ (2.3221753 * float(x[663]))+ (-0.30163944 * float(x[664]))+ (-0.35476694 * float(x[665]))+ (1.4662322 * float(x[666]))+ (-0.2720052 * float(x[667]))+ (-0.66210324 * float(x[668]))+ (-1.5743285 * float(x[669]))+ (0.80450225 * float(x[670]))+ (-0.2510864 * float(x[671]))+ (-0.19227268 * float(x[672]))+ (-0.7295263 * float(x[673]))+ (-0.80238724 * float(x[674]))+ (0.7376612 * float(x[675]))+ (-0.6365537 * float(x[676]))+ (-0.2777175 * float(x[677]))+ (0.20137486 * float(x[678]))+ (0.0019994443 * float(x[679]))+ (-1.2375038 * float(x[680]))+ (-0.71384776 * float(x[681]))+ (0.15620364 * float(x[682]))+ (1.708212 * float(x[683]))+ (-0.61418283 * float(x[684]))+ (0.47892916 * float(x[685]))+ (-0.8113082 * float(x[686]))+ (-0.52957046 * float(x[687]))+ (1.9292545 * float(x[688]))+ (-0.91924405 * float(x[689]))+ (-0.9365876 * float(x[690]))+ (-1.2132353 * float(x[691]))+ (-0.28840077 * float(x[692]))+ (-0.88849854 * float(x[693]))+ (1.5457689 * float(x[694]))+ (-0.10115345 * float(x[695]))+ (0.6697406 * float(x[696]))+ (-1.779083 * float(x[697]))+ (-0.77895 * float(x[698]))+ (-0.79287046 * float(x[699])))+ ((-1.3275547 * float(x[700]))+ (-1.2708205 * float(x[701]))+ (-0.82641375 * float(x[702]))+ (1.2683548 * float(x[703]))+ (1.6965094 * float(x[704]))+ (-0.31013808 * float(x[705]))+ (-1.0494791 * float(x[706]))+ (-0.92495555 * float(x[707]))+ (-0.2848499 * float(x[708]))+ (0.9980098 * float(x[709]))+ (0.3920234 * float(x[710]))+ (1.0543374 * float(x[711]))+ (-0.66686004 * float(x[712]))+ (-0.14108393 * float(x[713]))+ (-0.7912143 * float(x[714]))+ (-1.3610182 * float(x[715]))+ (-0.00676648 * float(x[716]))+ (-0.21276389 * float(x[717]))+ (-0.36330473 * float(x[718]))+ (-1.1110632 * float(x[719]))+ (1.8801932 * float(x[720]))+ (0.46573994 * float(x[721]))+ (-0.8718297 * float(x[722]))+ (2.215792 * float(x[723]))+ (-1.0216669 * float(x[724]))+ (-1.2474732 * float(x[725]))+ (-0.68477875 * float(x[726]))+ (-0.6700997 * float(x[727]))+ (-1.4807411 * float(x[728]))+ (1.7473242 * float(x[729]))+ (-0.35556063 * float(x[730]))+ (0.3627278 * float(x[731]))+ (-0.4080858 * float(x[732]))+ (-0.4087727 * float(x[733]))+ (2.097366 * float(x[734]))+ (-0.38206565 * float(x[735]))+ (-0.35425183 * float(x[736]))+ (-0.24398924 * float(x[737]))+ (2.1277199 * float(x[738]))+ (-0.37537235 * float(x[739]))+ (-0.48157054 * float(x[740]))+ (-0.47839725 * float(x[741]))+ (-0.5761408 * float(x[742]))+ (-0.82428765 * float(x[743]))+ (1.7582521 * float(x[744]))+ (-0.76673573 * float(x[745]))+ (-0.51634663 * float(x[746]))+ (0.038613573 * float(x[747]))+ (-0.13929193 * float(x[748]))+ (0.72246516 * float(x[749])))+ ((-0.4195757 * float(x[750]))+ (-0.6426068 * float(x[751]))+ (-0.66645926 * float(x[752]))+ (0.018417727 * float(x[753]))+ (-0.22455357 * float(x[754]))+ (-0.4801209 * float(x[755]))+ (-0.58998704 * float(x[756]))+ (0.5786961 * float(x[757]))+ (-1.3136581 * float(x[758]))+ (-1.3918573 * float(x[759]))+ (-0.34573096 * float(x[760]))+ (-0.046289153 * float(x[761]))+ (1.9024453 * float(x[762]))+ (-0.6519341 * float(x[763]))+ (0.57897145 * float(x[764]))+ (0.5369965 * float(x[765]))+ (-3.2871664 * float(x[766]))+ (-0.6753823 * float(x[767]))+ (0.35049915 * float(x[768]))+ (-1.5757402 * float(x[769]))+ (-0.7552405 * float(x[770]))+ (0.010686891 * float(x[771]))+ (1.8955978 * float(x[772]))+ (1.511203 * float(x[773]))+ (1.488126 * float(x[774]))+ (-0.9462432 * float(x[775]))+ (-1.6223872 * float(x[776]))+ (0.41527486 * float(x[777]))+ (-0.27690983 * float(x[778]))+ (-0.7396644 * float(x[779]))+ (-0.13802661 * float(x[780]))+ (-0.36376727 * float(x[781]))+ (-0.3773809 * float(x[782]))+ (1.5450262 * float(x[783]))+ (-0.10568981 * float(x[784]))+ (-0.039228253 * float(x[785]))+ (-0.69131535 * float(x[786]))+ (-0.24977142 * float(x[787]))+ (-0.37098005 * float(x[788]))+ (-1.3178414 * float(x[789]))+ (-0.49015507 * float(x[790]))+ (-0.6264965 * float(x[791]))+ (-0.3707851 * float(x[792]))+ (-1.920139 * float(x[793]))+ (-0.80447215 * float(x[794]))+ (-0.3176869 * float(x[795]))+ (-0.87485635 * float(x[796]))+ (-0.01073674 * float(x[797]))+ (-0.33241072 * float(x[798]))+ (-0.3548311 * float(x[799])))+ ((1.7894907 * float(x[800]))+ (-0.8561686 * float(x[801]))+ (-0.60644984 * float(x[802]))+ (-0.9424201 * float(x[803]))+ (-0.73774433 * float(x[804]))+ (-0.4025442 * float(x[805]))+ (0.10194463 * float(x[806]))+ (2.1599672 * float(x[807]))+ (-0.6769896 * float(x[808]))+ (-1.8194263 * float(x[809]))+ (-0.5202329 * float(x[810]))+ (-0.44630733 * float(x[811]))+ (1.2653534 * float(x[812]))+ (1.9279846 * float(x[813]))+ (-0.37072623 * float(x[814]))+ (0.8919161 * float(x[815]))+ (-0.8612184 * float(x[816]))+ (-0.6917791 * float(x[817]))+ (0.10493763 * float(x[818]))+ (2.461218 * float(x[819]))+ (-0.6335669 * float(x[820]))+ (-0.43746904 * float(x[821]))+ (0.41664824 * float(x[822]))+ (-0.109994315 * float(x[823]))+ (-1.1249298 * float(x[824]))+ (1.7201823 * float(x[825]))+ (-1.644651 * float(x[826]))+ (-0.34726614 * float(x[827]))+ (-0.23705651 * float(x[828]))+ (-0.8076908 * float(x[829]))+ (-0.64099854 * float(x[830]))+ (0.31484812 * float(x[831]))+ (-0.80354196 * float(x[832]))+ (-0.72766554 * float(x[833]))+ (0.46035036 * float(x[834]))+ (-0.48453695 * float(x[835]))+ (-1.0168773 * float(x[836]))+ (-1.041963 * float(x[837]))+ (-1.5689082 * float(x[838]))+ (-1.050741 * float(x[839]))+ (1.8496163 * float(x[840]))+ (0.3499513 * float(x[841]))+ (-0.8379463 * float(x[842]))+ (-0.80374134 * float(x[843]))+ (-0.55008096 * float(x[844]))+ (-1.5644267 * float(x[845]))+ (0.17756729 * float(x[846]))+ (-1.7990084 * float(x[847]))+ (1.5694818 * float(x[848]))+ (1.486182 * float(x[849])))+ ((-0.7639184 * float(x[850]))+ (-1.256454 * float(x[851]))+ (0.0050881407 * float(x[852]))+ (0.7190086 * float(x[853]))+ (-0.024003597 * float(x[854]))+ (-0.8774724 * float(x[855]))+ (-0.99678254 * float(x[856]))+ (-0.04822642 * float(x[857]))+ (-0.6435862 * float(x[858]))+ (-0.9739821 * float(x[859]))+ (3.1372428 * float(x[860]))+ (-0.38234842 * float(x[861]))+ (0.021787524 * float(x[862]))+ (1.248395 * float(x[863]))+ (-0.7477522 * float(x[864]))+ (-0.011885833 * float(x[865]))+ (0.4103506 * float(x[866]))+ (-0.6150874 * float(x[867]))+ (-0.6079553 * float(x[868]))+ (-1.3781145 * float(x[869]))+ (1.7252258 * float(x[870]))+ (-0.08373031 * float(x[871]))+ (-0.2749782 * float(x[872]))+ (1.7184068 * float(x[873]))+ (2.7960334 * float(x[874]))+ (-0.36720702 * float(x[875]))+ (-0.50394714 * float(x[876]))+ (0.40257332 * float(x[877]))+ (-0.28009066 * float(x[878]))+ (-0.26754445 * float(x[879]))+ (0.6518469 * float(x[880]))+ (0.44651532 * float(x[881]))+ (-0.71470183 * float(x[882]))+ (-0.8771468 * float(x[883]))+ (-1.7115195 * float(x[884]))+ (-0.74248946 * float(x[885]))+ (-0.53997064 * float(x[886]))+ (-0.6043475 * float(x[887]))+ (-2.9105456 * float(x[888]))+ (-0.6497559 * float(x[889]))+ (1.9974421 * float(x[890]))+ (-0.18971801 * float(x[891]))+ (-0.23954056 * float(x[892]))+ (-0.07073548 * float(x[893]))+ (0.38972044 * float(x[894]))+ (-0.25037426 * float(x[895]))+ (-0.47684345 * float(x[896]))+ (-1.0066867 * float(x[897]))+ (0.29754946 * float(x[898]))+ (-0.8333708 * float(x[899])))+ ((-0.6770075 * float(x[900]))+ (-0.8744971 * float(x[901]))+ (-0.7887702 * float(x[902]))+ (0.3829063 * float(x[903]))+ (-0.038970288 * float(x[904]))+ (-0.26693827 * float(x[905]))+ (-2.3972647 * float(x[906]))+ (-0.31914464 * float(x[907]))+ (-0.2303935 * float(x[908]))+ (-0.5647859 * float(x[909]))+ (-0.41917768 * float(x[910]))+ (-0.972509 * float(x[911]))+ (-1.0214933 * float(x[912]))+ (-0.42299533 * float(x[913]))+ (-3.255437 * float(x[914]))+ (0.64760303 * float(x[915]))+ (-1.389278 * float(x[916]))+ (-0.15310276 * float(x[917]))+ (-1.5876472 * float(x[918]))+ (-1.2738075 * float(x[919]))+ (-1.7931353 * float(x[920]))+ (-1.359246 * float(x[921]))+ (-0.37699208 * float(x[922]))+ (-2.4002898 * float(x[923]))+ (-0.55433774 * float(x[924]))+ (1.3086537 * float(x[925]))+ (-0.10974621 * float(x[926]))+ (1.3461248 * float(x[927]))+ (-0.3845712 * float(x[928]))+ (-0.11692479 * float(x[929]))+ (1.8521961 * float(x[930]))+ (-0.55747443 * float(x[931]))+ (-0.59944844 * float(x[932]))+ (-0.093012325 * float(x[933]))+ (-1.0768034 * float(x[934]))+ (-0.8052367 * float(x[935]))+ (-0.74057937 * float(x[936]))+ (-0.8450974 * float(x[937]))+ (0.60939735 * float(x[938]))+ (1.0110539 * float(x[939]))+ (-0.36365268 * float(x[940]))+ (-0.58246046 * float(x[941]))+ (1.7714453 * float(x[942]))+ (1.7386824 * float(x[943]))+ (1.782215 * float(x[944]))+ (-0.44083872 * float(x[945]))+ (-0.58844423 * float(x[946]))+ (0.46876627 * float(x[947]))+ (1.272018 * float(x[948]))+ (0.66720897 * float(x[949])))+ ((-1.3898959 * float(x[950]))+ (1.3162415 * float(x[951]))+ (-0.14257072 * float(x[952]))+ (0.9029514 * float(x[953]))+ (0.001279667 * float(x[954]))+ (1.7432221 * float(x[955]))+ (-0.72186273 * float(x[956]))+ (-0.23123054 * float(x[957]))+ (-1.1300511 * float(x[958]))+ (-1.0113001 * float(x[959]))+ (2.3972976 * float(x[960]))+ (-0.20824857 * float(x[961]))+ (-1.0722787 * float(x[962]))+ (1.4679677 * float(x[963]))+ (-0.518421 * float(x[964]))+ (-0.8043003 * float(x[965]))+ (-0.35110742 * float(x[966]))+ (2.4071715 * float(x[967]))+ (1.5736177 * float(x[968]))+ (0.0052974513 * float(x[969]))+ (-0.7435861 * float(x[970]))+ (-0.6983116 * float(x[971]))+ (2.377732 * float(x[972]))+ (1.4283966 * float(x[973]))+ (-0.6771139 * float(x[974]))+ (0.014797002 * float(x[975]))+ (1.446149 * float(x[976]))+ (-0.6904548 * float(x[977]))+ (-0.2258967 * float(x[978]))+ (-0.0965359 * float(x[979]))+ (0.03237988 * float(x[980]))+ (-1.2859602 * float(x[981]))+ (-1.6301531 * float(x[982]))+ (3.4481351 * float(x[983]))+ (-1.1103333 * float(x[984]))+ (-1.0900916 * float(x[985]))+ (1.7570469 * float(x[986]))+ (1.2509329 * float(x[987]))+ (-0.37930208 * float(x[988]))+ (-0.54207045 * float(x[989]))+ (2.1023855 * float(x[990]))+ (-2.6309323 * float(x[991]))+ (1.0856501 * float(x[992]))+ (2.3384974 * float(x[993]))+ (-0.46501645 * float(x[994]))+ (-0.39006048 * float(x[995]))+ (-0.21883108 * float(x[996]))+ (-1.3892303 * float(x[997]))+ (0.33394125 * float(x[998]))+ (-0.3246202 * float(x[999])))+ ((-0.9248966 * float(x[1000]))+ (-0.54289854 * float(x[1001]))+ (1.385393 * float(x[1002]))+ (-0.4716047 * float(x[1003]))+ (-0.370411 * float(x[1004]))+ (-0.23138723 * float(x[1005]))+ (0.90218145 * float(x[1006]))+ (0.87453413 * float(x[1007]))+ (1.7322421 * float(x[1008]))+ (0.36999726 * float(x[1009]))+ (1.7718033 * float(x[1010]))+ (-0.31545866 * float(x[1011]))+ (-0.26363993 * float(x[1012]))+ (-0.04778348 * float(x[1013]))+ (1.0193514 * float(x[1014]))+ (-1.674082 * float(x[1015]))+ (2.1723568 * float(x[1016]))+ (1.4425628 * float(x[1017]))+ (-1.837359 * float(x[1018]))+ (-0.018688757 * float(x[1019]))+ (-0.42717463 * float(x[1020]))+ (-2.6747534 * float(x[1021]))+ (2.866808 * float(x[1022]))+ (0.257722 * float(x[1023]))+ (2.2200663 * float(x[1024]))+ (-0.026443072 * float(x[1025]))+ (-1.6715811 * float(x[1026]))+ (-0.23058236 * float(x[1027]))+ (-0.8390036 * float(x[1028]))+ (-0.14485836 * float(x[1029]))+ (-0.25895104 * float(x[1030]))+ (-0.0024920318 * float(x[1031]))+ (-0.8522342 * float(x[1032]))+ (-0.0037500039 * float(x[1033]))+ (0.01224307 * float(x[1034]))+ (2.6359236 * float(x[1035]))+ (-0.4014735 * float(x[1036]))+ (-0.3560054 * float(x[1037]))+ (-0.84877896 * float(x[1038]))+ (-0.8271863 * float(x[1039]))+ (2.4813118 * float(x[1040]))+ (1.3322377 * float(x[1041]))+ (1.5217155 * float(x[1042]))+ (-1.9725963 * float(x[1043]))+ (-0.3287424 * float(x[1044]))+ (2.296072 * float(x[1045]))+ (2.523836 * float(x[1046]))+ (0.9142382 * float(x[1047]))+ (1.7807939 * float(x[1048]))+ (1.7612916 * float(x[1049])))+ ((0.11825552 * float(x[1050]))+ (-0.33748737 * float(x[1051]))+ (2.2536151 * float(x[1052]))+ (-0.63194484 * float(x[1053]))+ (2.2302845 * float(x[1054]))+ (2.1661456 * float(x[1055]))+ (-0.18267547 * float(x[1056]))+ (1.9662778 * float(x[1057]))+ (2.8787358 * float(x[1058]))+ (0.8792825 * float(x[1059]))+ (2.8471 * float(x[1060]))+ (0.018693412 * float(x[1061]))+ (-0.71488065 * float(x[1062]))+ (-0.32210755 * float(x[1063]))+ (-1.3844367 * float(x[1064]))+ (1.7556571 * float(x[1065]))+ (-0.7262335 * float(x[1066]))+ (-0.83669 * float(x[1067]))+ (-0.44904914 * float(x[1068]))+ (0.04938277 * float(x[1069]))+ (-0.39967832 * float(x[1070]))+ (-0.32234457 * float(x[1071]))+ (-1.1286176 * float(x[1072]))+ (1.9093862 * float(x[1073]))+ (0.9375157 * float(x[1074]))+ (2.1741753 * float(x[1075]))+ (-0.46874097 * float(x[1076]))+ (-0.60318965 * float(x[1077]))+ (-0.28140086 * float(x[1078]))+ (-0.255737 * float(x[1079]))+ (-1.1577141 * float(x[1080]))+ (2.1236374 * float(x[1081]))+ (-1.2912605 * float(x[1082]))+ (-0.85711175 * float(x[1083]))+ (1.3906167 * float(x[1084]))+ (-1.0955973 * float(x[1085]))+ (1.1743159 * float(x[1086]))+ (-3.6558995 * float(x[1087]))+ (1.2788128 * float(x[1088]))+ (0.22987518 * float(x[1089]))+ (2.4711297 * float(x[1090]))+ (-1.5307629 * float(x[1091]))+ (1.4864498 * float(x[1092]))+ (-0.009149086 * float(x[1093]))+ (-0.91206485 * float(x[1094]))+ (-0.10099779 * float(x[1095]))+ (1.4660983 * float(x[1096]))+ (0.0026918538 * float(x[1097]))+ (-0.60956705 * float(x[1098]))+ (-0.8102378 * float(x[1099])))+ ((1.9692487 * float(x[1100]))+ (-0.5020512 * float(x[1101]))+ (-0.15736875 * float(x[1102]))+ (-0.5546376 * float(x[1103]))+ (-0.73209864 * float(x[1104]))+ (-0.5489352 * float(x[1105]))+ (-0.38011596 * float(x[1106]))+ (-0.2041691 * float(x[1107]))+ (0.82307214 * float(x[1108]))+ (-1.747185 * float(x[1109]))+ (1.950453 * float(x[1110]))+ (-0.8768134 * float(x[1111]))+ (1.8562988 * float(x[1112]))+ (-0.9232202 * float(x[1113]))+ (-0.9856564 * float(x[1114]))+ (1.0935076 * float(x[1115]))+ (2.241061 * float(x[1116]))+ (-0.82650167 * float(x[1117]))+ (0.7988963 * float(x[1118]))+ (-0.68480414 * float(x[1119]))+ (-0.47478962 * float(x[1120]))+ (-0.20961817 * float(x[1121]))+ (-2.9900687 * float(x[1122]))+ (-0.2210286 * float(x[1123]))+ (-0.1083737 * float(x[1124]))+ (0.70118326 * float(x[1125]))+ (-0.83997405 * float(x[1126]))+ (-0.018786736 * float(x[1127]))+ (2.161307 * float(x[1128]))+ (1.664656 * float(x[1129]))+ (1.6913177 * float(x[1130]))+ (0.078770824 * float(x[1131]))+ (-1.2206668 * float(x[1132]))+ (-0.8905148 * float(x[1133]))+ (-0.73805124 * float(x[1134]))+ (1.8324074 * float(x[1135]))+ (-0.29431558 * float(x[1136]))+ (-0.15521201 * float(x[1137]))+ (-0.7850507 * float(x[1138]))+ (-1.6942372 * float(x[1139]))+ (2.5756867 * float(x[1140]))+ (2.0913887 * float(x[1141]))+ (0.0014833289 * float(x[1142]))+ (0.8822244 * float(x[1143]))+ (-0.62661624 * float(x[1144]))+ (-0.44727558 * float(x[1145]))+ (2.4962618 * float(x[1146]))+ (-0.77390045 * float(x[1147]))+ (1.173922 * float(x[1148]))+ (1.870131 * float(x[1149])))+ ((-1.0633711 * float(x[1150]))+ (-0.80180293 * float(x[1151]))+ (-0.22954048 * float(x[1152]))+ (0.9076685 * float(x[1153]))+ (0.8560422 * float(x[1154]))+ (-0.6757065 * float(x[1155]))+ (-0.4165295 * float(x[1156]))+ (1.4485049 * float(x[1157]))+ (-0.9459087 * float(x[1158]))+ (-0.74959135 * float(x[1159]))+ (-0.93127584 * float(x[1160]))+ (-2.6188006 * float(x[1161]))+ (-0.24896678 * float(x[1162]))+ (-0.43702465 * float(x[1163]))+ (1.0526493 * float(x[1164]))+ (2.57365 * float(x[1165]))+ (0.0031264117 * float(x[1166]))+ (1.5679442 * float(x[1167]))+ (-0.29515317 * float(x[1168]))+ (1.7251896 * float(x[1169]))+ (-0.24962364 * float(x[1170]))+ (-0.934623 * float(x[1171]))+ (-1.734498 * float(x[1172]))+ (-0.67924654 * float(x[1173]))+ (1.710601 * float(x[1174]))+ (-0.38472858 * float(x[1175]))+ (-1.474303 * float(x[1176]))+ (1.6030566 * float(x[1177]))+ (1.9019827 * float(x[1178]))+ (-0.050071064 * float(x[1179]))+ (1.926866 * float(x[1180]))+ (-0.56280035 * float(x[1181]))+ (-0.62292117 * float(x[1182]))+ (-0.73088574 * float(x[1183]))+ (-0.7382667 * float(x[1184]))+ (1.5150207 * float(x[1185]))+ (-0.71912813 * float(x[1186]))+ (-0.6703509 * float(x[1187]))+ (2.330865 * float(x[1188]))+ (-0.15320764 * float(x[1189]))+ (1.8016957 * float(x[1190]))+ (-0.7319364 * float(x[1191]))+ (-0.6164008 * float(x[1192]))+ (-0.04816778 * float(x[1193]))+ (0.054849442 * float(x[1194]))+ (-1.5717723 * float(x[1195]))+ (-0.21704422 * float(x[1196]))+ (0.14753611 * float(x[1197]))+ (0.83494693 * float(x[1198]))+ (-0.23303281 * float(x[1199])))+ ((1.7140878 * float(x[1200]))+ (2.2304811 * float(x[1201]))+ (0.04008849 * float(x[1202]))+ (1.8098617 * float(x[1203]))+ (0.045885764 * float(x[1204]))+ (0.913555 * float(x[1205]))+ (-1.2907332 * float(x[1206]))+ (0.45168626 * float(x[1207]))+ (1.8027263 * float(x[1208]))+ (-0.32059702 * float(x[1209]))+ (-0.15060088 * float(x[1210]))+ (1.661369 * float(x[1211]))+ (-0.97167134 * float(x[1212]))+ (1.9685788 * float(x[1213]))+ (-0.22291736 * float(x[1214]))+ (-0.48358092 * float(x[1215]))+ (-0.6386478 * float(x[1216]))+ (-0.8706235 * float(x[1217]))+ (0.8515172 * float(x[1218]))+ (1.4914119 * float(x[1219]))+ (1.4475352 * float(x[1220]))+ (-1.3130293 * float(x[1221]))+ (0.08167643 * float(x[1222]))+ (1.8921221 * float(x[1223]))+ (2.8113542 * float(x[1224]))+ (-0.46331623 * float(x[1225]))+ (-0.20546252 * float(x[1226]))+ (1.3392199 * float(x[1227]))+ (2.0073972 * float(x[1228]))+ (3.398486 * float(x[1229]))+ (1.1920065 * float(x[1230]))+ (-0.13671657 * float(x[1231]))+ (2.210301 * float(x[1232]))+ (0.06795642 * float(x[1233]))+ (1.5111111 * float(x[1234]))+ (0.10985745 * float(x[1235]))+ (1.8094229 * float(x[1236]))+ (-1.7091317 * float(x[1237]))+ (-2.5680075 * float(x[1238]))+ (-0.56496596 * float(x[1239]))+ (-0.33420932 * float(x[1240]))+ (-0.43503922 * float(x[1241]))+ (-0.14469524 * float(x[1242]))+ (0.859505 * float(x[1243]))+ (-0.251313 * float(x[1244]))+ (-0.631011 * float(x[1245]))+ (-0.12017093 * float(x[1246]))+ (3.0800738 * float(x[1247]))+ (-0.1426917 * float(x[1248]))+ (0.03434483 * float(x[1249])))+ ((0.94016725 * float(x[1250]))+ (-1.0354385 * float(x[1251]))+ (-0.23900141 * float(x[1252]))+ (0.07961266 * float(x[1253]))+ (2.763167 * float(x[1254]))+ (-0.5194982 * float(x[1255]))+ (-0.61978525 * float(x[1256]))+ (1.4751043 * float(x[1257]))+ (1.3436189 * float(x[1258]))+ (-0.6673918 * float(x[1259]))+ (1.0446315 * float(x[1260]))+ (-0.7476865 * float(x[1261]))+ (0.13705896 * float(x[1262]))+ (-0.12602776 * float(x[1263]))+ (-1.4269261 * float(x[1264]))+ (1.9729905 * float(x[1265]))+ (1.4415427 * float(x[1266]))+ (-1.7012422 * float(x[1267]))+ (-0.023111023 * float(x[1268]))+ (-0.84145105 * float(x[1269]))+ (1.7164291 * float(x[1270]))+ (1.4787569 * float(x[1271]))+ (-0.2454525 * float(x[1272]))+ (-1.3128866 * float(x[1273]))+ (0.020115532 * float(x[1274]))+ (-0.22938621 * float(x[1275]))+ (1.6151975 * float(x[1276]))+ (-0.60931987 * float(x[1277]))+ (0.54048544 * float(x[1278]))+ (-0.84085375 * float(x[1279]))+ (-0.82986945 * float(x[1280]))+ (-0.7432112 * float(x[1281]))+ (-0.8033392 * float(x[1282]))+ (2.000977 * float(x[1283]))+ (1.8743356 * float(x[1284]))+ (-0.94588435 * float(x[1285]))+ (-0.9546194 * float(x[1286]))+ (-0.33021507 * float(x[1287]))+ (2.3258247 * float(x[1288]))+ (-3.001933 * float(x[1289]))+ (-0.24610019 * float(x[1290]))+ (1.3453755 * float(x[1291]))+ (-1.0878347 * float(x[1292]))+ (2.3379855 * float(x[1293]))+ (1.588451 * float(x[1294]))+ (0.00015842052 * float(x[1295]))+ (1.8629385 * float(x[1296]))+ (-0.5167942 * float(x[1297]))+ (-0.6523864 * float(x[1298]))+ (-0.14648333 * float(x[1299])))+ ((-0.39777634 * float(x[1300]))+ (-0.027525473 * float(x[1301]))+ (-0.45276156 * float(x[1302]))+ (-0.21433635 * float(x[1303]))+ (-0.14986803 * float(x[1304]))+ (-1.3708481 * float(x[1305]))+ (1.8244958 * float(x[1306]))+ (-0.022337988 * float(x[1307]))+ (-0.8294131 * float(x[1308]))+ (2.4401548 * float(x[1309]))+ (-0.662105 * float(x[1310]))+ (1.7491415 * float(x[1311]))+ (1.9160606 * float(x[1312]))+ (-2.9790406 * float(x[1313]))+ (-3.3372972 * float(x[1314]))+ (-1.2847528 * float(x[1315]))+ (-0.19420741 * float(x[1316]))+ (1.9171392 * float(x[1317]))+ (1.899373 * float(x[1318]))+ (0.8995748 * float(x[1319]))+ (-0.11675157 * float(x[1320]))+ (0.07881757 * float(x[1321]))+ (-1.2722436 * float(x[1322]))+ (-0.1828831 * float(x[1323]))+ (1.341202 * float(x[1324]))+ (-0.81183094 * float(x[1325]))+ (1.1787705 * float(x[1326]))+ (2.7730196 * float(x[1327]))+ (-0.5838874 * float(x[1328]))+ (-0.47427183 * float(x[1329]))+ (1.2233312 * float(x[1330]))+ (-0.35710287 * float(x[1331]))+ (0.047548328 * float(x[1332]))+ (0.93324715 * float(x[1333]))+ (-0.24297577 * float(x[1334]))+ (0.6248584 * float(x[1335]))+ (-0.94144166 * float(x[1336]))+ (1.7102762 * float(x[1337]))+ (2.3460548 * float(x[1338]))+ (2.2093155 * float(x[1339]))+ (-0.29358327 * float(x[1340]))+ (2.003007 * float(x[1341]))+ (2.4178562 * float(x[1342]))+ (0.16610372 * float(x[1343]))+ (1.0762941 * float(x[1344]))+ (1.6587121 * float(x[1345]))+ (1.9149166 * float(x[1346]))+ (0.09327109 * float(x[1347]))+ (1.9145645 * float(x[1348]))+ (-0.21007654 * float(x[1349])))+ ((0.046207618 * float(x[1350]))+ (1.2995133 * float(x[1351]))+ (1.7091424 * float(x[1352]))+ (2.1730826 * float(x[1353]))+ (-0.33688337 * float(x[1354]))+ (2.5948071 * float(x[1355]))+ (-0.780834 * float(x[1356]))+ (1.5161492 * float(x[1357]))+ (0.8536297 * float(x[1358]))+ (-0.2092544 * float(x[1359]))+ (-0.4563187 * float(x[1360]))+ (1.0505638 * float(x[1361]))+ (2.894375 * float(x[1362]))+ (-1.5242865 * float(x[1363]))+ (-0.31439674 * float(x[1364]))+ (-0.862817 * float(x[1365]))+ (-0.71163666 * float(x[1366]))+ (-1.7296135 * float(x[1367]))+ (1.2192246 * float(x[1368]))+ (-0.499282 * float(x[1369]))+ (-1.1292766 * float(x[1370]))+ (-0.24622834 * float(x[1371]))+ (-0.6868705 * float(x[1372]))+ (0.2694121 * float(x[1373]))+ (0.046861187 * float(x[1374]))+ (-0.15716851 * float(x[1375]))+ (2.1797106 * float(x[1376]))+ (-0.4645309 * float(x[1377]))+ (-0.34286207 * float(x[1378]))+ (-0.8726095 * float(x[1379]))+ (3.4194934 * float(x[1380]))+ (-0.67319065 * float(x[1381]))+ (-0.9893559 * float(x[1382]))+ (1.5487329 * float(x[1383]))+ (-0.69572014 * float(x[1384]))+ (2.7973883 * float(x[1385]))+ (-1.1153634 * float(x[1386]))+ (-0.5124508 * float(x[1387]))+ (-3.2975476 * float(x[1388]))+ (3.5824894e-05 * float(x[1389]))+ (-0.5505158 * float(x[1390]))+ (2.5272763 * float(x[1391]))+ (1.560776 * float(x[1392]))+ (1.2987909 * float(x[1393]))+ (0.71879303 * float(x[1394]))+ (1.5572278 * float(x[1395]))+ (-0.059618756 * float(x[1396]))+ (0.58626956 * float(x[1397]))+ (1.893106 * float(x[1398]))+ (0.8092808 * float(x[1399])))+ ((1.8075151 * float(x[1400]))+ (-0.0038929693 * float(x[1401]))+ (1.520054 * float(x[1402]))+ (-1.5457007 * float(x[1403]))+ (2.3035693 * float(x[1404]))+ (-0.2526314 * float(x[1405]))+ (-0.2909052 * float(x[1406]))+ (-1.0486488 * float(x[1407]))+ (1.7120755 * float(x[1408]))+ (-0.05365058 * float(x[1409]))+ (1.0854737 * float(x[1410]))+ (1.4409196 * float(x[1411]))+ (-0.78322905 * float(x[1412]))+ (1.6417884 * float(x[1413]))+ (-0.662322 * float(x[1414]))+ (-0.5364624 * float(x[1415]))+ (0.11867888 * float(x[1416]))+ (-0.8362073 * float(x[1417]))+ (-0.47020096 * float(x[1418]))+ (-0.38424507 * float(x[1419]))+ (-0.5524397 * float(x[1420]))+ (-1.3229423 * float(x[1421]))+ (0.7717166 * float(x[1422]))+ (2.8339958 * float(x[1423]))+ (0.8586037 * float(x[1424]))+ (-0.77230644 * float(x[1425]))+ (0.030498363 * float(x[1426]))+ (2.0907314 * float(x[1427]))+ (1.8175609 * float(x[1428]))+ (-0.42236143 * float(x[1429]))+ (-0.4400225 * float(x[1430]))+ (1.3593775 * float(x[1431]))+ (-0.1449577 * float(x[1432]))+ (-0.19045724 * float(x[1433]))+ (1.3601441 * float(x[1434]))+ (1.4467386 * float(x[1435]))+ (0.41230196 * float(x[1436]))+ (1.4604651 * float(x[1437]))+ (-0.3620595 * float(x[1438]))+ (-0.032239847 * float(x[1439]))+ (-0.26163873 * float(x[1440]))+ (-0.028336158 * float(x[1441]))+ (0.30554104 * float(x[1442]))+ (-0.15624443 * float(x[1443]))+ (-0.9087993 * float(x[1444]))+ (2.860021 * float(x[1445]))+ (-0.60727954 * float(x[1446]))+ (-0.7170083 * float(x[1447]))+ (-1.2526872 * float(x[1448]))+ (-0.34471393 * float(x[1449])))+ ((-2.1761148 * float(x[1450]))+ (-1.4534849 * float(x[1451]))+ (1.7395153 * float(x[1452]))+ (-0.6810214 * float(x[1453]))+ (-1.3949332 * float(x[1454]))+ (1.646876 * float(x[1455]))+ (-0.6683283 * float(x[1456]))+ (-0.22972709 * float(x[1457]))+ (-1.1392505 * float(x[1458]))+ (-2.357775 * float(x[1459]))+ (-0.5217243 * float(x[1460]))+ (-0.20080908 * float(x[1461]))+ (-0.68118906 * float(x[1462]))+ (-0.6357949 * float(x[1463]))+ (0.9855071 * float(x[1464]))+ (-0.6867071 * float(x[1465]))+ (-0.23908365 * float(x[1466]))+ (-0.25815934 * float(x[1467]))+ (-1.5653895 * float(x[1468]))+ (1.1785625 * float(x[1469]))+ (0.46135917 * float(x[1470]))+ (-1.28936 * float(x[1471]))+ (-1.3698418 * float(x[1472]))+ (-1.9968144 * float(x[1473]))+ (-0.06343817 * float(x[1474]))+ (-1.1156353 * float(x[1475]))+ (1.1472695 * float(x[1476]))+ (-1.0453568 * float(x[1477]))+ (-0.531948 * float(x[1478]))+ (-0.771174 * float(x[1479]))+ (-2.3005292 * float(x[1480]))+ (-1.2776423 * float(x[1481]))+ (-1.0524069 * float(x[1482]))+ (1.2945892 * float(x[1483]))+ (2.927966 * float(x[1484]))+ (1.517018 * float(x[1485]))+ (-0.7168998 * float(x[1486]))+ (0.26422846 * float(x[1487]))+ (-0.72450143 * float(x[1488]))+ (-0.64116085 * float(x[1489]))+ (-0.76557493 * float(x[1490]))+ (0.3830064 * float(x[1491]))+ (-0.6558684 * float(x[1492]))+ (-1.8889765 * float(x[1493]))+ (0.9173903 * float(x[1494]))+ (-0.18256995 * float(x[1495]))+ (-0.46724507 * float(x[1496]))+ (-1.2069134 * float(x[1497]))+ (-1.193599 * float(x[1498]))+ (-0.16355486 * float(x[1499])))+ ((1.3770008 * float(x[1500]))+ (0.8774949 * float(x[1501]))+ (-0.93436074 * float(x[1502]))+ (-1.8196545 * float(x[1503]))+ (-1.5699826 * float(x[1504]))+ (-1.1943527 * float(x[1505]))+ (-0.20931233 * float(x[1506]))+ (-0.44482866 * float(x[1507]))+ (-0.8282847 * float(x[1508]))+ (0.47877344 * float(x[1509]))+ (0.56890625 * float(x[1510]))+ (-0.6556749 * float(x[1511]))+ (-0.804619 * float(x[1512]))+ (2.7470086 * float(x[1513]))+ (0.37409082 * float(x[1514]))+ (-0.5144813 * float(x[1515]))+ (0.1415437 * float(x[1516]))+ (-0.31831622 * float(x[1517]))+ (1.1272497 * float(x[1518]))+ (-0.38432875 * float(x[1519]))+ (-0.21411496 * float(x[1520]))+ (0.8008311 * float(x[1521]))+ (-0.5996049 * float(x[1522]))+ (-1.218948 * float(x[1523]))+ (-0.66782475 * float(x[1524]))+ (-0.8170427 * float(x[1525]))+ (1.0142152 * float(x[1526]))+ (0.9294479 * float(x[1527]))+ (-0.7150507 * float(x[1528]))+ (-1.9582791 * float(x[1529]))+ (0.18643893 * float(x[1530]))+ (-1.0119822 * float(x[1531]))+ (0.8552429 * float(x[1532]))+ (-1.1002475 * float(x[1533]))+ (0.5524953 * float(x[1534]))+ (0.5695527 * float(x[1535]))+ (-0.41928047 * float(x[1536]))+ (-1.7408973 * float(x[1537]))+ (-0.97511756 * float(x[1538]))+ (0.69583887 * float(x[1539]))+ (-1.208889 * float(x[1540]))+ (2.3399887 * float(x[1541]))+ (0.70688814 * float(x[1542]))+ (-0.21866935 * float(x[1543]))+ (0.006822877 * float(x[1544]))+ (-1.3669122 * float(x[1545]))+ (-2.4699697 * float(x[1546]))+ (-0.55161196 * float(x[1547]))+ (-1.2835437 * float(x[1548]))+ (-1.4902222 * float(x[1549])))+ ((-0.92357385 * float(x[1550]))+ (0.43103832 * float(x[1551]))+ (1.0374016 * float(x[1552]))+ (-0.78308177 * float(x[1553]))+ (2.352565 * float(x[1554]))+ (2.694056 * float(x[1555]))+ (1.3578355 * float(x[1556]))+ (0.73765796 * float(x[1557]))) + -0.91140264), 0)
    o[0] = (1.3869001 * h_0)+ (4.9904494 * h_1)+ (-4.9239645 * h_2) + -0.74018526

    if num_output_logits == 1:
        return o[0] >= 0
    else:
        return argmax(o)


#for classifying batches
def classify(arr):
    outputs = []
    for row in arr:
        outputs.append(single_classify(row))
    return outputs

def Validate(cleanvalfile):
    #Binary
    if n_classes == 2:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
            valcsvreader = csv.reader(valcsvfile)
            preds = []
            y_trues = []
            for valrow in valcsvreader:
                if len(valrow) == 0:
                    continue
                y_true = int(float(valrow[-1]))
                pred = int(single_classify(valrow[:-1]))
                y_trues.append(y_true)
                preds.append(pred)
                if pred == y_true:
                    correct_count += 1
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_TP += 1
                    else:
                        num_class_0 += 1
                        num_TN += 1
                else:
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_FN += 1
                    else:
                        num_class_0 += 1
                        num_FP += 1
                count += 1
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, y_trues

    #Multiclass
    else:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count = 0, 0
            valcsvreader = csv.reader(valcsvfile)
            numeachclass = {}
            preds = []
            y_trues = []
            for i, valrow in enumerate(valcsvreader):
                pred = int(single_classify(valrow[:-1]))
                preds.append(pred)
                y_true = int(float(valrow[-1]))
                y_trues.append(y_true)
                if len(valrow) == 0:
                    continue
                if pred == y_true:
                    correct_count += 1
                #if class seen, add to its counter
                if y_true in numeachclass.keys():
                    numeachclass[y_true] += 1
                #initialize a new counter
                else:
                    numeachclass[y_true] = 1
                count += 1
        return count, correct_count, numeachclass, preds,  y_trues



def Predict(cleanfile, preprocessedfile, headerless, get_key, classmapping):
    with open(cleanfile,'r') as cleancsvfile, open(preprocessedfile,'r') as dirtycsvfile:
        cleancsvreader = csv.reader(cleancsvfile)
        dirtycsvreader = csv.reader(dirtycsvfile)
        if (not headerless):
            print(','.join(next(dirtycsvreader, None) + ["Prediction"]))
        for cleanrow, dirtyrow in zip(cleancsvreader, dirtycsvreader):
            if len(cleanrow) == 0:
                continue
            print(str(','.join(str(j) for j in ([i for i in dirtyrow]))) + ',' + str(get_key(int(single_classify(cleanrow)), classmapping)))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    args = parser.parse_args()
    faulthandler.enable()
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #Predict
    if not args.validate:
        Predict(cleanfile, preprocessedfile, args.headerless, get_key, classmapping)


    #Validate
    else: 
        classifier_type = 'NN'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)

        #Report Metrics
        model_cap=4681
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count
        
            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            if args.json:
                #                json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'n_classes':2, 'Number of False Negative Instances': num_FN, 'Number of False Positive Instances': num_FP, 'Number of True Positive Instances': num_TP, 'Number of True Negative Instances': num_TN,   'False Negatives': FN, 'False Positives': FP, 'True Negatives': TN, 'True Positives': TP, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0}
                json_dict = {'instance_count':                        count ,
                            'classifier_type':                        classifier_type ,
                            'n_classes':                            2 ,
                            'number_of_false_negative_instances':    num_FN ,
                            'number_of_false_positive_instances':    num_FP ,
                            'number_of_true_positive_instances':    num_TP ,
                            'number_of_true_negative_instances':    num_TN,
                            'false_negatives':                        FN ,
                            'false_positives':                        FP ,
                            'true_negatives':                        TN ,
                            'true_positives':                        TP ,
                            'number_correct':                        num_correct ,
                            'best_guess':                            randguess ,
                            'model_accuracy':                        modelacc ,
                            'model_capacity':                        model_cap ,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                             }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            if args.json:
        #        json_dict = {'Instance Count':count, 'classifier_type':classifier_type, 'Number Correct': num_correct, 'Best Guess': randguess, 'Model Accuracy': modelacc, 'Model Capacity': model_cap, 'Generalization Ratio': int(float(num_correct * 100) / model_cap) / 100.0, 'Model Efficiency': int(100 * (modelacc - randguess) / model_cap) / 100.0, 'n_classes': n_classes}
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'n_classes':                            n_classes,
                            'number_correct':                        num_correct,
                            'best_guess':                            randguess,
                            'model_accuracy':                        modelacc,
                            'model_capacity':                        model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0
                            }
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                sys.exit()
            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")


            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            n_labels = labels.size
            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]
            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm
        mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)



#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is
# licensed under GNU GPL v2.0 or higher. For details, please see:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.96 Table Compiler v0.96.
# Invocation: btc https://www.openml.org/data/get_csv/19335686/file1c5552c0c4b0.arff -o Predictors/dilbert_QC.py -target class -stopat 33.91 -f QC -e 100 --yes --runlocalonly
# Total compiler execution time: 0:02:31.90. Finished on: May-21-2020 20:28:26.
# This source code requires Python 3.
#
"""
Classifier Type: Quick Clustering
System Type:                        5-way classifier
Best-guess accuracy:                20.49%
Model accuracy:                     62.85% (6285/10000 correct)
Improvement over best guess:        42.36% (of possible 79.51%)
Model capacity (MEC):               3757 bits
Generalization ratio:               1.67 bits/bit
Confusion Matrix:
 [11.80% 2.13% 1.75% 2.25% 1.95%]
 [1.99% 13.62% 1.62% 1.44% 1.82%]
 [1.84% 1.66% 11.86% 1.92% 1.85%]
 [2.03% 1.67% 1.71% 13.27% 1.78%]
 [2.05% 1.71% 1.91% 2.07% 12.30%]

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "file1c5552c0c4b0.csv"


#Number of attributes
num_attr = 2000
n_classes = 5


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="class"


    if (testfile):
        target = ''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if (target != ''): 
                        hc = header.index(target)
                    else:
                        hc = len(header) - 1
                        target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                for i in range(0, len(header)):      
                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i] + ",", end='', file=outputfile)
                print(header[hc], file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"' + row[name] + '"' + ",", end='', file=outputfile)
                        else:
                            print (row[name] + ",", end='', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc =- 1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc == -1):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if (',' in row[i]):
                            print ('"' + row[i] + '"'+",", end='', file=outputfile)
                        else:
                            print(row[i]+",", end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([176.8779429, 181.90942855000003, 183.06692545, 184.11666795, 191.91736265, 192.51693880000002, 196.63692805000002, 196.9569062, 201.18850079999999, 201.58899244999998, 201.83043444999998, 202.59644229999998, 204.09735754999997, 204.45950475, 205.99398405, 206.49835075, 207.372771, 207.70122275, 212.70859225, 212.83084140000003, 213.61937395, 213.72743685, 214.16714815, 214.28702405, 214.78750305, 214.9534279, 216.50930835, 216.74470480000002, 217.04639405, 217.0497201, 217.77827854999998, 217.8882133, 218.32008185, 218.71235604999998, 220.074052, 220.18264119999998, 220.39705404999998, 220.60360549999996, 220.77796515, 221.5292382, 222.22452665, 223.1586541, 225.4759312, 225.57096105, 225.76062679999998, 225.9055396, 225.95430605, 226.6964076, 227.00242980000002, 227.08107825000002, 228.2036099, 228.31995815, 229.8324179, 230.21912965, 230.74352165, 230.994727, 232.024359, 232.16918830000003, 235.13834375, 235.59580855000002, 235.8742851, 236.3927867, 236.8090367, 236.97023915, 237.87091705, 238.0273136, 238.4896354, 239.08034435, 239.30510759999999, 239.4180159, 240.36047065, 240.67281735, 240.9351843, 241.1978611, 241.330797, 241.63220035, 241.94217835, 242.17047280000003, 242.62515055, 242.9996564, 243.4131609, 243.81832785, 243.87424420000002, 244.05949175, 244.62315495, 244.80232160000003, 245.2772526, 245.71103665, 245.89711015, 246.16663035000002, 246.38938690000003, 246.6907568, 247.06382194999998, 247.78153659999998, 252.17242135, 252.54823334999998, 253.272395, 253.87374455, 254.6580244, 254.71396555, 254.8114943, 255.77664650000003, 255.9545448, 256.00376289999997, 256.07994685000006, 256.2202662, 256.37625219999995, 257.00833945, 257.7410706, 257.99491494999995, 258.32534505, 258.5164559, 258.57324589999996, 258.6937446, 258.9805805, 259.12165245, 260.01833895, 260.26682545, 260.58052684999996, 261.18879205, 261.74191895, 261.8044957, 262.48821234999997, 262.7779268, 262.91173765, 263.19202570000004, 263.89033625, 264.1921878, 264.68537495, 265.6038868, 265.97162395, 266.09251900000004, 266.3985342, 266.49052635, 266.59592525, 266.72895884999997, 267.1007535, 267.3689605, 267.38606025, 267.4664522, 268.12237799999997, 268.22760785, 268.30279399999995, 268.4351966, 268.62022425, 268.85742815, 269.12825245, 269.24605760000003, 269.96292325, 270.36793554999997, 270.6416403, 271.00495555, 271.18389855, 271.47468165, 271.77822435, 271.98200095000004, 272.116602, 272.16200885, 272.36006745000003, 272.4912184, 272.73292375, 272.85600650000003, 273.1484415, 273.47364415, 273.672578, 273.88889205, 274.05415204999997, 274.24923509999996, 274.37407815, 275.4084389, 275.5650688, 275.7307214, 275.89873205000004, 278.81518619999997, 279.0982201, 279.14799935, 279.21676279999997, 279.6327387, 279.81273225, 280.24060755000005, 280.31232950000003, 280.37653035000005, 280.5206514, 280.6185777, 281.35164765, 281.4798484, 281.90304779999997, 282.03006515000004, 282.1611672, 282.32792635, 282.87522709999996, 283.230819, 283.37407415, 283.42987105, 283.49546599999996, 283.76872879999996, 284.5444144, 284.75507185, 284.9974711, 285.5920014, 285.84052099999997, 286.04066965, 286.62221305, 286.7405221, 286.91306119999996, 287.2055941, 287.64626895000004, 287.97524080000005, 288.0605626, 288.23727955, 288.4404661, 288.6362447, 288.81975939999995, 289.66066425, 289.7095592, 290.43528555, 290.56138175, 290.9909252, 291.43886455, 291.6372976, 291.9143136, 292.36109945, 293.1949069, 293.52933205, 294.13005975, 294.18922069999996, 294.36764589999996, 294.51571965, 294.7540406, 295.38514095, 295.7920687, 296.16159815000003, 296.4293315, 296.64745030000006, 296.96060224999997, 296.98611465, 297.29575475, 297.39258944999995, 297.4944537, 297.78159330000005, 298.0746712, 298.2801707, 298.61221524999996, 299.1810136, 299.28003845, 299.39279355, 299.49836895000004, 299.57682100000005, 299.7007827, 299.8210477, 299.97878745, 300.11803255, 300.2804017, 300.83195065, 301.137197, 301.2424228, 301.51091985, 302.11392305, 302.30049245, 302.70961750000004, 302.89932875, 303.1317793, 303.39493295, 303.45323529999996, 303.51206085, 303.77003065, 303.99469215, 304.10244035, 304.49141084999997, 304.8834026, 304.9466191, 304.9959594, 305.16027285, 305.3484682, 305.47494355, 305.5643013, 305.62433745, 305.67828000000003, 305.9307501, 306.53564159999996, 306.65104415, 306.8858531, 307.13845565, 307.75721185, 307.95985395, 308.4954084, 308.67613735, 308.98248415, 309.1030223, 309.14958355, 309.29291135, 309.56297470000004, 309.5697629, 309.631172, 310.11676839999996, 310.1574942, 310.1892077, 310.40896525, 310.47697445, 310.5614795, 310.71286335, 310.77530035, 310.91455010000004, 311.09646225000006, 311.17633335000005, 311.37590850000004, 311.73249369999996, 311.8311863, 311.90036030000005, 311.983579, 312.11558815, 312.19689295, 312.28146964999996, 312.44779785000003, 312.57184175000003, 312.69078220000006, 312.8769385, 313.03095245, 313.10649815, 313.13081275, 313.2973103, 313.45533815, 313.51148255, 313.66673535, 313.77979175, 313.79041405, 313.8153631, 313.88247839999997, 313.9507033, 314.0549233, 314.1428633, 314.14645955000003, 314.34503559999996, 314.4059238, 314.50877525000004, 314.57281205000004, 314.7324521, 314.91120794999995, 315.07370055, 315.21931725, 315.3609262, 316.09712650000006, 316.34192755000004, 316.45356350000003, 316.5191241, 316.6983725, 316.8558645, 316.9802938, 317.22308015, 317.63929325, 317.712723, 317.816884, 317.9335927, 318.03154505, 318.19535035, 318.29865355000004, 318.45060295, 318.8059191, 318.90179765, 319.09723844999996, 319.22357975, 319.37833345, 319.52325395, 319.67920234999997, 319.98130455, 320.230503, 320.39465465, 320.54118239999997, 320.9566062, 321.2131088, 321.42530605, 321.5567398, 321.91797675, 322.86387295, 323.22345505, 323.277388, 323.3155185, 323.4037576, 323.4896307, 323.54469125, 323.60779795, 323.66554045, 323.6867176, 323.85043055, 324.13790309999996, 324.17739109999997, 324.2476259, 324.40833784999995, 324.60371895000003, 324.82496255, 324.8698334, 324.8963158, 324.95875815, 325.4184116, 325.47318145, 325.51865545, 326.0164777, 326.11520865, 326.15221499999996, 326.17891355, 326.18749545000003, 326.21253385, 326.37103809999996, 326.59085485, 326.74798110000006, 327.31663055, 327.42097075, 327.58741165000004, 327.61195240000006, 327.64965900000004, 327.7407822, 327.8556352, 327.98882795000003, 328.1280559, 328.27714395, 328.48625505, 329.1298152, 329.21890924999997, 329.3713227, 329.57189800000003, 329.7598966, 329.82794959999995, 329.88609995, 330.0332938, 330.20489175, 330.3459695, 330.72736905, 331.2077643, 331.48237770000003, 331.61721804999996, 331.7086872, 331.75746525, 331.8454934, 331.97574035, 332.06631975000005, 332.0969863, 332.20805025, 332.36542844999997, 332.46927885, 332.52391205000004, 332.68379625, 332.90489585, 332.9868487, 333.06087045, 333.07838285, 333.10395630000005, 333.17756995, 333.28571865, 333.64378805, 333.79536314999996, 333.9584282, 333.9993068, 334.21017105, 334.38038200000005, 334.4110498, 334.49412785, 334.74557450000003, 335.0529988, 335.24908565, 335.51757095, 335.785592, 335.84118435000005, 336.01646105, 336.1693372, 336.2931669, 336.398214, 336.6080508, 336.83357594999995, 336.93689084999994, 337.0356424, 337.2336173, 337.40255625, 337.43897065, 337.50984525, 337.60558385, 337.70171645, 337.75102595, 337.88200875, 338.0225926, 338.05854754999996, 338.0849482, 338.2315263, 338.27235205, 338.3204984, 338.34560969999995, 338.39843455, 338.45485915, 338.48691564999996, 338.4973616, 338.51036375, 338.5215514, 338.60492605, 338.8762577, 339.08937675000004, 339.1724189, 339.29664165, 339.4090739, 339.68307195, 339.90739335, 339.9303152, 339.99213584999995, 340.08156054999995, 340.13748185, 340.17034565, 340.18649100000005, 340.2121331000001, 340.2539838, 340.2772225, 340.28048824999996, 340.33052575, 340.3760061, 340.41592645000003, 340.45709405, 340.51902895, 340.62604319999997, 340.76629675, 340.88489734999996, 341.0158057, 341.07652455, 341.12702915, 341.463066, 341.51625965000005, 341.53970530000004, 341.5811008, 341.85347885, 342.09705564999996, 342.1365198, 342.21885545, 342.29415885000003, 342.3569589, 342.59241865, 342.82332435, 342.870898, 343.05043309999996, 343.39817089999997, 343.5579227, 343.6884035, 343.71362535000003, 343.75641870000004, 343.76603205000004, 343.79253065, 343.94543145, 344.00285785000005, 344.04226325, 344.06360895, 344.21980495, 344.37706425, 344.4156713, 344.47970855, 344.56012415, 344.6153295, 344.66077484999994, 344.81508844999996, 344.9756563, 345.02508320000004, 345.03840285, 345.12723544999994, 345.3978502, 345.62131305, 345.74279225, 345.8474379, 345.87940775, 345.94843195, 346.00919945, 346.01729209999996, 346.1540125, 346.25327805, 346.36958315000004, 346.44334585, 346.54255824999996, 346.67365269999993, 346.7641843, 346.7880736, 346.81483625, 346.85899095, 347.02322485, 347.21090335, 347.375765, 347.3993018, 347.47696729999996, 347.52706605000003, 347.67383859999995, 347.7623182, 347.9701907, 348.1197699, 348.3465512, 348.495738, 348.52883945, 348.57702, 348.62682500000005, 348.68196905, 348.94433345, 349.14109069999995, 349.19725235, 349.26937095, 349.3699446, 349.60623139999996, 349.7338295, 349.87154115, 349.89962405, 350.02969305, 350.16909705, 350.2594318, 350.3451712, 350.38274079999997, 350.42292075, 350.4729939, 350.5199779, 350.6294379, 350.72829215, 350.73044405, 350.7779759, 350.84106729999996, 350.86227675, 350.89425700000004, 350.96226815, 351.04015395, 351.10303395, 351.13757275, 351.19660350000004, 351.24635445, 351.39879205, 351.5407142, 351.58827985000005, 351.68851440000003, 351.76041105, 351.84754205, 351.96288605, 352.18722255, 352.2494724, 352.45037545, 352.50542305, 352.73089225, 352.98460485, 353.10772175, 353.22750995, 353.29875604999995, 353.3816335, 353.58726265000007, 353.8076618, 353.90731065, 354.0375874, 354.16362425, 354.34736369999996, 354.39059835, 354.43286835, 354.49416340000005, 354.56642945, 354.6202247, 354.75359005, 354.84423060000006, 354.92879865, 354.950049, 355.00105644999996, 355.04200375000005, 355.19645315, 355.36112945, 355.39146965, 355.41676005, 355.4396348, 355.4703824, 355.55036675, 355.71451195000003, 355.93123485, 356.07501265, 356.2107188, 356.27651755, 356.37037515, 356.64059745, 356.91236125, 356.970147, 356.98648860000003, 357.13675709999995, 357.29107899999997, 357.3387878, 357.39619725, 357.44129845, 357.48822444999996, 357.51767170000005, 357.60093715000005, 357.824905, 358.05667955, 358.0953469, 358.1305063, 358.20398155, 358.2771637, 358.31224625000004, 358.35118805, 358.3792098, 358.38254805, 358.65509225000005, 358.8752482, 358.94924304999995, 359.00090794999994, 359.01495415, 359.1101857, 359.1927137, 359.25872604999995, 359.32879175, 359.36670735000007, 359.46382355000003, 359.8584024, 360.12851345, 360.2667066, 360.27570790000004, 360.31036765, 360.3743555, 360.4265606, 360.8287222, 360.96559545, 361.0888262, 361.21483780000005, 361.33105075, 361.34912195, 361.35165630000006, 361.43341675, 361.6843903, 361.90423105, 362.13689185, 362.3178726, 362.3653708, 362.3984091, 362.42525505000003, 362.50977805, 362.68329544999995, 362.81488479999996, 362.8449699, 362.90174004999994, 362.99401285, 363.03725840000004, 363.0621547, 363.20231755, 363.3309055, 363.4106051, 363.509203, 363.5571304, 363.6603404, 363.73736795, 363.7811491, 363.97309555, 363.98841335, 364.00724105, 364.0983182, 364.2322777, 364.30875199999997, 364.34714755000005, 364.4412168, 364.63132340000004, 364.70453275, 365.0020217, 365.0353916, 365.09536695, 365.1496886, 365.1683766, 365.32824865, 365.33716215, 365.38866835, 365.44486525, 365.47209335, 365.5291492, 365.96776915, 366.02200895, 366.08712849999995, 366.2350659, 366.37997225000004, 366.44324720000003, 366.61530065, 366.71669985000005, 366.9107457, 367.0598872, 367.09932504999995, 367.1266214, 367.22826905, 367.495455, 367.74342429999996, 367.80177184999997, 367.8466529, 367.87149465, 368.00698415, 368.06902005, 368.0931036, 368.10650505, 368.1256127, 368.18303725, 368.351309, 368.38742264999996, 368.46514425, 368.61981435, 368.7220073, 368.7623239, 368.79222775, 368.90149845, 368.9725207, 368.98549030000004, 369.06957885, 369.1736764, 369.27588000000003, 369.4549483, 369.56848645, 369.59339205000003, 369.62338439999996, 369.6857869, 369.7382027, 369.78341335, 369.870229, 370.20589845, 370.29988435, 370.38428705, 370.3977967000001, 370.42383135, 370.44297159999996, 370.46264145, 370.51050769999995, 370.55603709999997, 370.6760325, 370.76970665, 370.83023095, 370.89200755, 371.04694904999997, 371.393888, 371.5490845, 371.7077523, 371.74847709999995, 371.7691859, 371.84788775000004, 371.9631038, 372.0271523, 372.06662885000003, 372.12131165, 372.14648145, 372.21257975000003, 372.27238090000003, 372.3088567, 372.4785178, 372.67346415, 372.90803919999996, 372.9554725, 373.08632144999996, 373.21254485, 373.24056214999996, 373.2629609, 373.3020651, 373.34762735000004, 373.36802720000003, 373.81989004999997, 373.825195, 373.8961193, 373.9790549, 374.04670445, 374.1075624, 374.18902764999996, 374.32901315, 374.33814665, 374.3694868, 374.40162150000003, 374.41114899999997, 374.57071505, 374.60370524999996, 374.67617655000004, 374.77147695, 374.83976735, 374.97282555000004, 375.1089554, 375.17089020000003, 375.28209645000004, 375.34885810000003, 375.36186269999996, 375.37488045000003, 375.42300950000003, 375.53177405, 375.60006269999997, 375.67463635, 375.8773036, 376.07069509999997, 376.09647974999996, 376.19342685, 376.30657694999996, 376.44727385, 376.65403575, 376.77966575, 376.79295675000003, 376.82059805, 376.83985045, 376.99407345, 377.37724449999996, 377.7650853, 377.92848945000003, 378.04990680000003, 378.24201295, 378.4850532, 378.74279364999995, 378.76377835, 378.79478295, 378.83758415, 378.85450315, 378.95888915, 379.06548680000003, 379.2580111, 379.3796018, 379.48727685, 379.56011209999997, 379.71525305, 379.83763955000006, 380.01817330000006, 380.20042075000003, 380.25413805000005, 380.32836514999997, 380.40693294999994, 380.45712, 380.4984305, 380.54852175, 380.5805846, 380.6477736, 380.80534969999997, 380.90403564999997, 380.9392962, 380.9577082, 380.97141755, 381.05534845, 381.13901105, 381.2366696, 381.29448375000004, 381.34993554999994, 381.40244855, 381.4321951, 381.50502525, 381.703297, 381.7790693, 381.8466085, 381.9514948, 382.05370825, 382.14221735, 382.18337055000006, 382.26077805, 382.32705869999995, 382.34614969999996, 382.37817715, 382.42064525, 382.4958583, 382.61384565000003, 382.74764165, 382.98570500000005, 383.2208399, 383.2626032, 383.3053543, 383.43359555, 383.57631475, 383.6242377, 383.6536648, 383.68016415, 383.74493465, 383.85997785, 383.96377574999997, 384.05107094999994, 384.15433035, 384.3052886, 384.40948994999997, 384.43813215, 384.6245607, 384.68865795, 384.70407984999997, 384.77989375000004, 384.81339775000004, 384.88646225, 384.94949585, 385.1636469, 385.26551470000004, 385.3434161, 385.3816246, 385.42146815, 385.6175243, 385.83584444999997, 385.94304475, 386.10751825, 386.2467401, 386.34122155, 386.425827, 386.58775909999997, 386.66329675000003, 386.7145008, 386.74122925, 386.92666295, 387.09738169999997, 387.15631685, 387.22193815, 387.31297989999996, 387.3627771, 387.49167850000003, 387.6388758, 387.66765375, 387.6994785, 387.736139, 387.9520671, 388.19626905000007, 388.3102451, 388.40702665, 388.45342695, 388.5272978, 388.60296214999994, 388.62591839999993, 388.66307465, 388.69930565000004, 388.74083470000005, 388.77423880000003, 388.88871115, 389.03986555, 389.18598855, 389.31670295, 389.42266945, 389.53472555, 389.65465389999997, 389.7691804, 389.86408115, 390.04799995, 390.07295765000003, 390.14227905, 390.2704338, 390.44130905, 390.45129440000005, 390.52402989999996, 390.60883809999996, 390.831777, 391.1784844, 391.31705425, 391.4634086, 391.6657764, 391.7587136, 391.7812487, 391.91590465, 392.14753060000004, 392.2833046, 392.3205381, 392.35932565, 392.42720545, 392.49283465, 392.53379770000004, 392.57979954999996, 392.7433807, 392.7576893, 392.76979114999995, 392.77921389999995, 392.807597, 392.84945285, 392.95500225, 393.28510454999997, 393.5492077, 393.66461074999995, 393.737037, 393.83704124999997, 393.9371331, 393.9715028, 394.04419105, 394.13746035, 394.17589440000006, 394.26530805000004, 394.34384475, 394.3570148, 394.3843743, 394.45680475, 394.5611809, 394.64541855000004, 394.74561170000004, 394.83844595, 394.87098175, 395.1625247, 395.26668915, 395.33003645, 395.34502255, 395.36539015000005, 395.43097465000005, 395.52888240000004, 395.7769406, 395.99884914999996, 396.0344201, 396.0937993, 396.20665914999995, 396.32493039999997, 396.38277215000005, 396.43402675000004, 396.46264790000004, 396.5189869, 396.6201816, 396.73542015, 396.80081470000005, 396.8829141, 397.04179565, 397.15567035, 397.16827385, 397.206884, 397.36391055, 397.41767265, 397.48003355, 397.52625094999996, 397.5383945, 397.55931605, 397.58779975000004, 397.63700245, 397.68210205, 397.6897612, 397.7200637, 397.77249095, 397.79741950000005, 397.81589055, 397.96382715000004, 398.123496, 398.20493815, 398.29481840000005, 398.344875, 398.3942529, 398.44791405, 398.51041075, 398.54256369999996, 398.5439513, 398.63257980000003, 398.82079415, 398.90496600000006, 398.96315775000005, 399.0031298, 399.12131245, 399.2887799, 399.39834455000005, 399.44929079999997, 399.5180084, 399.62951, 399.6932506, 399.8386212, 399.88693440000003, 399.9214474500001, 399.95031835, 400.2225474, 400.2881083, 400.52623944999993, 400.72198925, 400.9144983, 401.01497175, 401.1476428, 401.21927200000005, 401.26008205000005, 401.35097275, 401.4471039, 401.49216305, 401.55304505000004, 401.61983385, 401.6437519, 401.6783132, 401.74659925000003, 401.8481474, 401.9310434, 402.1288102, 402.19916394999996, 402.2281812, 402.23932085, 402.2739182, 402.322631, 402.3825598000001, 402.6373024, 402.65758819999996, 402.882462, 403.12951069999997, 403.28869695000003, 403.43906385, 403.4932756999999, 403.5238939999999, 403.54551215000004, 403.56002689999997, 403.58484065000005, 403.68622505, 403.780245, 403.89254225, 403.96706265, 404.07099435, 404.0798657, 404.09460335000006, 404.12983865, 404.17060334999996, 404.18446765, 404.31547995000005, 404.3725008, 404.400835, 404.42781885, 404.55206035000003, 404.60967385000004, 404.6409852, 404.74800400000004, 404.86337305000006, 405.05364785, 405.10251790000007, 405.12104845000005, 405.13114770000004, 405.1639543, 405.26751859999996, 405.34944765, 405.45732575, 405.51177915, 405.54678125, 405.66151685, 405.75470055, 405.79005345, 405.83818155, 405.86869045000003, 405.8951084, 405.92930385, 405.9454386, 405.9500318, 405.96984810000004, 406.07913325000004, 406.18479815, 406.32420105, 406.4652338, 406.5234712, 406.58358280000004, 406.61272125, 406.7452401, 406.83615625000004, 407.3882145, 407.47599484999995, 407.54534149999995, 407.5689459, 407.65746, 407.7876737, 407.9367804, 408.19439335, 408.28508715, 408.37746425, 408.42937570000004, 408.80997890000003, 408.93697995, 408.98431020000004, 409.0081626, 409.04444435, 409.09267995, 409.1465961, 409.16835430000003, 409.20254780000005, 409.30447465, 409.39509979999997, 409.4156885, 409.43161665, 409.45865434999996, 409.47528495, 409.50720190000004, 409.54100265, 409.55442044999995, 409.56968235, 409.6077992, 409.6528059, 409.81116969999994, 410.0820323, 410.30691135, 410.52299615, 410.55131885, 410.57931525000004, 410.6694489, 410.76055465, 410.7978087, 410.88822855, 411.10478505, 411.21700195, 411.3345292, 411.42225545, 411.49711715, 411.59430349999997, 411.62942775, 411.6738598, 411.72150995000004, 411.83325420000006, 411.9683104, 412.01060365, 412.0455905, 412.06660205000003, 412.1851591000001, 412.1916051, 412.23323439999996, 412.29222065, 412.35023235, 412.38640375, 412.43819340000005, 412.47969185, 412.519508, 412.56102124999995, 412.576869, 412.57864164999995, 412.58793625, 412.63653275, 412.67722855, 412.71699395, 412.76071665, 412.8017499, 412.88515010000003, 412.96963235, 413.01072675, 413.02557845, 413.05255875, 413.1614022, 413.3431905, 413.3731017, 413.40659825, 413.45609550000006, 413.776974, 413.8572461, 413.8928298000001, 414.01188985, 414.12019915, 414.2620366, 414.42790745, 414.56540795, 414.6949055, 414.93894264999994, 415.0070674, 415.07203115, 415.11350674999994, 415.14200135, 415.18478450000003, 415.2345283, 415.27650355000003, 415.36717799999997, 415.42248789999996, 415.59201140000005, 415.68296184999997, 415.8049213, 415.95859809999996, 416.18720269999994, 416.296858, 416.52361695, 416.58811964999995, 416.7061071, 416.75965165, 416.83180730000004, 416.85677125, 416.90300385, 417.01975250000004, 417.12481, 417.16643915, 417.20514175, 417.25761450000005, 417.2795161, 417.31171785000004, 417.3268622, 417.34560354999996, 417.54676815, 417.6076263, 417.72801905, 417.81957335000004, 417.87467460000005, 417.95600924999997, 418.03873015, 418.1420413, 418.2333576, 418.3055726, 418.33782154999994, 418.39540999999997, 418.569723, 418.58922184999994, 418.62979234999995, 418.7828517, 418.93676395, 419.12824745, 419.2065002, 419.3239773, 419.602079, 419.61940534999997, 419.65340515, 419.70599285, 419.8629562, 419.87906475, 419.93553565, 420.12651934999997, 420.29287465, 420.33879195000003, 420.60759590000004, 420.64110475, 420.70784675000004, 420.766036, 421.16949424999996, 421.28407875, 421.3563503, 421.39645679999995, 421.46598044999996, 421.54490895000004, 421.57913805, 421.5927355, 421.69605415, 421.78941045, 421.94608145, 422.00909555, 422.07709049999994, 422.16090744999997, 422.16917294999996, 422.21111064999997, 422.31838654999996, 422.38812695, 422.4006614, 422.42564550000003, 422.71105075, 422.842944, 422.8797289, 422.94262059999994, 422.9756902, 423.00582965, 423.0429829, 423.12979040000005, 423.18668685, 423.29500655000004, 423.42269054999997, 423.46759389999994, 423.52011694999993, 423.66840260000004, 423.75470805000003, 423.85780745, 424.02356399999996, 424.20976190000005, 424.221048, 424.36892075000003, 424.5874246, 424.69495199999994, 424.78793699999994, 425.1340613, 425.16457779999996, 425.19846585, 425.25011035, 425.29853785, 425.36317080000003, 425.51209165, 425.59335725, 425.61880084999996, 425.62665544999993, 425.6737476, 425.8039918, 425.91149014999996, 426.0693557, 426.1271770000001, 426.13249070000006, 426.15753545, 426.18977385, 426.20953744999997, 426.2754114, 426.3328073, 426.3392064, 426.37621045000003, 426.44399245, 426.49297865, 426.5445205, 426.7611884, 426.866624, 426.893861, 426.96204265, 427.02556185000003, 427.03420800000004, 427.14559310000004, 427.8580488, 427.95808305, 428.04354085, 428.09914715, 428.15582755, 428.2309125, 428.33693730000005, 428.4397866, 428.4909113, 428.56339185, 428.61457135, 428.6286714, 428.79450705, 428.9579677, 428.9724939, 429.2160678, 429.23820724999996, 429.29765399999997, 429.34584670000004, 429.52773605000004, 429.6400347, 429.68145665, 429.73125004999997, 429.77808005, 429.82609379999997, 429.86531924999997, 429.91161265000005, 429.9368772, 429.95609615, 430.09254565000003, 430.12865815, 430.20604779999996, 430.25583830000005, 430.26794225000003, 430.2965697, 430.34276090000003, 430.4329397, 430.49838135, 430.50965039999994, 430.53559895, 430.78049454999996, 430.90473025000006, 431.05082429999993, 431.16334729999994, 431.49974545, 431.57759615, 431.6884678, 431.7552068, 431.85650575, 432.02726939999997, 432.21468304999996, 432.3399776, 432.38177099999996, 432.4283091, 432.45493454999996, 432.54920204999996, 432.69059395, 432.79022555, 432.92896515, 432.96015, 433.05598249999997, 433.10214499999995, 433.12158675, 433.15506535, 433.2281951, 433.2921625, 433.37551114999997, 433.51649334999996, 433.63606569999996, 433.69248695, 433.84928625, 433.92552435000005, 433.9845246, 434.3170654, 434.5037733, 434.59934645, 434.7359043, 434.80713525, 435.00403329999995, 435.05228554999997, 435.1186183, 435.16723090000005, 435.25138300000003, 435.40111659999997, 435.62098185, 435.7141941, 435.81538365, 435.95953745, 436.09008195, 436.13730595000004, 436.15127729999995, 436.1650719, 436.17266345, 436.20471975, 436.3762956, 436.69298855, 437.03174885, 437.14278855, 437.23063495, 437.28521475, 437.2883826, 437.32282269999996, 437.41062339999996, 437.46098390000003, 437.5648593, 437.68782995, 437.74091710000005, 437.7569636, 437.76768545, 437.78001925, 437.81252754999997, 437.97040119999997, 438.15470215000005, 438.17181145, 438.29456555, 438.42089905, 438.45164005000004, 438.6198441, 438.65347825000003, 438.66595935, 438.6690415, 438.7063319, 438.76077245, 438.78426105, 438.79028040000003, 438.92745275, 439.09380984999996, 439.1422729, 439.18696155, 439.22108289999994, 439.27577329999997, 439.35564115, 439.39899104999995, 439.4342779, 439.5709591, 439.86466429999996, 439.9610662, 440.10661440000007, 440.25921230000006, 440.37703565000004, 440.42823945, 440.50224364999997, 440.58624735, 440.60051150000004, 440.629541, 440.70463110000003, 440.75861610000004, 440.79095695, 440.82475969999996, 440.859581, 440.92472439999995, 440.96691384999997, 440.9764007, 440.99055835, 441.00834, 441.1662802, 441.1829679, 441.22649305000004, 441.2350255, 441.2791386, 441.3639489, 441.61159875, 441.77055310000003, 441.89869680000004, 442.0293184, 442.32974495, 442.41870015, 442.53256740000006, 442.58172260000003, 442.61776405, 442.64720375, 442.68554229999995, 442.87495745, 443.15688014999995, 443.34158964999995, 443.37084619999996, 443.3881893, 443.50427505000005, 443.53201390000004, 443.57467369999995, 443.63729839999996, 443.73834469999997, 443.84132715, 443.88017835, 443.89872015000003, 443.9759633, 444.01134605000004, 444.07037355, 444.2480107, 444.32336080000005, 444.3570804, 444.39975375, 444.47630614999997, 444.5425077, 444.62542830000007, 444.7540033, 444.83525614999996, 444.9145878, 445.0030903, 445.10895120000004, 445.1724153, 445.2032767, 445.38670034999996, 445.4354445, 445.6559215, 445.6921511, 445.81764465000003, 445.92789085000004, 445.9390925, 445.94294164999997, 445.94831145, 445.97170325, 446.0464256, 446.0535615, 446.11639479999997, 446.20231475, 446.23989605, 446.34370715, 446.41070625, 446.53151355, 446.5435716, 446.61677425000005, 446.68881655000007, 446.71569205000003, 446.77278605, 446.84446355, 447.0988459, 447.41011355, 447.59536285, 447.8652692, 447.94356684999997, 447.98258799999996, 448.10255170000005, 448.19865160000006, 448.24788885, 448.2731505, 448.43989354999997, 448.52408059999993, 448.63708365, 448.73666325, 448.91239535, 448.9969921, 449.05865359999996, 449.08343275, 449.29805185000004, 449.32641164999995, 449.37640695, 449.49265415, 449.6192354, 449.72186324999996, 449.7474876, 449.8054956, 450.4258199, 450.46901775000003, 450.49360795, 450.60471615, 450.7396857, 450.83726675, 450.90261875000004, 450.93218970000004, 451.06589995, 451.1726075, 451.20748705, 451.2751955, 451.3226079, 451.35879015, 451.43379945000004, 451.5214105, 451.62962825, 451.74447475, 451.802735, 451.85171585, 452.03954735, 452.14697590000003, 452.26273885, 452.34723569999994, 452.5190843, 452.7187214, 452.75570525, 452.8161068, 452.87158224999996, 452.90993074999994, 453.00743945, 453.0960977, 453.1368841, 453.23616319999996, 453.42061605000004, 453.47327970000003, 453.51649, 453.54682155, 453.55609495, 453.5789334, 453.7579068, 453.9292128, 454.0711841, 454.2080487, 454.37602945000003, 454.46903935, 454.61911829999997, 454.7437558, 454.8312759, 454.91261925, 454.9747137, 455.0367596, 455.08483249999995, 455.13066484999996, 455.18879315, 455.224173, 455.2500542, 455.416971, 455.6427616000001, 455.78083675, 455.9326645, 456.0860897, 456.22495285, 456.40615485, 456.5254946, 456.5445387, 456.67825985, 456.87011640000003, 457.10559605000003, 457.29111344999995, 457.4938314, 457.53349565, 457.58666395, 457.70019425, 457.7845353, 457.80963135, 457.83308445, 457.91602695, 457.9897352, 458.02997604999996, 458.1020817, 458.21972980000004, 458.30775515000005, 458.3570932, 458.4151957, 458.4926442, 458.66009365, 458.67641205, 458.69222025, 458.7985772, 459.01178195, 459.07950365, 459.08620874999997, 459.10035094999995, 459.27391835, 459.4040351, 459.90316429999996, 460.02831345, 460.1034284, 460.22470899999996, 460.63929195000003, 460.99229915, 461.12820180000006, 461.19701480000003, 461.27288550000003, 461.38906955000004, 461.48829715000005, 461.75885959999994, 461.86533045, 462.0877259, 462.2376434, 462.3499947, 462.4374159, 462.54193284999997, 462.6926333, 462.77073765, 462.78900295, 462.82928749999996, 462.87457105, 462.92443860000003, 462.98146844999997, 463.0173214, 463.1058725, 463.18317809999996, 463.35633084999995, 463.40208245, 463.5465289, 463.71931305, 463.8602536, 463.8912955, 464.0610835, 464.25354945000004, 464.2968614, 464.35318589999997, 464.5096549, 464.69653435, 464.76037815, 464.94271245, 465.09400565, 465.14836160000004, 465.23333925, 465.35624865, 465.44398925, 465.4468949, 465.4625315, 465.4987991, 465.53289064999996, 465.55187585, 465.59490775, 465.60185995, 465.67132095, 465.6773084, 465.6980855, 465.73729575, 465.7950563, 465.92774665, 466.11967355, 466.27146085000004, 466.3546112, 466.5317248, 466.5979009, 466.71353665000004, 466.7356798, 466.7702689, 466.8207273, 466.87551365, 467.08351129999994, 467.1006907, 467.1429021, 467.223883, 467.3277964, 467.43534005000004, 467.51079115, 467.99161065, 468.08416905, 468.13687995000004, 468.58849265, 468.96129885000005, 468.99794700000007, 469.06455014999995, 469.143109, 469.2609771, 469.35069115, 469.4278131, 469.47946845, 469.54425325, 469.6382324, 469.86067660000003, 469.9332596, 470.13976634999995, 470.298403, 470.3672578, 470.4415658, 470.53603674999994, 470.5798968, 470.6474091, 470.7833769, 470.86877045, 470.9127616, 471.02011460000006, 471.1192983000001, 471.22536995, 471.31765464999995, 471.33098735, 471.33729955, 471.36991335, 471.597375, 471.81165595, 471.85763315, 471.913047, 471.96675874999994, 472.13615100000004, 472.18233725000005, 472.20620075, 472.30086714999993, 472.32648544999995, 472.3561613, 472.38238105000005, 472.42257735, 472.5444664, 472.69001695, 472.7779504, 472.80766904999996, 472.89600745, 473.13158795000004, 473.2576841, 473.28605725, 473.30010089999996, 473.33000419999996, 473.3737061, 473.4441248, 473.50294405, 473.53210319999994, 473.6919587, 473.86448939999997, 473.95044695, 474.21379475000003, 474.45052780000003, 474.5298444, 474.5934316, 474.6107728999999, 474.62976875, 474.66425365000003, 474.76059475, 474.79605355, 474.89315295000006, 475.03443445000005, 475.26341555, 475.43125395, 475.5898855, 475.8684686, 475.88062994999996, 476.12463219999995, 476.1690657, 476.19970755, 476.26927315, 476.48002225, 476.71668445, 476.8281111, 476.90600085, 477.0133178, 477.08591105, 477.1360927, 477.26995615, 477.3117144, 477.3515821000001, 477.494187, 477.6521333, 477.79758945000003, 477.9994177, 478.06662305, 478.21655525, 478.34641024999996, 478.4300829, 478.4979866, 478.6149166, 478.76415375, 478.92799645, 478.9856561, 479.0379004, 479.08316640000004, 479.10895145000006, 479.12890245, 479.14767205, 479.2077982, 479.2861801, 479.37467150000003, 479.44296694999997, 479.45342934999996, 479.463685, 479.50890849999996, 479.54883154999993, 479.5840074, 479.79885310000003, 479.89612645, 480.06440905, 480.26189415, 480.37792379999996, 480.4183874, 480.45807845, 480.5097109, 480.55169939999996, 480.7556601, 481.02852925, 481.12982415, 481.16938115, 481.24498144999995, 481.29938760000005, 481.31621044999997, 481.36654105, 481.42875490000006, 481.51189940000006, 481.59053230000006, 481.6673733, 481.74910695, 481.82491675000006, 481.97994135000005, 482.35503785000003, 482.39507445, 482.4485592, 482.4929125, 482.52080329999995, 482.8250203, 482.84531735, 482.85094664999997, 483.11883724999996, 483.26647510000004, 483.32120845000003, 483.35801449999997, 483.40079745, 483.47786725000003, 483.54540280000003, 483.5631872, 483.6330744, 483.68984615000005, 483.71145095, 483.71838705, 483.73223344999997, 483.77598435000004, 483.82408154999996, 483.86971959999994, 484.03061605, 484.15856845, 484.3693556, 484.4458616, 484.5280685, 484.61300785000003, 484.70309335, 484.84840345000003, 485.0923642, 485.3292528, 485.53818425, 485.68388904999995, 485.837819, 485.95171135, 485.96638885, 486.10097605, 486.28505199999995, 486.4359643, 486.53284335, 486.82743834999997, 487.07522195, 487.2001046, 487.40808225, 487.4798591, 487.67049575, 487.72278170000004, 487.91697365, 487.976466, 487.99791625, 488.12644365000006, 488.33261330000005, 488.47751795, 488.5726218, 488.79687865, 488.85355715000003, 488.89798185000006, 488.90874160000004, 488.91497910000004, 489.00278445000004, 489.09514305, 489.24604205, 489.3947562, 489.4085046, 489.78928395, 489.86493205, 489.9895366, 490.25491550000004, 490.27728555, 490.3745662, 490.39381625, 490.430616, 490.4969731, 490.62343345, 490.86126275, 490.97789175, 491.0865182, 491.27059935, 491.4291661000001, 491.4620067000001, 491.4944784, 491.51799719999997, 491.53341885, 491.61387864999995, 491.701565, 491.74053715, 491.774094, 491.79084335000005, 491.84415880000006, 491.91882730000003, 491.99215375, 492.0928437, 492.16304464999996, 492.19812394999997, 492.2303825, 492.26709059999996, 492.47603515000003, 492.5051539, 492.52637185000003, 492.56359154999996, 492.6349141, 492.7076112, 492.7974544, 492.89240900000004, 492.92180665, 492.95861875, 493.0026616, 493.09783145000006, 493.22228275, 493.32335715, 493.36701435, 493.51904920000004, 493.5574785, 493.6854099, 493.7495251, 493.8833058, 494.17079779999995, 494.27162725, 494.324605, 494.4150519, 494.50249469999994, 494.5405373, 494.5706741, 494.66524619999996, 494.80436614999996, 494.88267865, 494.947863, 495.0676221, 495.17641910000003, 495.19969675000004, 495.22007285, 495.27731855, 495.3706131, 495.4264352, 495.43953150000004, 495.47648855000006, 495.53893345000006, 495.62495385, 495.69653860000005, 495.81756014999996, 496.0532631, 496.1337321, 496.2314591, 496.32385485, 496.3758095, 496.41263625, 496.5073608, 496.60275765, 496.65876715, 496.8070136, 496.88242274999993, 496.94092785, 496.99215445000004, 497.14698995000003, 497.3993211, 497.46386789999997, 497.6644976, 497.76639654999997, 497.78360310000005, 497.82799190000003, 497.91119855, 498.01509054999997, 498.13500439999996, 498.25917775, 498.6616357500001, 498.7578625, 498.8922689, 499.0488305, 499.07736094999996, 499.10247325, 499.331348, 499.55261265, 499.61635165000007, 499.79953445, 499.878168, 500.21871185, 500.23474880000003, 500.27401770000006, 500.32632070000005, 500.35683715000005, 500.548863, 500.65037305, 500.71995089999996, 501.018096, 501.1744381, 501.2603789, 501.39138164999997, 501.5007685, 501.63161225, 501.78317660000005, 501.86472829999997, 501.98544615, 502.1164737, 502.15252344999993, 502.16912274999993, 502.28289395, 502.33496710000003, 502.41957634999994, 502.4893365, 502.58935594999997, 502.7128653, 502.8469662, 502.95673715, 503.1209209, 503.31168605, 503.4860251, 503.6177582, 503.78402795000005, 503.98925900000006, 504.2964065, 504.5487248, 504.63246979999997, 504.72172295, 504.8547952, 505.06832799999995, 505.2375713, 505.32593399999996, 505.3861193, 505.56996175000006, 505.84077924999997, 505.98346515, 506.12725609999995, 506.22122455, 506.2813708, 506.366165, 506.4541789, 506.71554385, 506.7989748, 506.825433, 506.8814393, 506.92692135, 506.9964773, 507.092283, 507.14105405, 507.16649759999996, 507.22349835, 507.41096104999997, 507.55768424999997, 507.60720395, 507.66303849999997, 507.75285339999994, 507.84273829999995, 507.94484024999997, 508.07886874999997, 508.14462355, 508.16861755, 508.17175565, 508.2115734, 508.2538104, 508.31299579999995, 508.38472215, 508.40712195000003, 508.44256735, 508.7060648500001, 508.79922535000003, 508.86812465, 508.9392093, 508.98675925, 509.0168349, 509.2594078, 509.58418559999996, 509.63267024999993, 509.85038925, 509.97338145000003, 510.13135795000005, 510.25549954999997, 510.34161714999993, 510.4173363, 510.4769805, 510.5044864, 510.52168889999996, 510.5408844, 510.65429975000006, 510.75778620000006, 510.86903659999996, 511.02126765, 511.07515955, 511.1301797, 511.15108710000004, 511.2048801, 511.2225072, 511.26881219999996, 511.34053889999996, 511.3878334, 511.47555209999996, 511.5671793, 511.64191335, 511.79792275000005, 511.91162, 511.99400360000004, 512.0581080000001, 512.1762869500001, 512.25825755, 512.32256955, 512.3622395, 512.5977625500001, 512.62471615, 512.73005825, 512.74240015, 512.8962964, 512.9831483, 513.1690133, 513.49624, 513.5869804, 513.6713285000001, 513.94317975, 514.1577423, 514.22478315, 514.3033702, 514.5079767499999, 514.5382847000001, 514.579419, 514.73718345, 514.8699769, 514.95241925, 515.0689272, 515.11421905, 515.3021051000001, 515.50730955, 515.7363506500001, 515.9030044000001, 516.06702525, 516.2711249, 516.51847435, 516.62927465, 516.6495894999999, 516.7104271999999, 516.7816048, 516.8505355, 516.9683605499999, 517.00845265, 517.0798925500001, 517.1747292, 517.2401993999999, 517.46732715, 517.7451571, 517.7850201, 517.79895455, 517.8109864, 517.83374265, 517.9223761000001, 518.08997705, 518.14099165, 518.1951422, 518.2807011499999, 518.3580498, 518.4941171, 518.7892102999999, 518.81956685, 518.94990555, 519.10890165, 519.15713, 519.1954162, 519.2816018, 519.39658465, 519.46613075, 519.6165508500001, 519.8244233999999, 519.89771545, 520.1243351, 520.2794860500001, 520.3728147500001, 520.4324566, 520.62574015, 520.81382215, 520.83607975, 521.0211691, 521.13136865, 521.1527871000001, 521.1647297, 521.18859855, 521.2640595, 521.3675895, 521.6930662, 522.0132126999999, 522.1081984, 522.2214557, 522.3293987, 522.4407015500001, 522.50532565, 522.6038917, 522.72204835, 522.8964390000001, 523.07448785, 523.141976, 523.154328, 523.19489, 523.301704, 523.53285975, 523.55895575, 523.57033625, 523.63233105, 523.6778490500001, 523.7906068, 523.8760352500001, 523.8952009000001, 524.1359447, 524.5544307499999, 524.6718642000001, 524.6937740999999, 524.7528199999999, 524.8372608, 525.04820335, 525.4012581, 525.66668645, 525.7447423, 525.8128838, 525.8747308, 525.9345151, 525.9568226, 526.1123191, 526.3492874000001, 526.4540901, 526.5303345, 526.6017553, 526.6469363, 526.7111174, 526.7728619500001, 526.81992835, 526.95946055, 527.1269453, 527.1812572, 527.6178626, 527.63862885, 527.7148477000001, 527.8183136, 527.85856675, 527.95866415, 528.07048975, 528.1391860000001, 528.3345553500001, 528.37499245, 528.38205405, 528.50411695, 528.6124695, 528.7571046999999, 528.81089285, 528.8454431, 528.92535135, 528.98879435, 529.0024025499999, 529.05675855, 529.1415137, 529.2018048, 529.2613319, 529.28922055, 529.35154395, 529.4541737500001, 529.55244385, 529.59930685, 529.6745354, 529.73930605, 529.76039115, 529.7845398, 529.79913685, 529.8462767000001, 529.8856620500001, 529.89379025, 529.92961185, 529.9753667, 530.0530416, 530.18915095, 530.3827417, 530.4923189, 530.5408801, 530.59227495, 530.7684216, 530.9870475, 531.48410005, 532.24324325, 532.3393687, 532.4067935, 532.50302555, 532.58885355, 532.61955935, 532.6311288500001, 532.6980093, 532.76532345, 532.80130665, 532.89868765, 532.98247295, 533.01796905, 533.1353237500001, 533.1665447, 533.197537, 533.3049136, 533.4242319, 533.4552954000001, 533.5165411, 533.58618015, 533.701129, 533.8009841, 533.9481263, 534.05386955, 534.09269275, 534.12353465, 534.3659855, 534.6536059, 534.7523679, 534.81388705, 534.86362975, 535.08516255, 535.29555175, 535.3175501000001, 535.3531854500001, 535.50777675, 535.67515985, 535.7713191, 535.8279323, 535.94549345, 536.0726943499999, 536.3121412, 536.70505445, 536.91342275, 537.02259725, 537.1554974000001, 537.19837065, 537.2281333000001, 537.39936205, 537.5980883999999, 537.7489396, 537.9019267, 537.9315102, 538.0357118, 538.0914769, 538.19356475, 538.27815225, 538.3514759500001, 538.4594467, 538.5857357499999, 538.6989734, 538.8011234, 538.91926425, 539.0052844500001, 539.12079715, 539.2473717, 539.26925135, 539.3109019, 539.34855225, 539.3608626, 539.385622, 539.5082788500001, 539.77098525, 539.95265295, 540.0451612, 540.15421675, 540.2266301, 540.27465105, 540.3030905, 540.3208543000001, 540.38211875, 540.5366849, 540.6543973999999, 540.7335979499999, 540.85395855, 540.91973655, 540.935861, 540.96596005, 541.0336253, 541.1969021, 541.249453, 541.3583873499999, 541.51831055, 541.6698358, 541.8785995, 542.05436045, 542.13788975, 542.15772595, 542.1916193, 542.2303051000001, 542.2567774500001, 542.3668788499999, 542.6175607499999, 543.0973349999999, 543.24676365, 543.3611146000001, 543.40075325, 543.4276401, 543.4601846, 543.5014543, 543.51716665, 543.5481158, 543.8795454, 543.93110585, 543.9706026000001, 544.1104945500001, 544.2153347999999, 544.2809654499999, 544.3532912000001, 544.495386, 544.6110013, 544.6572324, 544.7118783000001, 544.73622295, 544.75852535, 544.93758455, 545.1096599, 545.25767595, 545.280776, 545.348165, 545.4445042, 545.553735, 545.8637366, 546.0448362500001, 546.3676509500001, 546.66148315, 546.74999, 546.7748905999999, 546.9252059, 547.08607865, 547.1819147, 547.2619631499999, 547.38107775, 547.5066977500001, 547.5385555, 547.75017415, 547.8425748999999, 547.9176042, 547.94884755, 548.17003475, 548.41477075, 548.57767705, 548.70081835, 548.72531855, 548.7605683500001, 548.80630445, 548.8287805, 548.8950606000001, 549.1885491999999, 549.47502085, 549.5526894, 549.6358587999999, 549.7260954, 549.8197018999999, 549.89853135, 549.9257908, 549.9432526, 549.98474005, 550.04996815, 550.36180535, 550.4444011, 550.5180607499999, 550.638013, 550.7022000999999, 550.7235545999999, 550.7915635500001, 550.9701345999999, 551.10135125, 551.10962175, 551.13059655, 551.1826638, 551.2212780499999, 551.2293512, 551.27833455, 551.387061, 551.4657709, 551.4913164, 551.66184115, 551.9175889999999, 552.0321998499999, 552.07961855, 552.14651915, 552.2163667, 552.2970902, 552.4414214499999, 552.5507019999999, 552.6035525499999, 552.653919, 552.7331377, 552.8162313, 552.9156929000001, 553.1337689499999, 553.1871085999999, 553.24325185, 553.3486311500001, 553.4316887499999, 553.4374967, 553.82802865, 554.032698, 554.4869776, 554.6171029500001, 554.71077915, 554.79579015, 554.8518514499999, 554.9034504499999, 555.0545883, 555.07897155, 555.0925204499999, 555.1046939, 555.188958, 555.2019843, 555.24751695, 555.292197, 555.4764475, 555.5454948500001, 555.633654, 555.8478810500001, 555.92820935, 556.08161575, 556.23230345, 556.26268275, 556.6258711, 556.7231322, 556.8450265500001, 556.9230210000001, 556.9772176500001, 557.0365171, 557.12191355, 557.1707488, 557.1809804, 557.19627125, 557.3032611, 557.67932265, 557.935448, 558.00121075, 558.1282895500001, 558.2639112500001, 558.3469941000001, 558.4236811999999, 558.5435257, 558.6570133, 558.78502325, 558.9735023000001, 559.0864110499999, 559.21581775, 559.2392495, 559.2750644, 559.3509074, 559.4532451, 559.5142668000001, 559.6090575000001, 559.8603266, 560.0706145, 560.3443651, 560.6330057, 560.6933302, 560.8076758500001, 560.8575095000001, 560.90937505, 560.9301925, 560.94332545, 561.010165, 561.04527085, 561.1094443999999, 561.15004025, 561.1635337499999, 561.2323864499999, 561.32651705, 561.4175252, 561.4999304, 561.5433467, 561.5695760000001, 561.61226265, 561.68241945, 561.8359129, 561.9532064, 562.06134495, 562.2886923000001, 562.5560128, 562.69374195, 562.8000248, 562.9835888499999, 563.13227775, 563.26325835, 563.34607085, 563.4118273, 563.55506915, 563.57268875, 563.8026327, 563.88422115, 563.9899602, 564.0444040499999, 564.15380575, 564.2925217, 564.40354595, 564.4921269499999, 564.5088447999999, 564.5439029500001, 564.741883, 564.8711476, 564.93339625, 565.0047397000001, 565.1757163, 565.2895382500001, 565.68214025, 565.7322185, 565.7465522, 565.8272296, 565.8986176, 565.97223665, 565.99354095, 566.0521875000001, 566.1102153500001, 566.12386925, 566.4481088499999, 566.5496082999999, 566.61377475, 566.6350178499999, 566.7173235, 567.3349900999999, 567.3510871499999, 567.3760106999999, 567.40088915, 567.4889892, 567.64745175, 567.78205235, 567.9491615, 568.2273417, 568.31655745, 568.4603866499999, 568.561381, 568.60715215, 568.65026075, 568.80794185, 568.8112468, 568.8692155000001, 569.0454481, 569.206825, 569.327188, 569.4380497, 569.5050518, 569.5205815500001, 569.5496584, 569.58905355, 569.61322245, 569.64629795, 569.7471372, 569.8357977999999, 569.88631115, 569.93028635, 569.9921809499999, 570.0700668, 570.1059494, 570.2238136, 570.51781185, 570.52374495, 570.6336327, 570.97569705, 571.067434, 571.2196922, 571.27840715, 571.3917792, 571.51174115, 571.631237, 571.6587689999999, 571.7091894499999, 571.8433547, 571.99594165, 572.05002035, 572.19868855, 572.21130975, 572.2857778, 572.3552122, 572.4093968, 572.5312143, 572.63645855, 572.7273345, 573.33359045, 573.7179186, 573.7269322, 573.89676795, 574.0914230000001, 574.17422055, 574.2172268, 574.2553186, 574.27473095, 574.29102805, 574.3085896, 574.3369911499999, 574.4065793, 574.4703714, 574.7629974, 574.8635343999999, 574.94075575, 574.9809855999999, 574.9967184, 575.1358494, 575.413282, 575.6901783999999, 575.78083105, 575.92987665, 576.3102538, 576.5122833, 576.5495561, 576.6213976, 576.8199171, 576.9358711, 577.0381635, 577.1909002499999, 577.2827215499999, 577.7801018, 578.0888654, 578.2373084000001, 578.2969268, 578.491166, 578.8035503, 578.9681274, 579.1369268000001, 579.2144384000001, 579.25877445, 579.29155185, 579.3877527500001, 579.4578955, 579.641346, 579.82850375, 579.8651998, 579.8849400500001, 579.98691715, 580.0195463499999, 580.17336735, 580.3404816, 580.38186305, 580.5963445, 580.83130355, 580.8916559500001, 581.3773354, 581.5401955499999, 581.8244566000001, 581.9004022, 582.1723365, 582.4144759000001, 582.4658706499999, 582.5140719, 582.60397145, 582.8247940000001, 583.0024753, 583.192368, 583.3352698, 583.5426924999999, 583.8281374, 584.12726835, 584.27274565, 584.3520283, 584.45894105, 584.5719692499999, 584.65630885, 584.7269091999999, 584.8379583, 584.94900085, 584.97997315, 584.98808755, 585.01377575, 585.0372042, 585.0774021, 585.14671515, 585.60271315, 585.81128025, 585.99079475, 586.1205493499999, 586.30599145, 586.39822675, 586.4334542500001, 586.49059565, 586.5135498, 586.57138465, 586.6275114499999, 586.7295866500001, 586.75834625, 586.7995923999999, 586.8660164, 586.96328245, 587.1112945499999, 587.3120030499999, 587.44757415, 587.48953095, 587.5391159999999, 587.7169711500001, 587.83212705, 587.9419494, 588.0344754999999, 588.0889410499999, 588.1332697, 588.1980726, 588.36399225, 588.7775048999999, 588.80081595, 588.8291703, 588.9385564500001, 589.061778, 589.2501263500001, 589.7201746000001, 590.0702147000001, 590.1698890500002, 590.2472825000001, 590.3369938000001, 590.54360575, 590.62392245, 590.73254015, 590.8148501, 590.8648968, 590.9597454500001, 591.0375956, 591.0840951, 591.13741365, 591.1561454499999, 591.19657125, 591.3529560499999, 591.45487535, 591.46572415, 591.6135503, 591.7052622, 591.7584648999999, 591.81432935, 591.8806139999999, 591.96828125, 592.1595236, 592.3590189500001, 592.6331275, 592.88420135, 592.9831166, 593.03906585, 593.09096715, 593.15095835, 593.3689597499999, 593.4854725, 593.5519045499999, 593.88888625, 593.9795489999999, 594.0660217999999, 594.1620187999999, 594.26831505, 594.3697627500001, 594.4844031499999, 594.58521225, 594.6702197, 594.72918725, 594.80164025, 594.934663, 595.0398814499999, 595.0754211000001, 595.1633869, 595.57030395, 595.69217205, 595.8857664, 596.0476976, 596.2179411999999, 596.4142559, 596.44478085, 596.7736625, 597.27443395, 597.4680227, 597.7286033, 597.8454983, 598.07768295, 598.2639564000001, 598.3505625500001, 598.46027315, 598.5427409, 598.5961657, 598.7563787500001, 598.8783616, 599.0149317999999, 599.2721599, 599.5682955500001, 599.6888995500001, 599.7254613, 599.7649781499999, 599.9534765, 600.1324115, 600.14663555, 600.3049466499999, 600.56406225, 600.7388999, 600.8222593, 600.97619035, 601.1085965, 601.15971465, 601.24001905, 601.48091855, 601.69205495, 601.8131867, 601.8586824, 601.9702090000001, 602.08797245, 602.1390251, 602.19047075, 602.2229309500001, 602.2319465, 602.3553142999999, 602.49529305, 602.5352053, 602.65441235, 602.7598827500001, 602.7967085, 602.8314063999999, 602.9005287499999, 602.9659389999999, 603.02745355, 603.2261755, 603.4302428999999, 603.4597214, 603.5186278000001, 603.65242545, 603.9407837, 604.11504315, 604.2494288, 604.3136206500001, 604.33691135, 604.3707336499999, 604.4459369, 604.5418689, 604.74213575, 605.0209655, 605.6229768000001, 605.91408975, 606.06816915, 606.3268739, 606.5436499, 606.6307229500001, 606.809611, 607.2303187499999, 607.46776245, 607.6580003, 607.7342474, 608.17287895, 608.6507432999999, 608.7356433, 608.7795166999999, 608.83252565, 608.9288521999999, 609.0475269, 609.1129165, 609.235905, 609.3969542, 609.53447855, 609.89817425, 610.2795152499999, 610.4043369999999, 610.5516181999999, 610.7516882499999, 610.8581585, 610.9243196, 611.1028875500001, 611.4924382, 611.6025051500001, 611.68350695, 611.7105051, 611.8151544, 611.9183472, 612.0310187, 612.14354765, 612.1602392, 612.19686565, 612.5016688, 612.7861065, 612.8295169, 613.01028645, 613.1982219, 613.4123971, 613.5130176, 613.7349262, 614.1319737, 614.3928656, 614.5432545, 614.6542919, 614.7384462, 614.771788, 614.78391275, 614.87872665, 615.0026384, 615.0907871500001, 615.1681561, 615.2697619, 615.41373675, 615.5138563, 615.56613715, 615.6119409500001, 615.7141559500001, 615.8596157, 615.9324121, 615.96846405, 616.1676411000001, 616.31779935, 616.51722505, 616.69907945, 616.93713015, 617.16113485, 617.5499407, 618.01225965, 618.3823272500001, 618.4397164500001, 618.5121319, 618.54495075, 618.65061985, 618.79803505, 618.85547465, 618.9948207, 619.0756334, 619.1343208, 619.1864082, 619.36695395, 619.66590555, 619.88212005, 619.9523201, 620.0412640499999, 620.2750285, 620.4277614499999, 620.4727869999999, 620.6076659, 620.7213356, 620.81873575, 620.9424471, 621.04382935, 621.12836795, 621.1861928000001, 621.25309885, 621.6436213000001, 622.20208715, 622.45488295, 622.649332, 623.0018789, 623.2852498, 623.42719035, 623.5897558, 623.7501546, 624.0083435, 624.24389935, 624.3700590499999, 624.644943, 624.6929017, 624.88070105, 624.9691160499999, 625.5157088, 625.9306304, 625.9867257000001, 626.1155415000001, 626.2633755500001, 626.79188115, 626.9371317, 627.1059801, 627.1190091999999, 627.43764695, 627.6589916, 627.7958398999999, 627.9327329, 628.64255815, 628.8073080500001, 629.0201787999999, 629.19602115, 629.3790927, 629.7167226500001, 629.82710605, 629.88106055, 629.9370466, 630.0186776, 630.0759424, 630.2623426, 630.4332731, 630.45639075, 630.5674399, 630.8173789, 631.0877515, 631.2368746, 631.4816770499999, 631.7100769499999, 631.72721825, 631.7793955, 631.8896823499999, 631.95594735, 631.9862674999999, 632.2719452499999, 632.46632485, 632.7957991999999, 633.0272168, 633.4466308, 633.4881880500001, 633.56728255, 633.5839613999999, 633.7425650499999, 634.1145469, 634.17310875, 634.1907285499999, 634.2761897999999, 634.4170315, 634.5709407500001, 634.7782895, 634.8301515, 635.5669132999999, 635.6925260999999, 635.8721071499999, 636.1067858499999, 636.31118275, 636.3767661, 636.52198415, 636.7854857, 636.8734018499999, 636.9333786, 636.97674305, 637.0220569999999, 637.10763905, 637.32364265, 637.4192462, 637.7444170499999, 638.0725781, 638.4808458499999, 638.5515028499999, 638.633236, 638.8084409, 638.9644984500001, 639.0303805, 639.107028, 639.2779990500001, 639.4050150999999, 639.4503522499999, 639.601026, 639.8712400500001, 640.1065360499999, 640.667942, 640.70354005, 640.7957957000001, 640.9214221, 641.1362373500001, 641.61456305, 641.7682662, 641.81667095, 641.91630935, 642.0256264, 642.12481825, 642.24540035, 642.48619895, 642.91486165, 642.973794, 643.10961705, 643.2850990000001, 643.4997273, 643.6667064999999, 643.7208687499999, 643.9872445999999, 644.27580115, 644.3990185, 644.57389965, 644.7936126000001, 644.9860821, 645.0551349, 645.0975628, 645.1884045500001, 645.2802395, 645.3498579, 645.42814305, 645.7139722, 645.9627975, 646.1909137, 646.21503165, 646.29432855, 646.34146635, 646.6119442500001, 647.167226, 647.5410554, 647.6673564, 647.75615625, 647.88010995, 648.1488466999999, 649.19767445, 649.3290611, 649.735706, 650.0191896, 650.12329095, 650.1826722000001, 650.232202, 650.3059456000001, 650.37763055, 650.45091625, 650.5973031000001, 650.91813115, 651.19977625, 651.2990036, 651.4832870500001, 651.65483595, 651.73019025, 651.8513704500001, 651.87604235, 651.9109999, 652.0139283, 652.12030535, 652.3251, 652.3287984000001, 652.3360458500001, 652.36251915, 652.3900531, 652.6291026, 652.8636065000001, 653.0063396, 653.1550797, 653.1743844, 653.3993052000001, 653.4295157, 653.5295269000001, 653.61930575, 653.7059103500001, 654.4353128, 655.49725055, 655.7869187, 655.8395546500001, 655.9433199, 656.2099495, 656.6259262, 656.9413915499999, 657.12004815, 657.2769920000001, 657.4218553000001, 657.5584773, 657.61672615, 657.709882, 658.411518, 659.03481315, 659.2235235, 659.8692165499999, 659.9661219499999, 660.2897818, 660.46929155, 660.59367015, 660.71243925, 660.75325365, 661.31677765, 661.8454322, 661.92045215, 662.1075045499999, 662.3531812, 662.4535385, 662.6736419, 662.9223994500001, 663.1891907500001, 663.3171579, 663.4912171, 663.7503409, 664.0318271, 664.4469074, 664.63383045, 664.78524325, 664.9521900499999, 665.0016538, 665.0906986500001, 665.19530595, 665.2723454, 665.415004, 665.57261885, 665.9853216500001, 666.3193917000001, 666.66450515, 666.85994415, 667.29385415, 667.65544865, 667.8244656, 668.163732, 668.5570089, 668.7788398499999, 669.5335539, 670.8505007, 670.94177755, 670.9606397, 671.2421906, 671.4080273000001, 672.0809878, 672.63782465, 673.03952875, 673.13058875, 673.1931772, 673.38993235, 673.59744635, 673.6535913, 673.7246091999999, 673.8263955, 674.05030145, 674.24565175, 674.34440305, 674.42268945, 674.5137172500001, 674.70362435, 674.8235342, 675.1622688499999, 675.2811931499999, 675.4786816, 676.0392526, 676.77892355, 677.225034, 677.3383695, 677.35923695, 677.4696362499999, 677.71304325, 677.8632379500001, 677.8784367000001, 677.9251775, 678.02992735, 678.18864535, 678.4048118000001, 678.55402295, 678.59069305, 678.66714445, 679.9309434500001, 680.75511195, 681.4002691999999, 681.5669042, 681.81585425, 682.02380815, 682.2610695, 682.32949435, 682.94589185, 683.2327362, 683.4527915000001, 683.5849926000001, 683.7324641499999, 683.8636967499999, 683.8953452999999, 683.9450108000001, 684.7185361500001, 684.89624655, 684.96057795, 685.0010087, 685.25333655, 685.5116317, 685.5683205, 685.7182546, 685.87343405, 686.19765045, 686.5707975, 686.67814035, 686.7047770500001, 686.77741105, 686.8473266999999, 686.98770525, 687.12207445, 687.2527895000001, 687.7613393500001, 688.28529725, 688.4743849500001, 688.5482033000001, 688.7703427, 688.98240915, 689.054381, 689.2104236499999, 689.43061455, 689.7267156, 689.9925671999999, 690.1560903, 690.3408917, 690.6510501500001, 690.856933, 690.8978825, 691.02293905, 691.1139403499999, 691.2588793499999, 691.4300938499999, 691.52168575, 691.6632041, 692.1079168000001, 692.47673675, 692.52885465, 693.152928, 693.2997633, 693.3690582499999, 693.5045077499999, 693.6652296, 693.7722167499999, 693.9250466999999, 694.0633358, 694.22250585, 694.5643436, 694.8950886, 694.92000955, 695.6271238500001, 695.97125985, 696.12766055, 696.6295535500001, 697.1603852000001, 697.77245625, 698.2269729, 698.7109101000001, 698.9069460999999, 698.9916314999999, 700.0028494999999, 700.1693918999999, 700.45812705, 700.81360075, 701.1097296, 701.3531481499999, 701.7506288499999, 702.0565056, 702.15259105, 702.3038222499999, 702.3966668, 702.4719985500001, 703.13552085, 704.48971555, 704.6372891, 704.7495363, 704.8631002, 704.9320557000001, 705.1146984, 705.96738115, 706.7141259, 707.1337554500001, 708.02068045, 708.0562799, 708.1585284500001, 708.2576986500001, 708.4375181, 708.7445394499999, 709.5435309, 710.27972295, 710.5802851999999, 710.7241318000001, 710.913141, 711.06076355, 711.09359055, 711.2220710500001, 711.6649163500001, 712.1875383500001, 712.92517575, 713.7130837999999, 714.21947065, 714.6636193500001, 714.94042575, 715.5485454999999, 715.8462284, 716.3317852499999, 717.1687269000001, 717.7035836500002, 717.7636329, 718.558599, 719.0844890999999, 719.95335435, 720.4058167000001, 721.0007464, 721.7123976, 722.0881487500001, 722.30000045, 722.4894285, 722.6909506499999, 723.08820765, 723.65534785, 723.7398581, 724.4396298500001, 724.80172075, 725.0184450500001, 725.407798, 728.3572291, 729.32000855, 729.6319102, 730.0820972500001, 730.339291, 730.5736835499999, 730.7938822, 731.9656849, 733.5275441, 734.27720125, 734.5993669, 734.8919884, 735.1467807500001, 735.51084685, 735.99678255, 736.7196713999999, 737.841246, 738.36673445, 738.8803591999999, 739.9743931, 740.5754291999999, 740.9264625999999, 741.20380565, 741.79340985, 742.3479382999999, 743.79376845, 743.95499755, 744.29111165, 744.6669467, 745.5466311499999, 745.6537867, 746.34198365, 747.9103223, 748.2502857, 748.5005148, 748.5241036, 750.30458, 751.1456178999999, 751.69832385, 752.4270474, 753.086099, 753.21793, 753.2624731000001, 753.33789085, 755.8177805, 755.95509495, 757.2698267000001, 757.8279037, 759.0590733500001, 760.0550245000001, 761.2958381000001, 762.0183606, 762.1688485499999, 762.8996993999999, 763.583827, 764.4113181499999, 764.81675655, 769.22226185, 769.52356505, 769.7367312, 770.5357311500001, 772.0566224, 773.08062845, 773.3002458000001, 773.3317773, 778.75486475, 781.5505696499999, 783.62397735, 786.7510771, 787.3304139, 787.47828215, 789.4523806000001, 791.55439695, 798.0118691, 799.5681739500001, 800.47961545, 802.1035521, 806.79514895, 808.1759268, 821.2427858, 825.5861085500001, 834.4372111, 836.1287937, 837.4874515, 837.92861065, 838.37398985, 838.78670125, 839.6640719500001, 842.0491718500001, 846.13494745, 846.40385035, 862.4289812, 867.6712781000001, 884.7452679, 887.1229705499999, 889.0211723, 889.5790420000001, 923.1375423, 928.12843915, 944.05421585, 946.1309986499999])
labels = array([0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 4.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 4.0, 0.0, 4.0, 1.0, 0.0, 1.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 4.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 4.0, 3.0, 1.0, 4.0, 0.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 4.0, 3.0, 1.0, 0.0, 4.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 3.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 3.0, 2.0, 1.0, 4.0, 0.0, 4.0, 0.0, 1.0, 0.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 3.0, 4.0, 1.0, 4.0, 1.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 4.0, 1.0, 0.0, 1.0, 2.0, 4.0, 1.0, 4.0, 0.0, 1.0, 4.0, 1.0, 3.0, 1.0, 4.0, 3.0, 1.0, 3.0, 1.0, 2.0, 4.0, 1.0, 2.0, 4.0, 1.0, 4.0, 1.0, 4.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 3.0, 0.0, 3.0, 4.0, 2.0, 3.0, 4.0, 3.0, 2.0, 0.0, 2.0, 0.0, 4.0, 2.0, 1.0, 0.0, 1.0, 4.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 0.0, 4.0, 3.0, 1.0, 2.0, 4.0, 1.0, 4.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 4.0, 2.0, 4.0, 1.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 0.0, 1.0, 2.0, 4.0, 0.0, 4.0, 0.0, 4.0, 1.0, 4.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 4.0, 3.0, 1.0, 4.0, 1.0, 2.0, 1.0, 4.0, 1.0, 4.0, 1.0, 0.0, 2.0, 0.0, 2.0, 4.0, 0.0, 1.0, 4.0, 0.0, 2.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0, 3.0, 4.0, 1.0, 4.0, 1.0, 3.0, 1.0, 0.0, 3.0, 1.0, 4.0, 1.0, 2.0, 4.0, 3.0, 2.0, 1.0, 3.0, 1.0, 3.0, 1.0, 4.0, 0.0, 1.0, 2.0, 0.0, 1.0, 4.0, 3.0, 2.0, 0.0, 3.0, 4.0, 2.0, 1.0, 3.0, 0.0, 4.0, 0.0, 1.0, 3.0, 2.0, 0.0, 4.0, 1.0, 2.0, 1.0, 3.0, 2.0, 0.0, 4.0, 1.0, 0.0, 2.0, 4.0, 0.0, 4.0, 3.0, 1.0, 3.0, 1.0, 2.0, 4.0, 3.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0, 4.0, 0.0, 3.0, 4.0, 3.0, 1.0, 3.0, 0.0, 4.0, 1.0, 2.0, 4.0, 1.0, 3.0, 1.0, 0.0, 3.0, 0.0, 3.0, 0.0, 2.0, 4.0, 3.0, 0.0, 2.0, 1.0, 3.0, 2.0, 4.0, 1.0, 4.0, 1.0, 4.0, 0.0, 3.0, 1.0, 4.0, 0.0, 4.0, 2.0, 1.0, 2.0, 1.0, 2.0, 4.0, 3.0, 2.0, 1.0, 3.0, 1.0, 3.0, 2.0, 4.0, 1.0, 4.0, 1.0, 4.0, 2.0, 0.0, 2.0, 3.0, 2.0, 3.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 1.0, 4.0, 2.0, 1.0, 0.0, 4.0, 3.0, 4.0, 1.0, 4.0, 1.0, 2.0, 4.0, 1.0, 4.0, 1.0, 4.0, 3.0, 1.0, 4.0, 1.0, 2.0, 3.0, 1.0, 0.0, 2.0, 3.0, 4.0, 1.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 3.0, 4.0, 0.0, 4.0, 0.0, 1.0, 2.0, 0.0, 4.0, 1.0, 0.0, 2.0, 1.0, 4.0, 1.0, 3.0, 1.0, 4.0, 0.0, 2.0, 4.0, 1.0, 3.0, 4.0, 1.0, 0.0, 4.0, 3.0, 4.0, 0.0, 3.0, 4.0, 1.0, 4.0, 1.0, 0.0, 1.0, 3.0, 0.0, 3.0, 1.0, 4.0, 1.0, 4.0, 2.0, 1.0, 0.0, 3.0, 0.0, 3.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 4.0, 3.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 3.0, 2.0, 4.0, 3.0, 0.0, 1.0, 0.0, 1.0, 2.0, 3.0, 1.0, 2.0, 1.0, 0.0, 2.0, 4.0, 1.0, 2.0, 4.0, 3.0, 2.0, 4.0, 0.0, 4.0, 2.0, 4.0, 1.0, 0.0, 4.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 4.0, 2.0, 3.0, 4.0, 0.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 3.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 4.0, 2.0, 4.0, 2.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0, 1.0, 4.0, 3.0, 0.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 0.0, 4.0, 1.0, 3.0, 1.0, 4.0, 3.0, 2.0, 1.0, 3.0, 2.0, 0.0, 1.0, 4.0, 2.0, 4.0, 0.0, 4.0, 2.0, 4.0, 1.0, 2.0, 0.0, 2.0, 4.0, 0.0, 2.0, 0.0, 2.0, 4.0, 2.0, 4.0, 2.0, 0.0, 1.0, 4.0, 3.0, 1.0, 2.0, 4.0, 1.0, 3.0, 4.0, 1.0, 4.0, 0.0, 1.0, 2.0, 3.0, 2.0, 1.0, 4.0, 2.0, 1.0, 0.0, 3.0, 4.0, 2.0, 0.0, 4.0, 2.0, 4.0, 3.0, 1.0, 4.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 3.0, 1.0, 2.0, 3.0, 2.0, 0.0, 3.0, 4.0, 2.0, 0.0, 1.0, 4.0, 1.0, 4.0, 1.0, 4.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 4.0, 2.0, 1.0, 0.0, 2.0, 4.0, 1.0, 0.0, 4.0, 2.0, 0.0, 3.0, 0.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 1.0, 0.0, 4.0, 3.0, 1.0, 3.0, 4.0, 2.0, 0.0, 2.0, 4.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 4.0, 3.0, 1.0, 0.0, 4.0, 3.0, 2.0, 1.0, 0.0, 1.0, 2.0, 3.0, 0.0, 2.0, 1.0, 0.0, 4.0, 1.0, 4.0, 3.0, 1.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 3.0, 1.0, 3.0, 0.0, 2.0, 0.0, 3.0, 2.0, 4.0, 2.0, 0.0, 3.0, 0.0, 1.0, 3.0, 0.0, 4.0, 1.0, 0.0, 3.0, 0.0, 2.0, 4.0, 3.0, 4.0, 0.0, 1.0, 2.0, 0.0, 2.0, 4.0, 3.0, 1.0, 2.0, 3.0, 2.0, 4.0, 0.0, 3.0, 4.0, 1.0, 3.0, 2.0, 4.0, 1.0, 2.0, 1.0, 4.0, 2.0, 4.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 4.0, 3.0, 2.0, 4.0, 2.0, 3.0, 0.0, 3.0, 4.0, 3.0, 2.0, 3.0, 4.0, 3.0, 4.0, 1.0, 0.0, 4.0, 0.0, 3.0, 2.0, 1.0, 2.0, 4.0, 3.0, 0.0, 2.0, 3.0, 2.0, 4.0, 2.0, 1.0, 4.0, 3.0, 1.0, 4.0, 2.0, 1.0, 2.0, 1.0, 3.0, 4.0, 0.0, 4.0, 0.0, 1.0, 2.0, 3.0, 4.0, 1.0, 4.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 0.0, 2.0, 3.0, 1.0, 2.0, 0.0, 3.0, 4.0, 3.0, 1.0, 3.0, 0.0, 3.0, 4.0, 2.0, 0.0, 2.0, 4.0, 3.0, 1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 4.0, 2.0, 0.0, 1.0, 3.0, 4.0, 0.0, 4.0, 2.0, 1.0, 4.0, 1.0, 0.0, 2.0, 0.0, 3.0, 2.0, 4.0, 3.0, 1.0, 2.0, 0.0, 3.0, 2.0, 4.0, 2.0, 3.0, 1.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 4.0, 1.0, 4.0, 1.0, 0.0, 1.0, 4.0, 3.0, 4.0, 2.0, 0.0, 3.0, 1.0, 4.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 1.0, 2.0, 0.0, 3.0, 1.0, 2.0, 4.0, 1.0, 2.0, 1.0, 4.0, 3.0, 0.0, 2.0, 4.0, 3.0, 2.0, 3.0, 4.0, 0.0, 3.0, 2.0, 0.0, 2.0, 1.0, 2.0, 4.0, 1.0, 4.0, 0.0, 1.0, 3.0, 2.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 3.0, 0.0, 2.0, 4.0, 2.0, 3.0, 0.0, 2.0, 1.0, 3.0, 4.0, 2.0, 0.0, 4.0, 2.0, 0.0, 2.0, 4.0, 1.0, 2.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 4.0, 0.0, 4.0, 2.0, 3.0, 0.0, 1.0, 2.0, 1.0, 3.0, 1.0, 4.0, 2.0, 3.0, 1.0, 0.0, 3.0, 2.0, 4.0, 3.0, 4.0, 0.0, 1.0, 3.0, 4.0, 0.0, 3.0, 0.0, 3.0, 4.0, 1.0, 3.0, 0.0, 4.0, 0.0, 3.0, 4.0, 3.0, 0.0, 3.0, 4.0, 1.0, 0.0, 1.0, 4.0, 0.0, 3.0, 1.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 1.0, 3.0, 0.0, 1.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0, 0.0, 2.0, 4.0, 2.0, 4.0, 0.0, 1.0, 4.0, 0.0, 3.0, 0.0, 4.0, 3.0, 4.0, 0.0, 3.0, 0.0, 4.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 4.0, 0.0, 2.0, 4.0, 3.0, 0.0, 4.0, 3.0, 0.0, 3.0, 4.0, 0.0, 4.0, 3.0, 2.0, 4.0, 3.0, 0.0, 3.0, 1.0, 0.0, 4.0, 1.0, 2.0, 1.0, 4.0, 0.0, 2.0, 3.0, 4.0, 1.0, 4.0, 3.0, 1.0, 4.0, 3.0, 1.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 3.0, 1.0, 4.0, 2.0, 1.0, 2.0, 0.0, 4.0, 1.0, 4.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 1.0, 3.0, 0.0, 2.0, 4.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 3.0, 4.0, 1.0, 4.0, 3.0, 4.0, 3.0, 0.0, 1.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 1.0, 0.0, 3.0, 1.0, 3.0, 2.0, 0.0, 1.0, 3.0, 0.0, 4.0, 3.0, 0.0, 4.0, 2.0, 4.0, 3.0, 1.0, 4.0, 1.0, 0.0, 1.0, 3.0, 4.0, 2.0, 4.0, 0.0, 3.0, 1.0, 2.0, 0.0, 4.0, 1.0, 3.0, 0.0, 3.0, 4.0, 3.0, 1.0, 0.0, 3.0, 0.0, 3.0, 4.0, 2.0, 3.0, 2.0, 1.0, 4.0, 1.0, 4.0, 0.0, 1.0, 4.0, 0.0, 3.0, 1.0, 4.0, 2.0, 4.0, 1.0, 4.0, 0.0, 3.0, 4.0, 1.0, 4.0, 1.0, 4.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 1.0, 0.0, 3.0, 1.0, 3.0, 0.0, 4.0, 1.0, 3.0, 2.0, 0.0, 4.0, 1.0, 2.0, 1.0, 4.0, 1.0, 3.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 1.0, 0.0, 3.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 0.0, 3.0, 0.0, 3.0, 1.0, 4.0, 0.0, 1.0, 3.0, 0.0, 3.0, 4.0, 0.0, 3.0, 2.0, 0.0, 2.0, 0.0, 4.0, 0.0, 3.0, 2.0, 4.0, 3.0, 0.0, 4.0, 2.0, 4.0, 0.0, 4.0, 1.0, 4.0, 0.0, 1.0, 3.0, 1.0, 4.0, 1.0, 4.0, 3.0, 2.0, 4.0, 0.0, 2.0, 1.0, 3.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 1.0, 3.0, 1.0, 3.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 4.0, 1.0, 3.0, 1.0, 4.0, 2.0, 4.0, 0.0, 2.0, 4.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 1.0, 4.0, 3.0, 0.0, 4.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 0.0, 4.0, 3.0, 0.0, 3.0, 1.0, 3.0, 1.0, 0.0, 3.0, 0.0, 3.0, 1.0, 4.0, 2.0, 4.0, 3.0, 4.0, 0.0, 1.0, 4.0, 1.0, 0.0, 1.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 3.0, 4.0, 3.0, 2.0, 1.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 1.0, 3.0, 4.0, 3.0, 1.0, 4.0, 2.0, 3.0, 1.0, 2.0, 1.0, 3.0, 0.0, 1.0, 4.0, 0.0, 3.0, 0.0, 4.0, 3.0, 1.0, 3.0, 1.0, 3.0, 0.0, 4.0, 3.0, 4.0, 3.0, 4.0, 1.0, 3.0, 0.0, 4.0, 3.0, 4.0, 2.0, 3.0, 2.0, 4.0, 0.0, 2.0, 4.0, 3.0, 4.0, 0.0, 3.0, 0.0, 3.0, 4.0, 3.0, 4.0, 3.0, 0.0, 1.0, 2.0, 1.0, 2.0, 3.0, 0.0, 4.0, 2.0, 0.0, 4.0, 3.0, 4.0, 1.0, 4.0, 0.0, 1.0, 0.0, 4.0, 3.0, 4.0, 0.0, 4.0, 2.0, 4.0, 1.0, 4.0, 3.0, 1.0, 3.0, 4.0, 3.0, 2.0, 3.0, 0.0, 4.0, 1.0, 3.0, 2.0, 1.0, 0.0, 4.0, 3.0, 0.0, 3.0, 4.0, 0.0, 1.0, 3.0, 4.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 1.0, 3.0, 4.0, 0.0, 4.0, 0.0, 1.0, 3.0, 0.0, 1.0, 4.0, 1.0, 3.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 4.0, 3.0, 0.0, 2.0, 3.0, 0.0, 1.0, 4.0, 1.0, 4.0, 3.0, 0.0, 2.0, 4.0, 0.0, 3.0, 1.0, 3.0, 4.0, 2.0, 1.0, 4.0, 0.0, 2.0, 4.0, 3.0, 2.0, 4.0, 2.0, 0.0, 1.0, 3.0, 0.0, 1.0, 4.0, 3.0, 1.0, 4.0, 0.0, 4.0, 0.0, 2.0, 3.0, 0.0, 2.0, 3.0, 4.0, 1.0, 2.0, 1.0, 3.0, 1.0, 4.0, 3.0, 4.0, 1.0, 0.0, 1.0, 3.0, 1.0, 3.0, 0.0, 2.0, 4.0, 1.0, 3.0, 0.0, 3.0, 4.0, 0.0, 4.0, 0.0, 3.0, 2.0, 4.0, 0.0, 3.0, 4.0, 1.0, 4.0, 0.0, 3.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 3.0, 4.0, 3.0, 1.0, 2.0, 4.0, 2.0, 0.0, 2.0, 1.0, 4.0, 0.0, 4.0, 2.0, 1.0, 3.0, 2.0, 4.0, 3.0, 1.0, 4.0, 2.0, 0.0, 1.0, 4.0, 2.0, 3.0, 4.0, 3.0, 0.0, 3.0, 0.0, 1.0, 4.0, 3.0, 2.0, 4.0, 3.0, 4.0, 1.0, 4.0, 1.0, 3.0, 0.0, 1.0, 3.0, 2.0, 0.0, 4.0, 3.0, 4.0, 3.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 1.0, 2.0, 0.0, 1.0, 4.0, 3.0, 2.0, 0.0, 4.0, 0.0, 1.0, 0.0, 2.0, 0.0, 3.0, 4.0, 3.0, 2.0, 4.0, 0.0, 4.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 0.0, 3.0, 4.0, 0.0, 3.0, 4.0, 3.0, 0.0, 1.0, 0.0, 3.0, 4.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 2.0, 3.0, 1.0, 3.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 3.0, 1.0, 2.0, 0.0, 2.0, 0.0, 4.0, 1.0, 3.0, 1.0, 0.0, 3.0, 4.0, 0.0, 4.0, 0.0, 1.0, 3.0, 0.0, 2.0, 0.0, 4.0, 3.0, 0.0, 2.0, 1.0, 2.0, 4.0, 0.0, 4.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 1.0, 4.0, 2.0, 0.0, 4.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 1.0, 4.0, 2.0, 1.0, 0.0, 2.0, 1.0, 3.0, 1.0, 4.0, 0.0, 2.0, 0.0, 3.0, 0.0, 4.0, 2.0, 4.0, 0.0, 3.0, 1.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 3.0, 2.0, 0.0, 2.0, 4.0, 0.0, 3.0, 4.0, 1.0, 0.0, 4.0, 1.0, 0.0, 3.0, 4.0, 3.0, 2.0, 0.0, 1.0, 4.0, 1.0, 2.0, 1.0, 3.0, 2.0, 3.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 0.0, 2.0, 3.0, 4.0, 3.0, 2.0, 3.0, 2.0, 0.0, 4.0, 0.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 4.0, 0.0, 4.0, 2.0, 1.0, 4.0, 3.0, 1.0, 3.0, 4.0, 3.0, 0.0, 2.0, 4.0, 3.0, 0.0, 2.0, 0.0, 1.0, 4.0, 1.0, 3.0, 2.0, 4.0, 0.0, 2.0, 1.0, 0.0, 2.0, 0.0, 3.0, 1.0, 4.0, 2.0, 1.0, 4.0, 2.0, 4.0, 1.0, 0.0, 1.0, 4.0, 2.0, 4.0, 2.0, 3.0, 2.0, 4.0, 1.0, 4.0, 0.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 0.0, 4.0, 2.0, 0.0, 1.0, 0.0, 3.0, 1.0, 4.0, 0.0, 3.0, 1.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 0.0, 2.0, 3.0, 1.0, 3.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 4.0, 1.0, 0.0, 4.0, 1.0, 0.0, 2.0, 3.0, 2.0, 3.0, 1.0, 0.0, 1.0, 3.0, 1.0, 0.0, 3.0, 0.0, 3.0, 2.0, 1.0, 3.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 3.0, 4.0, 3.0, 2.0, 4.0, 0.0, 2.0, 4.0, 3.0, 4.0, 1.0, 3.0, 0.0, 2.0, 1.0, 0.0, 2.0, 4.0, 0.0, 3.0, 4.0, 0.0, 4.0, 3.0, 1.0, 4.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 0.0, 4.0, 2.0, 0.0, 2.0, 0.0, 1.0, 3.0, 0.0, 4.0, 0.0, 3.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 3.0, 2.0, 1.0, 3.0, 0.0, 1.0, 0.0, 2.0, 3.0, 0.0, 2.0, 3.0, 2.0, 1.0, 3.0, 1.0, 0.0, 4.0, 2.0, 1.0, 3.0, 0.0, 2.0, 0.0, 2.0, 1.0, 4.0, 3.0, 4.0, 0.0, 2.0, 4.0, 2.0, 4.0, 2.0, 1.0, 4.0, 3.0, 0.0, 4.0, 0.0, 4.0, 3.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 1.0, 4.0, 0.0, 3.0, 2.0, 1.0, 2.0, 4.0, 2.0, 0.0, 1.0, 2.0, 3.0, 4.0, 3.0, 2.0, 1.0, 4.0, 3.0, 0.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 0.0, 3.0, 2.0, 3.0, 4.0, 1.0, 0.0, 3.0, 0.0, 4.0, 0.0, 4.0, 2.0, 0.0, 2.0, 3.0, 2.0, 4.0, 0.0, 1.0, 2.0, 3.0, 4.0, 2.0, 3.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 0.0, 3.0, 2.0, 3.0, 4.0, 0.0, 1.0, 3.0, 0.0, 2.0, 0.0, 4.0, 3.0, 0.0, 2.0, 4.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 3.0, 1.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 0.0, 2.0, 3.0, 0.0, 4.0, 2.0, 3.0, 2.0, 4.0, 3.0, 1.0, 2.0, 4.0, 2.0, 1.0, 0.0, 3.0, 4.0, 2.0, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 2.0, 0.0, 4.0, 2.0, 0.0, 4.0, 1.0, 3.0, 2.0, 3.0, 4.0, 1.0, 4.0, 0.0, 2.0, 1.0, 4.0, 3.0, 4.0, 0.0, 4.0, 2.0, 1.0, 0.0, 2.0, 0.0, 2.0, 4.0, 1.0, 4.0, 2.0, 0.0, 1.0, 0.0, 3.0, 2.0, 3.0, 4.0, 3.0, 4.0, 3.0, 0.0, 4.0, 2.0, 1.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 0.0, 2.0, 3.0, 1.0, 3.0, 0.0, 4.0, 0.0, 3.0, 1.0, 2.0, 3.0, 0.0, 2.0, 3.0, 4.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 4.0, 3.0, 4.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 3.0, 2.0, 1.0, 3.0, 0.0, 2.0, 0.0, 2.0, 0.0, 3.0, 2.0, 4.0, 2.0, 0.0, 3.0, 1.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 1.0, 3.0, 0.0, 1.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 1.0, 0.0, 3.0, 2.0, 0.0, 2.0, 0.0, 4.0, 3.0, 0.0, 2.0, 3.0, 2.0, 3.0, 2.0, 1.0, 0.0, 3.0, 1.0, 3.0, 0.0, 4.0, 3.0, 1.0, 2.0, 3.0, 4.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 3.0, 4.0, 0.0, 1.0, 0.0, 1.0, 4.0, 3.0, 4.0, 2.0, 0.0, 2.0, 4.0, 2.0, 4.0, 1.0, 2.0, 1.0, 2.0, 4.0, 0.0, 2.0, 0.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 2.0, 0.0, 4.0, 1.0, 0.0, 2.0, 1.0, 0.0, 4.0, 3.0, 4.0, 2.0, 1.0, 4.0, 2.0, 0.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 0.0, 2.0, 4.0, 3.0, 0.0, 4.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0, 4.0, 2.0, 0.0, 3.0, 4.0, 2.0, 0.0, 2.0, 4.0, 0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 4.0, 3.0, 2.0, 1.0, 0.0, 4.0, 3.0, 0.0, 1.0, 3.0, 2.0, 1.0, 0.0, 4.0, 1.0, 4.0, 0.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 4.0, 0.0, 4.0, 2.0, 0.0, 3.0, 0.0, 2.0, 4.0, 2.0, 1.0, 4.0, 0.0, 2.0, 0.0, 4.0, 3.0, 4.0, 3.0, 2.0, 4.0, 2.0, 1.0, 3.0, 4.0, 3.0, 2.0, 3.0, 1.0, 0.0, 2.0, 1.0, 0.0, 4.0, 1.0, 2.0, 4.0, 2.0, 1.0, 4.0, 2.0, 4.0, 0.0, 4.0, 0.0, 4.0, 2.0, 4.0, 2.0, 0.0, 2.0, 4.0, 3.0, 4.0, 0.0, 1.0, 4.0, 3.0, 2.0, 4.0, 2.0, 1.0, 3.0, 2.0, 4.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 4.0, 2.0, 3.0, 0.0, 3.0, 2.0, 3.0, 2.0, 0.0, 4.0, 0.0, 2.0, 3.0, 2.0, 4.0, 0.0, 2.0, 3.0, 2.0, 0.0, 2.0, 3.0, 4.0, 1.0, 3.0, 2.0, 4.0, 2.0, 1.0, 2.0, 4.0, 0.0, 3.0, 2.0, 3.0, 1.0, 4.0, 3.0, 2.0, 0.0, 3.0, 1.0, 4.0, 1.0, 2.0, 0.0, 1.0, 4.0, 3.0, 2.0, 0.0, 4.0, 3.0, 4.0, 2.0, 0.0, 2.0, 4.0, 0.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 1.0, 2.0, 1.0, 3.0, 0.0, 2.0, 3.0, 2.0, 4.0, 0.0, 2.0, 4.0, 2.0, 0.0, 4.0, 3.0, 4.0, 0.0, 3.0, 4.0, 1.0, 0.0, 3.0, 2.0, 3.0, 4.0, 2.0, 4.0, 2.0, 0.0, 3.0, 2.0, 3.0, 4.0, 0.0, 2.0, 1.0, 4.0, 2.0, 0.0, 3.0, 2.0, 0.0, 2.0, 4.0, 2.0, 3.0, 2.0, 1.0, 3.0, 4.0, 3.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 4.0, 0.0, 3.0, 2.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 3.0, 0.0, 2.0, 3.0, 1.0, 3.0, 1.0, 2.0, 4.0, 2.0, 4.0, 3.0, 4.0, 0.0, 2.0, 1.0, 3.0, 4.0, 2.0, 1.0, 2.0, 0.0, 2.0, 4.0, 2.0, 4.0, 2.0, 0.0, 2.0, 4.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 4.0, 2.0, 0.0, 2.0, 0.0, 4.0, 1.0, 3.0, 2.0, 3.0, 2.0, 4.0, 2.0, 0.0, 2.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 1.0, 4.0, 3.0, 2.0, 3.0, 4.0, 2.0, 0.0, 3.0, 0.0, 1.0, 3.0, 0.0, 2.0, 4.0, 3.0, 2.0, 0.0, 3.0, 2.0, 4.0, 0.0, 2.0, 4.0, 3.0, 2.0, 4.0, 0.0, 2.0, 1.0, 3.0, 2.0, 4.0, 2.0, 4.0, 2.0, 1.0, 2.0, 0.0, 4.0, 3.0, 2.0, 0.0, 4.0, 0.0, 3.0, 2.0, 3.0, 0.0, 2.0, 0.0, 4.0, 3.0, 1.0, 4.0, 1.0, 3.0, 4.0, 2.0, 0.0, 3.0, 2.0, 4.0, 2.0, 4.0, 3.0, 2.0, 1.0, 2.0, 0.0, 2.0, 4.0, 3.0, 0.0, 4.0, 2.0, 3.0, 2.0, 1.0, 3.0, 4.0, 2.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 0.0, 4.0, 1.0, 3.0, 2.0, 0.0, 4.0, 0.0, 4.0, 3.0, 4.0, 0.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 1.0, 2.0, 4.0, 3.0, 4.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 0.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 0.0, 1.0, 2.0, 3.0, 4.0, 2.0, 3.0, 4.0, 3.0, 4.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 3.0, 1.0, 0.0, 2.0, 0.0, 4.0, 3.0, 2.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 4.0, 2.0, 4.0, 1.0, 4.0, 2.0, 0.0, 1.0, 3.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 0.0, 2.0, 0.0, 4.0, 2.0, 4.0, 2.0, 4.0, 3.0, 2.0, 4.0, 3.0, 2.0, 3.0, 4.0, 2.0, 1.0, 3.0, 2.0, 3.0, 4.0, 0.0, 2.0, 4.0, 2.0, 0.0, 4.0, 3.0, 2.0, 1.0, 0.0, 3.0, 4.0, 1.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 1.0, 2.0, 3.0, 4.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 0.0, 2.0, 3.0, 1.0, 4.0, 1.0, 4.0, 3.0, 0.0, 4.0, 3.0, 0.0, 4.0, 2.0, 3.0, 0.0, 2.0, 4.0, 3.0, 2.0, 4.0, 3.0, 2.0, 3.0, 1.0, 0.0, 3.0, 2.0, 3.0, 1.0, 2.0, 4.0, 0.0, 3.0, 2.0, 0.0, 3.0, 4.0, 2.0, 3.0, 2.0, 4.0, 3.0, 2.0, 4.0, 2.0, 3.0, 4.0, 3.0, 0.0, 3.0, 1.0, 3.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 2.0, 4.0, 0.0, 2.0, 3.0, 2.0, 4.0, 2.0, 3.0, 4.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 2.0, 4.0, 1.0, 4.0, 3.0, 2.0, 4.0, 3.0, 2.0, 4.0, 3.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 4.0, 3.0, 0.0, 2.0, 0.0, 4.0, 2.0, 3.0, 4.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 0.0, 3.0, 2.0, 4.0, 2.0, 1.0, 3.0, 4.0, 0.0, 2.0, 0.0, 3.0, 1.0, 2.0, 4.0, 2.0, 4.0, 2.0, 3.0, 2.0, 4.0, 0.0, 3.0, 4.0, 3.0, 4.0, 2.0, 4.0, 1.0, 0.0, 2.0, 0.0, 2.0, 3.0, 1.0, 3.0, 2.0, 4.0, 2.0, 4.0, 3.0, 1.0, 2.0, 4.0, 3.0, 2.0, 4.0, 2.0, 1.0, 3.0, 1.0, 2.0, 0.0, 1.0, 3.0, 4.0, 0.0, 4.0, 2.0, 4.0, 0.0, 3.0, 2.0, 3.0, 2.0, 3.0, 4.0, 2.0, 0.0, 3.0, 4.0, 2.0, 3.0, 1.0, 2.0, 4.0, 1.0, 3.0, 1.0, 2.0, 4.0, 3.0, 4.0, 3.0, 2.0, 0.0, 3.0, 0.0, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 1.0, 4.0, 3.0, 0.0, 3.0, 4.0, 1.0, 2.0, 0.0, 4.0, 2.0, 0.0, 2.0, 1.0, 3.0, 4.0, 1.0, 4.0, 0.0, 3.0, 2.0, 3.0, 4.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 2.0, 3.0, 0.0, 3.0, 0.0, 1.0, 2.0, 3.0, 4.0, 2.0, 4.0, 0.0, 1.0, 2.0, 4.0, 3.0, 4.0, 3.0, 0.0, 4.0, 2.0, 4.0, 3.0, 2.0, 1.0, 2.0, 3.0, 0.0, 3.0, 2.0, 3.0, 2.0, 4.0, 1.0, 4.0, 2.0, 0.0, 1.0, 4.0, 2.0, 3.0, 4.0, 3.0, 0.0, 2.0, 3.0, 0.0, 3.0, 2.0, 0.0, 2.0, 0.0, 4.0, 2.0, 4.0, 1.0, 4.0, 2.0, 1.0, 4.0, 3.0, 2.0, 4.0, 0.0, 3.0, 4.0, 0.0, 3.0, 2.0, 0.0, 3.0, 2.0, 3.0, 4.0, 0.0, 3.0, 2.0, 1.0, 2.0, 0.0, 2.0, 4.0, 2.0, 3.0, 1.0, 3.0, 2.0, 1.0, 0.0, 2.0, 3.0, 4.0, 1.0, 2.0, 4.0, 0.0, 4.0, 1.0, 4.0, 3.0, 0.0, 1.0, 4.0, 3.0, 4.0, 3.0, 2.0, 0.0, 1.0, 3.0, 2.0, 3.0, 4.0, 1.0, 4.0, 3.0, 1.0, 3.0, 2.0, 0.0, 3.0, 1.0, 2.0, 1.0, 2.0, 4.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 3.0, 0.0, 4.0, 0.0, 4.0, 3.0, 2.0, 4.0, 3.0, 4.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 0.0, 3.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 0.0, 2.0, 3.0, 4.0, 3.0, 0.0, 4.0, 0.0, 1.0, 4.0, 3.0, 4.0, 2.0, 4.0, 2.0, 0.0, 3.0, 4.0, 0.0, 1.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0, 3.0, 4.0, 3.0, 1.0, 3.0, 4.0, 3.0, 0.0, 4.0, 2.0, 4.0, 2.0, 1.0, 2.0, 0.0, 4.0, 3.0, 1.0, 0.0, 3.0, 4.0, 3.0, 1.0, 3.0, 1.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 0.0, 3.0, 0.0, 3.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 4.0, 3.0, 1.0, 4.0, 0.0, 1.0, 3.0, 0.0, 3.0, 0.0, 4.0, 0.0, 2.0, 3.0, 0.0, 3.0, 0.0, 3.0, 4.0, 3.0, 2.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 4.0, 0.0, 3.0, 4.0, 1.0, 3.0, 1.0, 3.0, 4.0, 3.0, 0.0, 3.0, 1.0, 4.0, 0.0, 4.0, 3.0, 4.0, 3.0, 0.0, 3.0, 2.0, 0.0, 3.0, 0.0, 2.0, 3.0, 0.0, 3.0, 0.0, 1.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 2.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)

    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = labels[numers[indys]]
        outputs[defaultindys] = 1.0
        return outputs
    return thresh_search(energys)

numthresholds = 3757



# Main method
model_cap = numthresholds


def Validate(file):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 0
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in ([i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        print("Classifier Type: Quick Clustering")
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            try:
                import numpy as np # For numpy see: http://numpy.org
                from numpy import array
            except:
                print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                except:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])



    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)



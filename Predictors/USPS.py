#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is
# licensed under GNU GPL v2.0 or higher. For details, please see:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.96 Table Compiler v0.96.
# Invocation: btc https://www.openml.org/data/get_csv/19329737/usps.arff -o Predictors/USPS_NN.py -target int0 -stopat 92.17 -f NN -e 3 --yes --runlocalonly
# Total compiler execution time: 0:01:39.40. Finished on: Jun-07-2020 05:03:41.
# This source code requires Python 3.
#
"""
Classifier Type: Neural Network
System Type:                        10-way classifier
Best-guess accuracy:                16.71%
Model accuracy:                     96.36% (8960/9298 correct)
Improvement over best guess:        79.65% (of possible 83.29%)
Model capacity (MEC):               4015 bits
Generalization ratio:               2.23 bits/bit
Confusion Matrix:
 [8.54% 0.15% 0.03% 0.00% 0.00% 0.01% 0.12% 0.00% 0.12% 0.00%]
 [0.09% 7.22% 0.02% 0.01% 0.09% 0.01% 0.12% 0.06% 0.05% 0.03%]
 [0.09% 0.02% 8.71% 0.00% 0.00% 0.05% 0.04% 0.04% 0.12% 0.09%]
 [0.00% 0.00% 0.09% 8.36% 0.01% 0.00% 0.00% 0.00% 0.01% 0.05%]
 [0.00% 0.24% 0.00% 0.01% 8.40% 0.01% 0.03% 0.05% 0.06% 0.05%]
 [0.02% 0.03% 0.00% 0.00% 0.00% 13.56% 0.00% 0.01% 0.01% 0.01%]
 [0.11% 0.08% 0.09% 0.00% 0.03% 0.00% 16.28% 0.05% 0.06% 0.00%]
 [0.02% 0.09% 0.03% 0.04% 0.12% 0.02% 0.03% 7.16% 0.05% 0.04%]
 [0.05% 0.12% 0.12% 0.05% 0.01% 0.00% 0.09% 0.08% 9.48% 0.00%]
 [0.00% 0.01% 0.05% 0.09% 0.00% 0.01% 0.00% 0.01% 0.00% 8.66%]

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "usps.csv"


#Number of output logits
num_output_logits = 10

#Number of attributes
num_attr = 256
n_classes = 10


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="int0"


    # if (testfile):
    #     target = ''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if (target != ''): 
                        hc = header.index(target)
                    else:
                        hc = len(header) - 1
                        target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                for i in range(0, len(header)):      
                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i] + ",", end='', file=outputfile)
                print(header[hc], file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"' + row[name] + '"' + ",", end='', file=outputfile)
                        else:
                            print (row[name] + ",", end='', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc =- 1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc == -1):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if (',' in row[i]):
                            print ('"' + row[i] + '"'+",", end='', file=outputfile)
                        else:
                            print(row[i]+",", end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'7': 0, '6': 1, '5': 2, '8': 3, '4': 4, '2': 5, '1': 6, '9': 7, '3': 8, '10': 9}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)

# Classifier
def single_classify(row):
    x = row
    o = [0] * num_output_logits
    h_0 = max((((-0.19040829 * float(x[0]))+ (-0.21315427 * float(x[1]))+ (-0.21042138 * float(x[2]))+ (-0.13851781 * float(x[3]))+ (-0.02862209 * float(x[4]))+ (-0.0050194873 * float(x[5]))+ (0.14779343 * float(x[6]))+ (0.8157938 * float(x[7]))+ (1.0130728 * float(x[8]))+ (0.33155587 * float(x[9]))+ (0.18066843 * float(x[10]))+ (0.29531148 * float(x[11]))+ (0.23524974 * float(x[12]))+ (0.007826264 * float(x[13]))+ (-0.23241094 * float(x[14]))+ (-0.27645802 * float(x[15]))+ (-0.13801832 * float(x[16]))+ (-0.057930335 * float(x[17]))+ (0.020564502 * float(x[18]))+ (0.08821559 * float(x[19]))+ (0.21591258 * float(x[20]))+ (0.3390916 * float(x[21]))+ (0.41483578 * float(x[22]))+ (0.78166354 * float(x[23]))+ (-0.23830286 * float(x[24]))+ (0.5434457 * float(x[25]))+ (0.34575808 * float(x[26]))+ (0.5760983 * float(x[27]))+ (0.6053552 * float(x[28]))+ (0.25623062 * float(x[29]))+ (-0.10982353 * float(x[30]))+ (-0.21056297 * float(x[31]))+ (-0.14857829 * float(x[32]))+ (0.038120657 * float(x[33]))+ (0.29203558 * float(x[34]))+ (0.3335944 * float(x[35]))+ (0.40482235 * float(x[36]))+ (0.5639411 * float(x[37]))+ (0.49509075 * float(x[38]))+ (-0.03344722 * float(x[39]))+ (0.3252346 * float(x[40]))+ (0.7787773 * float(x[41]))+ (0.30987704 * float(x[42]))+ (0.23739296 * float(x[43]))+ (0.31294796 * float(x[44]))+ (0.15256995 * float(x[45]))+ (-0.041035462 * float(x[46]))+ (-0.11013111 * float(x[47]))+ (-0.20782554 * float(x[48]))+ (-0.02580093 * float(x[49])))+ ((0.2808141 * float(x[50]))+ (0.31693274 * float(x[51]))+ (0.2912909 * float(x[52]))+ (0.23417346 * float(x[53]))+ (0.17977332 * float(x[54]))+ (0.10050016 * float(x[55]))+ (0.4494882 * float(x[56]))+ (0.6850845 * float(x[57]))+ (0.594775 * float(x[58]))+ (0.5659467 * float(x[59]))+ (0.27754167 * float(x[60]))+ (0.08176642 * float(x[61]))+ (-0.007963766 * float(x[62]))+ (-0.060967803 * float(x[63]))+ (-0.24950704 * float(x[64]))+ (-0.13586116 * float(x[65]))+ (0.042555578 * float(x[66]))+ (0.073663436 * float(x[67]))+ (0.23005292 * float(x[68]))+ (-0.15639897 * float(x[69]))+ (-0.4841594 * float(x[70]))+ (0.093792886 * float(x[71]))+ (0.4862107 * float(x[72]))+ (0.57945424 * float(x[73]))+ (0.6796128 * float(x[74]))+ (0.7794704 * float(x[75]))+ (0.34670064 * float(x[76]))+ (0.12065927 * float(x[77]))+ (-0.013238085 * float(x[78]))+ (-0.07478037 * float(x[79]))+ (-0.31499022 * float(x[80]))+ (-0.22606239 * float(x[81]))+ (-0.059892517 * float(x[82]))+ (-0.011139807 * float(x[83]))+ (0.13733616 * float(x[84]))+ (-0.53287786 * float(x[85]))+ (-0.37948787 * float(x[86]))+ (0.33603767 * float(x[87]))+ (0.43109226 * float(x[88]))+ (0.15408397 * float(x[89]))+ (0.43390658 * float(x[90]))+ (0.6572298 * float(x[91]))+ (0.36467496 * float(x[92]))+ (0.12963162 * float(x[93]))+ (-0.094295554 * float(x[94]))+ (-0.10480021 * float(x[95]))+ (-0.26719618 * float(x[96]))+ (-0.14400923 * float(x[97]))+ (0.0318033 * float(x[98]))+ (0.16630696 * float(x[99])))+ ((-0.08402188 * float(x[100]))+ (-0.55372477 * float(x[101]))+ (0.6941145 * float(x[102]))+ (0.6730349 * float(x[103]))+ (0.50752366 * float(x[104]))+ (0.27929065 * float(x[105]))+ (0.5164017 * float(x[106]))+ (0.5162652 * float(x[107]))+ (0.36801153 * float(x[108]))+ (0.26481017 * float(x[109]))+ (0.021187289 * float(x[110]))+ (-0.05953863 * float(x[111]))+ (-0.066713616 * float(x[112]))+ (0.06174997 * float(x[113]))+ (-0.027844582 * float(x[114]))+ (-0.16795526 * float(x[115]))+ (-0.7366917 * float(x[116]))+ (0.027619595 * float(x[117]))+ (0.95670146 * float(x[118]))+ (0.43436792 * float(x[119]))+ (0.39363667 * float(x[120]))+ (0.5400108 * float(x[121]))+ (0.6348793 * float(x[122]))+ (0.3755625 * float(x[123]))+ (0.2674636 * float(x[124]))+ (0.2531008 * float(x[125]))+ (0.05443844 * float(x[126]))+ (-0.05935899 * float(x[127]))+ (0.04143437 * float(x[128]))+ (0.12556645 * float(x[129]))+ (-0.13422011 * float(x[130]))+ (-0.37186238 * float(x[131]))+ (-0.52713 * float(x[132]))+ (0.44590583 * float(x[133]))+ (0.5802867 * float(x[134]))+ (0.070663616 * float(x[135]))+ (-0.06256366 * float(x[136]))+ (-0.71712035 * float(x[137]))+ (-0.48597494 * float(x[138]))+ (0.18942115 * float(x[139]))+ (-0.019630345 * float(x[140]))+ (0.0050733313 * float(x[141]))+ (-0.0767785 * float(x[142]))+ (-0.11762896 * float(x[143]))+ (-0.0028581317 * float(x[144]))+ (-0.028820544 * float(x[145]))+ (-0.2652361 * float(x[146]))+ (-0.35157955 * float(x[147]))+ (-0.434968 * float(x[148]))+ (-0.13694143 * float(x[149])))+ ((0.14715259 * float(x[150]))+ (0.29727408 * float(x[151]))+ (-0.24223249 * float(x[152]))+ (0.03669499 * float(x[153]))+ (-0.061844334 * float(x[154]))+ (-0.009128516 * float(x[155]))+ (-0.19403678 * float(x[156]))+ (-0.026227133 * float(x[157]))+ (-0.09554159 * float(x[158]))+ (-0.159915 * float(x[159]))+ (-0.03647265 * float(x[160]))+ (-0.06112508 * float(x[161]))+ (-0.21444754 * float(x[162]))+ (-0.37669474 * float(x[163]))+ (-0.44756043 * float(x[164]))+ (-0.36344975 * float(x[165]))+ (-0.2164874 * float(x[166]))+ (0.24045694 * float(x[167]))+ (-0.9031735 * float(x[168]))+ (-0.29523292 * float(x[169]))+ (-0.26170492 * float(x[170]))+ (-0.33031067 * float(x[171]))+ (-0.22667868 * float(x[172]))+ (0.036694754 * float(x[173]))+ (-0.15895072 * float(x[174]))+ (-0.26420447 * float(x[175]))+ (-0.0853538 * float(x[176]))+ (-0.04599455 * float(x[177]))+ (-0.033476744 * float(x[178]))+ (-0.13950118 * float(x[179]))+ (-0.25968233 * float(x[180]))+ (-0.2927853 * float(x[181]))+ (-0.33338404 * float(x[182]))+ (0.2299383 * float(x[183]))+ (-0.3769296 * float(x[184]))+ (0.23946694 * float(x[185]))+ (0.3401309 * float(x[186]))+ (-0.21371265 * float(x[187]))+ (-0.17925082 * float(x[188]))+ (-0.035173062 * float(x[189]))+ (-0.26808274 * float(x[190]))+ (-0.32776842 * float(x[191]))+ (-0.090109065 * float(x[192]))+ (-0.020337816 * float(x[193]))+ (-0.002482527 * float(x[194]))+ (0.026296442 * float(x[195]))+ (-0.27125192 * float(x[196]))+ (-0.54237986 * float(x[197]))+ (-0.76874703 * float(x[198]))+ (0.14253554 * float(x[199])))+ ((0.2974599 * float(x[200]))+ (0.35644323 * float(x[201]))+ (-0.048176628 * float(x[202]))+ (-0.25946054 * float(x[203]))+ (-0.20254952 * float(x[204]))+ (-0.09313515 * float(x[205]))+ (-0.21414244 * float(x[206]))+ (-0.2725826 * float(x[207]))+ (-0.13495117 * float(x[208]))+ (-0.034331776 * float(x[209]))+ (-0.07512223 * float(x[210]))+ (-0.10799277 * float(x[211]))+ (-0.24071965 * float(x[212]))+ (-0.56948686 * float(x[213]))+ (-0.44843587 * float(x[214]))+ (-0.25703147 * float(x[215]))+ (-0.5697892 * float(x[216]))+ (-1.2149215 * float(x[217]))+ (-0.28170195 * float(x[218]))+ (-0.08538603 * float(x[219]))+ (-0.2283686 * float(x[220]))+ (-0.19068807 * float(x[221]))+ (-0.16431077 * float(x[222]))+ (-0.20164369 * float(x[223]))+ (-0.22403 * float(x[224]))+ (-0.15291446 * float(x[225]))+ (-0.11860596 * float(x[226]))+ (-0.16805705 * float(x[227]))+ (-0.19908838 * float(x[228]))+ (-0.54463655 * float(x[229]))+ (-0.7587167 * float(x[230]))+ (-0.16951096 * float(x[231]))+ (-0.6545177 * float(x[232]))+ (-0.6742529 * float(x[233]))+ (0.09938321 * float(x[234]))+ (0.06358917 * float(x[235]))+ (-0.1601233 * float(x[236]))+ (-0.2406889 * float(x[237]))+ (-0.20505811 * float(x[238]))+ (-0.21650127 * float(x[239]))+ (-0.2653586 * float(x[240]))+ (-0.2469966 * float(x[241]))+ (-0.19324544 * float(x[242]))+ (-0.16925314 * float(x[243]))+ (-0.17660546 * float(x[244]))+ (-0.3285909 * float(x[245]))+ (-0.06959194 * float(x[246]))+ (0.77480805 * float(x[247]))+ (0.82750326 * float(x[248]))+ (0.4068281 * float(x[249])))+ ((0.033943564 * float(x[250]))+ (-0.05772952 * float(x[251]))+ (-0.1499227 * float(x[252]))+ (-0.24939378 * float(x[253]))+ (-0.2495963 * float(x[254]))+ (-0.24553105 * float(x[255]))) + 0.25750372), 0)
    h_1 = max((((-0.19510165 * float(x[0]))+ (-0.111287914 * float(x[1]))+ (0.053545415 * float(x[2]))+ (0.16204728 * float(x[3]))+ (0.009319645 * float(x[4]))+ (-0.05675821 * float(x[5]))+ (-0.019648012 * float(x[6]))+ (0.31729308 * float(x[7]))+ (0.7184836 * float(x[8]))+ (0.79143775 * float(x[9]))+ (0.41407058 * float(x[10]))+ (0.07447311 * float(x[11]))+ (0.057763077 * float(x[12]))+ (0.11534436 * float(x[13]))+ (-0.03883813 * float(x[14]))+ (-0.16609445 * float(x[15]))+ (-0.266161 * float(x[16]))+ (-0.2708205 * float(x[17]))+ (-0.04993718 * float(x[18]))+ (0.2696351 * float(x[19]))+ (0.18715034 * float(x[20]))+ (0.13653205 * float(x[21]))+ (0.5662924 * float(x[22]))+ (1.4457109 * float(x[23]))+ (1.0582788 * float(x[24]))+ (0.27087966 * float(x[25]))+ (0.29670948 * float(x[26]))+ (0.1869914 * float(x[27]))+ (0.14001738 * float(x[28]))+ (0.1828426 * float(x[29]))+ (0.050341804 * float(x[30]))+ (-0.11654285 * float(x[31]))+ (-0.2624785 * float(x[32]))+ (-0.30286175 * float(x[33]))+ (-0.15908074 * float(x[34]))+ (0.18877666 * float(x[35]))+ (0.12997462 * float(x[36]))+ (0.039753817 * float(x[37]))+ (0.05492207 * float(x[38]))+ (-0.289278 * float(x[39]))+ (0.16508394 * float(x[40]))+ (0.2824485 * float(x[41]))+ (0.42548245 * float(x[42]))+ (0.14130995 * float(x[43]))+ (0.38683626 * float(x[44]))+ (0.22024782 * float(x[45]))+ (0.0021667234 * float(x[46]))+ (-0.16188571 * float(x[47]))+ (-0.14118248 * float(x[48]))+ (-0.045185715 * float(x[49])))+ ((0.053867437 * float(x[50]))+ (0.14304744 * float(x[51]))+ (0.33798188 * float(x[52]))+ (0.51076794 * float(x[53]))+ (-0.13215004 * float(x[54]))+ (-0.90579385 * float(x[55]))+ (0.9419733 * float(x[56]))+ (0.56691265 * float(x[57]))+ (0.22694175 * float(x[58]))+ (-0.1896545 * float(x[59]))+ (0.1748606 * float(x[60]))+ (0.17543805 * float(x[61]))+ (0.059856568 * float(x[62]))+ (-0.11821888 * float(x[63]))+ (-0.06522204 * float(x[64]))+ (0.09639533 * float(x[65]))+ (0.23237945 * float(x[66]))+ (0.19757843 * float(x[67]))+ (0.15726373 * float(x[68]))+ (-0.00031998398 * float(x[69]))+ (-0.108158685 * float(x[70]))+ (-0.11861029 * float(x[71]))+ (0.34205553 * float(x[72]))+ (0.08636409 * float(x[73]))+ (0.52625054 * float(x[74]))+ (0.5734567 * float(x[75]))+ (0.41019017 * float(x[76]))+ (0.26013017 * float(x[77]))+ (0.15144837 * float(x[78]))+ (-0.006520823 * float(x[79]))+ (-0.024175452 * float(x[80]))+ (-0.020139825 * float(x[81]))+ (-0.06724329 * float(x[82]))+ (-0.01405681 * float(x[83]))+ (-0.06992612 * float(x[84]))+ (-0.5764426 * float(x[85]))+ (-0.2849198 * float(x[86]))+ (-0.017924484 * float(x[87]))+ (0.036859605 * float(x[88]))+ (-0.0766706 * float(x[89]))+ (0.5615401 * float(x[90]))+ (0.31908545 * float(x[91]))+ (0.14561522 * float(x[92]))+ (0.18705773 * float(x[93]))+ (0.094263315 * float(x[94]))+ (-0.036956232 * float(x[95]))+ (0.10141328 * float(x[96]))+ (0.048078284 * float(x[97]))+ (-0.25196278 * float(x[98]))+ (-0.23141778 * float(x[99])))+ ((-0.16376749 * float(x[100]))+ (-0.021061026 * float(x[101]))+ (0.37447667 * float(x[102]))+ (0.50167197 * float(x[103]))+ (0.21564692 * float(x[104]))+ (0.14214385 * float(x[105]))+ (0.5209453 * float(x[106]))+ (0.060773622 * float(x[107]))+ (0.14023948 * float(x[108]))+ (0.20600545 * float(x[109]))+ (-0.013652117 * float(x[110]))+ (-0.1849753 * float(x[111]))+ (0.17670539 * float(x[112]))+ (0.20883383 * float(x[113]))+ (-0.032394294 * float(x[114]))+ (-0.0010122922 * float(x[115]))+ (-0.08563287 * float(x[116]))+ (0.098175436 * float(x[117]))+ (0.24515098 * float(x[118]))+ (0.28368023 * float(x[119]))+ (0.062140994 * float(x[120]))+ (0.33520707 * float(x[121]))+ (0.44985792 * float(x[122]))+ (-0.029576825 * float(x[123]))+ (0.14104171 * float(x[124]))+ (0.2282954 * float(x[125]))+ (-0.10724341 * float(x[126]))+ (-0.24012198 * float(x[127]))+ (0.016591642 * float(x[128]))+ (0.055676956 * float(x[129]))+ (-0.049695965 * float(x[130]))+ (0.002056557 * float(x[131]))+ (-0.2511671 * float(x[132]))+ (-0.089680985 * float(x[133]))+ (0.08062001 * float(x[134]))+ (0.254743 * float(x[135]))+ (-0.13018006 * float(x[136]))+ (-0.2900422 * float(x[137]))+ (-0.42764542 * float(x[138]))+ (-0.04611655 * float(x[139]))+ (0.1761557 * float(x[140]))+ (0.02228549 * float(x[141]))+ (-0.2032973 * float(x[142]))+ (-0.1918083 * float(x[143]))+ (-0.12429682 * float(x[144]))+ (-0.14828472 * float(x[145]))+ (-0.25004917 * float(x[146]))+ (-0.12019377 * float(x[147]))+ (0.17371619 * float(x[148]))+ (0.2825269 * float(x[149])))+ ((0.2550913 * float(x[150]))+ (0.25826803 * float(x[151]))+ (-0.49320036 * float(x[152]))+ (-0.6474771 * float(x[153]))+ (-0.42885578 * float(x[154]))+ (-0.033604763 * float(x[155]))+ (0.18739305 * float(x[156]))+ (-0.08289762 * float(x[157]))+ (-0.13383125 * float(x[158]))+ (-0.100351304 * float(x[159]))+ (-0.11937426 * float(x[160]))+ (-0.09003705 * float(x[161]))+ (-0.15287001 * float(x[162]))+ (-0.20620027 * float(x[163]))+ (-0.0016381572 * float(x[164]))+ (-0.10143875 * float(x[165]))+ (-0.28229922 * float(x[166]))+ (-0.18772526 * float(x[167]))+ (-0.21248718 * float(x[168]))+ (-0.03182602 * float(x[169]))+ (0.14486092 * float(x[170]))+ (0.11531497 * float(x[171]))+ (0.02706758 * float(x[172]))+ (-0.14085859 * float(x[173]))+ (-0.07275349 * float(x[174]))+ (-0.09378069 * float(x[175]))+ (-0.11503253 * float(x[176]))+ (-0.04223503 * float(x[177]))+ (-0.033202045 * float(x[178]))+ (-0.2998515 * float(x[179]))+ (-0.46108818 * float(x[180]))+ (-0.4904863 * float(x[181]))+ (-0.36683196 * float(x[182]))+ (0.06459236 * float(x[183]))+ (0.018821398 * float(x[184]))+ (0.17045374 * float(x[185]))+ (0.11133199 * float(x[186]))+ (0.07194664 * float(x[187]))+ (-0.18375306 * float(x[188]))+ (-0.24088064 * float(x[189]))+ (-0.118820034 * float(x[190]))+ (-0.12175956 * float(x[191]))+ (-0.13878338 * float(x[192]))+ (-0.05911083 * float(x[193]))+ (0.00889145 * float(x[194]))+ (-0.16441049 * float(x[195]))+ (-0.39983252 * float(x[196]))+ (-0.44733885 * float(x[197]))+ (0.09676939 * float(x[198]))+ (-0.02254648 * float(x[199])))+ ((0.14172494 * float(x[200]))+ (0.03695563 * float(x[201]))+ (-0.08890332 * float(x[202]))+ (-0.054309737 * float(x[203]))+ (-0.17927992 * float(x[204]))+ (-0.17808436 * float(x[205]))+ (-0.10334316 * float(x[206]))+ (-0.12535863 * float(x[207]))+ (-0.16977778 * float(x[208]))+ (-0.10367167 * float(x[209]))+ (-0.010772303 * float(x[210]))+ (0.09241025 * float(x[211]))+ (-0.13665758 * float(x[212]))+ (-0.26576683 * float(x[213]))+ (-0.16861811 * float(x[214]))+ (-0.7270166 * float(x[215]))+ (-0.6051514 * float(x[216]))+ (-0.7486718 * float(x[217]))+ (-0.2611994 * float(x[218]))+ (-0.024483716 * float(x[219]))+ (-0.18488608 * float(x[220]))+ (-0.11584019 * float(x[221]))+ (-0.06853542 * float(x[222]))+ (-0.12952395 * float(x[223]))+ (-0.18760453 * float(x[224]))+ (-0.13269152 * float(x[225]))+ (-0.05030306 * float(x[226]))+ (0.09685469 * float(x[227]))+ (0.033609927 * float(x[228]))+ (-0.11897527 * float(x[229]))+ (-0.32706526 * float(x[230]))+ (-0.49499854 * float(x[231]))+ (-0.65875864 * float(x[232]))+ (-0.77351016 * float(x[233]))+ (0.1891505 * float(x[234]))+ (0.021979688 * float(x[235]))+ (-0.23016545 * float(x[236]))+ (-0.08896368 * float(x[237]))+ (-0.054846153 * float(x[238]))+ (-0.14678968 * float(x[239]))+ (-0.1930736 * float(x[240]))+ (-0.15100425 * float(x[241]))+ (-0.13670999 * float(x[242]))+ (-0.1606936 * float(x[243]))+ (-0.12978292 * float(x[244]))+ (0.05931635 * float(x[245]))+ (0.42198148 * float(x[246]))+ (0.8078532 * float(x[247]))+ (0.2968854 * float(x[248]))+ (0.26958117 * float(x[249])))+ ((0.14846389 * float(x[250]))+ (-0.16277511 * float(x[251]))+ (-0.2634462 * float(x[252]))+ (-0.09964427 * float(x[253]))+ (-0.09016951 * float(x[254]))+ (-0.1699035 * float(x[255]))) + 0.20509246), 0)
    h_2 = max((((-0.06431752 * float(x[0]))+ (-0.008879252 * float(x[1]))+ (0.0032014006 * float(x[2]))+ (0.15532082 * float(x[3]))+ (0.3085098 * float(x[4]))+ (0.32296667 * float(x[5]))+ (0.39090544 * float(x[6]))+ (0.83439726 * float(x[7]))+ (0.7329156 * float(x[8]))+ (0.26267815 * float(x[9]))+ (0.12445395 * float(x[10]))+ (0.07949056 * float(x[11]))+ (0.0405399 * float(x[12]))+ (0.047183752 * float(x[13]))+ (0.1204033 * float(x[14]))+ (0.11113652 * float(x[15]))+ (-0.13743967 * float(x[16]))+ (-0.21112952 * float(x[17]))+ (-0.19186439 * float(x[18]))+ (0.29008627 * float(x[19]))+ (0.70035 * float(x[20]))+ (0.46303782 * float(x[21]))+ (0.1688136 * float(x[22]))+ (0.69105774 * float(x[23]))+ (0.7012236 * float(x[24]))+ (0.5747783 * float(x[25]))+ (0.80766255 * float(x[26]))+ (0.56157464 * float(x[27]))+ (0.33825004 * float(x[28]))+ (0.31059083 * float(x[29]))+ (0.20331933 * float(x[30]))+ (0.03913905 * float(x[31]))+ (-0.25708047 * float(x[32]))+ (-0.3861759 * float(x[33]))+ (-0.13937207 * float(x[34]))+ (0.4530556 * float(x[35]))+ (0.56257075 * float(x[36]))+ (0.5443093 * float(x[37]))+ (0.7613524 * float(x[38]))+ (-0.1408439 * float(x[39]))+ (0.376315 * float(x[40]))+ (0.6477016 * float(x[41]))+ (0.7655843 * float(x[42]))+ (0.6383282 * float(x[43]))+ (0.6019757 * float(x[44]))+ (0.48616225 * float(x[45]))+ (0.14840184 * float(x[46]))+ (-0.09947834 * float(x[47]))+ (-0.3082611 * float(x[48]))+ (-0.34276968 * float(x[49])))+ ((0.032440335 * float(x[50]))+ (0.35725892 * float(x[51]))+ (0.085948855 * float(x[52]))+ (0.16207385 * float(x[53]))+ (-0.1490576 * float(x[54]))+ (-0.4373665 * float(x[55]))+ (0.8463877 * float(x[56]))+ (0.8015201 * float(x[57]))+ (0.71380395 * float(x[58]))+ (0.36400127 * float(x[59]))+ (0.44691345 * float(x[60]))+ (0.23251197 * float(x[61]))+ (-0.14285731 * float(x[62]))+ (-0.29529876 * float(x[63]))+ (-0.25528184 * float(x[64]))+ (-0.17998862 * float(x[65]))+ (0.30318213 * float(x[66]))+ (0.32724506 * float(x[67]))+ (-0.18578516 * float(x[68]))+ (-0.15642226 * float(x[69]))+ (-0.29157755 * float(x[70]))+ (0.077870496 * float(x[71]))+ (0.29737332 * float(x[72]))+ (0.4641579 * float(x[73]))+ (0.31966597 * float(x[74]))+ (0.3173383 * float(x[75]))+ (0.57086015 * float(x[76]))+ (0.3601598 * float(x[77]))+ (0.046562467 * float(x[78]))+ (-0.17987178 * float(x[79]))+ (-0.06502314 * float(x[80]))+ (0.08678979 * float(x[81]))+ (0.56771666 * float(x[82]))+ (0.4241824 * float(x[83]))+ (-0.32107824 * float(x[84]))+ (-0.21421339 * float(x[85]))+ (-0.2162923 * float(x[86]))+ (0.5938281 * float(x[87]))+ (0.6022952 * float(x[88]))+ (0.7024656 * float(x[89]))+ (0.42283627 * float(x[90]))+ (0.62332416 * float(x[91]))+ (0.8046618 * float(x[92]))+ (0.5814524 * float(x[93]))+ (0.37846616 * float(x[94]))+ (0.05600575 * float(x[95]))+ (-0.04028622 * float(x[96]))+ (-0.12482685 * float(x[97]))+ (0.0472949 * float(x[98]))+ (0.022109829 * float(x[99])))+ ((-0.29252663 * float(x[100]))+ (-0.19721712 * float(x[101]))+ (-0.057597023 * float(x[102]))+ (0.61547166 * float(x[103]))+ (0.66763127 * float(x[104]))+ (0.73483074 * float(x[105]))+ (0.6508306 * float(x[106]))+ (0.8347096 * float(x[107]))+ (0.46610263 * float(x[108]))+ (-0.1265163 * float(x[109]))+ (-0.09937586 * float(x[110]))+ (-0.09937443 * float(x[111]))+ (-0.40627784 * float(x[112]))+ (-0.6808188 * float(x[113]))+ (-0.46279514 * float(x[114]))+ (-0.18742873 * float(x[115]))+ (-0.106854215 * float(x[116]))+ (0.06604491 * float(x[117]))+ (0.55807656 * float(x[118]))+ (0.37106904 * float(x[119]))+ (0.33801144 * float(x[120]))+ (0.33121642 * float(x[121]))+ (0.41753286 * float(x[122]))+ (0.59351677 * float(x[123]))+ (0.254333 * float(x[124]))+ (-0.53270686 * float(x[125]))+ (-0.4995321 * float(x[126]))+ (-0.2576917 * float(x[127]))+ (-0.4586773 * float(x[128]))+ (-0.6734039 * float(x[129]))+ (-0.47264606 * float(x[130]))+ (-0.43090653 * float(x[131]))+ (-0.38407883 * float(x[132]))+ (-0.064183086 * float(x[133]))+ (0.41954398 * float(x[134]))+ (-0.07003283 * float(x[135]))+ (0.16456337 * float(x[136]))+ (0.43274033 * float(x[137]))+ (0.23611508 * float(x[138]))+ (-0.10611584 * float(x[139]))+ (0.52007794 * float(x[140]))+ (0.062021695 * float(x[141]))+ (-0.23742656 * float(x[142]))+ (-0.20118655 * float(x[143]))+ (-0.08733291 * float(x[144]))+ (-0.12633018 * float(x[145]))+ (-0.20226756 * float(x[146]))+ (-0.59028834 * float(x[147]))+ (-0.46637857 * float(x[148]))+ (-0.1359928 * float(x[149])))+ ((0.19851905 * float(x[150]))+ (-0.4448855 * float(x[151]))+ (-0.2822824 * float(x[152]))+ (-0.95767415 * float(x[153]))+ (-0.009489059 * float(x[154]))+ (-0.17622747 * float(x[155]))+ (0.4982813 * float(x[156]))+ (0.37066734 * float(x[157]))+ (0.007859439 * float(x[158]))+ (-0.06043906 * float(x[159]))+ (-0.024375075 * float(x[160]))+ (0.012279814 * float(x[161]))+ (-0.12707774 * float(x[162]))+ (-0.6678456 * float(x[163]))+ (-0.7064819 * float(x[164]))+ (-0.34260765 * float(x[165]))+ (0.12152334 * float(x[166]))+ (-0.13165753 * float(x[167]))+ (0.09453506 * float(x[168]))+ (-0.38934222 * float(x[169]))+ (-0.15928547 * float(x[170]))+ (0.00047814238 * float(x[171]))+ (0.14417084 * float(x[172]))+ (0.057088323 * float(x[173]))+ (0.05183801 * float(x[174]))+ (0.07938477 * float(x[175]))+ (-0.08310454 * float(x[176]))+ (-0.1085115 * float(x[177]))+ (-0.18288547 * float(x[178]))+ (-0.5244217 * float(x[179]))+ (-0.74753094 * float(x[180]))+ (-0.6118298 * float(x[181]))+ (-0.44039017 * float(x[182]))+ (-0.0630876 * float(x[183]))+ (0.1829022 * float(x[184]))+ (0.023494137 * float(x[185]))+ (-0.2922999 * float(x[186]))+ (-0.26966864 * float(x[187]))+ (-0.1754802 * float(x[188]))+ (-0.20083246 * float(x[189]))+ (-0.0068247984 * float(x[190]))+ (0.088798724 * float(x[191]))+ (-0.31928822 * float(x[192]))+ (-0.4210221 * float(x[193]))+ (-0.13688208 * float(x[194]))+ (-0.2632605 * float(x[195]))+ (-0.5216653 * float(x[196]))+ (-0.58284956 * float(x[197]))+ (-0.8121347 * float(x[198]))+ (-0.25567847 * float(x[199])))+ ((0.20874739 * float(x[200]))+ (0.21832828 * float(x[201]))+ (0.08380396 * float(x[202]))+ (-0.14407052 * float(x[203]))+ (-0.13481863 * float(x[204]))+ (-0.33564013 * float(x[205]))+ (-0.22926201 * float(x[206]))+ (-0.029807745 * float(x[207]))+ (-0.34855005 * float(x[208]))+ (-0.460837 * float(x[209]))+ (0.040535275 * float(x[210]))+ (-0.11495931 * float(x[211]))+ (-0.5299912 * float(x[212]))+ (-0.40471834 * float(x[213]))+ (-0.89630586 * float(x[214]))+ (-1.0921762 * float(x[215]))+ (-0.39994732 * float(x[216]))+ (-0.07069128 * float(x[217]))+ (0.08098044 * float(x[218]))+ (-0.17005332 * float(x[219]))+ (-0.21395959 * float(x[220]))+ (-0.34958148 * float(x[221]))+ (-0.31654447 * float(x[222]))+ (-0.12338975 * float(x[223]))+ (-0.09800042 * float(x[224]))+ (-0.16454436 * float(x[225]))+ (-0.06348728 * float(x[226]))+ (-0.19875488 * float(x[227]))+ (-0.49287006 * float(x[228]))+ (-0.28271663 * float(x[229]))+ (-0.5846054 * float(x[230]))+ (-0.5034406 * float(x[231]))+ (-0.16061255 * float(x[232]))+ (-0.5032234 * float(x[233]))+ (-0.5910727 * float(x[234]))+ (-0.17353615 * float(x[235]))+ (-0.27750695 * float(x[236]))+ (-0.3112749 * float(x[237]))+ (-0.2460477 * float(x[238]))+ (-0.088482395 * float(x[239]))+ (0.03652585 * float(x[240]))+ (-0.0015002975 * float(x[241]))+ (-0.1845193 * float(x[242]))+ (-0.3675323 * float(x[243]))+ (-0.12647799 * float(x[244]))+ (0.2483865 * float(x[245]))+ (-0.16733634 * float(x[246]))+ (-0.30455944 * float(x[247]))+ (0.01307904 * float(x[248]))+ (-0.1369472 * float(x[249])))+ ((0.0868823 * float(x[250]))+ (0.10183978 * float(x[251]))+ (-0.19837944 * float(x[252]))+ (-0.20853259 * float(x[253]))+ (-0.14445736 * float(x[254]))+ (-0.050853383 * float(x[255]))) + -0.012070949), 0)
    h_3 = max((((-0.30316925 * float(x[0]))+ (-0.2720298 * float(x[1]))+ (-0.17344221 * float(x[2]))+ (-0.03823284 * float(x[3]))+ (0.16779046 * float(x[4]))+ (0.31139532 * float(x[5]))+ (0.22800197 * float(x[6]))+ (0.05326942 * float(x[7]))+ (0.021245899 * float(x[8]))+ (0.08909305 * float(x[9]))+ (0.21666133 * float(x[10]))+ (0.34974995 * float(x[11]))+ (0.14523739 * float(x[12]))+ (-0.17406067 * float(x[13]))+ (-0.34941036 * float(x[14]))+ (-0.31158668 * float(x[15]))+ (-0.21894215 * float(x[16]))+ (-0.054316808 * float(x[17]))+ (0.18055697 * float(x[18]))+ (0.413309 * float(x[19]))+ (0.58074075 * float(x[20]))+ (0.7521237 * float(x[21]))+ (0.8000703 * float(x[22]))+ (0.58528906 * float(x[23]))+ (0.010877374 * float(x[24]))+ (0.76433474 * float(x[25]))+ (0.70159894 * float(x[26]))+ (0.66127706 * float(x[27]))+ (0.29077256 * float(x[28]))+ (-0.16880752 * float(x[29]))+ (-0.36295435 * float(x[30]))+ (-0.29443648 * float(x[31]))+ (-0.073320985 * float(x[32]))+ (0.17899841 * float(x[33]))+ (0.34060925 * float(x[34]))+ (0.4078137 * float(x[35]))+ (0.51593095 * float(x[36]))+ (0.7390305 * float(x[37]))+ (0.90382326 * float(x[38]))+ (0.20474266 * float(x[39]))+ (0.69834936 * float(x[40]))+ (0.5010586 * float(x[41]))+ (0.41081753 * float(x[42]))+ (0.3686248 * float(x[43]))+ (0.22502743 * float(x[44]))+ (-0.05487667 * float(x[45]))+ (-0.22355913 * float(x[46]))+ (-0.22486885 * float(x[47]))+ (0.04746253 * float(x[48]))+ (0.2792323 * float(x[49])))+ ((0.25459427 * float(x[50]))+ (0.21936283 * float(x[51]))+ (0.34180868 * float(x[52]))+ (0.26713172 * float(x[53]))+ (0.07809614 * float(x[54]))+ (0.05528642 * float(x[55]))+ (-0.18478057 * float(x[56]))+ (-0.09263396 * float(x[57]))+ (0.19346084 * float(x[58]))+ (0.33178702 * float(x[59]))+ (0.34831917 * float(x[60]))+ (0.24052876 * float(x[61]))+ (0.087138474 * float(x[62]))+ (-0.07012328 * float(x[63]))+ (0.11097659 * float(x[64]))+ (0.30309582 * float(x[65]))+ (0.1215388 * float(x[66]))+ (0.024571307 * float(x[67]))+ (0.23465861 * float(x[68]))+ (0.0011372174 * float(x[69]))+ (0.051052872 * float(x[70]))+ (0.19395337 * float(x[71]))+ (-0.0034397752 * float(x[72]))+ (0.33632874 * float(x[73]))+ (0.51992303 * float(x[74]))+ (0.38381636 * float(x[75]))+ (0.3692734 * float(x[76]))+ (0.31581602 * float(x[77]))+ (0.13181712 * float(x[78]))+ (-0.06857676 * float(x[79]))+ (0.054674547 * float(x[80]))+ (0.23627724 * float(x[81]))+ (0.08312603 * float(x[82]))+ (-0.11008494 * float(x[83]))+ (0.112590455 * float(x[84]))+ (-0.038268574 * float(x[85]))+ (0.35325038 * float(x[86]))+ (0.26974478 * float(x[87]))+ (-0.0009779369 * float(x[88]))+ (0.32628974 * float(x[89]))+ (0.3818711 * float(x[90]))+ (0.2611051 * float(x[91]))+ (0.28803125 * float(x[92]))+ (-0.010247988 * float(x[93]))+ (-0.25239322 * float(x[94]))+ (-0.2844261 * float(x[95]))+ (-0.06425049 * float(x[96]))+ (0.13182841 * float(x[97]))+ (0.101778574 * float(x[98]))+ (-0.16022316 * float(x[99])))+ ((-0.06552542 * float(x[100]))+ (-0.19830945 * float(x[101]))+ (-0.1491976 * float(x[102]))+ (-0.12149236 * float(x[103]))+ (0.046409674 * float(x[104]))+ (0.35417816 * float(x[105]))+ (0.23235315 * float(x[106]))+ (0.10338492 * float(x[107]))+ (0.27253917 * float(x[108]))+ (-0.09532961 * float(x[109]))+ (-0.43553016 * float(x[110]))+ (-0.42217755 * float(x[111]))+ (-0.08389743 * float(x[112]))+ (-0.011737785 * float(x[113]))+ (-0.13979495 * float(x[114]))+ (-0.3649643 * float(x[115]))+ (-0.36295083 * float(x[116]))+ (0.08752977 * float(x[117]))+ (0.06887178 * float(x[118]))+ (-0.09649611 * float(x[119]))+ (0.19978832 * float(x[120]))+ (0.3605372 * float(x[121]))+ (0.01587983 * float(x[122]))+ (-0.14155759 * float(x[123]))+ (0.15991567 * float(x[124]))+ (-0.021244291 * float(x[125]))+ (-0.37260738 * float(x[126]))+ (-0.38651025 * float(x[127]))+ (-0.06661864 * float(x[128]))+ (-0.16715738 * float(x[129]))+ (-0.5297861 * float(x[130]))+ (-0.64635426 * float(x[131]))+ (-0.45998785 * float(x[132]))+ (0.25961006 * float(x[133]))+ (0.30872583 * float(x[134]))+ (-0.119264685 * float(x[135]))+ (-0.42106122 * float(x[136]))+ (-0.07449904 * float(x[137]))+ (-0.21375363 * float(x[138]))+ (-0.4323234 * float(x[139]))+ (-0.097227335 * float(x[140]))+ (0.056589153 * float(x[141]))+ (-0.17119062 * float(x[142]))+ (-0.25836 * float(x[143]))+ (-0.15951948 * float(x[144]))+ (-0.29222488 * float(x[145]))+ (-0.6087579 * float(x[146]))+ (-0.6515217 * float(x[147]))+ (-0.7040822 * float(x[148]))+ (-0.34413517 * float(x[149])))+ ((-0.06176076 * float(x[150]))+ (0.41389495 * float(x[151]))+ (-0.5873933 * float(x[152]))+ (-0.67055005 * float(x[153]))+ (-0.2085378 * float(x[154]))+ (-0.3443926 * float(x[155]))+ (-0.101636216 * float(x[156]))+ (0.24077486 * float(x[157]))+ (0.14545286 * float(x[158]))+ (-0.06961378 * float(x[159]))+ (-0.21585438 * float(x[160]))+ (-0.25598836 * float(x[161]))+ (-0.36369714 * float(x[162]))+ (-0.28878132 * float(x[163]))+ (-0.43361068 * float(x[164]))+ (-0.59671944 * float(x[165]))+ (-0.39420938 * float(x[166]))+ (0.5545248 * float(x[167]))+ (-0.59809566 * float(x[168]))+ (-0.7831599 * float(x[169]))+ (0.12973626 * float(x[170]))+ (0.04392738 * float(x[171]))+ (0.099513456 * float(x[172]))+ (0.31239134 * float(x[173]))+ (0.2544857 * float(x[174]))+ (0.021108914 * float(x[175]))+ (-0.19099168 * float(x[176]))+ (-0.1297027 * float(x[177]))+ (-0.08947674 * float(x[178]))+ (0.04578061 * float(x[179]))+ (-0.21437581 * float(x[180]))+ (-0.47810924 * float(x[181]))+ (-0.11672573 * float(x[182]))+ (0.04890625 * float(x[183]))+ (-0.51505893 * float(x[184]))+ (0.56314 * float(x[185]))+ (0.23798352 * float(x[186]))+ (0.29247326 * float(x[187]))+ (0.11084998 * float(x[188]))+ (0.07008302 * float(x[189]))+ (0.1860054 * float(x[190]))+ (0.05522344 * float(x[191]))+ (-0.16128814 * float(x[192]))+ (-0.06382649 * float(x[193]))+ (0.020301038 * float(x[194]))+ (0.119216226 * float(x[195]))+ (-0.4230448 * float(x[196]))+ (-0.6475295 * float(x[197]))+ (-0.074877985 * float(x[198]))+ (-0.21695639 * float(x[199])))+ ((-0.15859427 * float(x[200]))+ (1.0209256 * float(x[201]))+ (0.18248728 * float(x[202]))+ (0.10861326 * float(x[203]))+ (0.13027135 * float(x[204]))+ (0.016162353 * float(x[205]))+ (0.10180445 * float(x[206]))+ (0.0036023115 * float(x[207]))+ (-0.24887031 * float(x[208]))+ (-0.19450018 * float(x[209]))+ (-0.15222335 * float(x[210]))+ (-0.054380663 * float(x[211]))+ (-0.25028616 * float(x[212]))+ (-0.32472298 * float(x[213]))+ (0.12816119 * float(x[214]))+ (-0.22441573 * float(x[215]))+ (-0.2894042 * float(x[216]))+ (-0.20119555 * float(x[217]))+ (0.049982104 * float(x[218]))+ (0.101536155 * float(x[219]))+ (0.25813007 * float(x[220]))+ (0.09360557 * float(x[221]))+ (0.026341345 * float(x[222]))+ (-0.072176255 * float(x[223]))+ (-0.37282974 * float(x[224]))+ (-0.40751418 * float(x[225]))+ (-0.3588046 * float(x[226]))+ (-0.16746727 * float(x[227]))+ (0.17032476 * float(x[228]))+ (0.384991 * float(x[229]))+ (-0.2645695 * float(x[230]))+ (-0.29585883 * float(x[231]))+ (-0.41671357 * float(x[232]))+ (-0.041876458 * float(x[233]))+ (0.039762538 * float(x[234]))+ (0.1677619 * float(x[235]))+ (0.25993094 * float(x[236]))+ (0.09921504 * float(x[237]))+ (-0.018686468 * float(x[238]))+ (-0.11972793 * float(x[239]))+ (-0.34951627 * float(x[240]))+ (-0.3867435 * float(x[241]))+ (-0.3452419 * float(x[242]))+ (-0.22263205 * float(x[243]))+ (0.07144937 * float(x[244]))+ (0.29199576 * float(x[245]))+ (0.06301509 * float(x[246]))+ (-0.517249 * float(x[247]))+ (0.09688287 * float(x[248]))+ (0.14828949 * float(x[249])))+ ((0.02620693 * float(x[250]))+ (-0.00024917914 * float(x[251]))+ (0.033611525 * float(x[252]))+ (-0.053570673 * float(x[253]))+ (-0.11029586 * float(x[254]))+ (-0.18074149 * float(x[255]))) + 0.28523085), 0)
    h_4 = max((((-0.037528772 * float(x[0]))+ (-0.0072813253 * float(x[1]))+ (0.0062784264 * float(x[2]))+ (-0.010224162 * float(x[3]))+ (-0.005672149 * float(x[4]))+ (0.0901792 * float(x[5]))+ (0.3161184 * float(x[6]))+ (0.5206633 * float(x[7]))+ (0.5393328 * float(x[8]))+ (0.31584564 * float(x[9]))+ (0.07955301 * float(x[10]))+ (-0.0553432 * float(x[11]))+ (-0.05968863 * float(x[12]))+ (-0.0049479366 * float(x[13]))+ (0.018168503 * float(x[14]))+ (-0.005629424 * float(x[15]))+ (-0.07673679 * float(x[16]))+ (-0.09570056 * float(x[17]))+ (-0.11725905 * float(x[18]))+ (-0.1090224 * float(x[19]))+ (0.043390624 * float(x[20]))+ (0.25853032 * float(x[21]))+ (0.53109914 * float(x[22]))+ (0.9005415 * float(x[23]))+ (0.35231835 * float(x[24]))+ (0.903437 * float(x[25]))+ (0.016268617 * float(x[26]))+ (-0.22353292 * float(x[27]))+ (-0.20926172 * float(x[28]))+ (-0.090904556 * float(x[29]))+ (-0.0517128 * float(x[30]))+ (-0.050596703 * float(x[31]))+ (-0.0917825 * float(x[32]))+ (-0.15377401 * float(x[33]))+ (-0.23288982 * float(x[34]))+ (-0.2321734 * float(x[35]))+ (0.08560101 * float(x[36]))+ (0.56873995 * float(x[37]))+ (0.6255003 * float(x[38]))+ (-1.0165626 * float(x[39]))+ (-0.31120574 * float(x[40]))+ (0.648627 * float(x[41]))+ (0.21215835 * float(x[42]))+ (-0.13430594 * float(x[43]))+ (-0.18967648 * float(x[44]))+ (-0.07121183 * float(x[45]))+ (-0.05336568 * float(x[46]))+ (-0.06534378 * float(x[47]))+ (-0.035445213 * float(x[48]))+ (-0.051809445 * float(x[49])))+ ((-0.114976965 * float(x[50]))+ (-0.1133338 * float(x[51]))+ (0.13926978 * float(x[52]))+ (0.40687728 * float(x[53]))+ (-1.1350634 * float(x[54]))+ (-0.83907163 * float(x[55]))+ (0.18883513 * float(x[56]))+ (0.47041234 * float(x[57]))+ (0.45550472 * float(x[58]))+ (0.12821832 * float(x[59]))+ (-0.074753344 * float(x[60]))+ (-0.00741031 * float(x[61]))+ (0.015672145 * float(x[62]))+ (-0.02280404 * float(x[63]))+ (0.047843963 * float(x[64]))+ (0.07381457 * float(x[65]))+ (0.009654027 * float(x[66]))+ (0.0065722438 * float(x[67]))+ (0.17965013 * float(x[68]))+ (-0.12737751 * float(x[69]))+ (-0.60055876 * float(x[70]))+ (-0.01848456 * float(x[71]))+ (0.20154396 * float(x[72]))+ (0.20675582 * float(x[73]))+ (0.250957 * float(x[74]))+ (0.14263506 * float(x[75]))+ (-0.037335288 * float(x[76]))+ (-0.01806474 * float(x[77]))+ (-0.0014377414 * float(x[78]))+ (-0.020812133 * float(x[79]))+ (0.10158608 * float(x[80]))+ (0.15033288 * float(x[81]))+ (0.08475492 * float(x[82]))+ (-0.04134616 * float(x[83]))+ (-0.07718749 * float(x[84]))+ (-0.30968842 * float(x[85]))+ (0.07305169 * float(x[86]))+ (0.21881804 * float(x[87]))+ (0.21531136 * float(x[88]))+ (0.07885579 * float(x[89]))+ (0.0028675413 * float(x[90]))+ (-0.020112306 * float(x[91]))+ (-0.08828962 * float(x[92]))+ (-0.08787355 * float(x[93]))+ (-0.081853144 * float(x[94]))+ (-0.066675164 * float(x[95]))+ (0.08583531 * float(x[96]))+ (0.13753794 * float(x[97]))+ (0.11728002 * float(x[98]))+ (0.034137424 * float(x[99])))+ ((-0.025440516 * float(x[100]))+ (0.05632261 * float(x[101]))+ (0.42853174 * float(x[102]))+ (0.40315056 * float(x[103]))+ (0.3906344 * float(x[104]))+ (0.2610517 * float(x[105]))+ (0.05891815 * float(x[106]))+ (-0.043075584 * float(x[107]))+ (-0.16969466 * float(x[108]))+ (-0.17566402 * float(x[109]))+ (-0.09012709 * float(x[110]))+ (-0.050388075 * float(x[111]))+ (0.061081573 * float(x[112]))+ (0.06238358 * float(x[113]))+ (0.06698594 * float(x[114]))+ (-0.011680348 * float(x[115]))+ (-0.33376792 * float(x[116]))+ (0.21469785 * float(x[117]))+ (0.63472915 * float(x[118]))+ (0.5646461 * float(x[119]))+ (0.41736636 * float(x[120]))+ (0.17643347 * float(x[121]))+ (-0.0012813694 * float(x[122]))+ (0.08300342 * float(x[123]))+ (-0.061514813 * float(x[124]))+ (-0.1748573 * float(x[125]))+ (-0.06702352 * float(x[126]))+ (0.01400052 * float(x[127]))+ (0.062771305 * float(x[128]))+ (0.03491532 * float(x[129]))+ (0.01632374 * float(x[130]))+ (-0.13178463 * float(x[131]))+ (-0.41671458 * float(x[132]))+ (0.19106404 * float(x[133]))+ (0.48594013 * float(x[134]))+ (0.46405867 * float(x[135]))+ (0.2950865 * float(x[136]))+ (-0.090172656 * float(x[137]))+ (-0.073207624 * float(x[138]))+ (0.27442244 * float(x[139]))+ (0.115139954 * float(x[140]))+ (-0.10565177 * float(x[141]))+ (-0.07636848 * float(x[142]))+ (0.037576772 * float(x[143]))+ (0.054891247 * float(x[144]))+ (0.03577148 * float(x[145]))+ (-0.0153651275 * float(x[146]))+ (-0.15381308 * float(x[147]))+ (-0.1802048 * float(x[148]))+ (0.21194802 * float(x[149])))+ ((0.1997866 * float(x[150]))+ (0.084253296 * float(x[151]))+ (-0.047453873 * float(x[152]))+ (-0.4750458 * float(x[153]))+ (-0.0554718 * float(x[154]))+ (0.4389876 * float(x[155]))+ (0.22205047 * float(x[156]))+ (0.032825973 * float(x[157]))+ (-0.003218486 * float(x[158]))+ (0.054708626 * float(x[159]))+ (0.058597993 * float(x[160]))+ (0.085405655 * float(x[161]))+ (0.020897381 * float(x[162]))+ (-0.19065385 * float(x[163]))+ (-0.17667192 * float(x[164]))+ (0.13000828 * float(x[165]))+ (0.03069974 * float(x[166]))+ (-0.17045191 * float(x[167]))+ (-0.3493314 * float(x[168]))+ (-0.38660768 * float(x[169]))+ (0.08598633 * float(x[170]))+ (0.23340477 * float(x[171]))+ (0.28083897 * float(x[172]))+ (0.14100225 * float(x[173]))+ (0.0767302 * float(x[174]))+ (0.055730555 * float(x[175]))+ (0.055258512 * float(x[176]))+ (0.0936538 * float(x[177]))+ (0.09789125 * float(x[178]))+ (-0.05338457 * float(x[179]))+ (-0.16919316 * float(x[180]))+ (0.08845149 * float(x[181]))+ (0.09379334 * float(x[182]))+ (-0.115917884 * float(x[183]))+ (-0.1442823 * float(x[184]))+ (0.35722372 * float(x[185]))+ (0.3380111 * float(x[186]))+ (0.068599775 * float(x[187]))+ (0.25708246 * float(x[188]))+ (0.07637375 * float(x[189]))+ (0.03947669 * float(x[190]))+ (0.036179084 * float(x[191]))+ (0.03736083 * float(x[192]))+ (0.08246576 * float(x[193]))+ (0.16994472 * float(x[194]))+ (0.1477432 * float(x[195]))+ (-0.30246067 * float(x[196]))+ (-0.18581904 * float(x[197]))+ (-0.016045703 * float(x[198]))+ (-0.20780063 * float(x[199])))+ ((-0.05088917 * float(x[200]))+ (1.0023654 * float(x[201]))+ (0.4100581 * float(x[202]))+ (0.106207274 * float(x[203]))+ (0.19179606 * float(x[204]))+ (0.044362172 * float(x[205]))+ (0.008806309 * float(x[206]))+ (0.01420326 * float(x[207]))+ (0.023191506 * float(x[208]))+ (0.094024666 * float(x[209]))+ (0.24543369 * float(x[210]))+ (0.32737556 * float(x[211]))+ (-0.26158112 * float(x[212]))+ (-0.8935039 * float(x[213]))+ (-1.1813322 * float(x[214]))+ (-0.6531386 * float(x[215]))+ (-0.3451223 * float(x[216]))+ (-0.11767559 * float(x[217]))+ (-0.019953877 * float(x[218]))+ (0.15307932 * float(x[219]))+ (0.10334812 * float(x[220]))+ (0.035730895 * float(x[221]))+ (-0.014666307 * float(x[222]))+ (-0.013738187 * float(x[223]))+ (0.0097380085 * float(x[224]))+ (0.0683052 * float(x[225]))+ (0.18663298 * float(x[226]))+ (0.27798447 * float(x[227]))+ (0.28122056 * float(x[228]))+ (0.24339502 * float(x[229]))+ (-0.45508412 * float(x[230]))+ (-0.48920208 * float(x[231]))+ (-0.53635216 * float(x[232]))+ (-0.7919492 * float(x[233]))+ (0.058221832 * float(x[234]))+ (0.09079661 * float(x[235]))+ (0.043105848 * float(x[236]))+ (-0.011272509 * float(x[237]))+ (-0.0395098 * float(x[238]))+ (-0.024576867 * float(x[239]))+ (-0.0034071524 * float(x[240]))+ (0.018743664 * float(x[241]))+ (0.058508106 * float(x[242]))+ (0.09492092 * float(x[243]))+ (0.20447682 * float(x[244]))+ (0.44147456 * float(x[245]))+ (0.6851005 * float(x[246]))+ (0.58817655 * float(x[247]))+ (0.083561175 * float(x[248]))+ (-0.022629194 * float(x[249])))+ ((0.021020839 * float(x[250]))+ (0.058039814 * float(x[251]))+ (0.013813936 * float(x[252]))+ (-0.027208854 * float(x[253]))+ (-0.03150945 * float(x[254]))+ (-0.017396666 * float(x[255]))) + 0.009959195), 0)
    h_5 = max((((-0.3226621 * float(x[0]))+ (-0.21444559 * float(x[1]))+ (-0.1199948 * float(x[2]))+ (-0.052241657 * float(x[3]))+ (0.14562379 * float(x[4]))+ (0.31258357 * float(x[5]))+ (0.43760428 * float(x[6]))+ (0.3638258 * float(x[7]))+ (0.04391737 * float(x[8]))+ (0.5051364 * float(x[9]))+ (0.8430078 * float(x[10]))+ (0.6767135 * float(x[11]))+ (0.46015036 * float(x[12]))+ (0.14396653 * float(x[13]))+ (-0.1193645 * float(x[14]))+ (-0.32426342 * float(x[15]))+ (-0.27332523 * float(x[16]))+ (-0.016461074 * float(x[17]))+ (0.36249357 * float(x[18]))+ (0.64918387 * float(x[19]))+ (0.8077163 * float(x[20]))+ (1.1352249 * float(x[21]))+ (1.9190836 * float(x[22]))+ (1.7959926 * float(x[23]))+ (-0.49031514 * float(x[24]))+ (0.92112654 * float(x[25]))+ (1.2386972 * float(x[26]))+ (1.2255393 * float(x[27]))+ (0.90604216 * float(x[28]))+ (0.31628716 * float(x[29]))+ (-0.045741994 * float(x[30]))+ (-0.2546675 * float(x[31]))+ (-0.18706541 * float(x[32]))+ (0.12842387 * float(x[33]))+ (0.40365785 * float(x[34]))+ (0.8389853 * float(x[35]))+ (1.3734183 * float(x[36]))+ (1.1065676 * float(x[37]))+ (1.4322518 * float(x[38]))+ (0.9899306 * float(x[39]))+ (0.1498283 * float(x[40]))+ (0.9369516 * float(x[41]))+ (1.072291 * float(x[42]))+ (1.3855169 * float(x[43]))+ (0.8297238 * float(x[44]))+ (0.14994878 * float(x[45]))+ (-0.17188801 * float(x[46]))+ (-0.34274974 * float(x[47]))+ (-0.16536826 * float(x[48]))+ (0.06165585 * float(x[49])))+ ((0.09047394 * float(x[50]))+ (0.35347676 * float(x[51]))+ (1.1209 * float(x[52]))+ (0.88381064 * float(x[53]))+ (-0.3694427 * float(x[54]))+ (0.2505086 * float(x[55]))+ (1.4183867 * float(x[56]))+ (0.4302917 * float(x[57]))+ (0.4667825 * float(x[58]))+ (1.0700704 * float(x[59]))+ (0.6537486 * float(x[60]))+ (0.109101884 * float(x[61]))+ (-0.13771571 * float(x[62]))+ (-0.32142887 * float(x[63]))+ (-0.136454 * float(x[64]))+ (0.15630831 * float(x[65]))+ (0.2858136 * float(x[66]))+ (0.373751 * float(x[67]))+ (0.47737825 * float(x[68]))+ (-0.3664418 * float(x[69]))+ (-1.6186823 * float(x[70]))+ (1.28098 * float(x[71]))+ (1.3426113 * float(x[72]))+ (0.81062067 * float(x[73]))+ (0.35525608 * float(x[74]))+ (0.5476092 * float(x[75]))+ (0.43161076 * float(x[76]))+ (-0.21104069 * float(x[77]))+ (-0.48006096 * float(x[78]))+ (-0.4332794 * float(x[79]))+ (-0.07287743 * float(x[80]))+ (0.21124852 * float(x[81]))+ (0.38832393 * float(x[82]))+ (0.7086649 * float(x[83]))+ (0.7973014 * float(x[84]))+ (-1.0812994 * float(x[85]))+ (-1.3485484 * float(x[86]))+ (1.249765 * float(x[87]))+ (1.1983203 * float(x[88]))+ (1.0426999 * float(x[89]))+ (0.8080451 * float(x[90]))+ (0.62910175 * float(x[91]))+ (0.14395998 * float(x[92]))+ (-0.682087 * float(x[93]))+ (-0.8827836 * float(x[94]))+ (-0.61906767 * float(x[95]))+ (-0.11873852 * float(x[96]))+ (0.04123679 * float(x[97]))+ (0.05804855 * float(x[98]))+ (0.17292883 * float(x[99])))+ ((0.47802144 * float(x[100]))+ (-0.47260416 * float(x[101]))+ (1.0025069 * float(x[102]))+ (1.2725153 * float(x[103]))+ (0.687897 * float(x[104]))+ (0.49202615 * float(x[105]))+ (0.8856595 * float(x[106]))+ (0.85199976 * float(x[107]))+ (0.327842 * float(x[108]))+ (-0.43270513 * float(x[109]))+ (-0.747934 * float(x[110]))+ (-0.5858163 * float(x[111]))+ (-0.07980453 * float(x[112]))+ (0.029740062 * float(x[113]))+ (-0.10548744 * float(x[114]))+ (-0.18735436 * float(x[115]))+ (-0.27054828 * float(x[116]))+ (-0.2061447 * float(x[117]))+ (1.305026 * float(x[118]))+ (1.6147238 * float(x[119]))+ (0.72801083 * float(x[120]))+ (0.22981171 * float(x[121]))+ (0.8918984 * float(x[122]))+ (1.1128918 * float(x[123]))+ (0.5794357 * float(x[124]))+ (0.22102936 * float(x[125]))+ (-0.23559688 * float(x[126]))+ (-0.40876555 * float(x[127]))+ (-0.05237179 * float(x[128]))+ (0.15976197 * float(x[129]))+ (0.07696433 * float(x[130]))+ (-0.36228353 * float(x[131]))+ (-0.70666146 * float(x[132]))+ (-0.2176371 * float(x[133]))+ (0.22654425 * float(x[134]))+ (0.51955646 * float(x[135]))+ (0.16580252 * float(x[136]))+ (-0.38188276 * float(x[137]))+ (0.39415988 * float(x[138]))+ (1.1422522 * float(x[139]))+ (0.6683129 * float(x[140]))+ (0.6218352 * float(x[141]))+ (0.23047659 * float(x[142]))+ (-0.15925251 * float(x[143]))+ (-0.29477662 * float(x[144]))+ (-0.10003298 * float(x[145]))+ (-0.10869291 * float(x[146]))+ (-0.8529343 * float(x[147]))+ (-1.0858309 * float(x[148]))+ (-0.48016703 * float(x[149])))+ ((-0.53184044 * float(x[150]))+ (-0.70221156 * float(x[151]))+ (-0.5901501 * float(x[152]))+ (-0.95047325 * float(x[153]))+ (-0.19653793 * float(x[154]))+ (1.297353 * float(x[155]))+ (0.5317451 * float(x[156]))+ (0.2972429 * float(x[157]))+ (0.29319617 * float(x[158]))+ (0.02080537 * float(x[159]))+ (-0.4021197 * float(x[160]))+ (-0.43791133 * float(x[161]))+ (-0.81529635 * float(x[162]))+ (-1.3354291 * float(x[163]))+ (-1.0068696 * float(x[164]))+ (-0.66764504 * float(x[165]))+ (-0.9963378 * float(x[166]))+ (-1.0569594 * float(x[167]))+ (-0.30614907 * float(x[168]))+ (-0.26466015 * float(x[169]))+ (0.12473031 * float(x[170]))+ (0.76652366 * float(x[171]))+ (-0.07186299 * float(x[172]))+ (-0.32012975 * float(x[173]))+ (0.057648655 * float(x[174]))+ (0.058245864 * float(x[175]))+ (-0.30780968 * float(x[176]))+ (-0.15584843 * float(x[177]))+ (-0.5467492 * float(x[178]))+ (-1.5192463 * float(x[179]))+ (-1.3068721 * float(x[180]))+ (-0.94254684 * float(x[181]))+ (-1.1203939 * float(x[182]))+ (-0.7535987 * float(x[183]))+ (0.07083625 * float(x[184]))+ (0.012598827 * float(x[185]))+ (0.23514932 * float(x[186]))+ (0.03742889 * float(x[187]))+ (-0.40852678 * float(x[188]))+ (-0.10912062 * float(x[189]))+ (0.14201666 * float(x[190]))+ (0.015214331 * float(x[191]))+ (-0.22347237 * float(x[192]))+ (0.26496238 * float(x[193]))+ (0.39883703 * float(x[194]))+ (-1.2315549 * float(x[195]))+ (-1.8450476 * float(x[196]))+ (-1.599938 * float(x[197]))+ (-1.4304931 * float(x[198]))+ (-0.37264758 * float(x[199])))+ ((0.7983256 * float(x[200]))+ (0.78106225 * float(x[201]))+ (-0.27331805 * float(x[202]))+ (-0.17546147 * float(x[203]))+ (-0.053720154 * float(x[204]))+ (0.28056413 * float(x[205]))+ (0.31821248 * float(x[206]))+ (-0.002727661 * float(x[207]))+ (-0.32319644 * float(x[208]))+ (0.05454304 * float(x[209]))+ (0.40985686 * float(x[210]))+ (-0.42598528 * float(x[211]))+ (-1.658655 * float(x[212]))+ (-1.8220997 * float(x[213]))+ (-1.9742147 * float(x[214]))+ (-1.5721654 * float(x[215]))+ (-0.5247279 * float(x[216]))+ (-0.5350508 * float(x[217]))+ (-0.768511 * float(x[218]))+ (0.049643513 * float(x[219]))+ (0.08524229 * float(x[220]))+ (0.18339156 * float(x[221]))+ (0.18739562 * float(x[222]))+ (-0.102662176 * float(x[223]))+ (-0.44992915 * float(x[224]))+ (-0.41387275 * float(x[225]))+ (-0.3189927 * float(x[226]))+ (-0.34583464 * float(x[227]))+ (-1.3619758 * float(x[228]))+ (-1.4685969 * float(x[229]))+ (-1.4212204 * float(x[230]))+ (-0.7842582 * float(x[231]))+ (-0.763603 * float(x[232]))+ (-0.9264897 * float(x[233]))+ (-0.07030162 * float(x[234]))+ (0.1328958 * float(x[235]))+ (0.0059453915 * float(x[236]))+ (0.0065004653 * float(x[237]))+ (-0.043686308 * float(x[238]))+ (-0.253308 * float(x[239]))+ (-0.43537417 * float(x[240]))+ (-0.4913153 * float(x[241]))+ (-0.5511496 * float(x[242]))+ (-0.5989964 * float(x[243]))+ (-0.7670164 * float(x[244]))+ (-0.50464034 * float(x[245]))+ (-0.5264707 * float(x[246]))+ (-0.7072444 * float(x[247]))+ (0.08158328 * float(x[248]))+ (0.12962964 * float(x[249])))+ ((-0.17665195 * float(x[250]))+ (-0.29143044 * float(x[251]))+ (-0.25204697 * float(x[252]))+ (-0.19884321 * float(x[253]))+ (-0.26382795 * float(x[254]))+ (-0.3573175 * float(x[255]))) + 0.3946085), 0)
    h_6 = max((((-0.02771679 * float(x[0]))+ (-0.036908597 * float(x[1]))+ (-0.12668447 * float(x[2]))+ (-0.12520358 * float(x[3]))+ (0.084731154 * float(x[4]))+ (0.20755848 * float(x[5]))+ (0.3198712 * float(x[6]))+ (0.5189571 * float(x[7]))+ (0.33593598 * float(x[8]))+ (-0.033342388 * float(x[9]))+ (-0.05027727 * float(x[10]))+ (0.08994535 * float(x[11]))+ (0.06173563 * float(x[12]))+ (-0.016464004 * float(x[13]))+ (0.0050164238 * float(x[14]))+ (-0.0095156925 * float(x[15]))+ (0.05498474 * float(x[16]))+ (0.12111702 * float(x[17]))+ (-0.05365761 * float(x[18]))+ (-0.18662518 * float(x[19]))+ (0.10003516 * float(x[20]))+ (0.12394962 * float(x[21]))+ (-0.1761598 * float(x[22]))+ (-0.32064837 * float(x[23]))+ (0.079311416 * float(x[24]))+ (0.1153415 * float(x[25]))+ (-0.10083667 * float(x[26]))+ (0.08851855 * float(x[27]))+ (0.2544073 * float(x[28]))+ (0.22672819 * float(x[29]))+ (0.12577066 * float(x[30]))+ (0.004396418 * float(x[31]))+ (0.017470565 * float(x[32]))+ (0.13169093 * float(x[33]))+ (0.10637639 * float(x[34]))+ (0.07771535 * float(x[35]))+ (0.29770017 * float(x[36]))+ (0.1769206 * float(x[37]))+ (0.3461167 * float(x[38]))+ (0.08357904 * float(x[39]))+ (0.55731934 * float(x[40]))+ (1.1751345 * float(x[41]))+ (-0.14487675 * float(x[42]))+ (-0.014723307 * float(x[43]))+ (0.1336173 * float(x[44]))+ (0.30545753 * float(x[45]))+ (0.19491562 * float(x[46]))+ (0.013270274 * float(x[47]))+ (-0.15111773 * float(x[48]))+ (-0.05608779 * float(x[49])))+ ((0.1308616 * float(x[50]))+ (0.24729577 * float(x[51]))+ (0.17602025 * float(x[52]))+ (-0.09209928 * float(x[53]))+ (-0.2881998 * float(x[54]))+ (-0.36637056 * float(x[55]))+ (0.68504834 * float(x[56]))+ (0.12833531 * float(x[57]))+ (0.05549863 * float(x[58]))+ (0.31227034 * float(x[59]))+ (0.16405243 * float(x[60]))+ (0.18955758 * float(x[61]))+ (0.0419583 * float(x[62]))+ (-0.09741315 * float(x[63]))+ (-0.18976143 * float(x[64]))+ (-0.044029977 * float(x[65]))+ (0.13597688 * float(x[66]))+ (0.07357499 * float(x[67]))+ (-0.12575835 * float(x[68]))+ (-0.19779 * float(x[69]))+ (-0.81436 * float(x[70]))+ (-0.6037037 * float(x[71]))+ (-0.25841078 * float(x[72]))+ (-0.24631397 * float(x[73]))+ (-0.21083568 * float(x[74]))+ (0.23442686 * float(x[75]))+ (0.21765853 * float(x[76]))+ (0.12574998 * float(x[77]))+ (-0.057372667 * float(x[78]))+ (-0.1725656 * float(x[79]))+ (-0.08625305 * float(x[80]))+ (0.10699259 * float(x[81]))+ (0.11728113 * float(x[82]))+ (-0.1645917 * float(x[83]))+ (-0.2718373 * float(x[84]))+ (-0.040144946 * float(x[85]))+ (-0.09673509 * float(x[86]))+ (0.6609435 * float(x[87]))+ (0.487457 * float(x[88]))+ (0.43092427 * float(x[89]))+ (0.09086877 * float(x[90]))+ (0.3931475 * float(x[91]))+ (0.37498194 * float(x[92]))+ (0.10314138 * float(x[93]))+ (-0.11791103 * float(x[94]))+ (-0.1855307 * float(x[95]))+ (-0.05536425 * float(x[96]))+ (0.014810686 * float(x[97]))+ (-0.02268549 * float(x[98]))+ (-0.057370115 * float(x[99])))+ ((0.20297761 * float(x[100]))+ (0.1580391 * float(x[101]))+ (0.15554519 * float(x[102]))+ (0.48385695 * float(x[103]))+ (0.2629353 * float(x[104]))+ (0.65423304 * float(x[105]))+ (0.25113267 * float(x[106]))+ (0.25879765 * float(x[107]))+ (0.06104108 * float(x[108]))+ (-0.23550832 * float(x[109]))+ (-0.1912407 * float(x[110]))+ (-0.12626524 * float(x[111]))+ (-0.13374895 * float(x[112]))+ (-0.08058268 * float(x[113]))+ (-0.11471945 * float(x[114]))+ (-0.03059533 * float(x[115]))+ (0.5046304 * float(x[116]))+ (0.40972134 * float(x[117]))+ (0.1168392 * float(x[118]))+ (0.05806849 * float(x[119]))+ (-0.09894238 * float(x[120]))+ (0.12983592 * float(x[121]))+ (-0.034641907 * float(x[122]))+ (0.10202023 * float(x[123]))+ (0.0034487168 * float(x[124]))+ (-0.2673336 * float(x[125]))+ (-0.12348422 * float(x[126]))+ (-0.054814193 * float(x[127]))+ (-0.07527109 * float(x[128]))+ (0.063879125 * float(x[129]))+ (0.0029518332 * float(x[130]))+ (-0.13107951 * float(x[131]))+ (0.14290085 * float(x[132]))+ (0.19210382 * float(x[133]))+ (-0.10733151 * float(x[134]))+ (-0.13616812 * float(x[135]))+ (0.435834 * float(x[136]))+ (0.6674451 * float(x[137]))+ (-0.0013730909 * float(x[138]))+ (0.044273127 * float(x[139]))+ (0.21845327 * float(x[140]))+ (0.095958866 * float(x[141]))+ (0.00508295 * float(x[142]))+ (-0.0432327 * float(x[143]))+ (0.086992726 * float(x[144]))+ (0.23736168 * float(x[145]))+ (0.2673884 * float(x[146]))+ (0.09431233 * float(x[147]))+ (-0.100548595 * float(x[148]))+ (-0.09784509 * float(x[149])))+ ((-0.124382265 * float(x[150]))+ (-0.09306704 * float(x[151]))+ (-0.014722031 * float(x[152]))+ (-0.04012828 * float(x[153]))+ (-0.3626711 * float(x[154]))+ (0.075163886 * float(x[155]))+ (0.51710856 * float(x[156]))+ (0.2274124 * float(x[157]))+ (-0.087192215 * float(x[158]))+ (-0.11140834 * float(x[159]))+ (0.025303261 * float(x[160]))+ (0.11674782 * float(x[161]))+ (0.28549713 * float(x[162]))+ (0.2308094 * float(x[163]))+ (-0.26628122 * float(x[164]))+ (-0.12433048 * float(x[165]))+ (0.39981478 * float(x[166]))+ (0.28774363 * float(x[167]))+ (-0.36679256 * float(x[168]))+ (-0.60364074 * float(x[169]))+ (-0.038935706 * float(x[170]))+ (0.31947958 * float(x[171]))+ (0.41614652 * float(x[172]))+ (-0.07297271 * float(x[173]))+ (-0.2945242 * float(x[174]))+ (-0.1705053 * float(x[175]))+ (-0.017835317 * float(x[176]))+ (0.01180314 * float(x[177]))+ (0.1671073 * float(x[178]))+ (0.028753635 * float(x[179]))+ (-0.69105655 * float(x[180]))+ (-0.5435954 * float(x[181]))+ (0.2741962 * float(x[182]))+ (0.30074167 * float(x[183]))+ (-0.02996825 * float(x[184]))+ (-0.03591354 * float(x[185]))+ (0.24834286 * float(x[186]))+ (-0.041366614 * float(x[187]))+ (-0.21584752 * float(x[188]))+ (-0.3261864 * float(x[189]))+ (-0.23113036 * float(x[190]))+ (-0.089177884 * float(x[191]))+ (-0.0057532587 * float(x[192]))+ (-0.06638065 * float(x[193]))+ (-0.07823816 * float(x[194]))+ (-0.21809287 * float(x[195]))+ (-0.7217089 * float(x[196]))+ (-0.39535236 * float(x[197]))+ (0.23277514 * float(x[198]))+ (-0.22418465 * float(x[199])))+ ((-0.49415714 * float(x[200]))+ (0.26197094 * float(x[201]))+ (0.16071127 * float(x[202]))+ (-0.28197983 * float(x[203]))+ (-0.3990748 * float(x[204]))+ (-0.2731538 * float(x[205]))+ (-0.029782157 * float(x[206]))+ (0.041239783 * float(x[207]))+ (0.03864108 * float(x[208]))+ (0.0073607853 * float(x[209]))+ (-0.13580316 * float(x[210]))+ (-0.42635947 * float(x[211]))+ (-0.6350655 * float(x[212]))+ (0.15188001 * float(x[213]))+ (-0.15822035 * float(x[214]))+ (-0.6284444 * float(x[215]))+ (-0.43308553 * float(x[216]))+ (-0.25780568 * float(x[217]))+ (-0.07961467 * float(x[218]))+ (-0.059380665 * float(x[219]))+ (-0.1319604 * float(x[220]))+ (-0.1686099 * float(x[221]))+ (-0.054850616 * float(x[222]))+ (-0.03590377 * float(x[223]))+ (0.039186947 * float(x[224]))+ (0.0757221 * float(x[225]))+ (-0.039377086 * float(x[226]))+ (-0.36223868 * float(x[227]))+ (-0.4342447 * float(x[228]))+ (-0.18506943 * float(x[229]))+ (-0.5607316 * float(x[230]))+ (-0.40387648 * float(x[231]))+ (-0.24390125 * float(x[232]))+ (-0.4505192 * float(x[233]))+ (-0.30184466 * float(x[234]))+ (0.07190673 * float(x[235]))+ (0.06639347 * float(x[236]))+ (-0.14920324 * float(x[237]))+ (-0.16874042 * float(x[238]))+ (-0.12056742 * float(x[239]))+ (-0.04533537 * float(x[240]))+ (-0.019758077 * float(x[241]))+ (-0.06083026 * float(x[242]))+ (-0.19446841 * float(x[243]))+ (-0.20415169 * float(x[244]))+ (-0.21625456 * float(x[245]))+ (-0.13976233 * float(x[246]))+ (0.36895776 * float(x[247]))+ (0.75799555 * float(x[248]))+ (-0.17732318 * float(x[249])))+ ((-0.17324452 * float(x[250]))+ (0.10086797 * float(x[251]))+ (0.04223738 * float(x[252]))+ (-0.16008288 * float(x[253]))+ (-0.17167225 * float(x[254]))+ (-0.11605001 * float(x[255]))) + 0.09223731), 0)
    h_7 = max((((-0.07937248 * float(x[0]))+ (-0.14137903 * float(x[1]))+ (-0.10327511 * float(x[2]))+ (0.115828216 * float(x[3]))+ (0.11322231 * float(x[4]))+ (-0.110827066 * float(x[5]))+ (0.18440218 * float(x[6]))+ (0.39093032 * float(x[7]))+ (0.3713229 * float(x[8]))+ (-0.23507594 * float(x[9]))+ (0.26327786 * float(x[10]))+ (0.36478364 * float(x[11]))+ (0.06493557 * float(x[12]))+ (-0.025505546 * float(x[13]))+ (-0.0692858 * float(x[14]))+ (-0.10053296 * float(x[15]))+ (-0.082853496 * float(x[16]))+ (-0.17354776 * float(x[17]))+ (-0.20914832 * float(x[18]))+ (-0.08182385 * float(x[19]))+ (0.03514234 * float(x[20]))+ (0.21649332 * float(x[21]))+ (0.33863932 * float(x[22]))+ (0.35479122 * float(x[23]))+ (0.72789127 * float(x[24]))+ (0.5570263 * float(x[25]))+ (0.52626204 * float(x[26]))+ (0.29849657 * float(x[27]))+ (0.14924055 * float(x[28]))+ (0.01880727 * float(x[29]))+ (0.00522042 * float(x[30]))+ (0.013881542 * float(x[31]))+ (-0.080705635 * float(x[32]))+ (-0.09086021 * float(x[33]))+ (0.032244354 * float(x[34]))+ (0.12161005 * float(x[35]))+ (0.040187348 * float(x[36]))+ (0.5711914 * float(x[37]))+ (0.67092806 * float(x[38]))+ (-0.061112355 * float(x[39]))+ (-0.10950049 * float(x[40]))+ (0.16454828 * float(x[41]))+ (0.36023226 * float(x[42]))+ (0.19239496 * float(x[43]))+ (0.15789309 * float(x[44]))+ (-0.01884709 * float(x[45]))+ (0.120295845 * float(x[46]))+ (0.22848281 * float(x[47]))+ (-0.12557696 * float(x[48]))+ (-0.18193193 * float(x[49])))+ ((0.060227055 * float(x[50]))+ (0.35504493 * float(x[51]))+ (-0.15047008 * float(x[52]))+ (-0.18775156 * float(x[53]))+ (-0.25989753 * float(x[54]))+ (0.33279303 * float(x[55]))+ (0.5941818 * float(x[56]))+ (0.33111492 * float(x[57]))+ (0.21999267 * float(x[58]))+ (0.35376793 * float(x[59]))+ (0.6460455 * float(x[60]))+ (0.121112294 * float(x[61]))+ (0.08948082 * float(x[62]))+ (0.21489741 * float(x[63]))+ (-0.2756856 * float(x[64]))+ (-0.47365603 * float(x[65]))+ (-0.32351738 * float(x[66]))+ (0.07819057 * float(x[67]))+ (0.15221083 * float(x[68]))+ (-0.008857533 * float(x[69]))+ (-0.51973295 * float(x[70]))+ (-0.10983259 * float(x[71]))+ (0.34500405 * float(x[72]))+ (0.5640915 * float(x[73]))+ (0.17015354 * float(x[74]))+ (0.087687016 * float(x[75]))+ (0.5039051 * float(x[76]))+ (0.16864112 * float(x[77]))+ (0.09231303 * float(x[78]))+ (0.09700441 * float(x[79]))+ (-0.25643596 * float(x[80]))+ (-0.1835441 * float(x[81]))+ (-0.031893738 * float(x[82]))+ (-0.0060174065 * float(x[83]))+ (0.11467337 * float(x[84]))+ (0.331394 * float(x[85]))+ (0.2580445 * float(x[86]))+ (-0.30528948 * float(x[87]))+ (-0.30994257 * float(x[88]))+ (0.58599025 * float(x[89]))+ (0.5645086 * float(x[90]))+ (0.2100196 * float(x[91]))+ (0.19718334 * float(x[92]))+ (0.14503473 * float(x[93]))+ (0.18613562 * float(x[94]))+ (0.1612716 * float(x[95]))+ (-0.14395294 * float(x[96]))+ (0.18876004 * float(x[97]))+ (0.26943365 * float(x[98]))+ (-0.004672249 * float(x[99])))+ ((-0.3518384 * float(x[100]))+ (-0.43422297 * float(x[101]))+ (0.1346558 * float(x[102]))+ (-0.535807 * float(x[103]))+ (-0.6088332 * float(x[104]))+ (-0.013087509 * float(x[105]))+ (0.113806106 * float(x[106]))+ (0.16016307 * float(x[107]))+ (0.08739593 * float(x[108]))+ (0.18051758 * float(x[109]))+ (0.3128928 * float(x[110]))+ (0.348636 * float(x[111]))+ (-0.15320173 * float(x[112]))+ (0.062248312 * float(x[113]))+ (-0.02960828 * float(x[114]))+ (-0.17663537 * float(x[115]))+ (-0.33321762 * float(x[116]))+ (-0.048882555 * float(x[117]))+ (0.497377 * float(x[118]))+ (-0.21872984 * float(x[119]))+ (-0.10810886 * float(x[120]))+ (0.27194443 * float(x[121]))+ (-0.15411514 * float(x[122]))+ (0.072197 * float(x[123]))+ (-0.048839234 * float(x[124]))+ (-0.072994985 * float(x[125]))+ (0.2540483 * float(x[126]))+ (0.30890977 * float(x[127]))+ (-0.021576086 * float(x[128]))+ (-0.015494788 * float(x[129]))+ (-0.29303592 * float(x[130]))+ (-0.13073796 * float(x[131]))+ (0.23786232 * float(x[132]))+ (0.078519545 * float(x[133]))+ (0.08459913 * float(x[134]))+ (-0.064749844 * float(x[135]))+ (-0.2888059 * float(x[136]))+ (-0.39216033 * float(x[137]))+ (-0.39270243 * float(x[138]))+ (0.20739728 * float(x[139]))+ (0.00080443267 * float(x[140]))+ (-0.018903928 * float(x[141]))+ (0.13624667 * float(x[142]))+ (0.023109939 * float(x[143]))+ (0.16238551 * float(x[144]))+ (0.10306813 * float(x[145]))+ (-0.19190067 * float(x[146]))+ (-0.110502474 * float(x[147]))+ (0.09065114 * float(x[148]))+ (-0.08783075 * float(x[149])))+ ((-0.3173796 * float(x[150]))+ (-0.3161237 * float(x[151]))+ (-0.75321305 * float(x[152]))+ (-0.15705477 * float(x[153]))+ (0.044769775 * float(x[154]))+ (0.17998885 * float(x[155]))+ (0.047454987 * float(x[156]))+ (0.20823519 * float(x[157]))+ (0.03331762 * float(x[158]))+ (-0.26665655 * float(x[159]))+ (0.059292518 * float(x[160]))+ (0.014478742 * float(x[161]))+ (-0.0011214996 * float(x[162]))+ (-0.023138233 * float(x[163]))+ (-0.27097535 * float(x[164]))+ (0.060239315 * float(x[165]))+ (0.18394214 * float(x[166]))+ (0.14073326 * float(x[167]))+ (-1.0587369 * float(x[168]))+ (-0.1629321 * float(x[169]))+ (0.018207185 * float(x[170]))+ (-0.16168794 * float(x[171]))+ (-0.06526076 * float(x[172]))+ (0.1441441 * float(x[173]))+ (-0.117193826 * float(x[174]))+ (-0.346139 * float(x[175]))+ (-0.035012566 * float(x[176]))+ (-0.035106506 * float(x[177]))+ (-0.012863118 * float(x[178]))+ (-0.12367382 * float(x[179]))+ (-0.33389443 * float(x[180]))+ (-0.0957841 * float(x[181]))+ (-0.09678358 * float(x[182]))+ (-0.018388955 * float(x[183]))+ (-0.32348543 * float(x[184]))+ (-0.11749837 * float(x[185]))+ (-0.07285997 * float(x[186]))+ (-0.2956041 * float(x[187]))+ (-0.066507794 * float(x[188]))+ (0.1191167 * float(x[189]))+ (-0.07412251 * float(x[190]))+ (-0.24530707 * float(x[191]))+ (-0.010564411 * float(x[192]))+ (0.044387877 * float(x[193]))+ (0.061649088 * float(x[194]))+ (0.039168254 * float(x[195]))+ (-0.09376449 * float(x[196]))+ (-0.16656703 * float(x[197]))+ (-0.30195275 * float(x[198]))+ (-0.021093402 * float(x[199])))+ ((0.3262964 * float(x[200]))+ (0.21419485 * float(x[201]))+ (0.23839755 * float(x[202]))+ (-0.05097795 * float(x[203]))+ (-0.080109805 * float(x[204]))+ (-0.08152085 * float(x[205]))+ (-0.06792321 * float(x[206]))+ (-0.15236495 * float(x[207]))+ (-0.07204134 * float(x[208]))+ (-0.070475265 * float(x[209]))+ (-0.044606037 * float(x[210]))+ (0.10133687 * float(x[211]))+ (0.24653496 * float(x[212]))+ (-0.08715742 * float(x[213]))+ (-0.25434297 * float(x[214]))+ (0.24864292 * float(x[215]))+ (0.26430097 * float(x[216]))+ (-0.16812891 * float(x[217]))+ (0.01521153 * float(x[218]))+ (-0.32677123 * float(x[219]))+ (-0.30434784 * float(x[220]))+ (-0.24517055 * float(x[221]))+ (-0.16419461 * float(x[222]))+ (-0.16872728 * float(x[223]))+ (-0.10523234 * float(x[224]))+ (-0.092398606 * float(x[225]))+ (-0.08104285 * float(x[226]))+ (-0.049128674 * float(x[227]))+ (0.19948237 * float(x[228]))+ (0.22118387 * float(x[229]))+ (-0.16384535 * float(x[230]))+ (-0.44523877 * float(x[231]))+ (-0.5211473 * float(x[232]))+ (-0.03850692 * float(x[233]))+ (-0.08109812 * float(x[234]))+ (-0.4701511 * float(x[235]))+ (-0.33483785 * float(x[236]))+ (-0.26383907 * float(x[237]))+ (-0.23781815 * float(x[238]))+ (-0.18949544 * float(x[239]))+ (-0.116019934 * float(x[240]))+ (-0.09148864 * float(x[241]))+ (-0.029685369 * float(x[242]))+ (0.06672195 * float(x[243]))+ (0.102242626 * float(x[244]))+ (0.039046135 * float(x[245]))+ (0.38099036 * float(x[246]))+ (0.23383637 * float(x[247]))+ (0.28328392 * float(x[248]))+ (0.5178198 * float(x[249])))+ ((0.11708412 * float(x[250]))+ (-0.21709765 * float(x[251]))+ (-0.17829739 * float(x[252]))+ (-0.19875453 * float(x[253]))+ (-0.20495167 * float(x[254]))+ (-0.15971975 * float(x[255]))) + 0.1301852), 0)
    h_8 = max((((0.025609579 * float(x[0]))+ (0.090758055 * float(x[1]))+ (0.16864479 * float(x[2]))+ (0.18797645 * float(x[3]))+ (0.14497757 * float(x[4]))+ (-0.052834015 * float(x[5]))+ (-0.14038157 * float(x[6]))+ (0.34926906 * float(x[7]))+ (0.92143327 * float(x[8]))+ (0.5875114 * float(x[9]))+ (0.19325398 * float(x[10]))+ (0.08791478 * float(x[11]))+ (0.07185794 * float(x[12]))+ (0.077048585 * float(x[13]))+ (0.10030323 * float(x[14]))+ (0.056033105 * float(x[15]))+ (0.03891828 * float(x[16]))+ (0.13797008 * float(x[17]))+ (0.13816579 * float(x[18]))+ (-0.021236755 * float(x[19]))+ (-0.051321138 * float(x[20]))+ (-0.0010309536 * float(x[21]))+ (0.3003263 * float(x[22]))+ (0.33980787 * float(x[23]))+ (0.4272778 * float(x[24]))+ (1.9660923 * float(x[25]))+ (-0.005322953 * float(x[26]))+ (0.18840975 * float(x[27]))+ (0.2448615 * float(x[28]))+ (0.12347073 * float(x[29]))+ (0.07837288 * float(x[30]))+ (0.02133169 * float(x[31]))+ (0.029078918 * float(x[32]))+ (0.08351413 * float(x[33]))+ (-0.00846664 * float(x[34]))+ (-0.15216376 * float(x[35]))+ (0.012748198 * float(x[36]))+ (0.39126933 * float(x[37]))+ (0.47582752 * float(x[38]))+ (-0.36854136 * float(x[39]))+ (-0.52716094 * float(x[40]))+ (0.8088693 * float(x[41]))+ (0.23416114 * float(x[42]))+ (0.6321385 * float(x[43]))+ (0.5158169 * float(x[44]))+ (0.16751933 * float(x[45]))+ (0.0059399693 * float(x[46]))+ (-0.032266922 * float(x[47]))+ (-0.022485048 * float(x[48]))+ (0.012629076 * float(x[49])))+ ((0.13485238 * float(x[50]))+ (0.28234512 * float(x[51]))+ (0.23923679 * float(x[52]))+ (0.64293945 * float(x[53]))+ (0.5035548 * float(x[54]))+ (-0.6805911 * float(x[55]))+ (-0.9135194 * float(x[56]))+ (0.759548 * float(x[57]))+ (0.7110254 * float(x[58]))+ (0.79894656 * float(x[59]))+ (0.57171315 * float(x[60]))+ (0.20519488 * float(x[61]))+ (-0.07017036 * float(x[62]))+ (-0.08979322 * float(x[63]))+ (-0.1179982 * float(x[64]))+ (-0.10114475 * float(x[65]))+ (0.17059214 * float(x[66]))+ (0.44887802 * float(x[67]))+ (0.15503597 * float(x[68]))+ (0.23483035 * float(x[69]))+ (0.15458244 * float(x[70]))+ (-0.29252604 * float(x[71]))+ (-0.32123792 * float(x[72]))+ (0.43763292 * float(x[73]))+ (0.71513927 * float(x[74]))+ (0.62674326 * float(x[75]))+ (0.4806276 * float(x[76]))+ (0.25388646 * float(x[77]))+ (-0.05725711 * float(x[78]))+ (-0.099887565 * float(x[79]))+ (-0.15286195 * float(x[80]))+ (-0.1362418 * float(x[81]))+ (0.047825206 * float(x[82]))+ (0.21562764 * float(x[83]))+ (-0.14846253 * float(x[84]))+ (-0.37621182 * float(x[85]))+ (0.090186864 * float(x[86]))+ (0.43325603 * float(x[87]))+ (0.08645148 * float(x[88]))+ (0.2824035 * float(x[89]))+ (0.53398925 * float(x[90]))+ (0.53550774 * float(x[91]))+ (0.53168964 * float(x[92]))+ (0.31847578 * float(x[93]))+ (0.042191714 * float(x[94]))+ (-0.052130062 * float(x[95]))+ (-0.09591268 * float(x[96]))+ (-0.009244277 * float(x[97]))+ (0.11521365 * float(x[98]))+ (0.14478175 * float(x[99])))+ ((-0.17582671 * float(x[100]))+ (-0.34798566 * float(x[101]))+ (0.048778117 * float(x[102]))+ (0.11913903 * float(x[103]))+ (0.16519581 * float(x[104]))+ (0.66497326 * float(x[105]))+ (0.86992323 * float(x[106]))+ (0.7086253 * float(x[107]))+ (0.54725194 * float(x[108]))+ (0.2137957 * float(x[109]))+ (0.028909234 * float(x[110]))+ (-0.035984203 * float(x[111]))+ (-0.016770922 * float(x[112]))+ (0.059393823 * float(x[113]))+ (0.029239563 * float(x[114]))+ (-0.30126077 * float(x[115]))+ (-0.5702306 * float(x[116]))+ (-0.2157295 * float(x[117]))+ (0.095152706 * float(x[118]))+ (0.005898981 * float(x[119]))+ (0.09629804 * float(x[120]))+ (0.85743886 * float(x[121]))+ (1.1038078 * float(x[122]))+ (0.68785614 * float(x[123]))+ (0.27529374 * float(x[124]))+ (-0.12484212 * float(x[125]))+ (-0.14125663 * float(x[126]))+ (-0.071031064 * float(x[127]))+ (-0.0035052863 * float(x[128]))+ (-0.06259415 * float(x[129]))+ (-0.250431 * float(x[130]))+ (-0.7163958 * float(x[131]))+ (-0.6885364 * float(x[132]))+ (-0.2908991 * float(x[133]))+ (-0.033211544 * float(x[134]))+ (0.51237786 * float(x[135]))+ (0.38636473 * float(x[136]))+ (0.29602382 * float(x[137]))+ (0.48807728 * float(x[138]))+ (0.34341094 * float(x[139]))+ (-0.037334714 * float(x[140]))+ (-0.368633 * float(x[141]))+ (-0.33691126 * float(x[142]))+ (-0.12615831 * float(x[143]))+ (-0.071559094 * float(x[144]))+ (-0.24040312 * float(x[145]))+ (-0.47836056 * float(x[146]))+ (-0.75232077 * float(x[147]))+ (-0.67013896 * float(x[148]))+ (-0.57712615 * float(x[149])))+ ((-0.4445787 * float(x[150]))+ (0.18356389 * float(x[151]))+ (-0.1062701 * float(x[152]))+ (-0.27706465 * float(x[153]))+ (-0.1292392 * float(x[154]))+ (-0.05569631 * float(x[155]))+ (-0.11152739 * float(x[156]))+ (-0.36143497 * float(x[157]))+ (-0.45334592 * float(x[158]))+ (-0.20164764 * float(x[159]))+ (-0.14353295 * float(x[160]))+ (-0.31760302 * float(x[161]))+ (-0.3957856 * float(x[162]))+ (-0.36805063 * float(x[163]))+ (-0.6314272 * float(x[164]))+ (-0.6382783 * float(x[165]))+ (-0.28470993 * float(x[166]))+ (0.06801518 * float(x[167]))+ (-0.51684934 * float(x[168]))+ (-0.32179037 * float(x[169]))+ (-0.22404763 * float(x[170]))+ (-0.21925503 * float(x[171]))+ (0.038545635 * float(x[172]))+ (-0.25576484 * float(x[173]))+ (-0.48230025 * float(x[174]))+ (-0.274835 * float(x[175]))+ (-0.15149367 * float(x[176]))+ (-0.2911128 * float(x[177]))+ (-0.2496619 * float(x[178]))+ (0.009499647 * float(x[179]))+ (-0.2656434 * float(x[180]))+ (-0.3581913 * float(x[181]))+ (0.06919896 * float(x[182]))+ (0.43514523 * float(x[183]))+ (0.11524086 * float(x[184]))+ (0.22176524 * float(x[185]))+ (0.102967955 * float(x[186]))+ (0.026152564 * float(x[187]))+ (0.123079285 * float(x[188]))+ (-0.17758073 * float(x[189]))+ (-0.36500522 * float(x[190]))+ (-0.2345337 * float(x[191]))+ (-0.033885643 * float(x[192]))+ (-0.18464454 * float(x[193]))+ (-0.3525387 * float(x[194]))+ (-0.23749197 * float(x[195]))+ (-0.3046938 * float(x[196]))+ (-0.48476535 * float(x[197]))+ (-0.3833507 * float(x[198]))+ (-0.30879804 * float(x[199])))+ ((0.24588412 * float(x[200]))+ (0.75827986 * float(x[201]))+ (-0.035792198 * float(x[202]))+ (0.04861336 * float(x[203]))+ (0.17623778 * float(x[204]))+ (-0.100616775 * float(x[205]))+ (-0.20422722 * float(x[206]))+ (-0.14940849 * float(x[207]))+ (0.056523252 * float(x[208]))+ (-0.012400713 * float(x[209]))+ (-0.15599604 * float(x[210]))+ (-0.19744843 * float(x[211]))+ (-0.32948205 * float(x[212]))+ (-0.8489465 * float(x[213]))+ (-1.0795796 * float(x[214]))+ (-0.5563575 * float(x[215]))+ (-0.30682468 * float(x[216]))+ (-0.020624604 * float(x[217]))+ (-0.45494592 * float(x[218]))+ (0.08125327 * float(x[219]))+ (0.18548442 * float(x[220]))+ (-0.105268896 * float(x[221]))+ (-0.16386794 * float(x[222]))+ (-0.09634497 * float(x[223]))+ (0.044053268 * float(x[224]))+ (0.066325255 * float(x[225]))+ (0.1173968 * float(x[226]))+ (0.19095176 * float(x[227]))+ (0.41724616 * float(x[228]))+ (0.30111635 * float(x[229]))+ (-0.2613223 * float(x[230]))+ (-0.220975 * float(x[231]))+ (-0.45990133 * float(x[232]))+ (-0.5589941 * float(x[233]))+ (-0.10538214 * float(x[234]))+ (0.12537752 * float(x[235]))+ (0.008609883 * float(x[236]))+ (-0.13568498 * float(x[237]))+ (-0.10648256 * float(x[238]))+ (-0.037592553 * float(x[239]))+ (0.010085827 * float(x[240]))+ (0.033953123 * float(x[241]))+ (0.12044982 * float(x[242]))+ (0.21153462 * float(x[243]))+ (0.29898477 * float(x[244]))+ (0.370672 * float(x[245]))+ (0.7113763 * float(x[246]))+ (0.14014077 * float(x[247]))+ (-2.0524106 * float(x[248]))+ (-0.7790018 * float(x[249])))+ ((-0.08017473 * float(x[250]))+ (0.06155887 * float(x[251]))+ (-0.0029533554 * float(x[252]))+ (-0.05633301 * float(x[253]))+ (-0.01960417 * float(x[254]))+ (0.008797154 * float(x[255]))) + -0.009928833), 0)
    h_9 = max((((0.07229746 * float(x[0]))+ (0.084358 * float(x[1]))+ (0.10513238 * float(x[2]))+ (0.10929241 * float(x[3]))+ (0.14564785 * float(x[4]))+ (0.05734143 * float(x[5]))+ (0.013862132 * float(x[6]))+ (0.26351416 * float(x[7]))+ (0.45410746 * float(x[8]))+ (0.3667034 * float(x[9]))+ (0.24650411 * float(x[10]))+ (0.23274466 * float(x[11]))+ (0.13828877 * float(x[12]))+ (0.05714713 * float(x[13]))+ (0.05525244 * float(x[14]))+ (0.06737906 * float(x[15]))+ (0.073981315 * float(x[16]))+ (0.12557378 * float(x[17]))+ (0.1277162 * float(x[18]))+ (0.020412926 * float(x[19]))+ (0.03480822 * float(x[20]))+ (0.22150274 * float(x[21]))+ (1.0310068 * float(x[22]))+ (0.52822137 * float(x[23]))+ (0.36620256 * float(x[24]))+ (0.041091237 * float(x[25]))+ (-0.06347687 * float(x[26]))+ (0.3558093 * float(x[27]))+ (0.2761453 * float(x[28]))+ (0.052018847 * float(x[29]))+ (0.0041073123 * float(x[30]))+ (0.041744936 * float(x[31]))+ (0.08420408 * float(x[32]))+ (0.1596001 * float(x[33]))+ (0.10389226 * float(x[34]))+ (-0.12489235 * float(x[35]))+ (-0.21065782 * float(x[36]))+ (0.13282669 * float(x[37]))+ (0.0153850075 * float(x[38]))+ (-0.21147121 * float(x[39]))+ (-0.038238116 * float(x[40]))+ (-0.101686165 * float(x[41]))+ (-0.24056706 * float(x[42]))+ (0.5289429 * float(x[43]))+ (0.3630066 * float(x[44]))+ (0.01635669 * float(x[45]))+ (-0.055068683 * float(x[46]))+ (0.018095778 * float(x[47]))+ (0.07130371 * float(x[48]))+ (0.058794193 * float(x[49])))+ ((0.025899522 * float(x[50]))+ (0.08190003 * float(x[51]))+ (0.10837851 * float(x[52]))+ (-0.051793 * float(x[53]))+ (-0.39000762 * float(x[54]))+ (-0.451263 * float(x[55]))+ (0.4199983 * float(x[56]))+ (0.25898612 * float(x[57]))+ (-0.119227044 * float(x[58]))+ (0.30198395 * float(x[59]))+ (0.14378078 * float(x[60]))+ (-0.09504028 * float(x[61]))+ (-0.09821254 * float(x[62]))+ (0.008095415 * float(x[63]))+ (-0.05795968 * float(x[64]))+ (-0.26948187 * float(x[65]))+ (-0.24952999 * float(x[66]))+ (0.27771768 * float(x[67]))+ (0.6746659 * float(x[68]))+ (0.5102274 * float(x[69]))+ (0.3139932 * float(x[70]))+ (0.433547 * float(x[71]))+ (0.55281126 * float(x[72]))+ (0.18024734 * float(x[73]))+ (0.047239635 * float(x[74]))+ (0.034565005 * float(x[75]))+ (-0.10830854 * float(x[76]))+ (-0.23475645 * float(x[77]))+ (-0.20464884 * float(x[78]))+ (-0.046729878 * float(x[79]))+ (-0.12378682 * float(x[80]))+ (-0.47067094 * float(x[81]))+ (-0.49908474 * float(x[82]))+ (-0.106328525 * float(x[83]))+ (-0.18180361 * float(x[84]))+ (-0.58556557 * float(x[85]))+ (-0.31174377 * float(x[86]))+ (-0.034163605 * float(x[87]))+ (0.3050984 * float(x[88]))+ (0.25377297 * float(x[89]))+ (0.23877615 * float(x[90]))+ (0.12921816 * float(x[91]))+ (0.019269146 * float(x[92]))+ (-0.2595621 * float(x[93]))+ (-0.34126118 * float(x[94]))+ (-0.12240312 * float(x[95]))+ (-0.13011248 * float(x[96]))+ (-0.4336451 * float(x[97]))+ (-0.5137907 * float(x[98]))+ (-0.478939 * float(x[99])))+ ((-0.96834165 * float(x[100]))+ (-1.1444902 * float(x[101]))+ (-0.6001614 * float(x[102]))+ (-0.433876 * float(x[103]))+ (-0.24057823 * float(x[104]))+ (-0.07746266 * float(x[105]))+ (-0.1302899 * float(x[106]))+ (-0.21484175 * float(x[107]))+ (-0.00126528 * float(x[108]))+ (-0.15983106 * float(x[109]))+ (-0.22621201 * float(x[110]))+ (-0.049705353 * float(x[111]))+ (-0.10079213 * float(x[112]))+ (-0.3429215 * float(x[113]))+ (-0.48077354 * float(x[114]))+ (-0.34501928 * float(x[115]))+ (-0.35260528 * float(x[116]))+ (-0.28677514 * float(x[117]))+ (0.023326106 * float(x[118]))+ (-0.045526307 * float(x[119]))+ (-0.42742196 * float(x[120]))+ (-0.28261048 * float(x[121]))+ (-0.2442492 * float(x[122]))+ (-0.29943115 * float(x[123]))+ (-0.15711193 * float(x[124]))+ (-0.22135 * float(x[125]))+ (-0.14040503 * float(x[126]))+ (0.03814548 * float(x[127]))+ (0.11371255 * float(x[128]))+ (-0.054808285 * float(x[129]))+ (-0.22651015 * float(x[130]))+ (0.14332029 * float(x[131]))+ (0.4092736 * float(x[132]))+ (0.13720012 * float(x[133]))+ (0.3451126 * float(x[134]))+ (0.462446 * float(x[135]))+ (-0.17108293 * float(x[136]))+ (-0.15859415 * float(x[137]))+ (-0.11950096 * float(x[138]))+ (-0.12865965 * float(x[139]))+ (-0.021617351 * float(x[140]))+ (-0.04288049 * float(x[141]))+ (-0.10403796 * float(x[142]))+ (0.0062594283 * float(x[143]))+ (0.38091227 * float(x[144]))+ (0.28129044 * float(x[145]))+ (-0.10977527 * float(x[146]))+ (0.038632497 * float(x[147]))+ (0.26315305 * float(x[148]))+ (0.001457997 * float(x[149])))+ ((0.19212565 * float(x[150]))+ (0.33809373 * float(x[151]))+ (-0.11066769 * float(x[152]))+ (-0.070624545 * float(x[153]))+ (-0.20542856 * float(x[154]))+ (-0.14856724 * float(x[155]))+ (0.27445757 * float(x[156]))+ (0.2745403 * float(x[157]))+ (-0.09074121 * float(x[158]))+ (-0.07209356 * float(x[159]))+ (0.45024633 * float(x[160]))+ (0.36302578 * float(x[161]))+ (-0.04019119 * float(x[162]))+ (0.14213213 * float(x[163]))+ (0.350584 * float(x[164]))+ (0.19034109 * float(x[165]))+ (0.18945983 * float(x[166]))+ (0.21406315 * float(x[167]))+ (0.11502551 * float(x[168]))+ (0.113144845 * float(x[169]))+ (0.056406334 * float(x[170]))+ (0.08964716 * float(x[171]))+ (0.10283383 * float(x[172]))+ (-0.20361747 * float(x[173]))+ (-0.33806655 * float(x[174]))+ (-0.0661011 * float(x[175]))+ (0.34132773 * float(x[176]))+ (0.2362597 * float(x[177]))+ (-0.0025064226 * float(x[178]))+ (0.3699396 * float(x[179]))+ (0.29480866 * float(x[180]))+ (0.0021017354 * float(x[181]))+ (-0.05153666 * float(x[182]))+ (-0.0016208576 * float(x[183]))+ (0.24035679 * float(x[184]))+ (-0.016973764 * float(x[185]))+ (-0.11585369 * float(x[186]))+ (-0.3499831 * float(x[187]))+ (-0.7857541 * float(x[188]))+ (-0.6254694 * float(x[189]))+ (-0.20384575 * float(x[190]))+ (0.07284903 * float(x[191]))+ (0.31317303 * float(x[192]))+ (0.22581767 * float(x[193]))+ (0.029830929 * float(x[194]))+ (0.44338626 * float(x[195]))+ (0.2395727 * float(x[196]))+ (-0.05681779 * float(x[197]))+ (0.21899988 * float(x[198]))+ (0.112149715 * float(x[199])))+ ((-0.07705653 * float(x[200]))+ (-0.5336738 * float(x[201]))+ (-0.1563551 * float(x[202]))+ (0.09889107 * float(x[203]))+ (-0.08767087 * float(x[204]))+ (-0.059211344 * float(x[205]))+ (0.109696 * float(x[206]))+ (0.14865546 * float(x[207]))+ (0.30569872 * float(x[208]))+ (0.2958746 * float(x[209]))+ (0.17310445 * float(x[210]))+ (0.25894442 * float(x[211]))+ (0.30456117 * float(x[212]))+ (-0.004002536 * float(x[213]))+ (0.009606972 * float(x[214]))+ (-0.27976552 * float(x[215]))+ (-0.2136505 * float(x[216]))+ (-0.15110481 * float(x[217]))+ (-0.037829343 * float(x[218]))+ (0.021726923 * float(x[219]))+ (0.1191747 * float(x[220]))+ (0.075392105 * float(x[221]))+ (0.07201343 * float(x[222]))+ (0.082352616 * float(x[223]))+ (0.241751 * float(x[224]))+ (0.26137 * float(x[225]))+ (0.11815439 * float(x[226]))+ (-0.13826895 * float(x[227]))+ (-0.075227246 * float(x[228]))+ (-0.0065079234 * float(x[229]))+ (-0.474693 * float(x[230]))+ (-0.44554633 * float(x[231]))+ (-0.32188895 * float(x[232]))+ (-0.21775371 * float(x[233]))+ (-0.3548231 * float(x[234]))+ (-0.33603862 * float(x[235]))+ (0.04932565 * float(x[236]))+ (0.09453423 * float(x[237]))+ (0.067496516 * float(x[238]))+ (0.0713235 * float(x[239]))+ (0.14548536 * float(x[240]))+ (0.16844563 * float(x[241]))+ (0.084979095 * float(x[242]))+ (-0.0965568 * float(x[243]))+ (-0.08006623 * float(x[244]))+ (-0.09768904 * float(x[245]))+ (-0.035047438 * float(x[246]))+ (-0.14590171 * float(x[247]))+ (-0.63169897 * float(x[248]))+ (-0.35320532 * float(x[249])))+ ((-0.18035853 * float(x[250]))+ (-0.16578726 * float(x[251]))+ (0.08572238 * float(x[252]))+ (0.13944453 * float(x[253]))+ (0.12212381 * float(x[254]))+ (0.0984907 * float(x[255]))) + -0.074455746), 0)
    h_10 = max((((0.17831863 * float(x[0]))+ (0.015530764 * float(x[1]))+ (-0.17650443 * float(x[2]))+ (-0.13983038 * float(x[3]))+ (0.094609864 * float(x[4]))+ (0.06519857 * float(x[5]))+ (0.07368993 * float(x[6]))+ (0.26821265 * float(x[7]))+ (0.4066292 * float(x[8]))+ (0.65524304 * float(x[9]))+ (0.29700497 * float(x[10]))+ (0.044195987 * float(x[11]))+ (-0.15100648 * float(x[12]))+ (-0.087499976 * float(x[13]))+ (0.08588689 * float(x[14]))+ (0.18257482 * float(x[15]))+ (0.14021316 * float(x[16]))+ (-0.071029745 * float(x[17]))+ (-0.27583236 * float(x[18]))+ (-0.14776796 * float(x[19]))+ (0.2074066 * float(x[20]))+ (0.118240245 * float(x[21]))+ (0.0057895402 * float(x[22]))+ (0.76146966 * float(x[23]))+ (0.6965147 * float(x[24]))+ (0.90993863 * float(x[25]))+ (-0.09736005 * float(x[26]))+ (-0.22887745 * float(x[27]))+ (-0.372247 * float(x[28]))+ (-0.23283644 * float(x[29]))+ (0.005055744 * float(x[30]))+ (0.12557253 * float(x[31]))+ (0.09389876 * float(x[32]))+ (-0.10223712 * float(x[33]))+ (-0.21175061 * float(x[34]))+ (-0.047963854 * float(x[35]))+ (0.24170859 * float(x[36]))+ (0.18311733 * float(x[37]))+ (0.61619717 * float(x[38]))+ (0.52064383 * float(x[39]))+ (0.3153077 * float(x[40]))+ (0.3553983 * float(x[41]))+ (0.036974538 * float(x[42]))+ (0.20343147 * float(x[43]))+ (-0.084717005 * float(x[44]))+ (-0.090648636 * float(x[45]))+ (0.09568662 * float(x[46]))+ (0.17236151 * float(x[47]))+ (0.009732594 * float(x[48]))+ (-0.14192846 * float(x[49])))+ ((-0.10553893 * float(x[50]))+ (0.031707942 * float(x[51]))+ (-0.01458901 * float(x[52]))+ (-0.25300637 * float(x[53]))+ (0.12268516 * float(x[54]))+ (0.5671457 * float(x[55]))+ (0.59522706 * float(x[56]))+ (0.16905145 * float(x[57]))+ (0.20014408 * float(x[58]))+ (0.34721422 * float(x[59]))+ (0.12111322 * float(x[60]))+ (0.006391947 * float(x[61]))+ (0.076414935 * float(x[62]))+ (0.16022585 * float(x[63]))+ (-0.029832363 * float(x[64]))+ (-0.0749545 * float(x[65]))+ (0.10003659 * float(x[66]))+ (0.24865043 * float(x[67]))+ (0.18307649 * float(x[68]))+ (-0.34655473 * float(x[69]))+ (-0.3439634 * float(x[70]))+ (0.3615391 * float(x[71]))+ (0.3150604 * float(x[72]))+ (0.27236274 * float(x[73]))+ (0.11674848 * float(x[74]))+ (0.07207777 * float(x[75]))+ (0.016376521 * float(x[76]))+ (-0.05328382 * float(x[77]))+ (-0.027539637 * float(x[78]))+ (0.054120164 * float(x[79]))+ (0.15718979 * float(x[80]))+ (0.2019035 * float(x[81]))+ (0.23953581 * float(x[82]))+ (0.29422286 * float(x[83]))+ (0.3067213 * float(x[84]))+ (-0.24967536 * float(x[85]))+ (-0.49953902 * float(x[86]))+ (0.35771924 * float(x[87]))+ (0.45044795 * float(x[88]))+ (0.35640317 * float(x[89]))+ (0.24889521 * float(x[90]))+ (0.321068 * float(x[91]))+ (0.28065112 * float(x[92]))+ (0.14051442 * float(x[93]))+ (0.11532601 * float(x[94]))+ (0.080400825 * float(x[95]))+ (0.24150592 * float(x[96]))+ (0.1552493 * float(x[97]))+ (-0.13473448 * float(x[98]))+ (-0.43759042 * float(x[99])))+ ((-0.66876626 * float(x[100]))+ (-0.15387064 * float(x[101]))+ (0.44747907 * float(x[102]))+ (0.57083994 * float(x[103]))+ (0.20479205 * float(x[104]))+ (-0.021353384 * float(x[105]))+ (0.33044434 * float(x[106]))+ (0.75486594 * float(x[107]))+ (0.59812605 * float(x[108]))+ (0.23830913 * float(x[109]))+ (0.1753848 * float(x[110]))+ (0.14640866 * float(x[111]))+ (0.026611911 * float(x[112]))+ (-0.15486488 * float(x[113]))+ (-0.45480904 * float(x[114]))+ (-1.0014468 * float(x[115]))+ (-1.0219605 * float(x[116]))+ (-0.28477758 * float(x[117]))+ (0.6884692 * float(x[118]))+ (0.38482192 * float(x[119]))+ (0.01968693 * float(x[120]))+ (-0.340832 * float(x[121]))+ (0.16792616 * float(x[122]))+ (0.6220588 * float(x[123]))+ (0.38269895 * float(x[124]))+ (0.09525579 * float(x[125]))+ (0.12919675 * float(x[126]))+ (0.13049209 * float(x[127]))+ (-0.06751909 * float(x[128]))+ (-0.12605509 * float(x[129]))+ (0.072851904 * float(x[130]))+ (0.22668882 * float(x[131]))+ (-0.36513245 * float(x[132]))+ (-0.04688486 * float(x[133]))+ (0.31592575 * float(x[134]))+ (0.31707868 * float(x[135]))+ (0.16465953 * float(x[136]))+ (-0.24299873 * float(x[137]))+ (-0.36190245 * float(x[138]))+ (-0.4459453 * float(x[139]))+ (-0.11296844 * float(x[140]))+ (0.21672902 * float(x[141]))+ (0.19890283 * float(x[142]))+ (0.10692885 * float(x[143]))+ (0.083386466 * float(x[144]))+ (0.13108961 * float(x[145]))+ (0.6410233 * float(x[146]))+ (1.0702691 * float(x[147]))+ (0.41740465 * float(x[148]))+ (0.5459582 * float(x[149])))+ ((0.8070112 * float(x[150]))+ (0.5532719 * float(x[151]))+ (0.18565236 * float(x[152]))+ (-0.08485425 * float(x[153]))+ (-0.9499603 * float(x[154]))+ (-0.701956 * float(x[155]))+ (-0.05926574 * float(x[156]))+ (0.32187214 * float(x[157]))+ (0.17570446 * float(x[158]))+ (0.13928388 * float(x[159]))+ (-0.02651555 * float(x[160]))+ (-0.15437987 * float(x[161]))+ (-0.023181628 * float(x[162]))+ (0.03021914 * float(x[163]))+ (-0.15778254 * float(x[164]))+ (-0.025550997 * float(x[165]))+ (1.1418582 * float(x[166]))+ (1.1178881 * float(x[167]))+ (0.1907365 * float(x[168]))+ (-0.28834468 * float(x[169]))+ (-0.48272753 * float(x[170]))+ (-0.029505894 * float(x[171]))+ (0.03682322 * float(x[172]))+ (0.03385828 * float(x[173]))+ (0.06904801 * float(x[174]))+ (0.18547694 * float(x[175]))+ (-0.112667225 * float(x[176]))+ (-0.32344908 * float(x[177]))+ (-0.57641387 * float(x[178]))+ (-0.71534234 * float(x[179]))+ (-0.8407794 * float(x[180]))+ (-0.9920656 * float(x[181]))+ (0.42955866 * float(x[182]))+ (1.162933 * float(x[183]))+ (0.21221824 * float(x[184]))+ (-0.6806478 * float(x[185]))+ (-0.5257196 * float(x[186]))+ (-0.056419127 * float(x[187]))+ (-0.20532355 * float(x[188]))+ (-0.25743133 * float(x[189]))+ (-0.019675804 * float(x[190]))+ (0.114038706 * float(x[191]))+ (-0.04565319 * float(x[192]))+ (-0.19781141 * float(x[193]))+ (-0.41491145 * float(x[194]))+ (-0.6492964 * float(x[195]))+ (-0.6586466 * float(x[196]))+ (-0.7453545 * float(x[197]))+ (-0.52289575 * float(x[198]))+ (0.6763994 * float(x[199])))+ ((-0.03145953 * float(x[200]))+ (-1.7254188 * float(x[201]))+ (-0.36470821 * float(x[202]))+ (-0.035523042 * float(x[203]))+ (-0.43721172 * float(x[204]))+ (-0.3569575 * float(x[205]))+ (-0.08147477 * float(x[206]))+ (0.067583255 * float(x[207]))+ (0.04718819 * float(x[208]))+ (-0.087130904 * float(x[209]))+ (-0.22058804 * float(x[210]))+ (-0.53492033 * float(x[211]))+ (-0.24401966 * float(x[212]))+ (-0.23724437 * float(x[213]))+ (-0.70603186 * float(x[214]))+ (-0.6754363 * float(x[215]))+ (-0.38201007 * float(x[216]))+ (-0.6282087 * float(x[217]))+ (-0.2839014 * float(x[218]))+ (-0.06755038 * float(x[219]))+ (-0.41576377 * float(x[220]))+ (-0.19250897 * float(x[221]))+ (-0.017899306 * float(x[222]))+ (0.11829109 * float(x[223]))+ (0.14548379 * float(x[224]))+ (0.025072537 * float(x[225]))+ (-0.12981881 * float(x[226]))+ (-0.30855608 * float(x[227]))+ (0.026113013 * float(x[228]))+ (0.15873511 * float(x[229]))+ (-0.50378215 * float(x[230]))+ (-0.54644984 * float(x[231]))+ (-0.022254108 * float(x[232]))+ (-0.44342622 * float(x[233]))+ (-0.5625285 * float(x[234]))+ (-0.07319101 * float(x[235]))+ (0.035962667 * float(x[236]))+ (0.002995061 * float(x[237]))+ (0.06721233 * float(x[238]))+ (0.17292672 * float(x[239]))+ (0.21395335 * float(x[240]))+ (0.14902459 * float(x[241]))+ (0.07240434 * float(x[242]))+ (0.07880509 * float(x[243]))+ (0.52053547 * float(x[244]))+ (0.6115887 * float(x[245]))+ (0.10838933 * float(x[246]))+ (-0.09519204 * float(x[247]))+ (0.09824625 * float(x[248]))+ (-0.42717513 * float(x[249])))+ ((-0.06392522 * float(x[250]))+ (0.2629927 * float(x[251]))+ (0.21051705 * float(x[252]))+ (0.11852269 * float(x[253]))+ (0.13708906 * float(x[254]))+ (0.20612635 * float(x[255]))) + -0.2470556), 0)
    h_11 = max((((0.061278448 * float(x[0]))+ (0.10307824 * float(x[1]))+ (0.10931036 * float(x[2]))+ (-0.04036329 * float(x[3]))+ (-0.085921444 * float(x[4]))+ (0.035448954 * float(x[5]))+ (0.027228154 * float(x[6]))+ (0.034378767 * float(x[7]))+ (0.3641506 * float(x[8]))+ (0.13926205 * float(x[9]))+ (-0.2446552 * float(x[10]))+ (-0.2352091 * float(x[11]))+ (0.10879126 * float(x[12]))+ (0.122650586 * float(x[13]))+ (-0.0645895 * float(x[14]))+ (-0.071826816 * float(x[15]))+ (0.015779693 * float(x[16]))+ (-0.0034731408 * float(x[17]))+ (0.13497522 * float(x[18]))+ (0.18288764 * float(x[19]))+ (-0.063470565 * float(x[20]))+ (-0.20312527 * float(x[21]))+ (-0.15053271 * float(x[22]))+ (0.28622982 * float(x[23]))+ (0.32502413 * float(x[24]))+ (0.6069544 * float(x[25]))+ (-0.25828254 * float(x[26]))+ (-0.40016204 * float(x[27]))+ (0.017921409 * float(x[28]))+ (0.07145264 * float(x[29]))+ (-0.12277022 * float(x[30]))+ (-0.08247824 * float(x[31]))+ (0.093532816 * float(x[32]))+ (-0.02450353 * float(x[33]))+ (-0.12441324 * float(x[34]))+ (-0.06821181 * float(x[35]))+ (-0.029380219 * float(x[36]))+ (-0.029973805 * float(x[37]))+ (0.1289792 * float(x[38]))+ (0.15826748 * float(x[39]))+ (0.03480091 * float(x[40]))+ (0.63998246 * float(x[41]))+ (0.10645239 * float(x[42]))+ (0.020850401 * float(x[43]))+ (0.12031873 * float(x[44]))+ (0.085023634 * float(x[45]))+ (-0.018451387 * float(x[46]))+ (-0.012572911 * float(x[47]))+ (0.17592224 * float(x[48]))+ (-0.035548758 * float(x[49])))+ ((-0.35572362 * float(x[50]))+ (-0.21091852 * float(x[51]))+ (0.10004922 * float(x[52]))+ (-0.14430356 * float(x[53]))+ (-0.31253514 * float(x[54]))+ (-0.30067238 * float(x[55]))+ (-0.12436186 * float(x[56]))+ (0.09983789 * float(x[57]))+ (-0.21403691 * float(x[58]))+ (-0.03757813 * float(x[59]))+ (0.19684564 * float(x[60]))+ (0.20237459 * float(x[61]))+ (0.14719811 * float(x[62]))+ (0.121914424 * float(x[63]))+ (0.014580842 * float(x[64]))+ (-0.25021002 * float(x[65]))+ (-0.5018192 * float(x[66]))+ (-0.23599306 * float(x[67]))+ (-0.1727503 * float(x[68]))+ (-0.6913412 * float(x[69]))+ (-0.5858997 * float(x[70]))+ (-0.24043557 * float(x[71]))+ (0.35244396 * float(x[72]))+ (0.3845114 * float(x[73]))+ (0.11502226 * float(x[74]))+ (0.07500487 * float(x[75]))+ (0.20516501 * float(x[76]))+ (0.06548873 * float(x[77]))+ (0.08408134 * float(x[78]))+ (0.16053183 * float(x[79]))+ (-0.19768693 * float(x[80]))+ (-0.4089558 * float(x[81]))+ (-0.5895661 * float(x[82]))+ (-0.25840622 * float(x[83]))+ (0.082107976 * float(x[84]))+ (-0.27819732 * float(x[85]))+ (-0.09133155 * float(x[86]))+ (0.11079424 * float(x[87]))+ (0.32466486 * float(x[88]))+ (-0.27620515 * float(x[89]))+ (-0.07670159 * float(x[90]))+ (0.52256864 * float(x[91]))+ (0.2464996 * float(x[92]))+ (-0.2865498 * float(x[93]))+ (-0.079290055 * float(x[94]))+ (0.15241805 * float(x[95]))+ (-0.13342883 * float(x[96]))+ (-0.06477632 * float(x[97]))+ (-0.07546587 * float(x[98]))+ (-0.16935644 * float(x[99])))+ ((-0.13630094 * float(x[100]))+ (0.117656775 * float(x[101]))+ (0.3990128 * float(x[102]))+ (0.22059424 * float(x[103]))+ (0.5570114 * float(x[104]))+ (-0.15497144 * float(x[105]))+ (0.1142238 * float(x[106]))+ (0.74615073 * float(x[107]))+ (0.22102582 * float(x[108]))+ (-0.4271472 * float(x[109]))+ (-0.28182992 * float(x[110]))+ (0.04021628 * float(x[111]))+ (0.21987791 * float(x[112]))+ (0.40002227 * float(x[113]))+ (0.3187629 * float(x[114]))+ (-0.12533495 * float(x[115]))+ (-0.344941 * float(x[116]))+ (0.025318915 * float(x[117]))+ (-0.055533577 * float(x[118]))+ (-0.012451416 * float(x[119]))+ (0.4769837 * float(x[120]))+ (0.47492862 * float(x[121]))+ (0.562436 * float(x[122]))+ (0.4071878 * float(x[123]))+ (0.13933657 * float(x[124]))+ (-0.29343578 * float(x[125]))+ (-0.3377126 * float(x[126]))+ (-0.06693746 * float(x[127]))+ (0.3678096 * float(x[128]))+ (0.26717958 * float(x[129]))+ (-0.0531744 * float(x[130]))+ (-0.03920138 * float(x[131]))+ (0.13061461 * float(x[132]))+ (0.2312447 * float(x[133]))+ (-0.1814735 * float(x[134]))+ (-0.22556701 * float(x[135]))+ (-0.122593425 * float(x[136]))+ (-0.07357056 * float(x[137]))+ (-0.055106226 * float(x[138]))+ (-0.39506975 * float(x[139]))+ (0.045489747 * float(x[140]))+ (0.119363666 * float(x[141]))+ (0.10912781 * float(x[142]))+ (0.1007978 * float(x[143]))+ (0.2408324 * float(x[144]))+ (-0.0049236077 * float(x[145]))+ (-0.2621251 * float(x[146]))+ (-0.18919814 * float(x[147]))+ (-0.23581809 * float(x[148]))+ (-0.0025973532 * float(x[149])))+ ((-0.051455688 * float(x[150]))+ (0.25071868 * float(x[151]))+ (0.09994823 * float(x[152]))+ (-0.00029178782 * float(x[153]))+ (-0.018903501 * float(x[154]))+ (-0.25405777 * float(x[155]))+ (0.27641496 * float(x[156]))+ (0.4154893 * float(x[157]))+ (0.29316816 * float(x[158]))+ (0.1283099 * float(x[159]))+ (0.061837807 * float(x[160]))+ (-0.0099885585 * float(x[161]))+ (-0.04244899 * float(x[162]))+ (-0.23331238 * float(x[163]))+ (-0.47588223 * float(x[164]))+ (-0.21264431 * float(x[165]))+ (-0.3561925 * float(x[166]))+ (0.17619051 * float(x[167]))+ (-0.47962183 * float(x[168]))+ (-0.3969575 * float(x[169]))+ (0.0034251134 * float(x[170]))+ (-0.04051458 * float(x[171]))+ (0.26112157 * float(x[172]))+ (0.18379834 * float(x[173]))+ (0.033820316 * float(x[174]))+ (0.002397688 * float(x[175]))+ (-0.12953144 * float(x[176]))+ (-0.029376132 * float(x[177]))+ (0.07118887 * float(x[178]))+ (-0.24822095 * float(x[179]))+ (-0.4256655 * float(x[180]))+ (-0.1449851 * float(x[181]))+ (-0.6962536 * float(x[182]))+ (-0.17093247 * float(x[183]))+ (-0.28874356 * float(x[184]))+ (-0.04692949 * float(x[185]))+ (0.25225636 * float(x[186]))+ (-0.039867498 * float(x[187]))+ (0.069699965 * float(x[188]))+ (0.029299624 * float(x[189]))+ (-0.10855156 * float(x[190]))+ (-0.07048704 * float(x[191]))+ (-0.16064246 * float(x[192]))+ (-0.07524615 * float(x[193]))+ (0.16222818 * float(x[194]))+ (-0.05171239 * float(x[195]))+ (-0.29791024 * float(x[196]))+ (0.15457837 * float(x[197]))+ (-0.32087827 * float(x[198]))+ (0.13832627 * float(x[199])))+ ((-0.031747207 * float(x[200]))+ (0.55324286 * float(x[201]))+ (0.31969133 * float(x[202]))+ (0.11164317 * float(x[203]))+ (0.15699019 * float(x[204]))+ (0.13255288 * float(x[205]))+ (0.023615234 * float(x[206]))+ (0.019240128 * float(x[207]))+ (0.011413899 * float(x[208]))+ (-0.04968465 * float(x[209]))+ (0.0038530088 * float(x[210]))+ (-0.10130914 * float(x[211]))+ (-0.43142852 * float(x[212]))+ (-0.18793048 * float(x[213]))+ (0.039050147 * float(x[214]))+ (0.51784176 * float(x[215]))+ (-0.28927666 * float(x[216]))+ (-0.2157495 * float(x[217]))+ (-0.064999186 * float(x[218]))+ (0.058574524 * float(x[219]))+ (0.101431005 * float(x[220]))+ (0.08621173 * float(x[221]))+ (0.07038004 * float(x[222]))+ (0.10739863 * float(x[223]))+ (0.14903076 * float(x[224]))+ (0.121104576 * float(x[225]))+ (-0.03872153 * float(x[226]))+ (-0.1646956 * float(x[227]))+ (-0.22829036 * float(x[228]))+ (-0.07822282 * float(x[229]))+ (-0.12918365 * float(x[230]))+ (-0.3473263 * float(x[231]))+ (-0.22143278 * float(x[232]))+ (0.16051365 * float(x[233]))+ (-0.24809438 * float(x[234]))+ (-0.33359852 * float(x[235]))+ (-0.08520307 * float(x[236]))+ (0.012289373 * float(x[237]))+ (0.02044565 * float(x[238]))+ (0.05678879 * float(x[239]))+ (0.12929735 * float(x[240]))+ (0.17556335 * float(x[241]))+ (0.13675064 * float(x[242]))+ (0.0812434 * float(x[243]))+ (0.15579523 * float(x[244]))+ (0.3955598 * float(x[245]))+ (0.43067232 * float(x[246]))+ (-0.078210115 * float(x[247]))+ (0.31702903 * float(x[248]))+ (0.50950366 * float(x[249])))+ ((-0.045978773 * float(x[250]))+ (-0.27620748 * float(x[251]))+ (-0.04765084 * float(x[252]))+ (0.0706849 * float(x[253]))+ (0.06354282 * float(x[254]))+ (0.03741967 * float(x[255]))) + -0.07677396), 0)
    h_12 = max((((0.29266298 * float(x[0]))+ (0.2520165 * float(x[1]))+ (0.25864553 * float(x[2]))+ (0.48343766 * float(x[3]))+ (0.62408835 * float(x[4]))+ (0.37723228 * float(x[5]))+ (0.14000292 * float(x[6]))+ (0.3407899 * float(x[7]))+ (0.6223072 * float(x[8]))+ (0.2639573 * float(x[9]))+ (0.26632223 * float(x[10]))+ (0.40595335 * float(x[11]))+ (0.32600507 * float(x[12]))+ (0.13527568 * float(x[13]))+ (0.11219201 * float(x[14]))+ (0.22804011 * float(x[15]))+ (0.3205525 * float(x[16]))+ (0.23822743 * float(x[17]))+ (0.13051417 * float(x[18]))+ (0.23967144 * float(x[19]))+ (0.4324696 * float(x[20]))+ (0.37370184 * float(x[21]))+ (-0.04480313 * float(x[22]))+ (0.35332668 * float(x[23]))+ (1.0134699 * float(x[24]))+ (0.58908606 * float(x[25]))+ (-0.048998777 * float(x[26]))+ (0.0026584032 * float(x[27]))+ (0.22558574 * float(x[28]))+ (0.056826893 * float(x[29]))+ (0.06470751 * float(x[30]))+ (0.2212644 * float(x[31]))+ (0.2903966 * float(x[32]))+ (0.17499924 * float(x[33]))+ (0.07829354 * float(x[34]))+ (0.02106431 * float(x[35]))+ (-0.083320215 * float(x[36]))+ (0.28427926 * float(x[37]))+ (0.7151807 * float(x[38]))+ (0.46097302 * float(x[39]))+ (0.8077442 * float(x[40]))+ (0.29699302 * float(x[41]))+ (-0.35776198 * float(x[42]))+ (-0.44953093 * float(x[43]))+ (-0.06758494 * float(x[44]))+ (-0.01478384 * float(x[45]))+ (0.10252789 * float(x[46]))+ (0.2577158 * float(x[47]))+ (0.15878667 * float(x[48]))+ (-0.02782815 * float(x[49])))+ ((-0.06752017 * float(x[50]))+ (-0.08803818 * float(x[51]))+ (-0.51715875 * float(x[52]))+ (-0.09007576 * float(x[53]))+ (0.22890456 * float(x[54]))+ (-0.26871192 * float(x[55]))+ (-0.2524862 * float(x[56]))+ (-0.18535587 * float(x[57]))+ (-0.174285 * float(x[58]))+ (-0.33475518 * float(x[59]))+ (-0.14250386 * float(x[60]))+ (-0.1473748 * float(x[61]))+ (-0.002090958 * float(x[62]))+ (0.21090807 * float(x[63]))+ (-0.0064567868 * float(x[64]))+ (-0.30582285 * float(x[65]))+ (-0.34510994 * float(x[66]))+ (-0.1618746 * float(x[67]))+ (-0.29539078 * float(x[68]))+ (-0.52180016 * float(x[69]))+ (-0.5326248 * float(x[70]))+ (-1.7116054 * float(x[71]))+ (-0.9323257 * float(x[72]))+ (-0.27825752 * float(x[73]))+ (0.06544425 * float(x[74]))+ (-0.07280873 * float(x[75]))+ (-0.10229408 * float(x[76]))+ (-0.18402354 * float(x[77]))+ (-0.05631056 * float(x[78]))+ (0.16446134 * float(x[79]))+ (-0.08531531 * float(x[80]))+ (-0.42476115 * float(x[81]))+ (-0.4836867 * float(x[82]))+ (-0.22149849 * float(x[83]))+ (-0.1674752 * float(x[84]))+ (-0.16139042 * float(x[85]))+ (-0.49882922 * float(x[86]))+ (-0.8546486 * float(x[87]))+ (-0.46937627 * float(x[88]))+ (-0.18992813 * float(x[89]))+ (0.094571605 * float(x[90]))+ (0.066307366 * float(x[91]))+ (-0.010314355 * float(x[92]))+ (-0.030924857 * float(x[93]))+ (0.102278985 * float(x[94]))+ (0.26132423 * float(x[95]))+ (-0.08659787 * float(x[96]))+ (-0.39773315 * float(x[97]))+ (-0.4777598 * float(x[98]))+ (-0.45651537 * float(x[99])))+ ((-0.7512987 * float(x[100]))+ (-0.22026342 * float(x[101]))+ (0.12891622 * float(x[102]))+ (-0.023818867 * float(x[103]))+ (0.028739523 * float(x[104]))+ (0.1011655 * float(x[105]))+ (0.19761036 * float(x[106]))+ (0.16787224 * float(x[107]))+ (0.13746947 * float(x[108]))+ (0.12647611 * float(x[109]))+ (0.23966397 * float(x[110]))+ (0.35542035 * float(x[111]))+ (0.03475496 * float(x[112]))+ (-0.14319755 * float(x[113]))+ (-0.25106254 * float(x[114]))+ (-0.4700119 * float(x[115]))+ (-0.8181748 * float(x[116]))+ (0.25746924 * float(x[117]))+ (0.57238036 * float(x[118]))+ (-0.06478629 * float(x[119]))+ (0.32094124 * float(x[120]))+ (0.38637245 * float(x[121]))+ (0.11083403 * float(x[122]))+ (0.23533633 * float(x[123]))+ (0.36562634 * float(x[124]))+ (0.25452638 * float(x[125]))+ (0.31801644 * float(x[126]))+ (0.3518179 * float(x[127]))+ (0.15654486 * float(x[128]))+ (0.1683539 * float(x[129]))+ (0.10544618 * float(x[130]))+ (-0.22976544 * float(x[131]))+ (-0.61947984 * float(x[132]))+ (0.32205933 * float(x[133]))+ (0.10858286 * float(x[134]))+ (-0.37688217 * float(x[135]))+ (0.0889572 * float(x[136]))+ (0.08573619 * float(x[137]))+ (-0.15053006 * float(x[138]))+ (0.4741874 * float(x[139]))+ (0.48984617 * float(x[140]))+ (0.27072603 * float(x[141]))+ (0.2697218 * float(x[142]))+ (0.25559187 * float(x[143]))+ (0.11466431 * float(x[144]))+ (0.14360274 * float(x[145]))+ (0.097503975 * float(x[146]))+ (-0.30511668 * float(x[147]))+ (-0.61267763 * float(x[148]))+ (-0.0051089805 * float(x[149])))+ ((-0.038453847 * float(x[150]))+ (-0.41476375 * float(x[151]))+ (0.05143376 * float(x[152]))+ (0.6527202 * float(x[153]))+ (0.35233033 * float(x[154]))+ (0.42900622 * float(x[155]))+ (0.092582315 * float(x[156]))+ (-0.07148657 * float(x[157]))+ (0.036752485 * float(x[158]))+ (0.15639763 * float(x[159]))+ (0.1977601 * float(x[160]))+ (0.15217647 * float(x[161]))+ (0.08517462 * float(x[162]))+ (-0.18595444 * float(x[163]))+ (-0.605674 * float(x[164]))+ (-0.069487035 * float(x[165]))+ (-0.0335244 * float(x[166]))+ (-0.33033425 * float(x[167]))+ (-0.09094806 * float(x[168]))+ (-0.38723233 * float(x[169]))+ (-0.30603406 * float(x[170]))+ (0.08469234 * float(x[171]))+ (-0.03436771 * float(x[172]))+ (-0.26942617 * float(x[173]))+ (-0.09439638 * float(x[174]))+ (0.1392095 * float(x[175]))+ (0.21028073 * float(x[176]))+ (0.11756219 * float(x[177]))+ (0.04318013 * float(x[178]))+ (-0.11033895 * float(x[179]))+ (-0.40014595 * float(x[180]))+ (0.32006052 * float(x[181]))+ (0.29392007 * float(x[182]))+ (0.13983022 * float(x[183]))+ (0.29397428 * float(x[184]))+ (-0.3101562 * float(x[185]))+ (-0.6147951 * float(x[186]))+ (-0.087019816 * float(x[187]))+ (-0.21826124 * float(x[188]))+ (-0.26177555 * float(x[189]))+ (-0.11181463 * float(x[190]))+ (0.13001809 * float(x[191]))+ (0.17747818 * float(x[192]))+ (0.039792586 * float(x[193]))+ (-0.045900714 * float(x[194]))+ (-0.32978785 * float(x[195]))+ (-0.17798042 * float(x[196]))+ (0.19852142 * float(x[197]))+ (-0.17832388 * float(x[198]))+ (0.10681553 * float(x[199])))+ ((0.32667217 * float(x[200]))+ (-0.56178075 * float(x[201]))+ (-0.2988948 * float(x[202]))+ (-0.18941928 * float(x[203]))+ (-0.2699376 * float(x[204]))+ (-0.18132551 * float(x[205]))+ (-0.06431373 * float(x[206]))+ (0.12887935 * float(x[207]))+ (0.16778268 * float(x[208]))+ (0.0056919605 * float(x[209]))+ (-0.09692993 * float(x[210]))+ (-0.25310162 * float(x[211]))+ (-0.17945668 * float(x[212]))+ (-0.15666783 * float(x[213]))+ (-0.51498234 * float(x[214]))+ (-0.28238603 * float(x[215]))+ (-0.25264937 * float(x[216]))+ (-0.23024191 * float(x[217]))+ (-0.34533393 * float(x[218]))+ (-0.6201687 * float(x[219]))+ (-0.2376458 * float(x[220]))+ (-0.13283804 * float(x[221]))+ (-0.015544396 * float(x[222]))+ (0.14831537 * float(x[223]))+ (0.23079157 * float(x[224]))+ (0.12574169 * float(x[225]))+ (0.002599333 * float(x[226]))+ (-0.15154295 * float(x[227]))+ (-0.57043535 * float(x[228]))+ (-0.5386082 * float(x[229]))+ (-0.43265104 * float(x[230]))+ (-0.27419046 * float(x[231]))+ (-0.33595413 * float(x[232]))+ (-0.2248168 * float(x[233]))+ (-0.87683487 * float(x[234]))+ (-0.43086243 * float(x[235]))+ (-0.21238016 * float(x[236]))+ (-0.06744293 * float(x[237]))+ (0.060333695 * float(x[238]))+ (0.19959462 * float(x[239]))+ (0.2839755 * float(x[240]))+ (0.24531382 * float(x[241]))+ (0.16332035 * float(x[242]))+ (0.099090695 * float(x[243]))+ (0.084225275 * float(x[244]))+ (0.028876144 * float(x[245]))+ (0.09133333 * float(x[246]))+ (0.055119578 * float(x[247]))+ (0.09525602 * float(x[248]))+ (0.28258538 * float(x[249])))+ ((-0.058921605 * float(x[250]))+ (-0.11617327 * float(x[251]))+ (-0.012450482 * float(x[252]))+ (0.0932244 * float(x[253]))+ (0.18193658 * float(x[254]))+ (0.25550702 * float(x[255]))) + -0.2900448), 0)
    h_13 = max((((0.1474344 * float(x[0]))+ (0.15927358 * float(x[1]))+ (0.16197972 * float(x[2]))+ (0.10477038 * float(x[3]))+ (0.14041011 * float(x[4]))+ (0.12423601 * float(x[5]))+ (-0.089484766 * float(x[6]))+ (-0.32943743 * float(x[7]))+ (-0.11460028 * float(x[8]))+ (0.15106514 * float(x[9]))+ (0.3365957 * float(x[10]))+ (0.3005814 * float(x[11]))+ (-0.07933907 * float(x[12]))+ (-0.23929596 * float(x[13]))+ (-0.113042325 * float(x[14]))+ (0.07368188 * float(x[15]))+ (0.12776433 * float(x[16]))+ (0.09918916 * float(x[17]))+ (0.05886897 * float(x[18]))+ (-0.010972284 * float(x[19]))+ (0.056502193 * float(x[20]))+ (0.030434115 * float(x[21]))+ (-0.15891203 * float(x[22]))+ (-0.19446851 * float(x[23]))+ (0.07106006 * float(x[24]))+ (-0.021972159 * float(x[25]))+ (0.059945714 * float(x[26]))+ (0.1366538 * float(x[27]))+ (-0.18776186 * float(x[28]))+ (-0.3929334 * float(x[29]))+ (-0.25607237 * float(x[30]))+ (0.0013958691 * float(x[31]))+ (0.10582701 * float(x[32]))+ (0.026003342 * float(x[33]))+ (-0.047295045 * float(x[34]))+ (-0.03585278 * float(x[35]))+ (0.10812635 * float(x[36]))+ (0.17240125 * float(x[37]))+ (1.0268621 * float(x[38]))+ (0.35784423 * float(x[39]))+ (-0.18826519 * float(x[40]))+ (-0.044039454 * float(x[41]))+ (0.045523662 * float(x[42]))+ (0.32311267 * float(x[43]))+ (0.03261531 * float(x[44]))+ (-0.25019264 * float(x[45]))+ (-0.18412815 * float(x[46]))+ (0.018705312 * float(x[47]))+ (0.08180008 * float(x[48]))+ (-0.0013462967 * float(x[49])))+ ((-0.044846103 * float(x[50]))+ (-0.008412055 * float(x[51]))+ (-0.004576837 * float(x[52]))+ (0.40523112 * float(x[53]))+ (0.61401236 * float(x[54]))+ (-0.37171474 * float(x[55]))+ (-0.8689921 * float(x[56]))+ (0.27955046 * float(x[57]))+ (0.6024273 * float(x[58]))+ (0.61595106 * float(x[59]))+ (0.235363 * float(x[60]))+ (-0.04425031 * float(x[61]))+ (-0.10032213 * float(x[62]))+ (0.032845143 * float(x[63]))+ (0.07102824 * float(x[64]))+ (-0.02377027 * float(x[65]))+ (-0.08366765 * float(x[66]))+ (-0.079049654 * float(x[67]))+ (-0.14481606 * float(x[68]))+ (0.2776202 * float(x[69]))+ (-0.40839022 * float(x[70]))+ (-1.5631317 * float(x[71]))+ (-0.6204311 * float(x[72]))+ (0.4644694 * float(x[73]))+ (0.7572033 * float(x[74]))+ (0.39189154 * float(x[75]))+ (0.096760996 * float(x[76]))+ (0.07982861 * float(x[77]))+ (0.0149888005 * float(x[78]))+ (0.0497343 * float(x[79]))+ (0.13498476 * float(x[80]))+ (-0.010209356 * float(x[81]))+ (-0.28011796 * float(x[82]))+ (-0.33104214 * float(x[83]))+ (-0.28231353 * float(x[84]))+ (-0.047788467 * float(x[85]))+ (-0.11518956 * float(x[86]))+ (-0.12693174 * float(x[87]))+ (0.10635244 * float(x[88]))+ (0.5247394 * float(x[89]))+ (0.46259457 * float(x[90]))+ (0.05639642 * float(x[91]))+ (0.01376934 * float(x[92]))+ (0.18374297 * float(x[93]))+ (0.21393925 * float(x[94]))+ (0.15907593 * float(x[95]))+ (0.17208302 * float(x[96]))+ (0.018431205 * float(x[97]))+ (-0.40222877 * float(x[98]))+ (-0.49902865 * float(x[99])))+ ((0.14572214 * float(x[100]))+ (0.3030323 * float(x[101]))+ (0.6496954 * float(x[102]))+ (0.099954635 * float(x[103]))+ (0.08853839 * float(x[104]))+ (0.111568004 * float(x[105]))+ (0.08860868 * float(x[106]))+ (-0.010344539 * float(x[107]))+ (-0.041506883 * float(x[108]))+ (0.072073914 * float(x[109]))+ (0.25976205 * float(x[110]))+ (0.2525123 * float(x[111]))+ (0.12185631 * float(x[112]))+ (0.09842116 * float(x[113]))+ (-0.13812214 * float(x[114]))+ (-0.3545628 * float(x[115]))+ (-0.026853727 * float(x[116]))+ (0.13187402 * float(x[117]))+ (-0.09340241 * float(x[118]))+ (-0.033781562 * float(x[119]))+ (-0.06789817 * float(x[120]))+ (-0.1426927 * float(x[121]))+ (0.09323593 * float(x[122]))+ (0.31467402 * float(x[123]))+ (0.05148876 * float(x[124]))+ (-0.049408413 * float(x[125]))+ (0.22569309 * float(x[126]))+ (0.27576444 * float(x[127]))+ (0.00017559573 * float(x[128]))+ (0.024780922 * float(x[129]))+ (0.13186012 * float(x[130]))+ (0.1122843 * float(x[131]))+ (0.04241899 * float(x[132]))+ (-0.3065178 * float(x[133]))+ (-0.5028042 * float(x[134]))+ (-0.04474417 * float(x[135]))+ (0.26664668 * float(x[136]))+ (0.14137243 * float(x[137]))+ (0.12008657 * float(x[138]))+ (0.18533075 * float(x[139]))+ (0.0007181492 * float(x[140]))+ (-0.060931046 * float(x[141]))+ (0.10513995 * float(x[142]))+ (0.14972842 * float(x[143]))+ (-0.1214105 * float(x[144]))+ (-0.2441672 * float(x[145]))+ (-0.12064585 * float(x[146]))+ (0.0799057 * float(x[147]))+ (-0.05458176 * float(x[148]))+ (-0.2522461 * float(x[149])))+ ((-0.31983522 * float(x[150]))+ (-0.008479405 * float(x[151]))+ (0.43215227 * float(x[152]))+ (0.5832725 * float(x[153]))+ (0.06848697 * float(x[154]))+ (-0.23538539 * float(x[155]))+ (-0.3518217 * float(x[156]))+ (-0.22499935 * float(x[157]))+ (-0.08067463 * float(x[158]))+ (0.020686205 * float(x[159]))+ (-0.021746011 * float(x[160]))+ (-0.1800417 * float(x[161]))+ (-0.16997643 * float(x[162]))+ (0.05668053 * float(x[163]))+ (-0.24411274 * float(x[164]))+ (-0.23286517 * float(x[165]))+ (-0.28878367 * float(x[166]))+ (-0.35268086 * float(x[167]))+ (-0.14322096 * float(x[168]))+ (0.10944872 * float(x[169]))+ (-0.21848828 * float(x[170]))+ (-0.29119822 * float(x[171]))+ (-0.28996956 * float(x[172]))+ (-0.21764944 * float(x[173]))+ (-0.12602594 * float(x[174]))+ (-0.023955945 * float(x[175]))+ (0.044605806 * float(x[176]))+ (-0.0472365 * float(x[177]))+ (-0.011223261 * float(x[178]))+ (0.27149364 * float(x[179]))+ (-0.028340682 * float(x[180]))+ (0.060349133 * float(x[181]))+ (-0.16826181 * float(x[182]))+ (-0.2481299 * float(x[183]))+ (-0.18215373 * float(x[184]))+ (-0.17782754 * float(x[185]))+ (-0.52119 * float(x[186]))+ (-0.1832399 * float(x[187]))+ (-0.28565237 * float(x[188]))+ (-0.1500481 * float(x[189]))+ (-0.103827335 * float(x[190]))+ (-0.010929217 * float(x[191]))+ (-0.0130940145 * float(x[192]))+ (-0.14885841 * float(x[193]))+ (-0.095135696 * float(x[194]))+ (0.18134718 * float(x[195]))+ (0.057885762 * float(x[196]))+ (0.3082494 * float(x[197]))+ (-0.038924463 * float(x[198]))+ (-0.15572006 * float(x[199])))+ ((-0.18599722 * float(x[200]))+ (-0.8135615 * float(x[201]))+ (-0.29260823 * float(x[202]))+ (0.050223574 * float(x[203]))+ (0.31228003 * float(x[204]))+ (0.02653449 * float(x[205]))+ (-0.082543544 * float(x[206]))+ (0.0010335349 * float(x[207]))+ (0.064273655 * float(x[208]))+ (-0.046553604 * float(x[209]))+ (-0.0007657867 * float(x[210]))+ (0.23946223 * float(x[211]))+ (0.030832347 * float(x[212]))+ (0.23566437 * float(x[213]))+ (-0.02236447 * float(x[214]))+ (-0.5542625 * float(x[215]))+ (-0.49940223 * float(x[216]))+ (-0.35198033 * float(x[217]))+ (-0.26853424 * float(x[218]))+ (0.12656936 * float(x[219]))+ (0.41779974 * float(x[220]))+ (0.0825307 * float(x[221]))+ (-0.11289512 * float(x[222]))+ (-0.007806038 * float(x[223]))+ (0.21379666 * float(x[224]))+ (0.24770722 * float(x[225]))+ (0.21731353 * float(x[226]))+ (0.0023654257 * float(x[227]))+ (-0.35206762 * float(x[228]))+ (-0.059894614 * float(x[229]))+ (-0.1559646 * float(x[230]))+ (-0.4027745 * float(x[231]))+ (-0.18308994 * float(x[232]))+ (-0.1788195 * float(x[233]))+ (-0.60813385 * float(x[234]))+ (0.014798542 * float(x[235]))+ (0.1744425 * float(x[236]))+ (-0.029853174 * float(x[237]))+ (-0.10625811 * float(x[238]))+ (0.04442504 * float(x[239]))+ (0.22178428 * float(x[240]))+ (0.2819051 * float(x[241]))+ (0.27889946 * float(x[242]))+ (0.16690335 * float(x[243]))+ (0.088123344 * float(x[244]))+ (0.19252658 * float(x[245]))+ (0.12029688 * float(x[246]))+ (0.17167194 * float(x[247]))+ (0.40504223 * float(x[248]))+ (-0.06804285 * float(x[249])))+ ((-0.19168308 * float(x[250]))+ (-0.007509653 * float(x[251]))+ (0.042441096 * float(x[252]))+ (-0.010974623 * float(x[253]))+ (0.010252198 * float(x[254]))+ (0.115917765 * float(x[255]))) + -0.17315507), 0)
    h_14 = max((((0.0 * float(x[0]))+ (0.0 * float(x[1]))+ (0.0 * float(x[2]))+ (0.0 * float(x[3]))+ (0.0 * float(x[4]))+ (0.0 * float(x[5]))+ (0.0 * float(x[6]))+ (0.0 * float(x[7]))+ (0.0 * float(x[8]))+ (0.0 * float(x[9]))+ (0.0 * float(x[10]))+ (0.0 * float(x[11]))+ (0.0 * float(x[12]))+ (0.0 * float(x[13]))+ (0.0 * float(x[14]))+ (0.0 * float(x[15]))+ (0.0 * float(x[16]))+ (0.0 * float(x[17]))+ (0.0 * float(x[18]))+ (0.0 * float(x[19]))+ (0.0 * float(x[20]))+ (0.0 * float(x[21]))+ (0.0 * float(x[22]))+ (0.0 * float(x[23]))+ (0.0 * float(x[24]))+ (0.0 * float(x[25]))+ (0.0 * float(x[26]))+ (0.0 * float(x[27]))+ (0.0 * float(x[28]))+ (0.0 * float(x[29]))+ (0.0 * float(x[30]))+ (0.0 * float(x[31]))+ (0.0 * float(x[32]))+ (0.0 * float(x[33]))+ (0.0 * float(x[34]))+ (0.0 * float(x[35]))+ (0.0 * float(x[36]))+ (0.0 * float(x[37]))+ (0.0 * float(x[38]))+ (0.0 * float(x[39]))+ (0.0 * float(x[40]))+ (0.0 * float(x[41]))+ (0.0 * float(x[42]))+ (0.0 * float(x[43]))+ (0.0 * float(x[44]))+ (0.0 * float(x[45]))+ (0.0 * float(x[46]))+ (0.0 * float(x[47]))+ (0.0 * float(x[48]))+ (0.0 * float(x[49])))+ ((0.0 * float(x[50]))+ (0.0 * float(x[51]))+ (0.0 * float(x[52]))+ (0.0 * float(x[53]))+ (0.0 * float(x[54]))+ (0.0 * float(x[55]))+ (0.0 * float(x[56]))+ (0.0 * float(x[57]))+ (0.0 * float(x[58]))+ (0.0 * float(x[59]))+ (0.0 * float(x[60]))+ (0.0 * float(x[61]))+ (0.0 * float(x[62]))+ (0.0 * float(x[63]))+ (0.0 * float(x[64]))+ (0.0 * float(x[65]))+ (0.0 * float(x[66]))+ (0.0 * float(x[67]))+ (0.0 * float(x[68]))+ (0.0 * float(x[69]))+ (0.0 * float(x[70]))+ (0.0 * float(x[71]))+ (0.0 * float(x[72]))+ (0.0 * float(x[73]))+ (0.0 * float(x[74]))+ (0.0 * float(x[75]))+ (0.0 * float(x[76]))+ (0.0 * float(x[77]))+ (0.0 * float(x[78]))+ (0.0 * float(x[79]))+ (0.0 * float(x[80]))+ (0.0 * float(x[81]))+ (0.0 * float(x[82]))+ (0.0 * float(x[83]))+ (0.0 * float(x[84]))+ (0.0 * float(x[85]))+ (0.0 * float(x[86]))+ (0.0 * float(x[87]))+ (0.0 * float(x[88]))+ (0.0 * float(x[89]))+ (0.0 * float(x[90]))+ (0.0 * float(x[91]))+ (0.0 * float(x[92]))+ (0.0 * float(x[93]))+ (0.0 * float(x[94]))+ (0.0 * float(x[95]))+ (0.0 * float(x[96]))+ (0.0 * float(x[97]))+ (0.0 * float(x[98]))+ (0.0 * float(x[99])))+ ((0.0 * float(x[100]))+ (0.0 * float(x[101]))+ (0.0 * float(x[102]))+ (0.0 * float(x[103]))+ (0.0 * float(x[104]))+ (0.0 * float(x[105]))+ (0.0 * float(x[106]))+ (0.0 * float(x[107]))+ (0.0 * float(x[108]))+ (0.0 * float(x[109]))+ (0.0 * float(x[110]))+ (0.0 * float(x[111]))+ (0.0 * float(x[112]))+ (0.0 * float(x[113]))+ (0.0 * float(x[114]))+ (0.0 * float(x[115]))+ (0.0 * float(x[116]))+ (0.0 * float(x[117]))+ (0.0 * float(x[118]))+ (0.0 * float(x[119]))+ (0.0 * float(x[120]))+ (0.0 * float(x[121]))+ (0.0 * float(x[122]))+ (0.0 * float(x[123]))+ (0.0 * float(x[124]))+ (0.0 * float(x[125]))+ (0.0 * float(x[126]))+ (0.0 * float(x[127]))+ (0.0 * float(x[128]))+ (0.0 * float(x[129]))+ (0.0 * float(x[130]))+ (0.0 * float(x[131]))+ (0.0 * float(x[132]))+ (0.0 * float(x[133]))+ (0.0 * float(x[134]))+ (0.0 * float(x[135]))+ (0.0 * float(x[136]))+ (0.0 * float(x[137]))+ (0.0 * float(x[138]))+ (0.0 * float(x[139]))+ (0.0 * float(x[140]))+ (0.0 * float(x[141]))+ (0.0 * float(x[142]))+ (0.0 * float(x[143]))+ (0.0 * float(x[144]))+ (0.0 * float(x[145]))+ (0.0 * float(x[146]))+ (0.0 * float(x[147]))+ (0.0 * float(x[148]))+ (0.0 * float(x[149])))+ ((0.0 * float(x[150]))+ (0.0 * float(x[151]))+ (0.0 * float(x[152]))+ (0.0 * float(x[153]))+ (0.0 * float(x[154]))+ (0.0 * float(x[155]))+ (0.0 * float(x[156]))+ (0.0 * float(x[157]))+ (0.0 * float(x[158]))+ (0.0 * float(x[159]))+ (0.0 * float(x[160]))+ (0.0 * float(x[161]))+ (0.0 * float(x[162]))+ (0.0 * float(x[163]))+ (0.0 * float(x[164]))+ (0.0 * float(x[165]))+ (0.0 * float(x[166]))+ (0.0 * float(x[167]))+ (0.0 * float(x[168]))+ (0.0 * float(x[169]))+ (0.0 * float(x[170]))+ (0.0 * float(x[171]))+ (0.0 * float(x[172]))+ (0.0 * float(x[173]))+ (0.0 * float(x[174]))+ (0.0 * float(x[175]))+ (0.0 * float(x[176]))+ (0.0 * float(x[177]))+ (0.0 * float(x[178]))+ (0.0 * float(x[179]))+ (0.0 * float(x[180]))+ (0.0 * float(x[181]))+ (0.0 * float(x[182]))+ (0.0 * float(x[183]))+ (0.0 * float(x[184]))+ (0.0 * float(x[185]))+ (0.0 * float(x[186]))+ (0.0 * float(x[187]))+ (0.0 * float(x[188]))+ (0.0 * float(x[189]))+ (0.0 * float(x[190]))+ (0.0 * float(x[191]))+ (0.0 * float(x[192]))+ (0.0 * float(x[193]))+ (0.0 * float(x[194]))+ (0.0 * float(x[195]))+ (0.0 * float(x[196]))+ (0.0 * float(x[197]))+ (0.0 * float(x[198]))+ (0.0 * float(x[199])))+ ((0.0 * float(x[200]))+ (0.0 * float(x[201]))+ (0.0 * float(x[202]))+ (0.0 * float(x[203]))+ (0.0 * float(x[204]))+ (0.0 * float(x[205]))+ (0.0 * float(x[206]))+ (0.0 * float(x[207]))+ (0.0 * float(x[208]))+ (0.0 * float(x[209]))+ (0.0 * float(x[210]))+ (0.0 * float(x[211]))+ (0.0 * float(x[212]))+ (0.0 * float(x[213]))+ (0.0 * float(x[214]))+ (0.0 * float(x[215]))+ (0.0 * float(x[216]))+ (0.0 * float(x[217]))+ (0.0 * float(x[218]))+ (0.0 * float(x[219]))+ (0.0 * float(x[220]))+ (0.0 * float(x[221]))+ (0.0 * float(x[222]))+ (0.0 * float(x[223]))+ (0.0 * float(x[224]))+ (0.0 * float(x[225]))+ (0.0 * float(x[226]))+ (0.0 * float(x[227]))+ (0.0 * float(x[228]))+ (0.0 * float(x[229]))+ (0.0 * float(x[230]))+ (0.0 * float(x[231]))+ (0.0 * float(x[232]))+ (0.0 * float(x[233]))+ (0.0 * float(x[234]))+ (0.0 * float(x[235]))+ (0.0 * float(x[236]))+ (0.0 * float(x[237]))+ (0.0 * float(x[238]))+ (0.0 * float(x[239]))+ (0.0 * float(x[240]))+ (0.0 * float(x[241]))+ (0.0 * float(x[242]))+ (0.0 * float(x[243]))+ (0.0 * float(x[244]))+ (0.0 * float(x[245]))+ (0.0 * float(x[246]))+ (0.0 * float(x[247]))+ (0.0 * float(x[248]))+ (0.0 * float(x[249])))+ ((0.0 * float(x[250]))+ (0.0 * float(x[251]))+ (0.0 * float(x[252]))+ (0.0 * float(x[253]))+ (0.0 * float(x[254]))+ (0.0 * float(x[255]))) + 0.0), 0)
    o[0] = (-2.4914122 * h_0)+ (-3.591167 * h_1)+ (-8.590923 * h_2)+ (-6.7138534 * h_3)+ (-6.612461 * h_4)+ (-0.17266478 * h_5)+ (-2.5179384 * h_6)+ (-3.5568116 * h_7)+ (-1.7029921 * h_8)+ (-2.2228096 * h_9)+ (-7.8547306 * h_10)+ (-7.932825 * h_11)+ (-6.9602804 * h_12)+ (-7.946501 * h_13)+ (0.0 * h_14) + 5.713738
    o[1] = (3.9687493 * h_0)+ (6.1348977 * h_1)+ (3.1883967 * h_2)+ (8.711181 * h_3)+ (4.0607533 * h_4)+ (3.9723487 * h_5)+ (1.0690484 * h_6)+ (1.1804456 * h_7)+ (1.130008 * h_8)+ (1.151965 * h_9)+ (1.4435135 * h_10)+ (8.140507 * h_11)+ (1.3016171 * h_12)+ (0.43128654 * h_13)+ (0.0 * h_14) + -0.40499946
    o[2] = (2.673809 * h_0)+ (2.6119077 * h_1)+ (9.666389 * h_2)+ (2.8380399 * h_3)+ (3.4753566 * h_4)+ (1.9625475 * h_5)+ (7.9262443 * h_6)+ (2.3795907 * h_7)+ (2.716076 * h_8)+ (3.3827055 * h_9)+ (8.699233 * h_10)+ (1.9001127 * h_11)+ (4.9247155 * h_12)+ (9.895013 * h_13)+ (0.0 * h_14) + 1.0024104
    o[3] = (3.2080212 * h_0)+ (2.0275397 * h_1)+ (9.428269 * h_2)+ (3.8113465 * h_3)+ (3.4760306 * h_4)+ (1.3134772 * h_5)+ (6.7109275 * h_6)+ (8.304382 * h_7)+ (2.5025723 * h_8)+ (2.3501468 * h_9)+ (9.024682 * h_10)+ (0.9037299 * h_11)+ (9.385455 * h_12)+ (8.973704 * h_13)+ (0.0 * h_14) + -3.461769
    o[4] = (2.9816167 * h_0)+ (4.101861 * h_1)+ (8.858698 * h_2)+ (7.4867616 * h_3)+ (7.1232576 * h_4)+ (1.0273654 * h_5)+ (3.229183 * h_6)+ (3.961952 * h_7)+ (1.454309 * h_8)+ (2.3253295 * h_9)+ (7.7064652 * h_10)+ (8.227727 * h_11)+ (6.8017497 * h_12)+ (9.236347 * h_13)+ (0.0 * h_14) + -2.5226862
    o[5] = (5.28304 * h_0)+ (2.2719 * h_1)+ (9.288264 * h_2)+ (3.2859502 * h_3)+ (8.352985 * h_4)+ (1.3777786 * h_5)+ (3.1439223 * h_6)+ (2.3538783 * h_7)+ (1.4484462 * h_8)+ (2.1543343 * h_9)+ (9.211406 * h_10)+ (7.370842 * h_11)+ (7.478244 * h_12)+ (8.197392 * h_13)+ (0.0 * h_14) + -0.41347742
    o[6] = (6.202026 * h_0)+ (3.4810443 * h_1)+ (3.2628756 * h_2)+ (5.443738 * h_3)+ (4.2648067 * h_4)+ (1.6114999 * h_5)+ (6.384329 * h_6)+ (10.067011 * h_7)+ (2.159061 * h_8)+ (1.7887573 * h_9)+ (5.9964604 * h_10)+ (6.2836 * h_11)+ (6.562795 * h_12)+ (7.7088423 * h_13)+ (0.0 * h_14) + 0.8799451
    o[7] = (4.7296047 * h_0)+ (6.709594 * h_1)+ (8.58582 * h_2)+ (6.732317 * h_3)+ (7.671942 * h_4)+ (0.39584744 * h_5)+ (6.565528 * h_6)+ (1.6592628 * h_7)+ (1.4287677 * h_8)+ (1.6245099 * h_9)+ (6.2650046 * h_10)+ (0.48313043 * h_11)+ (7.190558 * h_12)+ (6.726781 * h_13)+ (0.0 * h_14) + 0.5510267
    o[8] = (4.789025 * h_0)+ (3.7303078 * h_1)+ (3.7809324 * h_2)+ (6.8431234 * h_3)+ (7.796734 * h_4)+ (0.58644205 * h_5)+ (7.8674874 * h_6)+ (7.5864916 * h_7)+ (3.891964 * h_8)+ (6.8513155 * h_9)+ (6.7921195 * h_10)+ (6.9857945 * h_11)+ (7.1151004 * h_12)+ (7.4727883 * h_13)+ (0.0 * h_14) + -1.1332759
    o[9] = (2.3030868 * h_0)+ (9.417583 * h_1)+ (9.511075 * h_2)+ (3.2483253 * h_3)+ (3.1444793 * h_4)+ (1.6238662 * h_5)+ (4.380575 * h_6)+ (2.4794412 * h_7)+ (2.5593204 * h_8)+ (2.052221 * h_9)+ (7.7818527 * h_10)+ (1.3190525 * h_11)+ (6.7272034 * h_12)+ (8.317723 * h_13)+ (0.0 * h_14) + -2.659797

    if num_output_logits == 1:
        return o[0] >= 0
    else:
        return argmax(o)


#for classifying batches
def classify(arr):
    outputs = []
    for row in arr:
        outputs.append(single_classify(row))
    return outputs

def Validate(cleanvalfile):
    #Binary
    if n_classes == 2:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
            valcsvreader = csv.reader(valcsvfile)
            for valrow in valcsvreader:
                if len(valrow) == 0:
                    continue
                if int(single_classify(valrow[:-1])) == int(float(valrow[-1])):
                    correct_count += 1
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_TP += 1
                    else:
                        num_class_0 += 1
                        num_TN += 1
                else:
                    if int(float(valrow[-1])) == 1:
                        num_class_1 += 1
                        num_FN += 1
                    else:
                        num_class_0 += 1
                        num_FP += 1
                count += 1
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0

    #Multiclass
    else:
        with open(cleanvalfile, 'r') as valcsvfile:
            count, correct_count = 0, 0
            valcsvreader = csv.reader(valcsvfile)
            numeachclass = {}
            preds = []
            y_trues = []
            for i, valrow in enumerate(valcsvreader):
                pred = int(single_classify(valrow[:-1]))
                preds.append(pred)
                y_true = int(float(valrow[-1]))
                y_trues.append(y_true)
                if len(valrow) == 0:
                    continue
                if pred == y_true:
                    correct_count += 1
                #if class seen, add to its counter
                if y_true in numeachclass.keys():
                    numeachclass[y_true] += 1
                #initialize a new counter
                else:
                    numeachclass[y_true] = 0
                count += 1
        return count, correct_count, numeachclass, preds,  y_trues



def Predict(cleanfile, preprocessedfile, headerless, get_key, classmapping):
    with open(cleanfile,'r') as cleancsvfile, open(preprocessedfile,'r') as dirtycsvfile:
        cleancsvreader = csv.reader(cleancsvfile)
        dirtycsvreader = csv.reader(dirtycsvfile)
        if (not headerless):
            print(','.join(next(dirtycsvreader, None) + ["Prediction"]))
        for cleanrow, dirtyrow in zip(cleancsvreader, dirtycsvreader):
            if len(cleanrow) == 0:
                continue
            print(str(','.join(str(j) for j in ([i for i in dirtyrow]))) + ',' + str(get_key(int(single_classify(cleanrow)), classmapping)))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}


    #Predict
    if not args.validate:
        Predict(cleanfile, preprocessedfile, args.headerless, get_key, classmapping)


    #Validate
    else: 
        print("Classifier Type: Neural Network")
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)

        #Report Metrics
        model_cap=4015
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            try:
                import numpy as np # For numpy see: http://numpy.org
                from numpy import array
            except:
                print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                except:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        os.remove(preprocessedfile)


#!/usr/bin/env python3
#
# This code is was produced by an alpha version of Brainome Daimensions(tm) and is
# licensed under GNU GPL v2.0 or higher. For details, please see:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
#
#
# Output of Brainome Daimensions(tm) 0.96 Table Compiler v0.96.
# Invocation: btc https://www.openml.org/data/get_csv/53924/gina_prior2.arff -o Predictors/gina-prior2_QC.py -target label -stopat 93.58 -f QC -e 100 --yes --runlocalonly
# Total compiler execution time: 0:06:58.31. Finished on: May-28-2020 01:59:57.
# This source code requires Python 3.
#
"""
Classifier Type: Quick Clustering
System Type:                        10-way classifier
Best-guess accuracy:                11.05%
Model accuracy:                     65.45% (2270/3468 correct)
Improvement over best guess:        54.40% (of possible 88.95%)
Model capacity (MEC):               1750 bits
Generalization ratio:               1.29 bits/bit
Confusion Matrix:
 [7.47% 0.09% 0.52% 0.37% 0.26% 0.35% 0.43% 0.29% 0.55% 0.20%]
 [0.09% 8.94% 0.06% 0.20% 0.20% 0.32% 0.12% 0.58% 0.23% 0.32%]
 [0.46% 0.20% 5.88% 0.32% 0.23% 0.20% 0.52% 0.43% 0.49% 0.40%]
 [0.58% 0.23% 0.52% 5.59% 0.37% 0.35% 0.61% 0.37% 0.55% 0.32%]
 [0.32% 0.17% 0.37% 0.17% 5.97% 0.37% 0.32% 0.61% 0.52% 0.63%]
 [0.49% 0.17% 0.46% 0.37% 0.32% 5.74% 0.32% 0.43% 0.23% 0.55%]
 [0.61% 0.32% 0.40% 0.43% 0.40% 0.43% 6.11% 0.49% 0.40% 0.66%]
 [0.32% 0.75% 0.43% 0.46% 0.37% 0.26% 0.46% 6.69% 0.35% 0.46%]
 [0.69% 0.09% 0.43% 0.23% 0.43% 0.35% 0.52% 0.46% 6.20% 0.37%]
 [0.35% 0.20% 0.23% 0.29% 0.61% 0.52% 0.66% 0.35% 0.61% 6.86%]

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "gina_prior2.csv"


#Number of attributes
num_attr = 784
n_classes = 10


# Preprocessor for CSV files
def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[]):
    il=[]
    
    ignorelabels=[]
    ignorecolumns=[]
    target="label"


    if (testfile):
        target = ''
    
    with open(outputcsvfile, "w+") as outputfile:
        with open(inputcsvfile) as csvfile:
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if (target != ''): 
                        hc = header.index(target)
                    else:
                        hc = len(header) - 1
                        target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il=il+[col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                for i in range(0, len(header)):      
                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    print(header[i] + ",", end='', file=outputfile)
                print(header[hc], file=outputfile)

                for row in csv.DictReader(open(inputcsvfile)):
                    if (row[target] in ignorelabels):
                        continue
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name==target):
                            continue
                        if (',' in row[name]):
                            print ('"' + row[name] + '"' + ",", end='', file=outputfile)
                        else:
                            print (row[name] + ",", end='', file=outputfile)
                    print (row[target], file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc =- 1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    if (hc == -1):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if (',' in row[i]):
                            print ('"' + row[i] + '"'+",", end='', file=outputfile)
                        else:
                            print(row[i]+",", end = '', file=outputfile)
                    print (row[hc], file=outputfile)

def clean(filename, outfile, rounding=-1, headerless=False, testfile=False):
    
    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result = float(value)
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    # function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")

    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result

    rowcount = 0
    with open(filename) as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+")
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            rowlen = num_attr
            if (not testfile):
                rowlen = rowlen + 1    
            if (not len(row) == rowlen):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs.")
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping

# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([10437.5, 10488.5, 10553.0, 10592.5, 11066.0, 11076.5, 11248.5, 11272.5, 11329.5, 11381.0, 11459.0, 11577.0, 11627.5, 11635.5, 11650.0, 11785.0, 11857.5, 11994.0, 12085.0, 12096.5, 12117.0, 12123.0, 12142.5, 12204.0, 12350.5, 12363.0, 12434.0, 12470.5, 12610.5, 12661.5, 12888.0, 12933.5, 13069.5, 13085.0, 13125.0, 13145.0, 13166.5, 13237.5, 13343.0, 13425.0, 13452.5, 13495.0, 13518.5, 13556.0, 13570.0, 13636.0, 13645.0, 13665.0, 13685.0, 13717.5, 13729.5, 13781.5, 13883.5, 13902.5, 13934.5, 14081.5, 14189.0, 14205.5, 14230.5, 14251.0, 14368.5, 14392.0, 14430.0, 14463.0, 14488.0, 14493.5, 14497.0, 14504.0, 14589.5, 14706.5, 14761.0, 14791.0, 14802.5, 14821.5, 14860.5, 14864.5, 14872.5, 14902.5, 14935.5, 14997.0, 15019.0, 15039.5, 15046.0, 15110.5, 15122.0, 15131.5, 15151.5, 15173.0, 15183.5, 15189.0, 15193.5, 15197.0, 15200.5, 15206.0, 15229.5, 15297.0, 15315.0, 15327.5, 15335.0, 15358.5, 15389.0, 15401.0, 15444.5, 15506.5, 15537.5, 15555.5, 15633.5, 15643.5, 15649.5, 15660.0, 15680.5, 15696.5, 15699.0, 15703.0, 15709.5, 15722.0, 15734.5, 15756.0, 15774.5, 15779.5, 15791.0, 15820.0, 15832.0, 15843.5, 15847.5, 15863.5, 15899.5, 15938.0, 15952.5, 15976.0, 15993.5, 16014.0, 16035.5, 16043.5, 16048.5, 16068.0, 16086.5, 16108.5, 16121.5, 16140.0, 16159.5, 16180.5, 16196.5, 16243.5, 16269.0, 16307.5, 16331.5, 16350.5, 16363.5, 16371.0, 16393.0, 16412.5, 16415.0, 16487.5, 16522.5, 16544.0, 16568.0, 16577.0, 16584.0, 16591.5, 16623.5, 16627.5, 16639.5, 16656.5, 16667.5, 16725.5, 16741.5, 16748.0, 16759.0, 16783.0, 16853.5, 16894.5, 16903.5, 16927.5, 16937.0, 16945.0, 16954.0, 16975.5, 17013.0, 17036.0, 17047.5, 17056.0, 17062.5, 17074.5, 17086.0, 17097.0, 17132.0, 17152.5, 17166.5, 17181.5, 17195.0, 17205.0, 17212.5, 17227.0, 17244.5, 17249.0, 17271.0, 17287.0, 17310.5, 17327.0, 17334.0, 17342.0, 17346.5, 17356.5, 17398.0, 17451.5, 17474.0, 17483.5, 17492.5, 17505.5, 17523.0, 17533.0, 17548.5, 17578.5, 17594.5, 17621.0, 17665.5, 17668.5, 17686.0, 17713.0, 17726.5, 17730.5, 17749.5, 17773.5, 17781.0, 17803.5, 17826.5, 17834.0, 17839.0, 17860.5, 17882.5, 17897.0, 17920.0, 17948.0, 17972.0, 17983.5, 17994.0, 18024.0, 18052.5, 18077.5, 18083.0, 18086.5, 18087.0, 18090.0, 18102.5, 18117.5, 18124.5, 18147.0, 18171.0, 18182.5, 18200.5, 18224.0, 18263.0, 18284.0, 18306.0, 18312.0, 18318.0, 18328.5, 18337.5, 18354.5, 18370.5, 18376.5, 18381.0, 18385.0, 18401.0, 18401.0, 18403.0, 18407.0, 18411.5, 18466.5, 18488.5, 18502.0, 18515.0, 18517.0, 18519.5, 18521.5, 18531.0, 18539.5, 18547.0, 18562.0, 18604.5, 18606.5, 18608.5, 18618.5, 18639.5, 18655.5, 18661.5, 18676.5, 18698.5, 18754.5, 18780.5, 18804.5, 18818.0, 18830.5, 18833.0, 18845.0, 18864.5, 18873.5, 18878.0, 18887.5, 18901.5, 18912.0, 18936.5, 18962.5, 18969.0, 18979.5, 18988.0, 18991.0, 19001.0, 19013.0, 19021.0, 19025.0, 19042.5, 19060.5, 19070.5, 19094.5, 19113.5, 19128.0, 19133.5, 19141.0, 19155.0, 19169.0, 19176.5, 19185.5, 19200.0, 19213.0, 19232.0, 19246.5, 19261.0, 19276.5, 19282.0, 19297.0, 19316.5, 19327.0, 19331.5, 19348.0, 19385.0, 19414.0, 19436.5, 19441.0, 19448.5, 19461.5, 19491.0, 19514.0, 19515.5, 19537.0, 19558.5, 19562.0, 19588.5, 19618.0, 19640.5, 19652.0, 19662.0, 19709.5, 19718.5, 19726.5, 19764.5, 19801.5, 19811.0, 19815.5, 19821.5, 19831.5, 19837.5, 19842.5, 19849.5, 19872.5, 19893.5, 19901.5, 19909.0, 19911.5, 19915.0, 19924.0, 19931.0, 19934.0, 19941.5, 19947.0, 19967.0, 19996.0, 20009.0, 20048.0, 20086.0, 20100.0, 20114.5, 20123.0, 20147.0, 20176.0, 20194.5, 20211.5, 20234.0, 20256.5, 20276.5, 20280.5, 20292.0, 20297.5, 20302.0, 20306.5, 20368.0, 20373.0, 20382.5, 20411.5, 20465.5, 20477.0, 20485.5, 20496.0, 20504.5, 20512.0, 20520.5, 20538.5, 20552.5, 20567.0, 20591.0, 20605.5, 20617.0, 20624.0, 20637.0, 20647.5, 20657.5, 20670.0, 20672.0, 20680.0, 20687.0, 20702.5, 20725.5, 20745.5, 20754.0, 20760.5, 20768.5, 20782.0, 20804.5, 20821.0, 20845.0, 20869.5, 20874.5, 20876.5, 20911.5, 20913.0, 20915.5, 20918.0, 20921.0, 20926.0, 20933.5, 20941.5, 20950.5, 20957.0, 20958.0, 20972.5, 20975.0, 20978.5, 20984.5, 21005.0, 21027.5, 21035.5, 21046.5, 21072.0, 21098.0, 21113.0, 21121.0, 21125.0, 21132.5, 21140.0, 21145.0, 21156.0, 21164.5, 21184.5, 21203.5, 21210.0, 21216.5, 21237.0, 21249.5, 21255.0, 21261.0, 21263.0, 21269.5, 21300.5, 21330.5, 21344.0, 21358.5, 21364.5, 21368.0, 21401.5, 21437.0, 21443.0, 21461.0, 21467.5, 21496.5, 21521.0, 21532.5, 21545.0, 21552.5, 21569.0, 21588.0, 21597.5, 21607.0, 21625.0, 21635.5, 21641.0, 21649.0, 21655.0, 21660.0, 21665.5, 21678.5, 21701.0, 21715.0, 21718.0, 21725.0, 21736.5, 21743.5, 21746.0, 21754.0, 21772.0, 21816.5, 21835.0, 21849.5, 21853.5, 21861.5, 21872.5, 21883.0, 21893.5, 21904.5, 21915.0, 21923.5, 21926.5, 21929.5, 21942.5, 21958.5, 21970.0, 21979.0, 21986.5, 21991.5, 21996.0, 22003.0, 22006.5, 22007.5, 22011.0, 22016.0, 22037.0, 22039.0, 22049.5, 22062.0, 22064.0, 22084.5, 22107.0, 22112.5, 22118.0, 22126.5, 22135.0, 22157.0, 22180.0, 22188.0, 22194.5, 22211.0, 22233.0, 22252.5, 22276.0, 22287.0, 22290.5, 22300.5, 22311.5, 22318.0, 22322.5, 22332.5, 22341.0, 22343.5, 22346.0, 22354.5, 22363.0, 22374.0, 22377.0, 22378.5, 22380.0, 22391.5, 22413.0, 22438.5, 22455.5, 22477.0, 22497.0, 22507.5, 22530.5, 22595.5, 22597.5, 22605.5, 22608.0, 22614.5, 22626.0, 22632.0, 22667.5, 22703.0, 22714.0, 22724.0, 22729.5, 22734.0, 22736.0, 22740.5, 22747.0, 22750.0, 22751.0, 22753.0, 22762.0, 22767.5, 22773.5, 22778.5, 22803.5, 22817.0, 22830.5, 22837.0, 22845.0, 22862.5, 22873.0, 22882.5, 22896.0, 22900.5, 22903.5, 22913.0, 22920.0, 22931.0, 22944.5, 22947.5, 22949.0, 22952.5, 22961.0, 22969.5, 22973.0, 22975.5, 22981.0, 23006.5, 23030.0, 23040.0, 23056.0, 23067.0, 23075.0, 23091.0, 23097.5, 23122.0, 23147.0, 23167.5, 23200.0, 23217.0, 23218.5, 23219.0, 23238.5, 23264.0, 23290.0, 23295.5, 23297.5, 23299.5, 23301.0, 23302.0, 23306.0, 23314.5, 23330.0, 23343.5, 23352.0, 23357.5, 23361.5, 23377.0, 23391.5, 23398.5, 23404.0, 23411.5, 23426.0, 23439.5, 23445.5, 23453.0, 23456.5, 23480.0, 23483.5, 23504.5, 23530.5, 23539.0, 23557.5, 23579.0, 23590.0, 23597.0, 23612.0, 23627.0, 23631.5, 23656.5, 23679.0, 23685.5, 23696.0, 23711.5, 23726.0, 23729.0, 23737.5, 23744.5, 23747.0, 23776.5, 23812.5, 23822.5, 23826.5, 23837.0, 23853.0, 23868.0, 23876.0, 23891.0, 23914.5, 23934.5, 23945.5, 23947.5, 23958.0, 23995.5, 23999.0, 24008.0, 24018.5, 24027.5, 24041.0, 24068.0, 24100.0, 24112.5, 24123.5, 24128.5, 24135.5, 24140.0, 24150.0, 24167.5, 24176.0, 24177.0, 24183.0, 24190.5, 24194.0, 24198.5, 24204.5, 24216.5, 24230.5, 24238.0, 24241.0, 24250.0, 24261.5, 24267.5, 24271.5, 24290.0, 24296.0, 24298.0, 24300.5, 24307.0, 24314.0, 24324.0, 24342.0, 24360.5, 24383.0, 24400.0, 24408.5, 24418.5, 24422.5, 24423.5, 24425.5, 24435.0, 24443.0, 24451.5, 24463.0, 24469.0, 24475.5, 24481.5, 24492.5, 24515.5, 24543.5, 24557.0, 24562.0, 24570.5, 24583.5, 24597.5, 24624.5, 24651.5, 24661.5, 24668.0, 24679.5, 24694.5, 24713.5, 24734.0, 24744.5, 24760.0, 24781.0, 24795.0, 24814.0, 24836.0, 24871.0, 24889.0, 24911.5, 24930.5, 24937.0, 24942.0, 24954.0, 24969.0, 24977.0, 24977.5, 24981.0, 24986.5, 24995.5, 25005.5, 25013.5, 25028.0, 25047.5, 25059.0, 25063.5, 25066.5, 25069.0, 25085.5, 25098.0, 25112.0, 25121.5, 25142.0, 25158.5, 25162.0, 25169.5, 25178.0, 25183.5, 25185.5, 25186.5, 25194.0, 25205.5, 25211.5, 25215.0, 25220.5, 25225.5, 25231.0, 25236.0, 25239.5, 25248.0, 25261.0, 25262.0, 25269.5, 25279.0, 25289.5, 25297.5, 25299.5, 25325.5, 25335.5, 25345.5, 25459.5, 25482.5, 25491.0, 25494.5, 25500.5, 25538.5, 25554.0, 25561.5, 25568.0, 25572.5, 25574.0, 25580.0, 25599.0, 25619.5, 25632.5, 25641.0, 25648.0, 25653.0, 25663.5, 25681.0, 25690.0, 25699.5, 25709.5, 25713.0, 25714.5, 25715.5, 25760.5, 25775.0, 25779.5, 25782.5, 25783.5, 25787.5, 25791.5, 25794.0, 25806.5, 25820.0, 25823.0, 25837.0, 25859.0, 25868.0, 25871.5, 25877.5, 25883.0, 25889.5, 25910.0, 25928.0, 25939.5, 25949.0, 25956.5, 25971.0, 25996.5, 26009.5, 26021.5, 26032.5, 26035.0, 26046.5, 26070.5, 26093.0, 26129.5, 26157.5, 26163.0, 26169.0, 26173.0, 26188.5, 26209.0, 26216.5, 26218.5, 26232.0, 26262.5, 26278.0, 26283.0, 26314.5, 26319.0, 26325.0, 26334.5, 26342.5, 26344.0, 26353.0, 26361.0, 26362.5, 26364.0, 26368.5, 26377.0, 26386.0, 26401.0, 26416.5, 26423.0, 26425.5, 26441.0, 26458.0, 26464.5, 26481.0, 26496.0, 26501.5, 26509.0, 26514.5, 26517.0, 26519.0, 26524.0, 26532.0, 26539.5, 26547.0, 26558.5, 26577.0, 26594.5, 26619.0, 26628.0, 26634.5, 26638.0, 26656.0, 26660.5, 26666.5, 26673.5, 26684.5, 26705.0, 26722.0, 26726.5, 26737.0, 26754.5, 26763.0, 26766.0, 26768.5, 26772.5, 26779.5, 26788.5, 26805.0, 26823.5, 26834.5, 26840.5, 26843.5, 26853.5, 26864.5, 26881.5, 26910.5, 26925.0, 26949.5, 26953.5, 26956.0, 26997.5, 27005.5, 27011.5, 27014.5, 27020.0, 27026.0, 27045.5, 27067.0, 27074.5, 27076.5, 27084.0, 27090.5, 27093.5, 27127.5, 27148.5, 27165.0, 27177.5, 27182.5, 27188.5, 27190.0, 27211.5, 27234.5, 27246.5, 27254.0, 27259.5, 27263.0, 27269.5, 27284.0, 27300.0, 27304.5, 27327.5, 27349.0, 27363.0, 27370.0, 27395.5, 27425.5, 27439.0, 27451.0, 27461.5, 27468.5, 27478.0, 27498.5, 27533.0, 27539.5, 27551.5, 27564.5, 27569.5, 27572.5, 27579.5, 27583.5, 27592.5, 27607.0, 27622.0, 27634.0, 27644.0, 27656.5, 27671.0, 27685.0, 27697.0, 27703.5, 27720.5, 27741.0, 27748.0, 27776.5, 27801.5, 27813.0, 27820.0, 27827.5, 27849.0, 27890.0, 27917.0, 27925.5, 27934.0, 27940.0, 27953.5, 27968.0, 27983.5, 27997.0, 28000.0, 28004.0, 28016.0, 28029.0, 28032.5, 28057.5, 28090.0, 28105.5, 28120.0, 28126.0, 28140.0, 28149.5, 28157.0, 28167.5, 28184.0, 28196.5, 28200.5, 28210.5, 28230.0, 28248.0, 28258.5, 28265.5, 28267.5, 28283.5, 28298.5, 28300.5, 28304.0, 28307.5, 28323.0, 28339.5, 28341.5, 28348.0, 28350.0, 28364.0, 28381.5, 28388.5, 28400.0, 28410.5, 28416.5, 28441.0, 28489.5, 28527.0, 28538.0, 28546.5, 28554.0, 28574.0, 28593.5, 28603.5, 28615.0, 28649.5, 28688.0, 28698.5, 28707.0, 28715.5, 28720.0, 28741.5, 28756.5, 28765.5, 28774.0, 28784.0, 28796.5, 28801.5, 28814.5, 28829.5, 28832.5, 28845.5, 28863.0, 28868.5, 28882.5, 28905.0, 28914.5, 28919.5, 28932.5, 28944.0, 28970.0, 29001.0, 29010.0, 29011.5, 29015.5, 29020.0, 29028.0, 29041.0, 29064.0, 29082.0, 29092.5, 29102.5, 29104.5, 29111.5, 29126.5, 29141.5, 29143.5, 29144.5, 29146.5, 29148.5, 29155.0, 29166.5, 29176.0, 29181.0, 29185.0, 29193.0, 29206.0, 29221.0, 29228.0, 29244.5, 29264.5, 29272.5, 29281.5, 29289.0, 29301.0, 29321.0, 29332.5, 29337.5, 29347.0, 29356.5, 29366.5, 29383.5, 29397.0, 29405.0, 29413.0, 29418.5, 29420.5, 29423.0, 29437.0, 29452.5, 29456.0, 29573.0, 29596.5, 29610.5, 29624.5, 29626.5, 29635.0, 29663.0, 29684.5, 29698.0, 29713.5, 29726.5, 29754.5, 29761.0, 29764.5, 29770.0, 29794.5, 29817.5, 29825.5, 29833.5, 29849.0, 29867.5, 29881.0, 29889.0, 29899.5, 29916.0, 29928.5, 29931.5, 29951.0, 29981.0, 29995.5, 29999.5, 30004.5, 30022.5, 30031.0, 30046.5, 30063.0, 30080.5, 30103.5, 30110.5, 30116.0, 30125.0, 30132.5, 30152.5, 30179.5, 30208.5, 30228.5, 30239.0, 30285.5, 30307.5, 30322.0, 30323.5, 30355.0, 30390.5, 30398.0, 30406.5, 30413.5, 30414.0, 30417.0, 30432.5, 30470.5, 30526.5, 30565.0, 30583.5, 30595.5, 30604.0, 30619.0, 30623.0, 30628.0, 30647.5, 30670.5, 30692.5, 30710.5, 30712.0, 30714.0, 30824.0, 30837.5, 30849.5, 30857.0, 30863.5, 30870.0, 30875.0, 30881.5, 30897.5, 30926.5, 30942.5, 30951.5, 30974.0, 30988.5, 30993.0, 30997.0, 31016.5, 31038.5, 31046.5, 31070.0, 31089.0, 31094.0, 31101.0, 31106.0, 31114.5, 31132.5, 31151.0, 31161.5, 31170.0, 31177.0, 31182.5, 31197.5, 31220.5, 31232.5, 31234.0, 31236.0, 31244.0, 31255.0, 31263.5, 31278.0, 31299.0, 31314.0, 31320.0, 31333.5, 31352.0, 31361.0, 31372.5, 31378.0, 31385.0, 31387.5, 31396.5, 31429.0, 31480.5, 31540.0, 31562.5, 31577.5, 31584.0, 31589.5, 31601.0, 31639.0, 31672.5, 31687.5, 31706.5, 31716.0, 31723.5, 31732.0, 31756.0, 31780.0, 31787.5, 31808.5, 31816.5, 31827.0, 31841.0, 31855.5, 31864.5, 31893.5, 31904.0, 31911.0, 31934.0, 31954.5, 31965.5, 31973.0, 32001.5, 32035.0, 32046.0, 32076.0, 32111.5, 32128.0, 32144.5, 32186.0, 32222.0, 32256.0, 32261.0, 32268.5, 32282.0, 32290.0, 32294.0, 32305.0, 32360.0, 32384.5, 32398.0, 32408.5, 32423.5, 32481.0, 32485.0, 32493.0, 32501.0, 32532.5, 32540.0, 32550.5, 32561.0, 32573.5, 32586.5, 32590.0, 32613.0, 32644.5, 32648.5, 32651.0, 32686.0, 32697.0, 32711.5, 32718.0, 32729.0, 32739.0, 32741.5, 32743.0, 32747.0, 32751.5, 32768.0, 32792.0, 32819.0, 32851.0, 32877.0, 32882.5, 32910.0, 32920.5, 32926.5, 32932.0, 32985.0, 33039.0, 33052.5, 33065.5, 33084.0, 33094.5, 33100.5, 33111.0, 33137.5, 33159.5, 33173.0, 33242.0, 33312.5, 33333.5, 33360.5, 33375.0, 33379.5, 33387.0, 33394.0, 33413.0, 33436.0, 33444.5, 33448.5, 33454.5, 33464.0, 33482.0, 33497.0, 33508.5, 33536.0, 33565.0, 33578.5, 33591.0, 33601.5, 33605.0, 33644.0, 33652.5, 33663.0, 33670.0, 33675.0, 33682.0, 33700.0, 33722.0, 33731.5, 33742.0, 33755.5, 33794.0, 33828.5, 33848.0, 33865.0, 33917.5, 33953.5, 33964.5, 33980.0, 33986.0, 33987.5, 34011.0, 34035.0, 34036.5, 34049.0, 34067.0, 34105.0, 34125.0, 34147.0, 34164.5, 34172.5, 34180.5, 34182.0, 34184.5, 34187.5, 34205.0, 34225.0, 34230.0, 34271.0, 34275.5, 34290.0, 34309.0, 34333.0, 34362.0, 34363.5, 34368.5, 34471.0, 34510.0, 34522.5, 34532.5, 34536.5, 34550.5, 34579.5, 34602.0, 34622.5, 34637.0, 34672.5, 34715.5, 34731.0, 34734.5, 34747.5, 34774.5, 34817.5, 34861.5, 34879.5, 34882.5, 34934.5, 34993.0, 35018.5, 35045.0, 35069.0, 35102.5, 35133.5, 35154.0, 35182.5, 35220.5, 35271.5, 35342.0, 35390.5, 35420.5, 35440.0, 35462.5, 35480.5, 35492.5, 35504.0, 35510.0, 35517.5, 35522.5, 35533.5, 35550.5, 35567.5, 35580.5, 35597.5, 35612.5, 35637.5, 35681.0, 35689.0, 35719.5, 35764.0, 35785.0, 35796.0, 35826.5, 35871.5, 35891.5, 35896.0, 35900.5, 35922.0, 36001.0, 36061.5, 36068.5, 36081.0, 36111.0, 36133.5, 36146.5, 36163.0, 36170.0, 36187.0, 36213.5, 36228.5, 36240.0, 36261.0, 36278.0, 36309.5, 36350.0, 36366.0, 36379.0, 36395.5, 36408.0, 36414.0, 36417.0, 36452.5, 36478.0, 36494.0, 36512.5, 36530.0, 36546.5, 36547.5, 36572.0, 36604.0, 36633.0, 36722.5, 36728.5, 36750.0, 36783.0, 36803.0, 36817.5, 36828.5, 36841.5, 36864.5, 36884.5, 36891.0, 36900.5, 36963.5, 37039.0, 37064.5, 37080.0, 37234.0, 37308.5, 37319.5, 37336.5, 37351.0, 37388.5, 37453.0, 37505.5, 37520.5, 37569.5, 37587.0, 37604.5, 37620.0, 37636.5, 37639.5, 37653.0, 37748.0, 37831.0, 37855.0, 37872.0, 37934.0, 37992.5, 38004.5, 38043.0, 38076.5, 38143.0, 38191.0, 38205.0, 38213.0, 38258.5, 38295.0, 38339.5, 38345.5, 38353.0, 38403.5, 38446.0, 38490.0, 38503.5, 38527.0, 38547.5, 38569.0, 38584.0, 38607.0, 38637.0, 38647.5, 38658.5, 38687.5, 38759.0, 38820.5, 38843.0, 38859.0, 38910.0, 38971.0, 38995.5, 39037.0, 39069.0, 39071.5, 39073.5, 39091.0, 39122.0, 39144.0, 39177.5, 39219.5, 39263.0, 39322.0, 39480.0, 39506.5, 39579.0, 39656.0, 39694.0, 39715.0, 39723.0, 39731.5, 39741.0, 39806.0, 39867.5, 39871.5, 39886.5, 39931.5, 39990.5, 40044.0, 40101.5, 40134.5, 40157.0, 40217.0, 40262.5, 40303.0, 40368.0, 40401.0, 40446.5, 40492.0, 40518.0, 40545.0, 40570.5, 40612.5, 40683.5, 40804.5, 40868.0, 40902.0, 40960.0, 41024.0, 41060.5, 41067.0, 41127.5, 41184.5, 41194.0, 41246.5, 41291.5, 41329.0, 41416.5, 41470.0, 41490.5, 41520.0, 41544.5, 41754.0, 41761.5, 41787.0, 41819.0, 41984.5, 42141.0, 42183.5, 42286.0, 42447.5, 42657.0, 42686.5, 42696.5, 42737.5, 42793.5, 42919.5, 43097.0, 43247.5, 43364.5, 43406.0, 43411.0, 43463.0, 43564.0, 43694.0, 43849.5, 43941.5, 44060.0, 44069.5, 44080.5, 44185.5, 44225.5, 44305.0, 44444.5, 44683.0, 44798.5, 45180.0, 45592.5, 45699.5, 45755.0, 45810.0, 45912.5, 46218.5, 46532.0, 46546.5, 46573.0, 46681.5, 46866.5, 46972.0, 47005.5, 47042.5, 47152.0, 47584.5, 47771.0, 48442.0, 50433.0, 50630.5, 50802.0, 50956.5, 52341.5, 52738.0, 52973.5, 53052.0, 53353.5, 53883.5, 57201.0, 67227.0])
labels = array([3.0, 1.0, 7.0, 1.0, 7.0, 1.0, 9.0, 1.0, 4.0, 1.0, 7.0, 6.0, 1.0, 6.0, 1.0, 4.0, 1.0, 9.0, 5.0, 1.0, 3.0, 1.0, 8.0, 1.0, 3.0, 1.0, 5.0, 1.0, 7.0, 1.0, 9.0, 1.0, 5.0, 1.0, 7.0, 5.0, 1.0, 7.0, 1.0, 4.0, 1.0, 6.0, 1.0, 7.0, 1.0, 9.0, 1.0, 6.0, 4.0, 1.0, 5.0, 1.0, 4.0, 1.0, 5.0, 3.0, 1.0, 5.0, 7.0, 1.0, 7.0, 1.0, 6.0, 0.0, 4.0, 1.0, 9.0, 1.0, 9.0, 1.0, 4.0, 3.0, 9.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 9.0, 1.0, 7.0, 1.0, 6.0, 1.0, 7.0, 1.0, 3.0, 9.0, 2.0, 1.0, 4.0, 1.0, 7.0, 1.0, 5.0, 4.0, 1.0, 3.0, 7.0, 1.0, 9.0, 7.0, 1.0, 4.0, 1.0, 8.0, 1.0, 5.0, 7.0, 1.0, 9.0, 3.0, 6.0, 7.0, 1.0, 7.0, 1.0, 0.0, 7.0, 1.0, 3.0, 0.0, 1.0, 9.0, 4.0, 7.0, 6.0, 7.0, 1.0, 4.0, 5.0, 1.0, 7.0, 9.0, 3.0, 1.0, 4.0, 1.0, 7.0, 1.0, 4.0, 1.0, 4.0, 1.0, 4.0, 1.0, 7.0, 9.0, 7.0, 3.0, 7.0, 9.0, 1.0, 7.0, 3.0, 1.0, 7.0, 5.0, 9.0, 1.0, 3.0, 9.0, 8.0, 1.0, 5.0, 4.0, 5.0, 9.0, 3.0, 1.0, 9.0, 7.0, 1.0, 9.0, 7.0, 9.0, 6.0, 7.0, 4.0, 9.0, 5.0, 1.0, 7.0, 1.0, 7.0, 3.0, 7.0, 0.0, 1.0, 2.0, 6.0, 7.0, 4.0, 1.0, 9.0, 1.0, 7.0, 2.0, 1.0, 5.0, 9.0, 1.0, 9.0, 2.0, 5.0, 9.0, 7.0, 1.0, 2.0, 9.0, 5.0, 1.0, 5.0, 9.0, 4.0, 6.0, 7.0, 4.0, 8.0, 4.0, 2.0, 9.0, 5.0, 1.0, 9.0, 4.0, 9.0, 2.0, 8.0, 5.0, 9.0, 5.0, 1.0, 7.0, 5.0, 7.0, 5.0, 7.0, 3.0, 4.0, 9.0, 1.0, 9.0, 1.0, 2.0, 5.0, 2.0, 5.0, 4.0, 5.0, 1.0, 9.0, 7.0, 9.0, 1.0, 3.0, 4.0, 5.0, 7.0, 8.0, 5.0, 4.0, 9.0, 5.0, 6.0, 7.0, 1.0, 5.0, 1.0, 8.0, 6.0, 3.0, 1.0, 8.0, 6.0, 7.0, 4.0, 6.0, 1.0, 9.0, 1.0, 4.0, 3.0, 5.0, 4.0, 6.0, 1.0, 7.0, 9.0, 5.0, 2.0, 5.0, 7.0, 2.0, 1.0, 3.0, 9.0, 1.0, 7.0, 6.0, 9.0, 2.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 9.0, 8.0, 3.0, 1.0, 6.0, 9.0, 3.0, 9.0, 6.0, 9.0, 5.0, 1.0, 2.0, 7.0, 0.0, 3.0, 7.0, 9.0, 4.0, 7.0, 8.0, 7.0, 4.0, 7.0, 9.0, 4.0, 9.0, 7.0, 5.0, 4.0, 6.0, 0.0, 7.0, 9.0, 5.0, 3.0, 1.0, 8.0, 3.0, 6.0, 7.0, 2.0, 7.0, 9.0, 4.0, 8.0, 9.0, 4.0, 5.0, 7.0, 3.0, 9.0, 7.0, 6.0, 4.0, 9.0, 5.0, 6.0, 5.0, 8.0, 6.0, 4.0, 9.0, 6.0, 2.0, 0.0, 5.0, 1.0, 5.0, 7.0, 9.0, 1.0, 8.0, 5.0, 7.0, 8.0, 1.0, 8.0, 1.0, 3.0, 8.0, 1.0, 7.0, 9.0, 4.0, 3.0, 1.0, 7.0, 4.0, 9.0, 7.0, 9.0, 6.0, 5.0, 7.0, 4.0, 7.0, 9.0, 7.0, 1.0, 4.0, 2.0, 5.0, 7.0, 4.0, 5.0, 4.0, 7.0, 1.0, 5.0, 9.0, 5.0, 3.0, 5.0, 8.0, 9.0, 4.0, 9.0, 6.0, 4.0, 7.0, 4.0, 1.0, 6.0, 2.0, 4.0, 7.0, 2.0, 5.0, 9.0, 4.0, 7.0, 9.0, 0.0, 2.0, 4.0, 1.0, 3.0, 4.0, 2.0, 7.0, 1.0, 4.0, 0.0, 7.0, 0.0, 7.0, 9.0, 5.0, 1.0, 9.0, 3.0, 6.0, 1.0, 4.0, 7.0, 4.0, 7.0, 8.0, 9.0, 7.0, 4.0, 0.0, 3.0, 9.0, 5.0, 7.0, 1.0, 6.0, 8.0, 0.0, 2.0, 9.0, 6.0, 2.0, 6.0, 9.0, 7.0, 9.0, 8.0, 4.0, 3.0, 5.0, 1.0, 8.0, 5.0, 6.0, 0.0, 6.0, 9.0, 3.0, 4.0, 6.0, 7.0, 4.0, 5.0, 7.0, 9.0, 4.0, 2.0, 5.0, 4.0, 9.0, 0.0, 7.0, 4.0, 2.0, 4.0, 0.0, 9.0, 7.0, 9.0, 5.0, 6.0, 1.0, 4.0, 5.0, 6.0, 4.0, 6.0, 3.0, 4.0, 7.0, 6.0, 4.0, 7.0, 3.0, 7.0, 5.0, 9.0, 7.0, 4.0, 9.0, 6.0, 8.0, 2.0, 4.0, 9.0, 4.0, 2.0, 3.0, 2.0, 4.0, 7.0, 2.0, 7.0, 0.0, 8.0, 6.0, 8.0, 7.0, 8.0, 2.0, 7.0, 1.0, 2.0, 4.0, 5.0, 4.0, 5.0, 7.0, 8.0, 5.0, 4.0, 2.0, 7.0, 9.0, 6.0, 9.0, 2.0, 6.0, 3.0, 4.0, 8.0, 4.0, 9.0, 8.0, 3.0, 6.0, 0.0, 5.0, 4.0, 9.0, 6.0, 9.0, 4.0, 5.0, 1.0, 6.0, 2.0, 4.0, 9.0, 3.0, 5.0, 2.0, 0.0, 4.0, 6.0, 1.0, 3.0, 7.0, 8.0, 6.0, 9.0, 6.0, 4.0, 5.0, 7.0, 4.0, 7.0, 0.0, 7.0, 5.0, 3.0, 6.0, 9.0, 7.0, 9.0, 0.0, 6.0, 7.0, 2.0, 4.0, 9.0, 7.0, 4.0, 5.0, 9.0, 8.0, 7.0, 9.0, 0.0, 3.0, 0.0, 9.0, 4.0, 8.0, 5.0, 0.0, 9.0, 6.0, 8.0, 6.0, 9.0, 6.0, 2.0, 5.0, 8.0, 7.0, 2.0, 5.0, 2.0, 8.0, 6.0, 7.0, 4.0, 8.0, 7.0, 8.0, 4.0, 9.0, 1.0, 9.0, 2.0, 4.0, 3.0, 8.0, 3.0, 2.0, 7.0, 5.0, 7.0, 5.0, 8.0, 7.0, 4.0, 2.0, 6.0, 9.0, 4.0, 5.0, 3.0, 7.0, 5.0, 6.0, 4.0, 6.0, 8.0, 5.0, 6.0, 4.0, 9.0, 5.0, 7.0, 3.0, 9.0, 5.0, 4.0, 5.0, 4.0, 7.0, 3.0, 6.0, 8.0, 9.0, 7.0, 8.0, 9.0, 5.0, 9.0, 0.0, 9.0, 8.0, 4.0, 0.0, 8.0, 9.0, 3.0, 9.0, 3.0, 8.0, 1.0, 7.0, 2.0, 6.0, 9.0, 7.0, 6.0, 0.0, 7.0, 9.0, 3.0, 8.0, 5.0, 7.0, 3.0, 9.0, 8.0, 9.0, 3.0, 4.0, 2.0, 3.0, 8.0, 7.0, 8.0, 3.0, 6.0, 9.0, 7.0, 5.0, 6.0, 5.0, 7.0, 9.0, 5.0, 6.0, 5.0, 0.0, 3.0, 8.0, 7.0, 2.0, 3.0, 4.0, 6.0, 5.0, 3.0, 9.0, 4.0, 3.0, 0.0, 4.0, 6.0, 5.0, 2.0, 9.0, 6.0, 3.0, 9.0, 4.0, 7.0, 4.0, 6.0, 4.0, 2.0, 4.0, 8.0, 5.0, 2.0, 6.0, 9.0, 4.0, 6.0, 3.0, 4.0, 6.0, 0.0, 4.0, 3.0, 8.0, 7.0, 8.0, 9.0, 0.0, 8.0, 0.0, 6.0, 8.0, 2.0, 3.0, 7.0, 8.0, 7.0, 8.0, 7.0, 4.0, 2.0, 6.0, 4.0, 5.0, 7.0, 9.0, 8.0, 3.0, 4.0, 6.0, 0.0, 3.0, 4.0, 5.0, 9.0, 6.0, 9.0, 3.0, 7.0, 4.0, 9.0, 5.0, 2.0, 0.0, 5.0, 3.0, 9.0, 6.0, 4.0, 5.0, 2.0, 8.0, 7.0, 1.0, 4.0, 9.0, 0.0, 6.0, 7.0, 0.0, 5.0, 7.0, 8.0, 6.0, 9.0, 6.0, 2.0, 4.0, 8.0, 4.0, 9.0, 1.0, 9.0, 3.0, 7.0, 6.0, 4.0, 7.0, 5.0, 2.0, 3.0, 5.0, 4.0, 9.0, 5.0, 0.0, 9.0, 7.0, 4.0, 7.0, 6.0, 4.0, 9.0, 8.0, 2.0, 1.0, 6.0, 7.0, 4.0, 3.0, 6.0, 3.0, 7.0, 0.0, 6.0, 9.0, 8.0, 2.0, 4.0, 8.0, 2.0, 3.0, 7.0, 1.0, 7.0, 6.0, 8.0, 2.0, 5.0, 3.0, 5.0, 2.0, 6.0, 7.0, 5.0, 4.0, 5.0, 4.0, 9.0, 0.0, 4.0, 9.0, 8.0, 3.0, 6.0, 9.0, 8.0, 7.0, 4.0, 6.0, 2.0, 5.0, 6.0, 7.0, 8.0, 7.0, 5.0, 0.0, 5.0, 9.0, 6.0, 3.0, 7.0, 6.0, 7.0, 9.0, 6.0, 9.0, 3.0, 6.0, 5.0, 8.0, 0.0, 5.0, 3.0, 8.0, 6.0, 4.0, 3.0, 2.0, 3.0, 7.0, 3.0, 7.0, 8.0, 5.0, 1.0, 3.0, 6.0, 1.0, 8.0, 9.0, 3.0, 5.0, 9.0, 6.0, 2.0, 7.0, 6.0, 3.0, 7.0, 9.0, 6.0, 8.0, 9.0, 4.0, 6.0, 9.0, 0.0, 2.0, 8.0, 9.0, 5.0, 2.0, 8.0, 3.0, 8.0, 3.0, 5.0, 4.0, 6.0, 7.0, 6.0, 0.0, 3.0, 5.0, 8.0, 2.0, 6.0, 7.0, 6.0, 7.0, 2.0, 6.0, 1.0, 5.0, 2.0, 9.0, 6.0, 0.0, 7.0, 6.0, 8.0, 2.0, 9.0, 4.0, 2.0, 5.0, 7.0, 2.0, 7.0, 3.0, 8.0, 2.0, 0.0, 5.0, 8.0, 5.0, 9.0, 0.0, 6.0, 3.0, 2.0, 7.0, 3.0, 0.0, 5.0, 4.0, 7.0, 4.0, 7.0, 8.0, 0.0, 2.0, 9.0, 7.0, 8.0, 4.0, 2.0, 3.0, 4.0, 8.0, 9.0, 0.0, 3.0, 6.0, 2.0, 9.0, 2.0, 8.0, 2.0, 3.0, 9.0, 7.0, 4.0, 0.0, 5.0, 6.0, 2.0, 8.0, 6.0, 8.0, 3.0, 8.0, 4.0, 9.0, 4.0, 6.0, 9.0, 4.0, 0.0, 2.0, 6.0, 2.0, 8.0, 3.0, 7.0, 6.0, 8.0, 9.0, 6.0, 2.0, 8.0, 2.0, 0.0, 3.0, 4.0, 0.0, 2.0, 9.0, 4.0, 0.0, 6.0, 5.0, 2.0, 6.0, 2.0, 0.0, 5.0, 7.0, 4.0, 6.0, 7.0, 8.0, 9.0, 4.0, 2.0, 8.0, 0.0, 2.0, 7.0, 0.0, 3.0, 7.0, 6.0, 7.0, 0.0, 2.0, 0.0, 2.0, 6.0, 3.0, 0.0, 9.0, 8.0, 4.0, 6.0, 9.0, 4.0, 6.0, 0.0, 3.0, 8.0, 6.0, 1.0, 7.0, 9.0, 3.0, 9.0, 8.0, 2.0, 8.0, 3.0, 4.0, 1.0, 4.0, 7.0, 0.0, 4.0, 6.0, 5.0, 4.0, 0.0, 6.0, 0.0, 6.0, 5.0, 2.0, 9.0, 8.0, 9.0, 3.0, 2.0, 0.0, 8.0, 9.0, 6.0, 8.0, 6.0, 0.0, 6.0, 5.0, 3.0, 8.0, 3.0, 4.0, 5.0, 0.0, 2.0, 9.0, 8.0, 6.0, 7.0, 5.0, 0.0, 4.0, 8.0, 5.0, 7.0, 8.0, 0.0, 3.0, 7.0, 6.0, 9.0, 0.0, 2.0, 8.0, 9.0, 0.0, 4.0, 3.0, 6.0, 4.0, 0.0, 7.0, 0.0, 7.0, 2.0, 6.0, 8.0, 0.0, 4.0, 9.0, 7.0, 0.0, 2.0, 8.0, 5.0, 8.0, 0.0, 3.0, 5.0, 9.0, 3.0, 2.0, 5.0, 0.0, 3.0, 0.0, 6.0, 7.0, 0.0, 5.0, 6.0, 8.0, 0.0, 2.0, 3.0, 0.0, 4.0, 8.0, 0.0, 8.0, 5.0, 3.0, 2.0, 6.0, 0.0, 3.0, 6.0, 8.0, 3.0, 6.0, 0.0, 7.0, 8.0, 9.0, 4.0, 0.0, 7.0, 9.0, 3.0, 2.0, 7.0, 0.0, 3.0, 5.0, 3.0, 6.0, 2.0, 5.0, 2.0, 9.0, 6.0, 8.0, 2.0, 8.0, 0.0, 8.0, 3.0, 8.0, 4.0, 8.0, 3.0, 6.0, 9.0, 5.0, 2.0, 7.0, 6.0, 4.0, 8.0, 7.0, 5.0, 0.0, 8.0, 4.0, 3.0, 0.0, 3.0, 5.0, 8.0, 0.0, 8.0, 9.0, 6.0, 5.0, 3.0, 8.0, 5.0, 0.0, 6.0, 0.0, 6.0, 9.0, 5.0, 6.0, 3.0, 6.0, 8.0, 5.0, 0.0, 5.0, 6.0, 7.0, 0.0, 2.0, 3.0, 5.0, 4.0, 2.0, 4.0, 2.0, 4.0, 5.0, 0.0, 2.0, 5.0, 2.0, 5.0, 8.0, 9.0, 8.0, 2.0, 9.0, 8.0, 2.0, 3.0, 6.0, 2.0, 0.0, 2.0, 0.0, 4.0, 8.0, 0.0, 8.0, 9.0, 4.0, 2.0, 0.0, 8.0, 6.0, 8.0, 3.0, 2.0, 7.0, 2.0, 0.0, 5.0, 4.0, 0.0, 2.0, 6.0, 8.0, 0.0, 9.0, 0.0, 6.0, 5.0, 2.0, 8.0, 6.0, 9.0, 0.0, 7.0, 6.0, 3.0, 2.0, 0.0, 9.0, 8.0, 3.0, 7.0, 2.0, 6.0, 3.0, 0.0, 9.0, 4.0, 6.0, 8.0, 3.0, 0.0, 4.0, 0.0, 4.0, 9.0, 0.0, 2.0, 5.0, 2.0, 0.0, 9.0, 8.0, 6.0, 5.0, 7.0, 5.0, 8.0, 6.0, 8.0, 0.0, 8.0, 5.0, 8.0, 3.0, 9.0, 7.0, 0.0, 6.0, 7.0, 0.0, 3.0, 7.0, 5.0, 2.0, 5.0, 0.0, 4.0, 0.0, 6.0, 5.0, 2.0, 0.0, 7.0, 0.0, 6.0, 5.0, 8.0, 0.0, 3.0, 0.0, 6.0, 0.0, 3.0, 0.0, 3.0, 7.0, 0.0, 7.0, 9.0, 2.0, 0.0, 3.0, 0.0, 9.0, 2.0, 5.0, 4.0, 8.0, 9.0, 2.0, 3.0, 6.0, 5.0, 2.0, 4.0, 2.0, 9.0, 2.0, 4.0, 8.0, 0.0, 2.0, 0.0, 2.0, 6.0, 4.0, 2.0, 3.0, 8.0, 4.0, 3.0, 9.0, 3.0, 8.0, 3.0, 2.0, 9.0, 6.0, 5.0, 2.0, 6.0, 2.0, 6.0, 3.0, 9.0, 8.0, 0.0, 7.0, 5.0, 6.0, 3.0, 0.0, 6.0, 3.0, 2.0, 6.0, 2.0, 0.0, 8.0, 4.0, 6.0, 3.0, 0.0, 6.0, 0.0, 6.0, 8.0, 0.0, 5.0, 6.0, 5.0, 0.0, 5.0, 2.0, 0.0, 6.0, 7.0, 0.0, 2.0, 5.0, 0.0, 3.0, 0.0, 3.0, 2.0, 3.0, 0.0, 5.0, 0.0, 2.0, 0.0, 3.0, 8.0, 4.0, 5.0, 0.0, 2.0, 3.0, 0.0, 8.0, 2.0, 0.0, 4.0, 2.0, 5.0, 3.0, 0.0, 8.0, 2.0, 0.0, 3.0, 7.0, 3.0, 6.0, 3.0, 0.0, 8.0, 3.0, 8.0, 5.0, 0.0, 2.0, 3.0, 2.0, 0.0, 2.0, 0.0, 4.0, 3.0, 6.0, 2.0, 3.0, 9.0, 2.0, 6.0, 0.0, 5.0, 8.0, 6.0, 2.0, 3.0, 0.0, 4.0, 0.0, 4.0, 0.0, 6.0, 0.0, 2.0, 3.0, 0.0, 8.0, 0.0, 9.0, 3.0, 0.0, 4.0, 8.0, 3.0, 5.0, 0.0, 2.0, 9.0, 0.0, 2.0, 0.0, 2.0, 0.0, 5.0, 0.0, 3.0, 2.0, 0.0, 8.0, 2.0, 0.0, 2.0, 5.0, 0.0, 9.0, 2.0, 0.0, 4.0, 0.0, 8.0, 3.0, 0.0, 3.0, 6.0, 0.0, 8.0, 3.0, 6.0, 0.0, 8.0, 0.0, 8.0, 3.0, 8.0, 6.0, 0.0, 8.0, 0.0, 7.0, 0.0, 2.0, 0.0, 3.0, 0.0, 2.0, 3.0, 6.0, 0.0, 8.0, 2.0, 3.0, 0.0, 6.0, 0.0, 3.0, 0.0, 8.0, 4.0, 0.0, 5.0, 6.0, 3.0, 6.0, 0.0, 3.0, 5.0, 2.0, 0.0, 3.0, 0.0, 4.0, 8.0, 0.0, 8.0, 0.0, 6.0, 8.0, 6.0, 8.0, 0.0, 2.0, 0.0, 2.0, 0.0, 8.0])
def eqenergy(rows):
    return np.sum(rows, axis=1)
def classify(rows):
    energys = eqenergy(rows)

    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = labels[numers[indys]]
        outputs[defaultindys] = 1.0
        return outputs
    return thresh_search(energys)

numthresholds = 1750



# Main method
model_cap = numthresholds


def Validate(file):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 0
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    with open(preprocessedfile, 'r') as csvinput:
        dirtyreader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(dirtyreader, None) + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            print(str(','.join(str(j) for j in ([i for i in row]))) + ',' + str(get_key(int(outputs[k]), classmapping)))



#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    args = parser.parse_args()
    faulthandler.enable()

    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate))
        get_key, classmapping = clean(preprocessedfile, cleanfile, -1, args.headerless, (not args.validate))
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile, classmapping)


    else:
        print("Classifier Type: Quick Clustering")
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            print("System Type:                        Binary classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
            print("System behavior")
            print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
            print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
            print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
            print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
            if int(num_TP + num_FN) != 0:
                print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
            if int(num_TN + num_FP) != 0:
                print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
            if int(num_TP + num_FP) != 0:
                print("Precision:                          {:.2f}".format(PPV))
            if int(2 * num_TP + num_FP + num_FN) != 0:
                print("F-1 Measure:                        {:.2f}".format(FONE))
            if int(num_TP + num_FN) != 0:
                print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
            if int(num_TP + num_FN + num_FP) != 0:
                print("Critical Success Index:             {:.2f}".format(TS))

        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            print("System Type:                        " + str(n_classes) + "-way classifier")
            print("Best-guess accuracy:                {:.2f}%".format(randguess))
            print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
            print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
            print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
            print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0) + " bits/bit")
            try:
                import numpy as np # For numpy see: http://numpy.org
                from numpy import array
            except:
                print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

            def confusion_matrix(y_true, y_pred, labels=None, sample_weight=None, normalize=None):
                #check for numpy/scipy is imported
                try:
                    from scipy.sparse import coo_matrix #required for multiclass metrics
                except:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                # Compute confusion matrix to evaluate the accuracy of a classification.
                # By definition a confusion matrix :math:C is such that :math:C_{i, j}
                # is equal to the number of observations known to be in group :math:i and
                # predicted to be in group :math:j.
                # Thus in binary classification, the count of true negatives is
                # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
                # :math:C_{1,1} and false positives is :math:C_{0,1}.
                # Read more in the :ref:User Guide <confusion_matrix>.
                # Parameters
                # ----------
                # y_true : array-like of shape (n_samples,)
                # Ground truth (correct) target values.
                # y_pred : array-like of shape (n_samples,)
                # Estimated targets as returned by a classifier.
                # labels : array-like of shape (n_classes), default=None
                # List of labels to index the matrix. This may be used to reorder
                # or select a subset of labels.
                # If None is given, those that appear at least once
                # in y_true or y_pred are used in sorted order.
                # sample_weight : array-like of shape (n_samples,), default=None
                # Sample weights.
                # normalize : {'true', 'pred', 'all'}, default=None
                # Normalizes confusion matrix over the true (rows), predicted (columns)
                # conditions or all the population. If None, confusion matrix will not be
                # normalized.
                # Returns
                # -------
                # C : ndarray of shape (n_classes, n_classes)
                # Confusion matrix.
                # References
                # ----------
                if labels is None:
                    labels = np.array(list(set(list(y_true.astype('int')))))
                else:
                    labels = np.asarray(labels)
                    if np.all([l not in y_true for l in labels]):
                        raise ValueError("At least one label specified must be in y_true")


                if sample_weight is None:
                    sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
                else:
                    sample_weight = np.asarray(sample_weight)
                if y_true.shape[0]!=y_pred.shape[0]:
                    raise ValueError("y_true and y_pred must be of the same length")

                if normalize not in ['true', 'pred', 'all', None]:
                    raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


                n_labels = labels.size
                label_to_ind = {y: x for x, y in enumerate(labels)}
                # convert yt, yp into index
                y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
                y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
                # intersect y_pred, y_true with labels, eliminate items not in labels
                ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
                y_pred = y_pred[ind]
                y_true = y_true[ind]
                # also eliminate weights of eliminated items
                sample_weight = sample_weight[ind]
                # Choose the accumulator dtype to always have high precision
                if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                    dtype = np.int64
                else:
                    dtype = np.float64
                cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


                with np.errstate(all='ignore'):
                    if normalize == 'true':
                        cm = cm / cm.sum(axis=1, keepdims=True)
                    elif normalize == 'pred':
                        cm = cm / cm.sum(axis=0, keepdims=True)
                    elif normalize == 'all':
                        cm = cm / cm.sum()
                    cm = np.nan_to_num(cm)
                return cm


            print("Confusion Matrix:")
            mtrx = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1))
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])



    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        os.remove(preprocessedfile)


